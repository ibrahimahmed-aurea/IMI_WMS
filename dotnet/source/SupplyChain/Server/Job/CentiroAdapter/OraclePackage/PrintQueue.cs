/*
  File           : PrintQueue.cs

  Description    : Wrapper class for Oracle package PRINT_QUEUE.
                   This code was generated by the PackageGenerator, do not edit.

  Generated with Commandline: Print_Queue PrintQueue.cs Imi.SupplyChain.Server.Job.CentiroAdapter.OraclePackage /conn "data source=WHTRUNK;user id=owuser;password=owuser;pooling=false;enlist=false" 

*/
#define ODP_NET
using System;
using System.Data;
#if ODP_NET
using Oracle.DataAccess.Client;
using Oracle.DataAccess.Types;
#else
using System.Data.OracleClient;
#endif
using Imi.Framework.Job.Data;

namespace Imi.SupplyChain.Server.Job.CentiroAdapter.OraclePackage
{
    public partial class PrintQueue
    {
        private IDbConnectionProvider connectionProvider;

        public string _Debug()
        {
            return "Package        : PRINT_QUEUE\r\n" +
                    "Generated on   : 2012-10-03 16:01:10\r\n" +
                    "Generated by   : SWG\\niso@SE0128D\r\n" +
                    "Generated in   : C:\\Project\\Views\\niso_trunk_ss\\dotnet\\source\\CodeGenerators\\PackageGenerator\\bin\\Debug\r\n";
        }

        public PrintQueue(IDbConnectionProvider connectionProvider)
        {
            this.connectionProvider = connectionProvider;
        }

        private IDbCommand sp_Completeprintjob;
        private IDbCommand sp_Createprintjob;
        private IDbCommand sp_Enqueuedocument;
        private IDbCommand sp_Getprintjobs;
        private IDbCommand sp_Getprintconf;
        private IDbCommand sp_GetSourceVersionInfo;
        private IDbCommand sp_Remove;
        private IDbCommand sp_Reset;
        private IDbCommand sp_Startprintjobs;
        private IDbCommand currentCommand;
        private object syncLock = new object();

        // ----------------------------------------------------------------------------

        private void CreateSP_Completeprintjob()
        {

            sp_Completeprintjob = connectionProvider.GetConnection().CreateCommand();
            sp_Completeprintjob.CommandText = "PRINT_QUEUE.COMPLETEPRINTJOB";
            sp_Completeprintjob.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
            ((OracleCommand)sp_Completeprintjob).BindByName = true;
#endif
        }

        private void CreateSP_Createprintjob()
        {
            IDbDataParameter p;

            sp_Createprintjob = connectionProvider.GetConnection().CreateCommand();
            sp_Createprintjob.CommandText = "PRINT_QUEUE.CREATEPRINTJOB";
            sp_Createprintjob.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
            ((OracleCommand)sp_Createprintjob).BindByName = true;
#endif

            p = sp_Createprintjob.CreateParameter();
            p.ParameterName = "WHID_I";
            p.DbType = DbType.String;
            p.Size = 4;
            p.Direction = ParameterDirection.Input;
            sp_Createprintjob.Parameters.Add(p);

            p = sp_Createprintjob.CreateParameter();
            p.ParameterName = "PRINTPRIORITY_I";
            p.DbType = DbType.Decimal;
            p.Precision = 3;
            p.Scale = 0;
            p.Direction = ParameterDirection.Input;
            sp_Createprintjob.Parameters.Add(p);
        }

        private void CreateSP_Enqueuedocument()
        {
            IDbDataParameter p;
            OracleParameter oP;

            sp_Enqueuedocument = connectionProvider.GetConnection().CreateCommand();
            sp_Enqueuedocument.CommandText = "PRINT_QUEUE.ENQUEUEDOCUMENT";
            sp_Enqueuedocument.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
            ((OracleCommand)sp_Enqueuedocument).BindByName = true;
#endif

            oP = sp_Enqueuedocument.CreateParameter() as OracleParameter;
            oP.ParameterName = "REPORTDOCUMENT_I";
#if ODP_NET
            oP.OracleDbType = OracleDbType.Clob;
#else
      oP.OracleType = OracleType.Clob;
#endif
            oP.Direction = ParameterDirection.Input;
            sp_Enqueuedocument.Parameters.Add(oP);


            p = sp_Enqueuedocument.CreateParameter();
            p.ParameterName = "ALMID_O";
            p.DbType = DbType.String;
            p.Size = 140;
            p.Direction = ParameterDirection.Output;
            sp_Enqueuedocument.Parameters.Add(p);

            p = sp_Enqueuedocument.CreateParameter();
            p.ParameterName = "DOCTYPE_I";
            p.DbType = DbType.String;
            p.Size = 35;
            p.Direction = ParameterDirection.Input;
            sp_Enqueuedocument.Parameters.Add(p);

            p = sp_Enqueuedocument.CreateParameter();
            p.ParameterName = "DOCSUBTYPID_I";
            p.DbType = DbType.String;
            p.Size = 35;
            p.Direction = ParameterDirection.Input;
            sp_Enqueuedocument.Parameters.Add(p);

            p = sp_Enqueuedocument.CreateParameter();
            p.ParameterName = "TERID_I";
            p.DbType = DbType.String;
            p.Size = 35;
            p.Direction = ParameterDirection.Input;
            sp_Enqueuedocument.Parameters.Add(p);

            p = sp_Enqueuedocument.CreateParameter();
            p.ParameterName = "PRTID_I";
            p.DbType = DbType.String;
            p.Size = 35;
            p.Direction = ParameterDirection.Input;
            sp_Enqueuedocument.Parameters.Add(p);

            p = sp_Enqueuedocument.CreateParameter();
            p.ParameterName = "EMPID_I";
            p.DbType = DbType.String;
            p.Size = 35;
            p.Direction = ParameterDirection.Input;
            sp_Enqueuedocument.Parameters.Add(p);

            p = sp_Enqueuedocument.CreateParameter();
            p.ParameterName = "NO_COPIES_I";
            p.DbType = DbType.Double;
            p.Direction = ParameterDirection.Input;
            sp_Enqueuedocument.Parameters.Add(p);
        }

        private void CreateSP_Getprintjobs()
        {
            IDbDataParameter p;
            OracleParameter oP;

            sp_Getprintjobs = connectionProvider.GetConnection().CreateCommand();
            sp_Getprintjobs.CommandText = "PRINT_QUEUE.GETPRINTJOBS";
            sp_Getprintjobs.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
            ((OracleCommand)sp_Getprintjobs).BindByName = true;
#endif

            p = sp_Getprintjobs.CreateParameter();
            p.ParameterName = "JOBCOUNT_I";
            p.DbType = DbType.Double;
            p.Direction = ParameterDirection.Input;
            sp_Getprintjobs.Parameters.Add(p);

            p = sp_Getprintjobs.CreateParameter();
            p.ParameterName = "TIMEOUT_I";
            p.DbType = DbType.Double;
            p.Direction = ParameterDirection.Input;
            sp_Getprintjobs.Parameters.Add(p);

            oP = sp_Getprintjobs.CreateParameter() as OracleParameter;
            oP.ParameterName = "PRINTQUEUEDOC_CUR_O";
#if ODP_NET
            oP.OracleDbType = OracleDbType.RefCursor;
#else
      oP.OracleType = OracleType.Cursor;
#endif
            oP.Direction = ParameterDirection.Output;
            sp_Getprintjobs.Parameters.Add(oP);
        }


        private void CreateSP_Getprintconf()
        {
            OracleParameter oP;

            sp_Getprintconf = connectionProvider.GetConnection().CreateCommand();
            sp_Getprintconf.CommandText = "PRINT_QUEUE.GETPRINTCONF";
            sp_Getprintconf.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
            ((OracleCommand)sp_Getprintconf).BindByName = true;
#endif

            oP = sp_Getprintconf.CreateParameter() as OracleParameter;
            oP.ParameterName = "PRINTCONF_CUR_O";
#if ODP_NET
            oP.OracleDbType = OracleDbType.RefCursor;
#else
      oP.OracleType = OracleType.Cursor;
#endif
            oP.Direction = ParameterDirection.Output;
            sp_Getprintconf.Parameters.Add(oP);
        }


        private void CreateSP_GetSourceVersionInfo()
        {
            IDbDataParameter p;

            sp_GetSourceVersionInfo = connectionProvider.GetConnection().CreateCommand();
            sp_GetSourceVersionInfo.CommandText = "PRINT_QUEUE.GET_SOURCE_VERSION_INFO";
            sp_GetSourceVersionInfo.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
            ((OracleCommand)sp_GetSourceVersionInfo).BindByName = true;
#endif

            p = sp_GetSourceVersionInfo.CreateParameter();
            p.ParameterName = "";
            p.DbType = DbType.String;
            p.Size = 255;
            p.Direction = ParameterDirection.ReturnValue;
            sp_GetSourceVersionInfo.Parameters.Add(p);
        }

        private void CreateSP_Remove()
        {
            IDbDataParameter p;

            sp_Remove = connectionProvider.GetConnection().CreateCommand();
            sp_Remove.CommandText = "PRINT_QUEUE.REMOVE";
            sp_Remove.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
            ((OracleCommand)sp_Remove).BindByName = true;
#endif

            p = sp_Remove.CreateParameter();
            p.ParameterName = "PRINTJOBID_I";
            p.DbType = DbType.Decimal;
            p.Precision = 12;
            p.Scale = 0;
            p.Direction = ParameterDirection.Input;
            sp_Remove.Parameters.Add(p);
        }

        private void CreateSP_Reset()
        {

            sp_Reset = connectionProvider.GetConnection().CreateCommand();
            sp_Reset.CommandText = "PRINT_QUEUE.RESET";
            sp_Reset.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
            ((OracleCommand)sp_Reset).BindByName = true;
#endif
        }

        private void CreateSP_Startprintjobs()
        {

            sp_Startprintjobs = connectionProvider.GetConnection().CreateCommand();
            sp_Startprintjobs.CommandText = "PRINT_QUEUE.STARTPRINTJOBS";
            sp_Startprintjobs.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
            ((OracleCommand)sp_Startprintjobs).BindByName = true;
#endif
        }

        // ----------------------------------------------------------------------------

        public void Completeprintjob()
        {
            if (sp_Completeprintjob == null)
                CreateSP_Completeprintjob();

            sp_Completeprintjob.Transaction = connectionProvider.CurrentTransaction;

            // Set In Parameters

            // Execute stored procedure

            sp_Completeprintjob.Prepare();
            sp_Completeprintjob.ExecuteNonQuery();

            // Set Out Parameters
        }

        public void Createprintjob(string WHID_I, Nullable<int> PRINTPRIORITY_I)
        {
            if (sp_Createprintjob == null)
                CreateSP_Createprintjob();

            sp_Createprintjob.Transaction = connectionProvider.CurrentTransaction;

            // Set In Parameters
            if (string.IsNullOrEmpty(WHID_I))
                (sp_Createprintjob.Parameters["WHID_I"] as IDbDataParameter).Value = DBNull.Value;
            else
                (sp_Createprintjob.Parameters["WHID_I"] as IDbDataParameter).Value = WHID_I;

            if (PRINTPRIORITY_I == null)
                (sp_Createprintjob.Parameters["PRINTPRIORITY_I"] as IDbDataParameter).Value = DBNull.Value;
            else
                (sp_Createprintjob.Parameters["PRINTPRIORITY_I"] as IDbDataParameter).Value = PRINTPRIORITY_I;

            // Execute stored procedure

            sp_Createprintjob.Prepare();
            sp_Createprintjob.ExecuteNonQuery();

            // Set Out Parameters
        }

        public void Enqueuedocument(string REPORTDOCUMENT_I,
                                    ref string ALMID_O,
                                    string DOCTYPE_I,
                                    string DOCSUBTYPID_I,
                                    string TERID_I,
                                    string PRTID_I,
                                    string EMPID_I,
                                    Nullable<int> NO_COPIES_I)
        {
            if (sp_Enqueuedocument == null)
                CreateSP_Enqueuedocument();

            sp_Enqueuedocument.Transaction = connectionProvider.CurrentTransaction;

            // Set In Parameters

            if (String.IsNullOrEmpty(REPORTDOCUMENT_I))
                (sp_Enqueuedocument.Parameters["REPORTDOCUMENT_I"] as IDbDataParameter).Value = DBNull.Value;
            else
                (sp_Enqueuedocument.Parameters["REPORTDOCUMENT_I"] as IDbDataParameter).Value = REPORTDOCUMENT_I;

            if (String.IsNullOrEmpty(DOCTYPE_I))
                (sp_Enqueuedocument.Parameters["DOCTYPE_I"] as IDbDataParameter).Value = DBNull.Value;
            else
                (sp_Enqueuedocument.Parameters["DOCTYPE_I"] as IDbDataParameter).Value = DOCTYPE_I;

            if (String.IsNullOrEmpty(DOCSUBTYPID_I))
                (sp_Enqueuedocument.Parameters["DOCSUBTYPID_I"] as IDbDataParameter).Value = DBNull.Value;
            else
                (sp_Enqueuedocument.Parameters["DOCSUBTYPID_I"] as IDbDataParameter).Value = DOCSUBTYPID_I;

            if (String.IsNullOrEmpty(TERID_I))
                (sp_Enqueuedocument.Parameters["TERID_I"] as IDbDataParameter).Value = DBNull.Value;
            else
                (sp_Enqueuedocument.Parameters["TERID_I"] as IDbDataParameter).Value = TERID_I;

            if (String.IsNullOrEmpty(PRTID_I))
                (sp_Enqueuedocument.Parameters["PRTID_I"] as IDbDataParameter).Value = DBNull.Value;
            else
                (sp_Enqueuedocument.Parameters["PRTID_I"] as IDbDataParameter).Value = PRTID_I;

            if (String.IsNullOrEmpty(EMPID_I))
                (sp_Enqueuedocument.Parameters["EMPID_I"] as IDbDataParameter).Value = DBNull.Value;
            else
                (sp_Enqueuedocument.Parameters["EMPID_I"] as IDbDataParameter).Value = EMPID_I;

            if (NO_COPIES_I == null)
                (sp_Enqueuedocument.Parameters["NO_COPIES_I"] as IDbDataParameter).Value = DBNull.Value;
            else
                (sp_Enqueuedocument.Parameters["NO_COPIES_I"] as IDbDataParameter).Value = NO_COPIES_I;

            // Execute stored procedure

            sp_Enqueuedocument.Prepare();
            sp_Enqueuedocument.ExecuteNonQuery();

            // Set Out Parameters

            if ((sp_Enqueuedocument.Parameters["ALMID_O"] as IDbDataParameter).Value == DBNull.Value)
                ALMID_O = null;
            else
                ALMID_O = (sp_Enqueuedocument.Parameters["ALMID_O"] as IDbDataParameter).Value.ToString();
        }

        public void Getprintjobs(Nullable<int> JOBCOUNT_I,
                                 Nullable<int> TIMEOUT_I,
                                 out IDataReader PRINTQUEUEDOC_CUR_O)
        {
            if (sp_Getprintjobs == null)
                CreateSP_Getprintjobs();

            sp_Getprintjobs.Transaction = connectionProvider.CurrentTransaction;

            lock (syncLock)
            {
                currentCommand = sp_Getprintjobs;
            }
            // Set In Parameters

            if (JOBCOUNT_I == null)
                (sp_Getprintjobs.Parameters["JOBCOUNT_I"] as IDbDataParameter).Value = DBNull.Value;
            else
                (sp_Getprintjobs.Parameters["JOBCOUNT_I"] as IDbDataParameter).Value = JOBCOUNT_I;

            if (TIMEOUT_I == null)
                (sp_Getprintjobs.Parameters["TIMEOUT_I"] as IDbDataParameter).Value = DBNull.Value;
            else
                (sp_Getprintjobs.Parameters["TIMEOUT_I"] as IDbDataParameter).Value = TIMEOUT_I;

            // Execute stored procedure

            sp_Getprintjobs.Prepare();
            sp_Getprintjobs.ExecuteNonQuery();

            // Set Out Parameters

#if ODP_NET
            PRINTQUEUEDOC_CUR_O = (IDataReader)((sp_Getprintjobs.Parameters["PRINTQUEUEDOC_CUR_O"] as IDbDataParameter).Value as OracleRefCursor).GetDataReader();
#else
      PRINTQUEUEDOC_CUR_O = (IDataReader)(sp_Getprintjobs.Parameters["PRINTQUEUEDOC_CUR_O"] as IDbDataParameter).Value;
#endif

        }


        public void Getprintconf(out IDataReader PRINTCONF_CUR_O)
        {
            if (sp_Getprintconf == null)
                CreateSP_Getprintconf();

            sp_Getprintconf.Transaction = connectionProvider.CurrentTransaction;

            lock (syncLock)
            {
                currentCommand = sp_Getprintconf;
            }
            // Set In Parameters

            // Execute stored procedure

            sp_Getprintconf.Prepare();
            sp_Getprintconf.ExecuteNonQuery();

            // Set Out Parameters

            if (!((sp_Getprintconf.Parameters["PRINTCONF_CUR_O"] as IDbDataParameter).Value as OracleRefCursor).IsNull)
            {
#if ODP_NET
                PRINTCONF_CUR_O = (IDataReader)((sp_Getprintconf.Parameters["PRINTCONF_CUR_O"] as IDbDataParameter).Value as OracleRefCursor).GetDataReader();
#else
       PRINTCONF_CUR_O = (IDataReader)(sp_Getprintconf.Parameters["PRINTCONF_CUR_O"] as IDbDataParameter).Value;
#endif
            }
            else
            {
                PRINTCONF_CUR_O = null;
            }

        }

        public void Remove(Nullable<double> PRINTJOBID_I)
        {
            if (sp_Remove == null)
                CreateSP_Remove();

            sp_Remove.Transaction = connectionProvider.CurrentTransaction;

            // Set In Parameters

            if (PRINTJOBID_I == null)
                (sp_Remove.Parameters["PRINTJOBID_I"] as IDbDataParameter).Value = DBNull.Value;
            else
                (sp_Remove.Parameters["PRINTJOBID_I"] as IDbDataParameter).Value = PRINTJOBID_I;

            // Execute stored procedure

            sp_Remove.Prepare();
            sp_Remove.ExecuteNonQuery();

            // Set Out Parameters
        }

        public void Reset()
        {
            if (sp_Reset == null)
                CreateSP_Reset();

            sp_Reset.Transaction = connectionProvider.CurrentTransaction;

            // Set In Parameters

            // Execute stored procedure

            sp_Reset.Prepare();
            sp_Reset.ExecuteNonQuery();

            // Set Out Parameters
        }

        public void Startprintjobs()
        {
            if (sp_Startprintjobs == null)
                CreateSP_Startprintjobs();

            sp_Startprintjobs.Transaction = connectionProvider.CurrentTransaction;

            // Set In Parameters

            // Execute stored procedure

            sp_Startprintjobs.Prepare();
            sp_Startprintjobs.ExecuteNonQuery();

            // Set Out Parameters
        }

        public void Cancel()
        {
            lock (syncLock)
            {
                if (currentCommand != null)
                {
                    if (currentCommand.Connection != null)
                    {
                        if (currentCommand.Connection.State != ConnectionState.Closed)
                        {
                            currentCommand.Cancel();
                        }
                    }
                }
            }
        }
    }
}
