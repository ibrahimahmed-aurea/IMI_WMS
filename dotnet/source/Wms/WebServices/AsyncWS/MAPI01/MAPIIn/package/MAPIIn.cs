/*
  File           : Mapiin.cs

  Description    : Wrapper class for Oracle package MAPIIN.
                   This code was generated by the PackageGenerator, do not edit.

  Generated with Commandline: MAPIIn MAPIIn.cs Imi.Wms.WebServices.MAPIIn /conn "user id = owuser; password = owuser1; data source = WH51NGMR" 

MAPIIN.GET_ALARM_MESSAGE cannot be generated since the following
parameter types are not currently supported:
    ALMTXT_REC_O PL/SQL RECORD

*/
#define ODP_NET
using System;
using System.Data;
#if ODP_NET
using Oracle.DataAccess.Client;
using Oracle.DataAccess.Types;
#else
using System.Data.OracleClient;
#endif
using Imi.Framework.Job.Data;

namespace Imi.Wms.WebServices.MAPIIn
{
  public partial class Mapiin
  {
    private IDbConnectionProvider connectionProvider;

    public string _Debug()
    {
      return  "Package        : MAPIIN\r\n" +
              "Generated on   : 2008-05-12 12:04:24\r\n" +
              "Generated by   : SWG\\olla@IMIPC1091\r\n" +
              "Generated in   : C:\\project\\views\\olla_dotnet_ss\\dotnet\\source\\Wms\\WebServices\\MAPIIn\\package\r\n";
    }

    public Mapiin(IDbConnectionProvider connectionProvider)
    {
      this.connectionProvider = connectionProvider;
    }

    private IDbCommand sp_CheckMessageTypeForMhid;
    private IDbCommand sp_Modify;
    private IDbCommand sp_NewMapiIn;
    private IDbCommand sp_Raiseapplicationerror;
    private IDbCommand sp_SelectMapiInObject;
    private IDbCommand sp_SignalProcess;

    // ----------------------------------------------------------------------------

    private void CreateSP_CheckMessageTypeForMhid()
    {
      IDbDataParameter p;

      sp_CheckMessageTypeForMhid = connectionProvider.GetConnection().CreateCommand();
      sp_CheckMessageTypeForMhid.CommandText = "MAPIIN.CHECK_MESSAGE_TYPE_FOR_MHID";
      sp_CheckMessageTypeForMhid.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
      ((OracleCommand)sp_CheckMessageTypeForMhid).BindByName = true;
#endif

      p = sp_CheckMessageTypeForMhid.CreateParameter();
      p.ParameterName = "MHID_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_CheckMessageTypeForMhid.Parameters.Add( p );

      p = sp_CheckMessageTypeForMhid.CreateParameter();
      p.ParameterName = "MSG_ID_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_CheckMessageTypeForMhid.Parameters.Add( p );

      p = sp_CheckMessageTypeForMhid.CreateParameter();
      p.ParameterName = "ALMID_O";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Output;
      sp_CheckMessageTypeForMhid.Parameters.Add( p );
    }

    private void CreateSP_Modify()
    {
      IDbDataParameter p;

      sp_Modify = connectionProvider.GetConnection().CreateCommand();
      sp_Modify.CommandText = "MAPIIN.MODIFY";
      sp_Modify.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
      ((OracleCommand)sp_Modify).BindByName = true;
#endif

      p = sp_Modify.CreateParameter();
      p.ParameterName = "MAPI_IN_ID_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_Modify.Parameters.Add( p );

      p = sp_Modify.CreateParameter();
      p.ParameterName = "FIRSTRCVDTM_I";
      p.DbType = DbType.Date;
      p.Direction = ParameterDirection.Input;
      sp_Modify.Parameters.Add( p );

      p = sp_Modify.CreateParameter();
      p.ParameterName = "ALMID_O";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Output;
      sp_Modify.Parameters.Add( p );
    }

    private void CreateSP_NewMapiIn()
    {
      IDbDataParameter p;

      sp_NewMapiIn = connectionProvider.GetConnection().CreateCommand();
      sp_NewMapiIn.CommandText = "MAPIIN.NEW_MAPI_IN";
      sp_NewMapiIn.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
      ((OracleCommand)sp_NewMapiIn).BindByName = true;
#endif

      p = sp_NewMapiIn.CreateParameter();
      p.ParameterName = "MHID_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_NewMapiIn.Parameters.Add( p );

      p = sp_NewMapiIn.CreateParameter();
      p.ParameterName = "TRANSACTION_ID_IN_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_NewMapiIn.Parameters.Add( p );

      p = sp_NewMapiIn.CreateParameter();
      p.ParameterName = "MSG_ID_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_NewMapiIn.Parameters.Add( p );

      p = sp_NewMapiIn.CreateParameter();
      p.ParameterName = "MAPI_IN_ID_O";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Output;
      sp_NewMapiIn.Parameters.Add( p );

      p = sp_NewMapiIn.CreateParameter();
      p.ParameterName = "ALMID_O";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Output;
      sp_NewMapiIn.Parameters.Add( p );
    }

    private void CreateSP_Raiseapplicationerror()
    {
      IDbDataParameter p;

      sp_Raiseapplicationerror = connectionProvider.GetConnection().CreateCommand();
      sp_Raiseapplicationerror.CommandText = "MAPIIN.RAISEAPPLICATIONERROR";
      sp_Raiseapplicationerror.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
      ((OracleCommand)sp_Raiseapplicationerror).BindByName = true;
#endif

      p = sp_Raiseapplicationerror.CreateParameter();
      p.ParameterName = "ALMID_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_Raiseapplicationerror.Parameters.Add( p );
    }

    private void CreateSP_SelectMapiInObject()
    {
      IDbDataParameter p;

      sp_SelectMapiInObject = connectionProvider.GetConnection().CreateCommand();
      sp_SelectMapiInObject.CommandText = "MAPIIN.SELECT_MAPI_IN_OBJECT";
      sp_SelectMapiInObject.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
      ((OracleCommand)sp_SelectMapiInObject).BindByName = true;
#endif

      p = sp_SelectMapiInObject.CreateParameter();
      p.ParameterName = "PROID_IN_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_SelectMapiInObject.Parameters.Add( p );
    }

    private void CreateSP_SignalProcess()
    {
      IDbDataParameter p;

      sp_SignalProcess = connectionProvider.GetConnection().CreateCommand();
      sp_SignalProcess.CommandText = "MAPIIN.SIGNAL_PROCESS";
      sp_SignalProcess.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
      ((OracleCommand)sp_SignalProcess).BindByName = true;
#endif

      p = sp_SignalProcess.CreateParameter();
      p.ParameterName = "PROID_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_SignalProcess.Parameters.Add( p );
    }

    // ----------------------------------------------------------------------------

    public void CheckMessageTypeForMhid(string                  MHID_I, 
                                        string                  MSG_ID_I, 
                                        ref string              ALMID_O)
    {
      if ( sp_CheckMessageTypeForMhid == null )
        CreateSP_CheckMessageTypeForMhid();

      sp_CheckMessageTypeForMhid.Transaction = connectionProvider.CurrentTransaction;

      // Set In Parameters

      if ( String.IsNullOrEmpty(MHID_I) )
        (sp_CheckMessageTypeForMhid.Parameters["MHID_I"] as IDbDataParameter).Value   = DBNull.Value;
      else
        (sp_CheckMessageTypeForMhid.Parameters["MHID_I"] as IDbDataParameter).Value   = MHID_I;

      if ( String.IsNullOrEmpty(MSG_ID_I) )
        (sp_CheckMessageTypeForMhid.Parameters["MSG_ID_I"] as IDbDataParameter).Value = DBNull.Value;
      else
        (sp_CheckMessageTypeForMhid.Parameters["MSG_ID_I"] as IDbDataParameter).Value = MSG_ID_I;

      // Execute stored procedure

      sp_CheckMessageTypeForMhid.Prepare();
      sp_CheckMessageTypeForMhid.ExecuteNonQuery();

      // Set Out Parameters

      if ( (sp_CheckMessageTypeForMhid.Parameters["ALMID_O"] as IDbDataParameter).Value == DBNull.Value )
        ALMID_O = null;
      else
        ALMID_O = (sp_CheckMessageTypeForMhid.Parameters["ALMID_O"] as IDbDataParameter).Value.ToString();
    }

    public void Modify(string                  MAPI_IN_ID_I, 
                       Nullable<DateTime>      FIRSTRCVDTM_I, 
                       ref string              ALMID_O)
    {
      if ( sp_Modify == null )
        CreateSP_Modify();

      sp_Modify.Transaction = connectionProvider.CurrentTransaction;

      // Set In Parameters

      if ( String.IsNullOrEmpty(MAPI_IN_ID_I) )
        (sp_Modify.Parameters["MAPI_IN_ID_I"] as IDbDataParameter).Value  = DBNull.Value;
      else
        (sp_Modify.Parameters["MAPI_IN_ID_I"] as IDbDataParameter).Value  = MAPI_IN_ID_I;

      if ( FIRSTRCVDTM_I == null )
        (sp_Modify.Parameters["FIRSTRCVDTM_I"] as IDbDataParameter).Value = DBNull.Value;
      else
        (sp_Modify.Parameters["FIRSTRCVDTM_I"] as IDbDataParameter).Value = FIRSTRCVDTM_I;

      // Execute stored procedure

      sp_Modify.Prepare();
      sp_Modify.ExecuteNonQuery();

      // Set Out Parameters

      if ( (sp_Modify.Parameters["ALMID_O"] as IDbDataParameter).Value == DBNull.Value )
        ALMID_O = null;
      else
        ALMID_O = (sp_Modify.Parameters["ALMID_O"] as IDbDataParameter).Value.ToString();
    }

    public void NewMapiIn(string                  MHID_I, 
                          string                  TRANSACTION_ID_IN_I, 
                          string                  MSG_ID_I, 
                          ref string              MAPI_IN_ID_O, 
                          ref string              ALMID_O)
    {
      if ( sp_NewMapiIn == null )
        CreateSP_NewMapiIn();

      sp_NewMapiIn.Transaction = connectionProvider.CurrentTransaction;

      // Set In Parameters

      if ( String.IsNullOrEmpty(MHID_I) )
        (sp_NewMapiIn.Parameters["MHID_I"] as IDbDataParameter).Value              = DBNull.Value;
      else
        (sp_NewMapiIn.Parameters["MHID_I"] as IDbDataParameter).Value              = MHID_I;

      if ( String.IsNullOrEmpty(TRANSACTION_ID_IN_I) )
        (sp_NewMapiIn.Parameters["TRANSACTION_ID_IN_I"] as IDbDataParameter).Value = DBNull.Value;
      else
        (sp_NewMapiIn.Parameters["TRANSACTION_ID_IN_I"] as IDbDataParameter).Value = TRANSACTION_ID_IN_I;

      if ( String.IsNullOrEmpty(MSG_ID_I) )
        (sp_NewMapiIn.Parameters["MSG_ID_I"] as IDbDataParameter).Value            = DBNull.Value;
      else
        (sp_NewMapiIn.Parameters["MSG_ID_I"] as IDbDataParameter).Value            = MSG_ID_I;

      // Execute stored procedure

      sp_NewMapiIn.Prepare();
      sp_NewMapiIn.ExecuteNonQuery();

      // Set Out Parameters

      if ( (sp_NewMapiIn.Parameters["MAPI_IN_ID_O"] as IDbDataParameter).Value == DBNull.Value )
        MAPI_IN_ID_O = null;
      else
        MAPI_IN_ID_O = (sp_NewMapiIn.Parameters["MAPI_IN_ID_O"] as IDbDataParameter).Value.ToString();

      if ( (sp_NewMapiIn.Parameters["ALMID_O"] as IDbDataParameter).Value == DBNull.Value )
        ALMID_O = null;
      else
        ALMID_O = (sp_NewMapiIn.Parameters["ALMID_O"] as IDbDataParameter).Value.ToString();
    }

    public void Raiseapplicationerror(string                  ALMID_I)
    {
      if ( sp_Raiseapplicationerror == null )
        CreateSP_Raiseapplicationerror();

      sp_Raiseapplicationerror.Transaction = connectionProvider.CurrentTransaction;

      // Set In Parameters

      if ( String.IsNullOrEmpty(ALMID_I) )
        (sp_Raiseapplicationerror.Parameters["ALMID_I"] as IDbDataParameter).Value = DBNull.Value;
      else
        (sp_Raiseapplicationerror.Parameters["ALMID_I"] as IDbDataParameter).Value = ALMID_I;

      // Execute stored procedure

      sp_Raiseapplicationerror.Prepare();
      sp_Raiseapplicationerror.ExecuteNonQuery();

      // Set Out Parameters
    }

    public void SelectMapiInObject(string                  PROID_IN_I)
    {
      if ( sp_SelectMapiInObject == null )
        CreateSP_SelectMapiInObject();

      sp_SelectMapiInObject.Transaction = connectionProvider.CurrentTransaction;

      // Set In Parameters

      if ( String.IsNullOrEmpty(PROID_IN_I) )
        (sp_SelectMapiInObject.Parameters["PROID_IN_I"] as IDbDataParameter).Value = DBNull.Value;
      else
        (sp_SelectMapiInObject.Parameters["PROID_IN_I"] as IDbDataParameter).Value = PROID_IN_I;

      // Execute stored procedure

      sp_SelectMapiInObject.Prepare();
      sp_SelectMapiInObject.ExecuteNonQuery();

      // Set Out Parameters
    }

    public void SignalProcess(string                  PROID_I)
    {
      if ( sp_SignalProcess == null )
        CreateSP_SignalProcess();

      sp_SignalProcess.Transaction = connectionProvider.CurrentTransaction;

      // Set In Parameters

      if ( String.IsNullOrEmpty(PROID_I) )
        (sp_SignalProcess.Parameters["PROID_I"] as IDbDataParameter).Value = DBNull.Value;
      else
        (sp_SignalProcess.Parameters["PROID_I"] as IDbDataParameter).Value = PROID_I;

      // Execute stored procedure

      sp_SignalProcess.Prepare();
      sp_SignalProcess.ExecuteNonQuery();

      // Set Out Parameters
    }
  }
}
