/*
  File           : WebServicesTransport.cs

  Description    : Wrapper class for Oracle package WEB_SERVICES_TRANSPORT.
                   This code was generated by the PackageGenerator, do not edit.

  Generated with Commandline: WEB_SERVICES_TRANSPORT WebServicesTransport.cs Cdc.Wms.WebServices.TransportationPortal.Entities /CONN "user id = rmuser; password = rmuser; data source = WHTRUNK" 

*/
#define ODP_NET
using System;
using System.Data;
#if ODP_NET
using Oracle.DataAccess.Client;
using Oracle.DataAccess.Types;
#else
using System.Data.OracleClient;
#endif
using Imi.Framework.Job.Data;

namespace Cdc.Wms.WebServices.TransportationPortal.Entities
{
  public partial class WebServicesTransport
  {
    private IDbConnectionProvider connectionProvider;

    public string _Debug()
    {
      return  "Package        : WEB_SERVICES_TRANSPORT\r\n" +
              "Generated on   : 2009-09-11 13:33:06\r\n" +
              "Generated by   : SWG\\olla@IMIPC1091\r\n" +
              "Generated in   : C:\\project\\views\\olla_dotnet_ss\\dotnet\\source\\Wms\\WebServices\\SyncWS\\Cdc.Wms.WebServices.TransportationPortal\\Cdc.Wms.WebServices.TransportationPortal\\Package\r\n";
    }

    public WebServicesTransport(IDbConnectionProvider connectionProvider)
    {
      this.connectionProvider = connectionProvider;
    }

    private IDbCommand sp_Finddepartureroute;
    private IDbCommand sp_Finddepartureroutestops;
    private IDbCommand sp_GetSourceVersionInfo;
    private IDbCommand currentCommand;
    private object syncLock = new object();

    // ----------------------------------------------------------------------------

    private void CreateSP_Finddepartureroute()
    {
      IDbDataParameter p;
      OracleParameter  oP;

      sp_Finddepartureroute = connectionProvider.GetConnection().CreateCommand();
      sp_Finddepartureroute.CommandText = "WEB_SERVICES_TRANSPORT.FINDDEPARTUREROUTE";
      sp_Finddepartureroute.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
      ((OracleCommand)sp_Finddepartureroute).BindByName = true;
#endif

      p = sp_Finddepartureroute.CreateParameter();
      p.ParameterName = "DEPARTUREIDENTITY_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_Finddepartureroute.Parameters.Add( p );

      oP = sp_Finddepartureroute.CreateParameter() as OracleParameter;
      oP.ParameterName = "ROUTE_CUR_O";
#if ODP_NET
      oP.OracleDbType = OracleDbType.RefCursor;
#else
      oP.OracleType = OracleType.Cursor;
#endif
      oP.Direction = ParameterDirection.Output;
      sp_Finddepartureroute.Parameters.Add( oP );
    }

    private void CreateSP_Finddepartureroutestops()
    {
      IDbDataParameter p;
      OracleParameter  oP;

      sp_Finddepartureroutestops = connectionProvider.GetConnection().CreateCommand();
      sp_Finddepartureroutestops.CommandText = "WEB_SERVICES_TRANSPORT.FINDDEPARTUREROUTESTOPS";
      sp_Finddepartureroutestops.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
      ((OracleCommand)sp_Finddepartureroutestops).BindByName = true;
#endif

      p = sp_Finddepartureroutestops.CreateParameter();
      p.ParameterName = "DEPARTUREIDENTITY_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_Finddepartureroutestops.Parameters.Add( p );

      oP = sp_Finddepartureroutestops.CreateParameter() as OracleParameter;
      oP.ParameterName = "ROUTESTOP_CUR_O";
#if ODP_NET
      oP.OracleDbType = OracleDbType.RefCursor;
#else
      oP.OracleType = OracleType.Cursor;
#endif
      oP.Direction = ParameterDirection.Output;
      sp_Finddepartureroutestops.Parameters.Add( oP );
    }

    private void CreateSP_GetSourceVersionInfo()
    {
      IDbDataParameter p;

      sp_GetSourceVersionInfo = connectionProvider.GetConnection().CreateCommand();
      sp_GetSourceVersionInfo.CommandText = "WEB_SERVICES_TRANSPORT.GET_SOURCE_VERSION_INFO";
      sp_GetSourceVersionInfo.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
      ((OracleCommand)sp_GetSourceVersionInfo).BindByName = true;
#endif

      p = sp_GetSourceVersionInfo.CreateParameter();
      p.ParameterName = "";
      p.DbType = DbType.String;
      p.Size = 255;
      p.Direction = ParameterDirection.ReturnValue;
      sp_GetSourceVersionInfo.Parameters.Add( p );
    }

    // ----------------------------------------------------------------------------

    public void Finddepartureroute(string                  DEPARTUREIDENTITY_I, 
                                   out IDataReader         ROUTE_CUR_O)
    {
      if ( sp_Finddepartureroute == null )
        CreateSP_Finddepartureroute();

      sp_Finddepartureroute.Transaction = connectionProvider.CurrentTransaction;

      lock (syncLock)
      {
          currentCommand = sp_Finddepartureroute;
      }
      // Set In Parameters

      if ( String.IsNullOrEmpty(DEPARTUREIDENTITY_I) )
        (sp_Finddepartureroute.Parameters["DEPARTUREIDENTITY_I"] as IDbDataParameter).Value = DBNull.Value;
      else
        (sp_Finddepartureroute.Parameters["DEPARTUREIDENTITY_I"] as IDbDataParameter).Value = DEPARTUREIDENTITY_I;

      // Execute stored procedure

      sp_Finddepartureroute.Prepare();
      sp_Finddepartureroute.ExecuteNonQuery();

      // Set Out Parameters

#if ODP_NET
      ROUTE_CUR_O = (IDataReader)((sp_Finddepartureroute.Parameters["ROUTE_CUR_O"] as IDbDataParameter).Value as OracleRefCursor).GetDataReader();
#else
      ROUTE_CUR_O = (IDataReader)(sp_Finddepartureroute.Parameters["ROUTE_CUR_O"] as IDbDataParameter).Value;
#endif

    }

    public void Finddepartureroutestops(string                  DEPARTUREIDENTITY_I, 
                                        out IDataReader         ROUTESTOP_CUR_O)
    {
      if ( sp_Finddepartureroutestops == null )
        CreateSP_Finddepartureroutestops();

      sp_Finddepartureroutestops.Transaction = connectionProvider.CurrentTransaction;

      lock (syncLock)
      {
          currentCommand = sp_Finddepartureroutestops;
      }
      // Set In Parameters

      if ( String.IsNullOrEmpty(DEPARTUREIDENTITY_I) )
        (sp_Finddepartureroutestops.Parameters["DEPARTUREIDENTITY_I"] as IDbDataParameter).Value = DBNull.Value;
      else
        (sp_Finddepartureroutestops.Parameters["DEPARTUREIDENTITY_I"] as IDbDataParameter).Value = DEPARTUREIDENTITY_I;

      // Execute stored procedure

      sp_Finddepartureroutestops.Prepare();
      sp_Finddepartureroutestops.ExecuteNonQuery();

      // Set Out Parameters

#if ODP_NET
      ROUTESTOP_CUR_O = (IDataReader)((sp_Finddepartureroutestops.Parameters["ROUTESTOP_CUR_O"] as IDbDataParameter).Value as OracleRefCursor).GetDataReader();
#else
      ROUTESTOP_CUR_O = (IDataReader)(sp_Finddepartureroutestops.Parameters["ROUTESTOP_CUR_O"] as IDbDataParameter).Value;
#endif

    }

    public string GetSourceVersionInfo()
    {
      if ( sp_GetSourceVersionInfo == null )
        CreateSP_GetSourceVersionInfo();

      sp_GetSourceVersionInfo.Transaction = connectionProvider.CurrentTransaction;

      // Set In Parameters

      // Execute stored procedure

      sp_GetSourceVersionInfo.Prepare();
      sp_GetSourceVersionInfo.ExecuteNonQuery();

      // Set Out Parameters

      if ( (sp_GetSourceVersionInfo.Parameters[""] as IDbDataParameter).Value == DBNull.Value )
        return null;
      else
        return (sp_GetSourceVersionInfo.Parameters[""] as IDbDataParameter).Value.ToString();
    }

    public void Cancel()
    {
      lock (syncLock)
      {
        if (currentCommand != null)
        {
          if (currentCommand.Connection != null)
          {
            if (currentCommand.Connection.State != ConnectionState.Closed)
            {
              currentCommand.Cancel();
            }
          }
        }
      }
    }
  }
}
