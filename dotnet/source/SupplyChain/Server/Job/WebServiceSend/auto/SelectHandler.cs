/*
  File           : 

  Description    : Internal classes for getting outbound data from queue tables.
                   This code was generated, do not edit.

*/
using System;
using System.Text;
using System.Data;
using System.Collections;
using Imi.Framework.Job.Data;

namespace Imi.Wms.WebServices.ExternalInterface
{
  public class SelectHandler
  {
    public string _Debug()
    {
      return "Generated on   : 2017-09-08 11:55:40\r\n" +
             "Generated by   : SWG\\aron@SE0133D\r\n" +
             "Generated in   : C:\\projects\\views\\aron_80M_ss\\dotnet\\source\\CodeGenerators\\wscc\r\n";
    }
  }

  public class BalanceAnswerLineSelect
  {
    private Database db;

    public BalanceAnswerLineSelect(Database db)
    {
      this.db = db;

    }

    public BalanceAnswerLineDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (BalanceAnswerLineDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aBalanceAnswerLineDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_BALANCE_ANSWER.WAREHOUSEIDENTITY" +
               ",HAPI_BALANCE_ANSWER.OWNERIDENTITY" +
               ",HAPI_BALANCE_ANSWER.PRODUCTNUMBER" +
               ",HAPI_BALANCE_ANSWER.PRODUCTIONLOTIDENTITY" +
               ",HAPI_BALANCE_ANSWER.PRODUCTIONSUBLOTIDENTITY" +
               ",HAPI_BALANCE_ANSWER.MARKETINGLOTIDENTITY" +
               ",HAPI_BALANCE_ANSWER.QUALITYLOTIDENTITY" +
               ",HAPI_BALANCE_ANSWER.PACKAGEIDENTITY" +
               ",HAPI_BALANCE_ANSWER.INVENTORYSTATUSCODE" +
               ",HAPI_BALANCE_ANSWER.FREEQUANTITY" +
               ",HAPI_BALANCE_ANSWER.PICKLOCATIONQUANTITY" +
               ",HAPI_BALANCE_ANSWER.PICKEDQUANTITY" +
               ",HAPI_BALANCE_ANSWER.TOPICKQUANTITY" +
               ",HAPI_BALANCE_ANSWER.CUSTOMERRESERVEDQUANTITY" +
               ",HAPI_BALANCE_ANSWER.RESERVEDFORREPLENQUANTITY" +
               ",HAPI_BALANCE_ANSWER.MESSAGENUMBER" +
               ",HAPI_BALANCE_ANSWER.LASTBALANCEANSWER" +
        " from   HAPI_BALANCE_ANSWER" +
        " where  HAPI_BALANCE_ANSWER.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        BalanceAnswerLineDoc aBalanceAnswerLineDoc = new BalanceAnswerLineDoc();

        aBalanceAnswerLineDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aBalanceAnswerLineDoc.WarehouseIdentity = null;
        else
        {
          aBalanceAnswerLineDoc.WarehouseIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aBalanceAnswerLineDoc.OwnerIdentity = null;
        else
        {
          aBalanceAnswerLineDoc.OwnerIdentity = r.GetString( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aBalanceAnswerLineDoc.ProductNumber = null;
        else
        {
          aBalanceAnswerLineDoc.ProductNumber = r.GetString( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aBalanceAnswerLineDoc.ProductionLotIdentity = null;
        else
        {
          aBalanceAnswerLineDoc.ProductionLotIdentity = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aBalanceAnswerLineDoc.ProductionSubLotIdentity = null;
        else
        {
          aBalanceAnswerLineDoc.ProductionSubLotIdentity = r.GetString( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aBalanceAnswerLineDoc.MarketingLotIdentity = null;
        else
        {
          aBalanceAnswerLineDoc.MarketingLotIdentity = r.GetString( 5 );
        }

        if ( r.IsDBNull( 6 ) )
          aBalanceAnswerLineDoc.QualityLotIdentity = null;
        else
        {
          aBalanceAnswerLineDoc.QualityLotIdentity = r.GetString( 6 );
        }

        if ( r.IsDBNull( 7 ) )
          aBalanceAnswerLineDoc.PackageIdentity = null;
        else
        {
          aBalanceAnswerLineDoc.PackageIdentity = r.GetString( 7 );
        }

        if ( r.IsDBNull( 8 ) )
          aBalanceAnswerLineDoc.InventoryStatusCode = null;
        else
        {
          aBalanceAnswerLineDoc.InventoryStatusCode = r.GetString( 8 );
        }

        if ( r.IsDBNull( 9 ) )
          aBalanceAnswerLineDoc.FreeQuantity = null;
        else
        {
          aBalanceAnswerLineDoc.FreeQuantity = Convert.ToDouble( r.GetDecimal( 9 ) );
        }

        if ( r.IsDBNull( 10 ) )
          aBalanceAnswerLineDoc.PickLocationQuantity = null;
        else
        {
          aBalanceAnswerLineDoc.PickLocationQuantity = Convert.ToDouble( r.GetDecimal( 10 ) );
        }

        if ( r.IsDBNull( 11 ) )
          aBalanceAnswerLineDoc.PickedQuantity = null;
        else
        {
          aBalanceAnswerLineDoc.PickedQuantity = Convert.ToDouble( r.GetDecimal( 11 ) );
        }

        if ( r.IsDBNull( 12 ) )
          aBalanceAnswerLineDoc.TopickQuantity = null;
        else
        {
          aBalanceAnswerLineDoc.TopickQuantity = Convert.ToDouble( r.GetDecimal( 12 ) );
        }

        if ( r.IsDBNull( 13 ) )
          aBalanceAnswerLineDoc.CustomerReservedQuantity = null;
        else
        {
          aBalanceAnswerLineDoc.CustomerReservedQuantity = Convert.ToDouble( r.GetDecimal( 13 ) );
        }

        if ( r.IsDBNull( 14 ) )
          aBalanceAnswerLineDoc.ReservedForReplenQuantity = null;
        else
        {
          aBalanceAnswerLineDoc.ReservedForReplenQuantity = Convert.ToDouble( r.GetDecimal( 14 ) );
        }

        if ( r.IsDBNull( 15 ) )
          aBalanceAnswerLineDoc.MessageNumber = null;
        else
        {
          aBalanceAnswerLineDoc.MessageNumber = Convert.ToDouble( r.GetDecimal( 15 ) );
        }

        if ( r.IsDBNull( 16 ) )
          aBalanceAnswerLineDoc.LastBalanceAnswer = null;
        else
        {
          aBalanceAnswerLineDoc.LastBalanceAnswer = r.GetString( 16 );
        }

        aBalanceAnswerLineDocList.Add( aBalanceAnswerLineDoc );
      }

      r.Close();


      return aBalanceAnswerLineDocList;
    }
  }

  public class DeliveryReceiptHeadSelect
  {
    private Database db;
    private DeliveryReceiptHeadTextSelect aDeliveryReceiptHeadTextSelect;
    private DeliveryReceiptLineSelect aDeliveryReceiptLineSelect;
    private DeliveryReceiptPackingMaterialSelect aDeliveryReceiptPackingMaterialSelect;

    public DeliveryReceiptHeadSelect(Database db)
    {
      this.db = db;

      aDeliveryReceiptHeadTextSelect = new DeliveryReceiptHeadTextSelect(this.db);
      aDeliveryReceiptLineSelect = new DeliveryReceiptLineSelect(this.db);
      aDeliveryReceiptPackingMaterialSelect = new DeliveryReceiptPackingMaterialSelect(this.db);
    }

    public DeliveryReceiptHeadDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (DeliveryReceiptHeadDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aDeliveryReceiptHeadDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_DLVRY_RECEIPT_HEAD.DELIVERYIDENTITY" +
               ",HAPI_DLVRY_RECEIPT_HEAD.ARRIVALDATETIME" +
               ",HAPI_DLVRY_RECEIPT_HEAD.WAREHOUSEIDENTITY" +
               ",HAPI_DLVRY_RECEIPT_HEAD.EMPLOYEEIDENTITY" +
               ",HAPI_DLVRY_RECEIPT_HEAD.RECEIVETYPE" +
               ",HAPI_DLVRY_RECEIPT_HEAD.PACKINGSLIPNUMBER" +
               ",HAPI_DLVRY_RECEIPT_HEAD.BILLOFLADINGNUMBER" +
               ",HAPI_DLVRY_RECEIPT_HEAD.VEHICLEIDENTITY" +
        " from   HAPI_DLVRY_RECEIPT_HEAD" +
        " where  HAPI_DLVRY_RECEIPT_HEAD.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        DeliveryReceiptHeadDoc aDeliveryReceiptHeadDoc = new DeliveryReceiptHeadDoc();

        aDeliveryReceiptHeadDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aDeliveryReceiptHeadDoc.DeliveryIdentity = null;
        else
        {
          aDeliveryReceiptHeadDoc.DeliveryIdentity = r.GetInt32( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aDeliveryReceiptHeadDoc.ArrivalDateTime = null;
        else
        {
          aDeliveryReceiptHeadDoc.ArrivalDateTime = DateTime.SpecifyKind(r.GetDateTime( 1 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 2 ) )
          aDeliveryReceiptHeadDoc.WarehouseIdentity = null;
        else
        {
          aDeliveryReceiptHeadDoc.WarehouseIdentity = r.GetString( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aDeliveryReceiptHeadDoc.EmployeeIdentity = null;
        else
        {
          aDeliveryReceiptHeadDoc.EmployeeIdentity = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aDeliveryReceiptHeadDoc.ReceiveType = null;
        else
        {
          aDeliveryReceiptHeadDoc.ReceiveType = r.GetString( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aDeliveryReceiptHeadDoc.PackingSlipNumber = null;
        else
        {
          aDeliveryReceiptHeadDoc.PackingSlipNumber = r.GetString( 5 );
        }

        if ( r.IsDBNull( 6 ) )
          aDeliveryReceiptHeadDoc.BillOfLadingNumber = null;
        else
        {
          aDeliveryReceiptHeadDoc.BillOfLadingNumber = r.GetString( 6 );
        }

        if ( r.IsDBNull( 7 ) )
          aDeliveryReceiptHeadDoc.VehicleIdentity = null;
        else
        {
          aDeliveryReceiptHeadDoc.VehicleIdentity = r.GetString( 7 );
        }

        aDeliveryReceiptHeadDocList.Add( aDeliveryReceiptHeadDoc );
      }

      r.Close();

      ArrayList aDeliveryReceiptHeadTextDocList = aDeliveryReceiptHeadTextSelect.InternalProcess( HapiTransId );
      ArrayList aDeliveryReceiptLineDocList = aDeliveryReceiptLineSelect.InternalProcess( HapiTransId );
      ArrayList aDeliveryReceiptPackingMaterialDocList = aDeliveryReceiptPackingMaterialSelect.InternalProcess( HapiTransId );

      foreach ( DeliveryReceiptHeadDoc aDeliveryReceiptHeadDoc in aDeliveryReceiptHeadDocList )
      {
        ArrayList ConnectedChildren = null;
        ConnectedChildren = new ArrayList();

        foreach ( DeliveryReceiptHeadTextDoc aDeliveryReceiptHeadTextDoc in aDeliveryReceiptHeadTextDocList )
        {
          if ( GeneratedComparer.EqualDeliveryReceiptHeadDocDeliveryReceiptHeadTextDoc( aDeliveryReceiptHeadDoc, aDeliveryReceiptHeadTextDoc ) )
            ConnectedChildren.Add( aDeliveryReceiptHeadTextDoc );
        }
        aDeliveryReceiptHeadDoc.aDeliveryReceiptHeadTextDocs = ConnectedChildren.ToArray(typeof(DeliveryReceiptHeadTextDoc)) as DeliveryReceiptHeadTextDoc[];
        ConnectedChildren = new ArrayList();

        foreach ( DeliveryReceiptLineDoc aDeliveryReceiptLineDoc in aDeliveryReceiptLineDocList )
        {
          if ( GeneratedComparer.EqualDeliveryReceiptHeadDocDeliveryReceiptLineDoc( aDeliveryReceiptHeadDoc, aDeliveryReceiptLineDoc ) )
            ConnectedChildren.Add( aDeliveryReceiptLineDoc );
        }
        aDeliveryReceiptHeadDoc.aDeliveryReceiptLineDocs = ConnectedChildren.ToArray(typeof(DeliveryReceiptLineDoc)) as DeliveryReceiptLineDoc[];
        ConnectedChildren = new ArrayList();

        foreach ( DeliveryReceiptPackingMaterialDoc aDeliveryReceiptPackingMaterialDoc in aDeliveryReceiptPackingMaterialDocList )
        {
          if ( GeneratedComparer.EqualDeliveryReceiptHeadDocDeliveryReceiptPackingMaterialDoc( aDeliveryReceiptHeadDoc, aDeliveryReceiptPackingMaterialDoc ) )
            ConnectedChildren.Add( aDeliveryReceiptPackingMaterialDoc );
        }
        aDeliveryReceiptHeadDoc.aDeliveryReceiptPackingMaterialDocs = ConnectedChildren.ToArray(typeof(DeliveryReceiptPackingMaterialDoc)) as DeliveryReceiptPackingMaterialDoc[];
      }

      return aDeliveryReceiptHeadDocList;
    }
  }

  public class DeliveryReceiptHeadTextSelect
  {
    private Database db;

    public DeliveryReceiptHeadTextSelect(Database db)
    {
      this.db = db;

    }

    public DeliveryReceiptHeadTextDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (DeliveryReceiptHeadTextDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aDeliveryReceiptHeadTextDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_DLVRY_RECEIPT_HEAD_TEXT.DELIVERYIDENTITY" +
               ",HAPI_DLVRY_RECEIPT_HEAD_TEXT.ARRIVALDATETIME" +
               ",HAPI_DLVRY_RECEIPT_HEAD_TEXT.TEXTFUNCTION" +
               ",HAPI_DLVRY_RECEIPT_HEAD_TEXT.TEXT" +
        " from   HAPI_DLVRY_RECEIPT_HEAD_TEXT" +
        " where  HAPI_DLVRY_RECEIPT_HEAD_TEXT.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        DeliveryReceiptHeadTextDoc aDeliveryReceiptHeadTextDoc = new DeliveryReceiptHeadTextDoc();

        aDeliveryReceiptHeadTextDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aDeliveryReceiptHeadTextDoc.DeliveryIdentity = null;
        else
        {
          aDeliveryReceiptHeadTextDoc.DeliveryIdentity = r.GetInt32( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aDeliveryReceiptHeadTextDoc.ArrivalDateTime = null;
        else
        {
          aDeliveryReceiptHeadTextDoc.ArrivalDateTime = DateTime.SpecifyKind(r.GetDateTime( 1 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 2 ) )
          aDeliveryReceiptHeadTextDoc.TextFunction = null;
        else
        {
          aDeliveryReceiptHeadTextDoc.TextFunction = r.GetString( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aDeliveryReceiptHeadTextDoc.Text = null;
        else
        {
          aDeliveryReceiptHeadTextDoc.Text = r.GetString( 3 );
        }

        aDeliveryReceiptHeadTextDocList.Add( aDeliveryReceiptHeadTextDoc );
      }

      r.Close();


      return aDeliveryReceiptHeadTextDocList;
    }
  }

  public class DeliveryReceiptLineSelect
  {
    private Database db;
    private DeliveryReceiptLineTextSelect aDeliveryReceiptLineTextSelect;

    public DeliveryReceiptLineSelect(Database db)
    {
      this.db = db;

      aDeliveryReceiptLineTextSelect = new DeliveryReceiptLineTextSelect(this.db);
    }

    public DeliveryReceiptLineDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (DeliveryReceiptLineDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aDeliveryReceiptLineDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_DLVRY_RECEIPT_LINE.DELIVERYIDENTITY" +
               ",HAPI_DLVRY_RECEIPT_LINE.DELIVERYIDENTITYLINE" +
               ",HAPI_DLVRY_RECEIPT_LINE.ARRIVALDATETIME" +
               ",HAPI_DLVRY_RECEIPT_LINE.PRODUCTIDENTITY" +
               ",HAPI_DLVRY_RECEIPT_LINE.PACKAGEIDENTITY" +
               ",HAPI_DLVRY_RECEIPT_LINE.DELIVEREDQUANTITY" +
               ",HAPI_DLVRY_RECEIPT_LINE.MEASUREDQUANTITY" +
               ",HAPI_DLVRY_RECEIPT_LINE.PRODUCTIONLOTIDENTITY" +
               ",HAPI_DLVRY_RECEIPT_LINE.PRODUCTIONSUBLOTIDENTITY" +
               ",HAPI_DLVRY_RECEIPT_LINE.MARKETINGLOTIDENTITY" +
               ",HAPI_DLVRY_RECEIPT_LINE.QUALITYLOTIDENTITY" +
               ",HAPI_DLVRY_RECEIPT_LINE.PURCHASEORDERNUMBER" +
               ",HAPI_DLVRY_RECEIPT_LINE.PURCHASEORDERSEQUENCE" +
               ",HAPI_DLVRY_RECEIPT_LINE.PURCHASEORDERLINEPOSITION" +
               ",HAPI_DLVRY_RECEIPT_LINE.PURCHASEORDERLINESEQUENCE" +
               ",HAPI_DLVRY_RECEIPT_LINE.PURCHASEORDERTYPE" +
               ",HAPI_DLVRY_RECEIPT_LINE.CUSTOMERORDERNUMBER" +
               ",HAPI_DLVRY_RECEIPT_LINE.CUSTOMERORDERSEQUENCE" +
               ",HAPI_DLVRY_RECEIPT_LINE.CUSTOMERORDERLINEPOSITION" +
               ",HAPI_DLVRY_RECEIPT_LINE.CUSTOMERORDERLINEKITPOSITION" +
               ",HAPI_DLVRY_RECEIPT_LINE.CUSTOMERORDERLINESEQUENCE" +
               ",HAPI_DLVRY_RECEIPT_LINE.DESPATCHADVICENOTICEIDENTITY" +
               ",HAPI_DLVRY_RECEIPT_LINE.ITEMLOADIDENTITY" +
               ",HAPI_DLVRY_RECEIPT_LINE.EXPIRYDATE" +
               ",HAPI_DLVRY_RECEIPT_LINE.RETURNSFINISHED" +
               ",HAPI_DLVRY_RECEIPT_LINE.DECIDEDACTIONCODE" +
               ",HAPI_DLVRY_RECEIPT_LINE.FROMPARTYID" +
               ",HAPI_DLVRY_RECEIPT_LINE.FROMPARTYQUALIFIER" +
               ",HAPI_DLVRY_RECEIPT_LINE.CUSTOMERRETURNORDERNUMBER" +
               ",HAPI_DLVRY_RECEIPT_LINE.CUSTOMERRETURNORDERSEQUENCE" +
               ",HAPI_DLVRY_RECEIPT_LINE.CUSTOMERRETURNORDERLINEPOS" +
               ",HAPI_DLVRY_RECEIPT_LINE.CUSTOMERRETURNORDERLINEKITPOS" +
               ",HAPI_DLVRY_RECEIPT_LINE.CUSTOMERRETURNORDERLINESEQ" +
               ",HAPI_DLVRY_RECEIPT_LINE.DISCREPANCYCODE" +
               ",HAPI_DLVRY_RECEIPT_LINE.DISCREPANCYACTIONCODE" +
               ",HAPI_DLVRY_RECEIPT_LINE.MANUFACTURINGDATE" +
               ",HAPI_DLVRY_RECEIPT_LINE.MEASUREQUALIFIER" +
               ",HAPI_DLVRY_RECEIPT_LINE.INVENTORYSTATUSCODE" +
               ",HAPI_DLVRY_RECEIPT_LINE.SERIALNUMBER" +
        " from   HAPI_DLVRY_RECEIPT_LINE" +
        " where  HAPI_DLVRY_RECEIPT_LINE.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        DeliveryReceiptLineDoc aDeliveryReceiptLineDoc = new DeliveryReceiptLineDoc();

        aDeliveryReceiptLineDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aDeliveryReceiptLineDoc.DeliveryIdentity = null;
        else
        {
          aDeliveryReceiptLineDoc.DeliveryIdentity = r.GetInt32( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aDeliveryReceiptLineDoc.DeliveryidentityLine = null;
        else
        {
          aDeliveryReceiptLineDoc.DeliveryidentityLine = r.GetInt32( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aDeliveryReceiptLineDoc.ArrivalDateTime = null;
        else
        {
          aDeliveryReceiptLineDoc.ArrivalDateTime = DateTime.SpecifyKind(r.GetDateTime( 2 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 3 ) )
          aDeliveryReceiptLineDoc.ProductIdentity = null;
        else
        {
          aDeliveryReceiptLineDoc.ProductIdentity = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aDeliveryReceiptLineDoc.PackageIdentity = null;
        else
        {
          aDeliveryReceiptLineDoc.PackageIdentity = r.GetString( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aDeliveryReceiptLineDoc.DeliveredQuantity = null;
        else
        {
          aDeliveryReceiptLineDoc.DeliveredQuantity = Convert.ToDouble( r.GetDecimal( 5 ) );
        }

        if ( r.IsDBNull( 6 ) )
          aDeliveryReceiptLineDoc.MeasuredQuantity = null;
        else
        {
          aDeliveryReceiptLineDoc.MeasuredQuantity = Convert.ToDouble( r.GetDecimal( 6 ) );
        }

        if ( r.IsDBNull( 7 ) )
          aDeliveryReceiptLineDoc.ProductionLotIdentity = null;
        else
        {
          aDeliveryReceiptLineDoc.ProductionLotIdentity = r.GetString( 7 );
        }

        if ( r.IsDBNull( 8 ) )
          aDeliveryReceiptLineDoc.ProductionSubLotIdentity = null;
        else
        {
          aDeliveryReceiptLineDoc.ProductionSubLotIdentity = r.GetString( 8 );
        }

        if ( r.IsDBNull( 9 ) )
          aDeliveryReceiptLineDoc.MarketingLotIdentity = null;
        else
        {
          aDeliveryReceiptLineDoc.MarketingLotIdentity = r.GetString( 9 );
        }

        if ( r.IsDBNull( 10 ) )
          aDeliveryReceiptLineDoc.QualityLotIdentity = null;
        else
        {
          aDeliveryReceiptLineDoc.QualityLotIdentity = r.GetString( 10 );
        }

        if ( r.IsDBNull( 11 ) )
          aDeliveryReceiptLineDoc.PurchaseOrderNumber = null;
        else
        {
          aDeliveryReceiptLineDoc.PurchaseOrderNumber = r.GetString( 11 );
        }

        if ( r.IsDBNull( 12 ) )
          aDeliveryReceiptLineDoc.PurchaseOrderSequence = null;
        else
        {
          aDeliveryReceiptLineDoc.PurchaseOrderSequence = r.GetInt32( 12 );
        }

        if ( r.IsDBNull( 13 ) )
          aDeliveryReceiptLineDoc.PurchaseOrderLinePosition = null;
        else
        {
          aDeliveryReceiptLineDoc.PurchaseOrderLinePosition = r.GetInt32( 13 );
        }

        if ( r.IsDBNull( 14 ) )
          aDeliveryReceiptLineDoc.PurchaseOrderLineSequence = null;
        else
        {
          aDeliveryReceiptLineDoc.PurchaseOrderLineSequence = r.GetInt32( 14 );
        }

        if ( r.IsDBNull( 15 ) )
          aDeliveryReceiptLineDoc.PurchaseOrderType = null;
        else
        {
          aDeliveryReceiptLineDoc.PurchaseOrderType = r.GetString( 15 );
        }

        if ( r.IsDBNull( 16 ) )
          aDeliveryReceiptLineDoc.CustomerOrderNumber = null;
        else
        {
          aDeliveryReceiptLineDoc.CustomerOrderNumber = r.GetString( 16 );
        }

        if ( r.IsDBNull( 17 ) )
          aDeliveryReceiptLineDoc.CustomerOrderSequence = null;
        else
        {
          aDeliveryReceiptLineDoc.CustomerOrderSequence = r.GetInt32( 17 );
        }

        if ( r.IsDBNull( 18 ) )
          aDeliveryReceiptLineDoc.CustomerOrderLinePosition = null;
        else
        {
          aDeliveryReceiptLineDoc.CustomerOrderLinePosition = r.GetInt32( 18 );
        }

        if ( r.IsDBNull( 19 ) )
          aDeliveryReceiptLineDoc.CustomerOrderLineKitPosition = null;
        else
        {
          aDeliveryReceiptLineDoc.CustomerOrderLineKitPosition = r.GetInt32( 19 );
        }

        if ( r.IsDBNull( 20 ) )
          aDeliveryReceiptLineDoc.CustomerOrderLineSequence = null;
        else
        {
          aDeliveryReceiptLineDoc.CustomerOrderLineSequence = r.GetInt32( 20 );
        }

        if ( r.IsDBNull( 21 ) )
          aDeliveryReceiptLineDoc.DespatchadvicenoticeIdentity = null;
        else
        {
          aDeliveryReceiptLineDoc.DespatchadvicenoticeIdentity = r.GetString( 21 );
        }

        if ( r.IsDBNull( 22 ) )
          aDeliveryReceiptLineDoc.ItemLoadIdentity = null;
        else
        {
          aDeliveryReceiptLineDoc.ItemLoadIdentity = r.GetString( 22 );
        }

        if ( r.IsDBNull( 23 ) )
          aDeliveryReceiptLineDoc.ExpiryDate = null;
        else
        {
          aDeliveryReceiptLineDoc.ExpiryDate = DateTime.SpecifyKind(r.GetDateTime( 23 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 24 ) )
          aDeliveryReceiptLineDoc.ReturnsFinished = null;
        else
        {
          aDeliveryReceiptLineDoc.ReturnsFinished = r.GetString( 24 );
        }

        if ( r.IsDBNull( 25 ) )
          aDeliveryReceiptLineDoc.DecidedActionCode = null;
        else
        {
          aDeliveryReceiptLineDoc.DecidedActionCode = r.GetString( 25 );
        }

        if ( r.IsDBNull( 26 ) )
          aDeliveryReceiptLineDoc.FromPartyId = null;
        else
        {
          aDeliveryReceiptLineDoc.FromPartyId = r.GetString( 26 );
        }

        if ( r.IsDBNull( 27 ) )
          aDeliveryReceiptLineDoc.FromPartyQualifier = null;
        else
        {
          aDeliveryReceiptLineDoc.FromPartyQualifier = r.GetString( 27 );
        }

        if ( r.IsDBNull( 28 ) )
          aDeliveryReceiptLineDoc.CustomerReturnOrderNumber = null;
        else
        {
          aDeliveryReceiptLineDoc.CustomerReturnOrderNumber = r.GetString( 28 );
        }

        if ( r.IsDBNull( 29 ) )
          aDeliveryReceiptLineDoc.CustomerReturnOrderSequence = null;
        else
        {
          aDeliveryReceiptLineDoc.CustomerReturnOrderSequence = r.GetInt32( 29 );
        }

        if ( r.IsDBNull( 30 ) )
          aDeliveryReceiptLineDoc.CustomerReturnOrderLinePos = null;
        else
        {
          aDeliveryReceiptLineDoc.CustomerReturnOrderLinePos = r.GetInt32( 30 );
        }

        if ( r.IsDBNull( 31 ) )
          aDeliveryReceiptLineDoc.CustomerReturnOrderLineKitPos = null;
        else
        {
          aDeliveryReceiptLineDoc.CustomerReturnOrderLineKitPos = r.GetInt32( 31 );
        }

        if ( r.IsDBNull( 32 ) )
          aDeliveryReceiptLineDoc.CustomerReturnOrderLineSeq = null;
        else
        {
          aDeliveryReceiptLineDoc.CustomerReturnOrderLineSeq = r.GetInt32( 32 );
        }

        if ( r.IsDBNull( 33 ) )
          aDeliveryReceiptLineDoc.DiscrepancyCode = null;
        else
        {
          aDeliveryReceiptLineDoc.DiscrepancyCode = r.GetString( 33 );
        }

        if ( r.IsDBNull( 34 ) )
          aDeliveryReceiptLineDoc.DiscrepancyActionCode = null;
        else
        {
          aDeliveryReceiptLineDoc.DiscrepancyActionCode = r.GetString( 34 );
        }

        if ( r.IsDBNull( 35 ) )
          aDeliveryReceiptLineDoc.ManufacturingDate = null;
        else
        {
          aDeliveryReceiptLineDoc.ManufacturingDate = DateTime.SpecifyKind(r.GetDateTime( 35 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 36 ) )
          aDeliveryReceiptLineDoc.MeasureQualifier = null;
        else
        {
          aDeliveryReceiptLineDoc.MeasureQualifier = r.GetString( 36 );
        }

        if ( r.IsDBNull( 37 ) )
          aDeliveryReceiptLineDoc.InventoryStatusCode = null;
        else
        {
          aDeliveryReceiptLineDoc.InventoryStatusCode = r.GetString( 37 );
        }

        if ( r.IsDBNull( 38 ) )
          aDeliveryReceiptLineDoc.SerialNumber = null;
        else
        {
          aDeliveryReceiptLineDoc.SerialNumber = r.GetString( 38 );
        }

        aDeliveryReceiptLineDocList.Add( aDeliveryReceiptLineDoc );
      }

      r.Close();

      ArrayList aDeliveryReceiptLineTextDocList = aDeliveryReceiptLineTextSelect.InternalProcess( HapiTransId );

      foreach ( DeliveryReceiptLineDoc aDeliveryReceiptLineDoc in aDeliveryReceiptLineDocList )
      {
        ArrayList ConnectedChildren = null;
        ConnectedChildren = new ArrayList();

        foreach ( DeliveryReceiptLineTextDoc aDeliveryReceiptLineTextDoc in aDeliveryReceiptLineTextDocList )
        {
          if ( GeneratedComparer.EqualDeliveryReceiptLineDocDeliveryReceiptLineTextDoc( aDeliveryReceiptLineDoc, aDeliveryReceiptLineTextDoc ) )
            ConnectedChildren.Add( aDeliveryReceiptLineTextDoc );
        }
        aDeliveryReceiptLineDoc.aDeliveryReceiptLineTextDocs = ConnectedChildren.ToArray(typeof(DeliveryReceiptLineTextDoc)) as DeliveryReceiptLineTextDoc[];
      }

      return aDeliveryReceiptLineDocList;
    }
  }

  public class DeliveryReceiptLineTextSelect
  {
    private Database db;

    public DeliveryReceiptLineTextSelect(Database db)
    {
      this.db = db;

    }

    public DeliveryReceiptLineTextDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (DeliveryReceiptLineTextDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aDeliveryReceiptLineTextDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_DLVRY_RECEIPT_LINE_TEXT.DELIVERYIDENTITY" +
               ",HAPI_DLVRY_RECEIPT_LINE_TEXT.DELIVERYIDENTITYLINE" +
               ",HAPI_DLVRY_RECEIPT_LINE_TEXT.ARRIVALDATETIME" +
               ",HAPI_DLVRY_RECEIPT_LINE_TEXT.TEXTFUNCTION" +
               ",HAPI_DLVRY_RECEIPT_LINE_TEXT.TEXT" +
        " from   HAPI_DLVRY_RECEIPT_LINE_TEXT" +
        " where  HAPI_DLVRY_RECEIPT_LINE_TEXT.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        DeliveryReceiptLineTextDoc aDeliveryReceiptLineTextDoc = new DeliveryReceiptLineTextDoc();

        aDeliveryReceiptLineTextDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aDeliveryReceiptLineTextDoc.DeliveryIdentity = null;
        else
        {
          aDeliveryReceiptLineTextDoc.DeliveryIdentity = r.GetInt32( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aDeliveryReceiptLineTextDoc.DeliveryidentityLine = null;
        else
        {
          aDeliveryReceiptLineTextDoc.DeliveryidentityLine = r.GetInt32( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aDeliveryReceiptLineTextDoc.ArrivalDateTime = null;
        else
        {
          aDeliveryReceiptLineTextDoc.ArrivalDateTime = DateTime.SpecifyKind(r.GetDateTime( 2 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 3 ) )
          aDeliveryReceiptLineTextDoc.TextFunction = null;
        else
        {
          aDeliveryReceiptLineTextDoc.TextFunction = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aDeliveryReceiptLineTextDoc.Text = null;
        else
        {
          aDeliveryReceiptLineTextDoc.Text = r.GetString( 4 );
        }

        aDeliveryReceiptLineTextDocList.Add( aDeliveryReceiptLineTextDoc );
      }

      r.Close();


      return aDeliveryReceiptLineTextDocList;
    }
  }

  public class DeliveryReceiptPackingMaterialSelect
  {
    private Database db;

    public DeliveryReceiptPackingMaterialSelect(Database db)
    {
      this.db = db;

    }

    public DeliveryReceiptPackingMaterialDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (DeliveryReceiptPackingMaterialDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aDeliveryReceiptPackingMaterialDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_DLVRY_RECEIPT_PM.DELIVERYIDENTITY" +
               ",HAPI_DLVRY_RECEIPT_PM.ARRIVALDATETIME" +
               ",HAPI_DLVRY_RECEIPT_PM.PACKINGMATERIALTYPE" +
               ",HAPI_DLVRY_RECEIPT_PM.PACKAGEIDENTITY" +
               ",HAPI_DLVRY_RECEIPT_PM.DELIVEREDQUANTITY" +
               ",HAPI_DLVRY_RECEIPT_PM.VENDORIDENTITY" +
               ",HAPI_DLVRY_RECEIPT_PM.PURCHASEORDERTYPE" +
               ",HAPI_DLVRY_RECEIPT_PM.PURCHASEORDERNUMBER" +
               ",HAPI_DLVRY_RECEIPT_PM.PURCHASEORDERSEQUENCE" +
               ",HAPI_DLVRY_RECEIPT_PM.PURCHASEORDERLINEPOSITION" +
               ",HAPI_DLVRY_RECEIPT_PM.PURCHASEORDERLINESEQUENCE" +
               ",HAPI_DLVRY_RECEIPT_PM.CUSTOMERORDERNUMBER" +
               ",HAPI_DLVRY_RECEIPT_PM.CUSTOMERORDERSEQUENCE" +
               ",HAPI_DLVRY_RECEIPT_PM.CUSTOMERORDERLINEPOSITION" +
               ",HAPI_DLVRY_RECEIPT_PM.CUSTOMERORDERLINEKITPOSITION" +
               ",HAPI_DLVRY_RECEIPT_PM.CUSTOMERORDERLINESEQUENCE" +
               ",HAPI_DLVRY_RECEIPT_PM.FROMPARTYID" +
               ",HAPI_DLVRY_RECEIPT_PM.FROMPARTYQUALIFIER" +
               ",HAPI_DLVRY_RECEIPT_PM.CUSTOMERRETURNORDERNUMBER" +
               ",HAPI_DLVRY_RECEIPT_PM.CUSTOMERRETURNORDERSEQUENCE" +
               ",HAPI_DLVRY_RECEIPT_PM.CUSTOMERRETURNORDERLINEPOS" +
               ",HAPI_DLVRY_RECEIPT_PM.CUSTOMERRETURNORDERLINEKITPOS" +
               ",HAPI_DLVRY_RECEIPT_PM.CUSTOMERRETURNORDERLINESEQ" +
               ",HAPI_DLVRY_RECEIPT_PM.DISCREPANCYCODE" +
               ",HAPI_DLVRY_RECEIPT_PM.DISCREPANCYACTIONCODE" +
               ",HAPI_DLVRY_RECEIPT_PM.SHIPFROMPARTYID" +
               ",HAPI_DLVRY_RECEIPT_PM.SHIPFROMPARTYQUALIFIER" +
               ",HAPI_DLVRY_RECEIPT_PM.PACKINGMATERIALLINE" +
        " from   HAPI_DLVRY_RECEIPT_PM" +
        " where  HAPI_DLVRY_RECEIPT_PM.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        DeliveryReceiptPackingMaterialDoc aDeliveryReceiptPackingMaterialDoc = new DeliveryReceiptPackingMaterialDoc();

        aDeliveryReceiptPackingMaterialDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aDeliveryReceiptPackingMaterialDoc.DeliveryIdentity = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.DeliveryIdentity = r.GetInt32( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aDeliveryReceiptPackingMaterialDoc.ArrivalDateTime = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.ArrivalDateTime = DateTime.SpecifyKind(r.GetDateTime( 1 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 2 ) )
          aDeliveryReceiptPackingMaterialDoc.PackingMaterialType = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.PackingMaterialType = r.GetString( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aDeliveryReceiptPackingMaterialDoc.PackageIdentity = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.PackageIdentity = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aDeliveryReceiptPackingMaterialDoc.DeliveredQuantity = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.DeliveredQuantity = Convert.ToDouble( r.GetDecimal( 4 ) );
        }

        if ( r.IsDBNull( 5 ) )
          aDeliveryReceiptPackingMaterialDoc.VendorIdentity = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.VendorIdentity = r.GetString( 5 );
        }

        if ( r.IsDBNull( 6 ) )
          aDeliveryReceiptPackingMaterialDoc.PurchaseOrderType = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.PurchaseOrderType = r.GetString( 6 );
        }

        if ( r.IsDBNull( 7 ) )
          aDeliveryReceiptPackingMaterialDoc.PurchaseOrderNumber = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.PurchaseOrderNumber = r.GetString( 7 );
        }

        if ( r.IsDBNull( 8 ) )
          aDeliveryReceiptPackingMaterialDoc.PurchaseOrderSequence = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.PurchaseOrderSequence = r.GetInt32( 8 );
        }

        if ( r.IsDBNull( 9 ) )
          aDeliveryReceiptPackingMaterialDoc.PurchaseOrderLinePosition = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.PurchaseOrderLinePosition = r.GetInt32( 9 );
        }

        if ( r.IsDBNull( 10 ) )
          aDeliveryReceiptPackingMaterialDoc.PurchaseOrderLineSequence = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.PurchaseOrderLineSequence = r.GetInt32( 10 );
        }

        if ( r.IsDBNull( 11 ) )
          aDeliveryReceiptPackingMaterialDoc.CustomerOrderNumber = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.CustomerOrderNumber = r.GetString( 11 );
        }

        if ( r.IsDBNull( 12 ) )
          aDeliveryReceiptPackingMaterialDoc.CustomerOrderSequence = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.CustomerOrderSequence = r.GetInt32( 12 );
        }

        if ( r.IsDBNull( 13 ) )
          aDeliveryReceiptPackingMaterialDoc.CustomerOrderLinePosition = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.CustomerOrderLinePosition = r.GetInt32( 13 );
        }

        if ( r.IsDBNull( 14 ) )
          aDeliveryReceiptPackingMaterialDoc.CustomerOrderLineKitPosition = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.CustomerOrderLineKitPosition = r.GetInt32( 14 );
        }

        if ( r.IsDBNull( 15 ) )
          aDeliveryReceiptPackingMaterialDoc.CustomerOrderLineSequence = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.CustomerOrderLineSequence = r.GetInt32( 15 );
        }

        if ( r.IsDBNull( 16 ) )
          aDeliveryReceiptPackingMaterialDoc.FromPartyId = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.FromPartyId = r.GetString( 16 );
        }

        if ( r.IsDBNull( 17 ) )
          aDeliveryReceiptPackingMaterialDoc.FromPartyQualifier = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.FromPartyQualifier = r.GetString( 17 );
        }

        if ( r.IsDBNull( 18 ) )
          aDeliveryReceiptPackingMaterialDoc.CustomerReturnOrderNumber = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.CustomerReturnOrderNumber = r.GetString( 18 );
        }

        if ( r.IsDBNull( 19 ) )
          aDeliveryReceiptPackingMaterialDoc.CustomerReturnOrderSequence = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.CustomerReturnOrderSequence = r.GetInt32( 19 );
        }

        if ( r.IsDBNull( 20 ) )
          aDeliveryReceiptPackingMaterialDoc.CustomerReturnOrderLinePos = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.CustomerReturnOrderLinePos = r.GetInt32( 20 );
        }

        if ( r.IsDBNull( 21 ) )
          aDeliveryReceiptPackingMaterialDoc.CustomerReturnOrderLineKitPos = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.CustomerReturnOrderLineKitPos = r.GetInt32( 21 );
        }

        if ( r.IsDBNull( 22 ) )
          aDeliveryReceiptPackingMaterialDoc.CustomerReturnOrderLineSeq = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.CustomerReturnOrderLineSeq = r.GetInt32( 22 );
        }

        if ( r.IsDBNull( 23 ) )
          aDeliveryReceiptPackingMaterialDoc.DiscrepancyCode = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.DiscrepancyCode = r.GetString( 23 );
        }

        if ( r.IsDBNull( 24 ) )
          aDeliveryReceiptPackingMaterialDoc.DiscrepancyActionCode = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.DiscrepancyActionCode = r.GetString( 24 );
        }

        if ( r.IsDBNull( 25 ) )
          aDeliveryReceiptPackingMaterialDoc.ShipFromPartyId = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.ShipFromPartyId = r.GetString( 25 );
        }

        if ( r.IsDBNull( 26 ) )
          aDeliveryReceiptPackingMaterialDoc.ShipFromPartyQualifier = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.ShipFromPartyQualifier = r.GetString( 26 );
        }

        if ( r.IsDBNull( 27 ) )
          aDeliveryReceiptPackingMaterialDoc.PackingMaterialLine = null;
        else
        {
          aDeliveryReceiptPackingMaterialDoc.PackingMaterialLine = r.GetInt32( 27 );
        }

        aDeliveryReceiptPackingMaterialDocList.Add( aDeliveryReceiptPackingMaterialDoc );
      }

      r.Close();


      return aDeliveryReceiptPackingMaterialDocList;
    }
  }

  public class InspectionReceiptHeadSelect
  {
    private Database db;
    private InspectionReceiptLineSelect aInspectionReceiptLineSelect;

    public InspectionReceiptHeadSelect(Database db)
    {
      this.db = db;

      aInspectionReceiptLineSelect = new InspectionReceiptLineSelect(this.db);
    }

    public InspectionReceiptHeadDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (InspectionReceiptHeadDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aInspectionReceiptHeadDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_INSPECTION_RECEIPT_HEAD.WAREHOUSEIDENTITY" +
               ",HAPI_INSPECTION_RECEIPT_HEAD.EMPLOYEEIDENTITY" +
               ",HAPI_INSPECTION_RECEIPT_HEAD.RETURNHANDLEDDATETIME" +
        " from   HAPI_INSPECTION_RECEIPT_HEAD" +
        " where  HAPI_INSPECTION_RECEIPT_HEAD.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        InspectionReceiptHeadDoc aInspectionReceiptHeadDoc = new InspectionReceiptHeadDoc();

        aInspectionReceiptHeadDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aInspectionReceiptHeadDoc.WarehouseIdentity = null;
        else
        {
          aInspectionReceiptHeadDoc.WarehouseIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aInspectionReceiptHeadDoc.EmployeeIdentity = null;
        else
        {
          aInspectionReceiptHeadDoc.EmployeeIdentity = r.GetString( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aInspectionReceiptHeadDoc.ReturnhandleddateTime = null;
        else
        {
          aInspectionReceiptHeadDoc.ReturnhandleddateTime = DateTime.SpecifyKind(r.GetDateTime( 2 ), DateTimeKind.Local);
        }

        aInspectionReceiptHeadDocList.Add( aInspectionReceiptHeadDoc );
      }

      r.Close();

      ArrayList aInspectionReceiptLineDocList = aInspectionReceiptLineSelect.InternalProcess( HapiTransId );

      foreach ( InspectionReceiptHeadDoc aInspectionReceiptHeadDoc in aInspectionReceiptHeadDocList )
      {
        ArrayList ConnectedChildren = null;
        ConnectedChildren = new ArrayList();

        foreach ( InspectionReceiptLineDoc aInspectionReceiptLineDoc in aInspectionReceiptLineDocList )
        {
          if ( GeneratedComparer.EqualInspectionReceiptHeadDocInspectionReceiptLineDoc( aInspectionReceiptHeadDoc, aInspectionReceiptLineDoc ) )
            ConnectedChildren.Add( aInspectionReceiptLineDoc );
        }
        aInspectionReceiptHeadDoc.aInspectionReceiptLineDocs = ConnectedChildren.ToArray(typeof(InspectionReceiptLineDoc)) as InspectionReceiptLineDoc[];
      }

      return aInspectionReceiptHeadDocList;
    }
  }

  public class InspectionReceiptLineSelect
  {
    private Database db;
    private InspectionReceiptLinePackingMaterialSelect aInspectionReceiptLinePackingMaterialSelect;

    public InspectionReceiptLineSelect(Database db)
    {
      this.db = db;

      aInspectionReceiptLinePackingMaterialSelect = new InspectionReceiptLinePackingMaterialSelect(this.db);
    }

    public InspectionReceiptLineDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (InspectionReceiptLineDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aInspectionReceiptLineDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_INSPECTION_RECEIPT_LINE.WORKORDERIDENTITY" +
               ",HAPI_INSPECTION_RECEIPT_LINE.WORKORDERLINE" +
               ",HAPI_INSPECTION_RECEIPT_LINE.WORKORDERLINESEQ" +
               ",HAPI_INSPECTION_RECEIPT_LINE.PRODUCTIDENTITY" +
               ",HAPI_INSPECTION_RECEIPT_LINE.PACKAGEIDENTITY" +
               ",HAPI_INSPECTION_RECEIPT_LINE.INSPECTEDQUANTITY" +
               ",HAPI_INSPECTION_RECEIPT_LINE.DECIDEDACTIONCODE" +
               ",HAPI_INSPECTION_RECEIPT_LINE.CUSTOMERRETURNORDERNUMBER" +
               ",HAPI_INSPECTION_RECEIPT_LINE.CUSTOMERRETURNORDERSEQUENCE" +
               ",HAPI_INSPECTION_RECEIPT_LINE.CUSTOMERRETURNORDERLINEPOS" +
               ",HAPI_INSPECTION_RECEIPT_LINE.CUSTOMERRETURNORDERLINEKITPOS" +
               ",HAPI_INSPECTION_RECEIPT_LINE.CUSTOMERRETURNORDERLINESEQ" +
               ",HAPI_INSPECTION_RECEIPT_LINE.DELIVERYIDENTITY" +
               ",HAPI_INSPECTION_RECEIPT_LINE.DELIVERYIDENTITYLINE" +
               ",HAPI_INSPECTION_RECEIPT_LINE.MEASUREDQUANTITY" +
               ",HAPI_INSPECTION_RECEIPT_LINE.INVENTORYSTATUSCODE" +
               ",HAPI_INSPECTION_RECEIPT_LINE.PRODUCTIONLOTIDENTITY" +
               ",HAPI_INSPECTION_RECEIPT_LINE.PRODUCTIONSUBLOTIDENTITY" +
               ",HAPI_INSPECTION_RECEIPT_LINE.MARKETINGLOTIDENTITY" +
               ",HAPI_INSPECTION_RECEIPT_LINE.QUALITYLOTIDENTITY" +
               ",HAPI_INSPECTION_RECEIPT_LINE.ITEMLOADIDENTITY" +
               ",HAPI_INSPECTION_RECEIPT_LINE.EXPIRYDATE" +
               ",HAPI_INSPECTION_RECEIPT_LINE.FROMPARTYID" +
               ",HAPI_INSPECTION_RECEIPT_LINE.FROMPARTYQUALIFIER" +
               ",HAPI_INSPECTION_RECEIPT_LINE.SHIPTOCUSTOMERIDENTITY" +
               ",HAPI_INSPECTION_RECEIPT_LINE.SHIPTOCUSTOMERQUALIFIER" +
        " from   HAPI_INSPECTION_RECEIPT_LINE" +
        " where  HAPI_INSPECTION_RECEIPT_LINE.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        InspectionReceiptLineDoc aInspectionReceiptLineDoc = new InspectionReceiptLineDoc();

        aInspectionReceiptLineDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aInspectionReceiptLineDoc.WorkOrderIdentity = null;
        else
        {
          aInspectionReceiptLineDoc.WorkOrderIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aInspectionReceiptLineDoc.WorkOrderLine = null;
        else
        {
          aInspectionReceiptLineDoc.WorkOrderLine = r.GetInt32( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aInspectionReceiptLineDoc.WorkOrderLineSeq = null;
        else
        {
          aInspectionReceiptLineDoc.WorkOrderLineSeq = r.GetInt32( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aInspectionReceiptLineDoc.ProductIdentity = null;
        else
        {
          aInspectionReceiptLineDoc.ProductIdentity = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aInspectionReceiptLineDoc.PackageIdentity = null;
        else
        {
          aInspectionReceiptLineDoc.PackageIdentity = r.GetString( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aInspectionReceiptLineDoc.InspectedQuantity = null;
        else
        {
          aInspectionReceiptLineDoc.InspectedQuantity = Convert.ToDouble( r.GetDecimal( 5 ) );
        }

        if ( r.IsDBNull( 6 ) )
          aInspectionReceiptLineDoc.DecidedActionCode = null;
        else
        {
          aInspectionReceiptLineDoc.DecidedActionCode = r.GetString( 6 );
        }

        if ( r.IsDBNull( 7 ) )
          aInspectionReceiptLineDoc.CustomerReturnOrderNumber = null;
        else
        {
          aInspectionReceiptLineDoc.CustomerReturnOrderNumber = r.GetString( 7 );
        }

        if ( r.IsDBNull( 8 ) )
          aInspectionReceiptLineDoc.CustomerReturnOrderSequence = null;
        else
        {
          aInspectionReceiptLineDoc.CustomerReturnOrderSequence = r.GetInt32( 8 );
        }

        if ( r.IsDBNull( 9 ) )
          aInspectionReceiptLineDoc.CustomerReturnOrderLinePos = null;
        else
        {
          aInspectionReceiptLineDoc.CustomerReturnOrderLinePos = r.GetInt32( 9 );
        }

        if ( r.IsDBNull( 10 ) )
          aInspectionReceiptLineDoc.CustomerReturnOrderLineKitPos = null;
        else
        {
          aInspectionReceiptLineDoc.CustomerReturnOrderLineKitPos = r.GetInt32( 10 );
        }

        if ( r.IsDBNull( 11 ) )
          aInspectionReceiptLineDoc.CustomerReturnOrderLineSeq = null;
        else
        {
          aInspectionReceiptLineDoc.CustomerReturnOrderLineSeq = r.GetInt32( 11 );
        }

        if ( r.IsDBNull( 12 ) )
          aInspectionReceiptLineDoc.DeliveryIdentity = null;
        else
        {
          aInspectionReceiptLineDoc.DeliveryIdentity = r.GetInt32( 12 );
        }

        if ( r.IsDBNull( 13 ) )
          aInspectionReceiptLineDoc.DeliveryidentityLine = null;
        else
        {
          aInspectionReceiptLineDoc.DeliveryidentityLine = r.GetInt32( 13 );
        }

        if ( r.IsDBNull( 14 ) )
          aInspectionReceiptLineDoc.MeasuredQuantity = null;
        else
        {
          aInspectionReceiptLineDoc.MeasuredQuantity = Convert.ToDouble( r.GetDecimal( 14 ) );
        }

        if ( r.IsDBNull( 15 ) )
          aInspectionReceiptLineDoc.InventoryStatusCode = null;
        else
        {
          aInspectionReceiptLineDoc.InventoryStatusCode = r.GetString( 15 );
        }

        if ( r.IsDBNull( 16 ) )
          aInspectionReceiptLineDoc.ProductionLotIdentity = null;
        else
        {
          aInspectionReceiptLineDoc.ProductionLotIdentity = r.GetString( 16 );
        }

        if ( r.IsDBNull( 17 ) )
          aInspectionReceiptLineDoc.ProductionSubLotIdentity = null;
        else
        {
          aInspectionReceiptLineDoc.ProductionSubLotIdentity = r.GetString( 17 );
        }

        if ( r.IsDBNull( 18 ) )
          aInspectionReceiptLineDoc.MarketingLotIdentity = null;
        else
        {
          aInspectionReceiptLineDoc.MarketingLotIdentity = r.GetString( 18 );
        }

        if ( r.IsDBNull( 19 ) )
          aInspectionReceiptLineDoc.QualityLotIdentity = null;
        else
        {
          aInspectionReceiptLineDoc.QualityLotIdentity = r.GetString( 19 );
        }

        if ( r.IsDBNull( 20 ) )
          aInspectionReceiptLineDoc.ItemLoadIdentity = null;
        else
        {
          aInspectionReceiptLineDoc.ItemLoadIdentity = r.GetString( 20 );
        }

        if ( r.IsDBNull( 21 ) )
          aInspectionReceiptLineDoc.ExpiryDate = null;
        else
        {
          aInspectionReceiptLineDoc.ExpiryDate = DateTime.SpecifyKind(r.GetDateTime( 21 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 22 ) )
          aInspectionReceiptLineDoc.FromPartyId = null;
        else
        {
          aInspectionReceiptLineDoc.FromPartyId = r.GetString( 22 );
        }

        if ( r.IsDBNull( 23 ) )
          aInspectionReceiptLineDoc.FromPartyQualifier = null;
        else
        {
          aInspectionReceiptLineDoc.FromPartyQualifier = r.GetString( 23 );
        }

        if ( r.IsDBNull( 24 ) )
          aInspectionReceiptLineDoc.ShipToCustomerIdentity = null;
        else
        {
          aInspectionReceiptLineDoc.ShipToCustomerIdentity = r.GetString( 24 );
        }

        if ( r.IsDBNull( 25 ) )
          aInspectionReceiptLineDoc.ShipToCustomerQualifier = null;
        else
        {
          aInspectionReceiptLineDoc.ShipToCustomerQualifier = r.GetString( 25 );
        }

        aInspectionReceiptLineDocList.Add( aInspectionReceiptLineDoc );
      }

      r.Close();

      ArrayList aInspectionReceiptLinePackingMaterialDocList = aInspectionReceiptLinePackingMaterialSelect.InternalProcess( HapiTransId );

      foreach ( InspectionReceiptLineDoc aInspectionReceiptLineDoc in aInspectionReceiptLineDocList )
      {
        ArrayList ConnectedChildren = null;
        ConnectedChildren = new ArrayList();

        foreach ( InspectionReceiptLinePackingMaterialDoc aInspectionReceiptLinePackingMaterialDoc in aInspectionReceiptLinePackingMaterialDocList )
        {
          if ( GeneratedComparer.EqualInspectionReceiptLineDocInspectionReceiptLinePackingMaterialDoc( aInspectionReceiptLineDoc, aInspectionReceiptLinePackingMaterialDoc ) )
            ConnectedChildren.Add( aInspectionReceiptLinePackingMaterialDoc );
        }
        aInspectionReceiptLineDoc.aInspectionReceiptLinePackingMaterialDocs = ConnectedChildren.ToArray(typeof(InspectionReceiptLinePackingMaterialDoc)) as InspectionReceiptLinePackingMaterialDoc[];
      }

      return aInspectionReceiptLineDocList;
    }
  }

  public class InspectionReceiptLinePackingMaterialSelect
  {
    private Database db;

    public InspectionReceiptLinePackingMaterialSelect(Database db)
    {
      this.db = db;

    }

    public InspectionReceiptLinePackingMaterialDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (InspectionReceiptLinePackingMaterialDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aInspectionReceiptLinePackingMaterialDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_INSPECTION_RECEIPT_LINEPM.WORKORDERIDENTITY" +
               ",HAPI_INSPECTION_RECEIPT_LINEPM.WORKORDERLINE" +
               ",HAPI_INSPECTION_RECEIPT_LINEPM.WORKORDERLINESEQ" +
               ",HAPI_INSPECTION_RECEIPT_LINEPM.WORKORDERLINEPMSEQ" +
               ",HAPI_INSPECTION_RECEIPT_LINEPM.PACKINGMATERIALIDENTITY" +
               ",HAPI_INSPECTION_RECEIPT_LINEPM.PACKAGEIDENTITY" +
               ",HAPI_INSPECTION_RECEIPT_LINEPM.INSPECTEDPMQUANTITY" +
               ",HAPI_INSPECTION_RECEIPT_LINEPM.DECIDEDACTIONCODE" +
               ",HAPI_INSPECTION_RECEIPT_LINEPM.CUSTOMERRETURNORDERNUMBER" +
               ",HAPI_INSPECTION_RECEIPT_LINEPM.CUSTOMERRETURNORDERSEQUENCE" +
               ",HAPI_INSPECTION_RECEIPT_LINEPM.CUSTOMERRETURNORDERLINEPOS" +
               ",HAPI_INSPECTION_RECEIPT_LINEPM.CUSTOMERRETURNORDERLINEKITPOS" +
               ",HAPI_INSPECTION_RECEIPT_LINEPM.CUSTOMERRETURNORDERLINESEQ" +
               ",HAPI_INSPECTION_RECEIPT_LINEPM.DELIVERYIDENTITY" +
               ",HAPI_INSPECTION_RECEIPT_LINEPM.DELIVERYIDENTITYLINE" +
               ",HAPI_INSPECTION_RECEIPT_LINEPM.FROMPARTYID" +
               ",HAPI_INSPECTION_RECEIPT_LINEPM.FROMPARTYQUALIFIER" +
               ",HAPI_INSPECTION_RECEIPT_LINEPM.CUSTOMERORDERNUMBER" +
               ",HAPI_INSPECTION_RECEIPT_LINEPM.CUSTOMERORDERSEQUENCE" +
        " from   HAPI_INSPECTION_RECEIPT_LINEPM" +
        " where  HAPI_INSPECTION_RECEIPT_LINEPM.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        InspectionReceiptLinePackingMaterialDoc aInspectionReceiptLinePackingMaterialDoc = new InspectionReceiptLinePackingMaterialDoc();

        aInspectionReceiptLinePackingMaterialDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aInspectionReceiptLinePackingMaterialDoc.WorkOrderIdentity = null;
        else
        {
          aInspectionReceiptLinePackingMaterialDoc.WorkOrderIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aInspectionReceiptLinePackingMaterialDoc.WorkOrderLine = null;
        else
        {
          aInspectionReceiptLinePackingMaterialDoc.WorkOrderLine = r.GetInt32( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aInspectionReceiptLinePackingMaterialDoc.WorkOrderLineSeq = null;
        else
        {
          aInspectionReceiptLinePackingMaterialDoc.WorkOrderLineSeq = r.GetInt32( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aInspectionReceiptLinePackingMaterialDoc.WorkOrderLinePmSeq = null;
        else
        {
          aInspectionReceiptLinePackingMaterialDoc.WorkOrderLinePmSeq = r.GetInt32( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aInspectionReceiptLinePackingMaterialDoc.PackingMaterialIdentity = null;
        else
        {
          aInspectionReceiptLinePackingMaterialDoc.PackingMaterialIdentity = r.GetString( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aInspectionReceiptLinePackingMaterialDoc.PackageIdentity = null;
        else
        {
          aInspectionReceiptLinePackingMaterialDoc.PackageIdentity = r.GetString( 5 );
        }

        if ( r.IsDBNull( 6 ) )
          aInspectionReceiptLinePackingMaterialDoc.InspectedPmQuantity = null;
        else
        {
          aInspectionReceiptLinePackingMaterialDoc.InspectedPmQuantity = Convert.ToDouble( r.GetDecimal( 6 ) );
        }

        if ( r.IsDBNull( 7 ) )
          aInspectionReceiptLinePackingMaterialDoc.DecidedActionCode = null;
        else
        {
          aInspectionReceiptLinePackingMaterialDoc.DecidedActionCode = r.GetString( 7 );
        }

        if ( r.IsDBNull( 8 ) )
          aInspectionReceiptLinePackingMaterialDoc.CustomerReturnOrderNumber = null;
        else
        {
          aInspectionReceiptLinePackingMaterialDoc.CustomerReturnOrderNumber = r.GetString( 8 );
        }

        if ( r.IsDBNull( 9 ) )
          aInspectionReceiptLinePackingMaterialDoc.CustomerReturnOrderSequence = null;
        else
        {
          aInspectionReceiptLinePackingMaterialDoc.CustomerReturnOrderSequence = r.GetInt32( 9 );
        }

        if ( r.IsDBNull( 10 ) )
          aInspectionReceiptLinePackingMaterialDoc.CustomerReturnOrderLinePos = null;
        else
        {
          aInspectionReceiptLinePackingMaterialDoc.CustomerReturnOrderLinePos = r.GetInt32( 10 );
        }

        if ( r.IsDBNull( 11 ) )
          aInspectionReceiptLinePackingMaterialDoc.CustomerReturnOrderLineKitPos = null;
        else
        {
          aInspectionReceiptLinePackingMaterialDoc.CustomerReturnOrderLineKitPos = r.GetInt32( 11 );
        }

        if ( r.IsDBNull( 12 ) )
          aInspectionReceiptLinePackingMaterialDoc.CustomerReturnOrderLineSeq = null;
        else
        {
          aInspectionReceiptLinePackingMaterialDoc.CustomerReturnOrderLineSeq = r.GetInt32( 12 );
        }

        if ( r.IsDBNull( 13 ) )
          aInspectionReceiptLinePackingMaterialDoc.DeliveryIdentity = null;
        else
        {
          aInspectionReceiptLinePackingMaterialDoc.DeliveryIdentity = r.GetInt32( 13 );
        }

        if ( r.IsDBNull( 14 ) )
          aInspectionReceiptLinePackingMaterialDoc.DeliveryidentityLine = null;
        else
        {
          aInspectionReceiptLinePackingMaterialDoc.DeliveryidentityLine = r.GetInt32( 14 );
        }

        if ( r.IsDBNull( 15 ) )
          aInspectionReceiptLinePackingMaterialDoc.FromPartyId = null;
        else
        {
          aInspectionReceiptLinePackingMaterialDoc.FromPartyId = r.GetString( 15 );
        }

        if ( r.IsDBNull( 16 ) )
          aInspectionReceiptLinePackingMaterialDoc.FromPartyQualifier = null;
        else
        {
          aInspectionReceiptLinePackingMaterialDoc.FromPartyQualifier = r.GetString( 16 );
        }

        if ( r.IsDBNull( 17 ) )
          aInspectionReceiptLinePackingMaterialDoc.CustomerOrderNumber = null;
        else
        {
          aInspectionReceiptLinePackingMaterialDoc.CustomerOrderNumber = r.GetString( 17 );
        }

        if ( r.IsDBNull( 18 ) )
          aInspectionReceiptLinePackingMaterialDoc.CustomerOrderSequence = null;
        else
        {
          aInspectionReceiptLinePackingMaterialDoc.CustomerOrderSequence = r.GetString( 18 );
        }

        aInspectionReceiptLinePackingMaterialDocList.Add( aInspectionReceiptLinePackingMaterialDoc );
      }

      r.Close();


      return aInspectionReceiptLinePackingMaterialDocList;
    }
  }

  public class InventoryChangeLineSelect
  {
    private Database db;

    public InventoryChangeLineSelect(Database db)
    {
      this.db = db;

    }

    public InventoryChangeLineDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (InventoryChangeLineDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aInventoryChangeLineDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_INVENTORY_CHANGE.EMPLOYEEID" +
               ",HAPI_INVENTORY_CHANGE.TIMESTAMP" +
               ",HAPI_INVENTORY_CHANGE.ITEMLOADIDENTITY" +
               ",HAPI_INVENTORY_CHANGE.OPERATIONCODE" +
               ",HAPI_INVENTORY_CHANGE.INVENTORYCHANGECODE" +
               ",HAPI_INVENTORY_CHANGE.INVENTORYCHANGETEXT" +
               ",HAPI_INVENTORY_CHANGE.DESPATCHADVICEIDENTITY" +
               ",HAPI_INVENTORY_CHANGE.PURCHASEORDERNUMBER" +
               ",HAPI_INVENTORY_CHANGE.PURCHASEORDERSEQUENCE" +
               ",HAPI_INVENTORY_CHANGE.PURCHASEORDERLINEPOSITION" +
               ",HAPI_INVENTORY_CHANGE.PURCHASEORDERLINESEQUENCE" +
               ",HAPI_INVENTORY_CHANGE.VENDORIDENTITY" +
               ",HAPI_INVENTORY_CHANGE.VENDORIDENTITY2" +
               ",HAPI_INVENTORY_CHANGE.OWNERIDENTITY" +
               ",HAPI_INVENTORY_CHANGE.OWNERIDENTITY2" +
               ",HAPI_INVENTORY_CHANGE.PRODUCTNUMBER" +
               ",HAPI_INVENTORY_CHANGE.PRODUCTNUMBER2" +
               ",HAPI_INVENTORY_CHANGE.PRODUCTDATE" +
               ",HAPI_INVENTORY_CHANGE.PRODUCTDATE2" +
               ",HAPI_INVENTORY_CHANGE.PACKAGEIDENTITY" +
               ",HAPI_INVENTORY_CHANGE.PACKAGEIDENTITY2" +
               ",HAPI_INVENTORY_CHANGE.QUANTITY" +
               ",HAPI_INVENTORY_CHANGE.QUANTITY2" +
               ",HAPI_INVENTORY_CHANGE.MEASUREDQTY" +
               ",HAPI_INVENTORY_CHANGE.MEASUREDQTY2" +
               ",HAPI_INVENTORY_CHANGE.INVENTORYSTATUSCODE" +
               ",HAPI_INVENTORY_CHANGE.INVENTORYSTATUSCODE2" +
               ",HAPI_INVENTORY_CHANGE.PRODUCTIONLOTIDENTITY" +
               ",HAPI_INVENTORY_CHANGE.PRODUCTIONLOTIDENTITY2" +
               ",HAPI_INVENTORY_CHANGE.PRODUCTIONSUBLOTIDENTITY" +
               ",HAPI_INVENTORY_CHANGE.PRODUCTIONSUBLOTIDENTITY2" +
               ",HAPI_INVENTORY_CHANGE.MARKETINGLOTIDENTITY" +
               ",HAPI_INVENTORY_CHANGE.MARKETINGLOTIDENTITY2" +
               ",HAPI_INVENTORY_CHANGE.QUALITYLOTIDENTITY" +
               ",HAPI_INVENTORY_CHANGE.QUALITYLOTIDENTITY2" +
               ",HAPI_INVENTORY_CHANGE.WAREHOUSEIDENTITY" +
               ",HAPI_INVENTORY_CHANGE.CUSTOMERORDERNUMBER" +
               ",HAPI_INVENTORY_CHANGE.CUSTOMERORDERSEQUENCE" +
               ",HAPI_INVENTORY_CHANGE.CUSTOMERORDERLINEPOSITION" +
               ",HAPI_INVENTORY_CHANGE.CUSTOMERORDERLINEKITPOSITION" +
               ",HAPI_INVENTORY_CHANGE.CUSTOMERORDERLINESEQUENCE" +
               ",HAPI_INVENTORY_CHANGE.REASONCODE" +
               ",HAPI_INVENTORY_CHANGE.FREETEXT" +
               ",HAPI_INVENTORY_CHANGE.SERIALNUMBER" +
               ",HAPI_INVENTORY_CHANGE.SERIALNUMBER2" +
        " from   HAPI_INVENTORY_CHANGE" +
        " where  HAPI_INVENTORY_CHANGE.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        InventoryChangeLineDoc aInventoryChangeLineDoc = new InventoryChangeLineDoc();

        aInventoryChangeLineDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aInventoryChangeLineDoc.EmployeeId = null;
        else
        {
          aInventoryChangeLineDoc.EmployeeId = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aInventoryChangeLineDoc.TimeStamp = null;
        else
        {
          aInventoryChangeLineDoc.TimeStamp = DateTime.SpecifyKind(r.GetDateTime( 1 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 2 ) )
          aInventoryChangeLineDoc.ItemLoadIdentity = null;
        else
        {
          aInventoryChangeLineDoc.ItemLoadIdentity = r.GetString( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aInventoryChangeLineDoc.OperationCode = null;
        else
        {
          aInventoryChangeLineDoc.OperationCode = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aInventoryChangeLineDoc.InventoryChangeCode = null;
        else
        {
          aInventoryChangeLineDoc.InventoryChangeCode = r.GetString( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aInventoryChangeLineDoc.InventoryChangeText = null;
        else
        {
          aInventoryChangeLineDoc.InventoryChangeText = r.GetString( 5 );
        }

        if ( r.IsDBNull( 6 ) )
          aInventoryChangeLineDoc.DespatchadviceIdentity = null;
        else
        {
          aInventoryChangeLineDoc.DespatchadviceIdentity = r.GetString( 6 );
        }

        if ( r.IsDBNull( 7 ) )
          aInventoryChangeLineDoc.PurchaseOrderNumber = null;
        else
        {
          aInventoryChangeLineDoc.PurchaseOrderNumber = r.GetString( 7 );
        }

        if ( r.IsDBNull( 8 ) )
          aInventoryChangeLineDoc.PurchaseOrderSequence = null;
        else
        {
          aInventoryChangeLineDoc.PurchaseOrderSequence = r.GetInt32( 8 );
        }

        if ( r.IsDBNull( 9 ) )
          aInventoryChangeLineDoc.PurchaseOrderLinePosition = null;
        else
        {
          aInventoryChangeLineDoc.PurchaseOrderLinePosition = r.GetInt32( 9 );
        }

        if ( r.IsDBNull( 10 ) )
          aInventoryChangeLineDoc.PurchaseOrderLineSequence = null;
        else
        {
          aInventoryChangeLineDoc.PurchaseOrderLineSequence = r.GetInt32( 10 );
        }

        if ( r.IsDBNull( 11 ) )
          aInventoryChangeLineDoc.VendorIdentity = null;
        else
        {
          aInventoryChangeLineDoc.VendorIdentity = r.GetString( 11 );
        }

        if ( r.IsDBNull( 12 ) )
          aInventoryChangeLineDoc.VendorIdentity2 = null;
        else
        {
          aInventoryChangeLineDoc.VendorIdentity2 = r.GetString( 12 );
        }

        if ( r.IsDBNull( 13 ) )
          aInventoryChangeLineDoc.OwnerIdentity = null;
        else
        {
          aInventoryChangeLineDoc.OwnerIdentity = r.GetString( 13 );
        }

        if ( r.IsDBNull( 14 ) )
          aInventoryChangeLineDoc.OwnerIdentity2 = null;
        else
        {
          aInventoryChangeLineDoc.OwnerIdentity2 = r.GetString( 14 );
        }

        if ( r.IsDBNull( 15 ) )
          aInventoryChangeLineDoc.ProductNumber = null;
        else
        {
          aInventoryChangeLineDoc.ProductNumber = r.GetString( 15 );
        }

        if ( r.IsDBNull( 16 ) )
          aInventoryChangeLineDoc.ProductNumber2 = null;
        else
        {
          aInventoryChangeLineDoc.ProductNumber2 = r.GetString( 16 );
        }

        if ( r.IsDBNull( 17 ) )
          aInventoryChangeLineDoc.ProductDate = null;
        else
        {
          aInventoryChangeLineDoc.ProductDate = DateTime.SpecifyKind(r.GetDateTime( 17 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 18 ) )
          aInventoryChangeLineDoc.ProductDate2 = null;
        else
        {
          aInventoryChangeLineDoc.ProductDate2 = DateTime.SpecifyKind(r.GetDateTime( 18 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 19 ) )
          aInventoryChangeLineDoc.PackageIdentity = null;
        else
        {
          aInventoryChangeLineDoc.PackageIdentity = r.GetString( 19 );
        }

        if ( r.IsDBNull( 20 ) )
          aInventoryChangeLineDoc.PackageIdentity2 = null;
        else
        {
          aInventoryChangeLineDoc.PackageIdentity2 = r.GetString( 20 );
        }

        if ( r.IsDBNull( 21 ) )
          aInventoryChangeLineDoc.Quantity = null;
        else
        {
          aInventoryChangeLineDoc.Quantity = Convert.ToDouble( r.GetDecimal( 21 ) );
        }

        if ( r.IsDBNull( 22 ) )
          aInventoryChangeLineDoc.Quantity2 = null;
        else
        {
          aInventoryChangeLineDoc.Quantity2 = Convert.ToDouble( r.GetDecimal( 22 ) );
        }

        if ( r.IsDBNull( 23 ) )
          aInventoryChangeLineDoc.MeasuredQty = null;
        else
        {
          aInventoryChangeLineDoc.MeasuredQty = Convert.ToDouble( r.GetDecimal( 23 ) );
        }

        if ( r.IsDBNull( 24 ) )
          aInventoryChangeLineDoc.MeasuredQty2 = null;
        else
        {
          aInventoryChangeLineDoc.MeasuredQty2 = Convert.ToDouble( r.GetDecimal( 24 ) );
        }

        if ( r.IsDBNull( 25 ) )
          aInventoryChangeLineDoc.InventoryStatusCode = null;
        else
        {
          aInventoryChangeLineDoc.InventoryStatusCode = r.GetString( 25 );
        }

        if ( r.IsDBNull( 26 ) )
          aInventoryChangeLineDoc.InventoryStatusCode2 = null;
        else
        {
          aInventoryChangeLineDoc.InventoryStatusCode2 = r.GetString( 26 );
        }

        if ( r.IsDBNull( 27 ) )
          aInventoryChangeLineDoc.ProductionLotIdentity = null;
        else
        {
          aInventoryChangeLineDoc.ProductionLotIdentity = r.GetString( 27 );
        }

        if ( r.IsDBNull( 28 ) )
          aInventoryChangeLineDoc.ProductionLotIdentity2 = null;
        else
        {
          aInventoryChangeLineDoc.ProductionLotIdentity2 = r.GetString( 28 );
        }

        if ( r.IsDBNull( 29 ) )
          aInventoryChangeLineDoc.ProductionSubLotIdentity = null;
        else
        {
          aInventoryChangeLineDoc.ProductionSubLotIdentity = r.GetString( 29 );
        }

        if ( r.IsDBNull( 30 ) )
          aInventoryChangeLineDoc.ProductionSublotIdentity2 = null;
        else
        {
          aInventoryChangeLineDoc.ProductionSublotIdentity2 = r.GetString( 30 );
        }

        if ( r.IsDBNull( 31 ) )
          aInventoryChangeLineDoc.MarketingLotIdentity = null;
        else
        {
          aInventoryChangeLineDoc.MarketingLotIdentity = r.GetString( 31 );
        }

        if ( r.IsDBNull( 32 ) )
          aInventoryChangeLineDoc.MarketingLotIdentity2 = null;
        else
        {
          aInventoryChangeLineDoc.MarketingLotIdentity2 = r.GetString( 32 );
        }

        if ( r.IsDBNull( 33 ) )
          aInventoryChangeLineDoc.QualityLotIdentity = null;
        else
        {
          aInventoryChangeLineDoc.QualityLotIdentity = r.GetString( 33 );
        }

        if ( r.IsDBNull( 34 ) )
          aInventoryChangeLineDoc.QualityLotIdentity2 = null;
        else
        {
          aInventoryChangeLineDoc.QualityLotIdentity2 = r.GetString( 34 );
        }

        if ( r.IsDBNull( 35 ) )
          aInventoryChangeLineDoc.WarehouseIdentity = null;
        else
        {
          aInventoryChangeLineDoc.WarehouseIdentity = r.GetString( 35 );
        }

        if ( r.IsDBNull( 36 ) )
          aInventoryChangeLineDoc.CustomerOrderNumber = null;
        else
        {
          aInventoryChangeLineDoc.CustomerOrderNumber = r.GetString( 36 );
        }

        if ( r.IsDBNull( 37 ) )
          aInventoryChangeLineDoc.CustomerOrderSequence = null;
        else
        {
          aInventoryChangeLineDoc.CustomerOrderSequence = r.GetInt32( 37 );
        }

        if ( r.IsDBNull( 38 ) )
          aInventoryChangeLineDoc.CustomerOrderLinePosition = null;
        else
        {
          aInventoryChangeLineDoc.CustomerOrderLinePosition = r.GetInt32( 38 );
        }

        if ( r.IsDBNull( 39 ) )
          aInventoryChangeLineDoc.CustomerOrderLineKitPosition = null;
        else
        {
          aInventoryChangeLineDoc.CustomerOrderLineKitPosition = r.GetInt32( 39 );
        }

        if ( r.IsDBNull( 40 ) )
          aInventoryChangeLineDoc.CustomerOrderLineSequence = null;
        else
        {
          aInventoryChangeLineDoc.CustomerOrderLineSequence = r.GetInt32( 40 );
        }

        if ( r.IsDBNull( 41 ) )
          aInventoryChangeLineDoc.ReasonCode = null;
        else
        {
          aInventoryChangeLineDoc.ReasonCode = r.GetString( 41 );
        }

        if ( r.IsDBNull( 42 ) )
          aInventoryChangeLineDoc.FreeText = null;
        else
        {
          aInventoryChangeLineDoc.FreeText = r.GetString( 42 );
        }

        if ( r.IsDBNull( 43 ) )
          aInventoryChangeLineDoc.SerialNumber = null;
        else
        {
          aInventoryChangeLineDoc.SerialNumber = r.GetString( 43 );
        }

        if ( r.IsDBNull( 44 ) )
          aInventoryChangeLineDoc.SerialNumber2 = null;
        else
        {
          aInventoryChangeLineDoc.SerialNumber2 = r.GetString( 44 );
        }

        aInventoryChangeLineDocList.Add( aInventoryChangeLineDoc );
      }

      r.Close();


      return aInventoryChangeLineDocList;
    }
  }

  public class PickReceiptHeadSelect
  {
    private Database db;
    private PickReceiptHeadPackingMaterialSelect aPickReceiptHeadPackingMaterialSelect;
    private PickReceiptLineSelect aPickReceiptLineSelect;
    private PickReceiptServiceSelect aPickReceiptServiceSelect;
    private PickReceiptTextSelect aPickReceiptTextSelect;

    public PickReceiptHeadSelect(Database db)
    {
      this.db = db;

      aPickReceiptHeadPackingMaterialSelect = new PickReceiptHeadPackingMaterialSelect(this.db);
      aPickReceiptLineSelect = new PickReceiptLineSelect(this.db);
      aPickReceiptServiceSelect = new PickReceiptServiceSelect(this.db);
      aPickReceiptTextSelect = new PickReceiptTextSelect(this.db);
    }

    public PickReceiptHeadDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (PickReceiptHeadDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aPickReceiptHeadDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_PICK_RECEIPT_HEAD.CUSTOMERORDERNUMBER" +
               ",HAPI_PICK_RECEIPT_HEAD.CUSTOMERORDERSEQUENCE" +
               ",HAPI_PICK_RECEIPT_HEAD.CUSTOMERORDERSUBSEQUENCE" +
               ",HAPI_PICK_RECEIPT_HEAD.LASTONDEPARTURE" +
               ",HAPI_PICK_RECEIPT_HEAD.WAREHOUSEIDENTITY" +
               ",HAPI_PICK_RECEIPT_HEAD.ASSEMBLETOSTOCK" +
        " from   HAPI_PICK_RECEIPT_HEAD" +
        " where  HAPI_PICK_RECEIPT_HEAD.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        PickReceiptHeadDoc aPickReceiptHeadDoc = new PickReceiptHeadDoc();

        aPickReceiptHeadDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aPickReceiptHeadDoc.CustomerOrderNumber = null;
        else
        {
          aPickReceiptHeadDoc.CustomerOrderNumber = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aPickReceiptHeadDoc.CustomerOrderSequence = null;
        else
        {
          aPickReceiptHeadDoc.CustomerOrderSequence = r.GetInt32( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aPickReceiptHeadDoc.CustomerOrderSubSequence = null;
        else
        {
          aPickReceiptHeadDoc.CustomerOrderSubSequence = r.GetInt32( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aPickReceiptHeadDoc.LastOndeparture = null;
        else
        {
          aPickReceiptHeadDoc.LastOndeparture = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aPickReceiptHeadDoc.WarehouseIdentity = null;
        else
        {
          aPickReceiptHeadDoc.WarehouseIdentity = r.GetString( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aPickReceiptHeadDoc.AssembleToStock = null;
        else
        {
          aPickReceiptHeadDoc.AssembleToStock = r.GetString( 5 );
        }

        aPickReceiptHeadDocList.Add( aPickReceiptHeadDoc );
      }

      r.Close();

      ArrayList aPickReceiptHeadPackingMaterialDocList = aPickReceiptHeadPackingMaterialSelect.InternalProcess( HapiTransId );
      ArrayList aPickReceiptLineDocList = aPickReceiptLineSelect.InternalProcess( HapiTransId );
      ArrayList aPickReceiptServiceDocList = aPickReceiptServiceSelect.InternalProcess( HapiTransId );
      ArrayList aPickReceiptTextDocList = aPickReceiptTextSelect.InternalProcess( HapiTransId );

      foreach ( PickReceiptHeadDoc aPickReceiptHeadDoc in aPickReceiptHeadDocList )
      {
        ArrayList ConnectedChildren = null;
        ConnectedChildren = new ArrayList();

        foreach ( PickReceiptHeadPackingMaterialDoc aPickReceiptHeadPackingMaterialDoc in aPickReceiptHeadPackingMaterialDocList )
        {
          if ( GeneratedComparer.EqualPickReceiptHeadDocPickReceiptHeadPackingMaterialDoc( aPickReceiptHeadDoc, aPickReceiptHeadPackingMaterialDoc ) )
            ConnectedChildren.Add( aPickReceiptHeadPackingMaterialDoc );
        }
        aPickReceiptHeadDoc.aPickReceiptHeadPackingMaterialDocs = ConnectedChildren.ToArray(typeof(PickReceiptHeadPackingMaterialDoc)) as PickReceiptHeadPackingMaterialDoc[];
        ConnectedChildren = new ArrayList();

        foreach ( PickReceiptLineDoc aPickReceiptLineDoc in aPickReceiptLineDocList )
        {
          if ( GeneratedComparer.EqualPickReceiptHeadDocPickReceiptLineDoc( aPickReceiptHeadDoc, aPickReceiptLineDoc ) )
            ConnectedChildren.Add( aPickReceiptLineDoc );
        }
        aPickReceiptHeadDoc.aPickReceiptLineDocs = ConnectedChildren.ToArray(typeof(PickReceiptLineDoc)) as PickReceiptLineDoc[];
        ConnectedChildren = new ArrayList();

        foreach ( PickReceiptServiceDoc aPickReceiptServiceDoc in aPickReceiptServiceDocList )
        {
          if ( GeneratedComparer.EqualPickReceiptHeadDocPickReceiptServiceDoc( aPickReceiptHeadDoc, aPickReceiptServiceDoc ) )
            ConnectedChildren.Add( aPickReceiptServiceDoc );
        }
        aPickReceiptHeadDoc.aPickReceiptServiceDocs = ConnectedChildren.ToArray(typeof(PickReceiptServiceDoc)) as PickReceiptServiceDoc[];
        ConnectedChildren = new ArrayList();

        foreach ( PickReceiptTextDoc aPickReceiptTextDoc in aPickReceiptTextDocList )
        {
          if ( GeneratedComparer.EqualPickReceiptHeadDocPickReceiptTextDoc( aPickReceiptHeadDoc, aPickReceiptTextDoc ) )
            ConnectedChildren.Add( aPickReceiptTextDoc );
        }
        aPickReceiptHeadDoc.aPickReceiptTextDocs = ConnectedChildren.ToArray(typeof(PickReceiptTextDoc)) as PickReceiptTextDoc[];
      }

      return aPickReceiptHeadDocList;
    }
  }

  public class PickReceiptHeadPackingMaterialSelect
  {
    private Database db;

    public PickReceiptHeadPackingMaterialSelect(Database db)
    {
      this.db = db;

    }

    public PickReceiptHeadPackingMaterialDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (PickReceiptHeadPackingMaterialDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aPickReceiptHeadPackingMaterialDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_PICK_RECEIPT_HEAD_PM.CUSTOMERORDERNUMBER" +
               ",HAPI_PICK_RECEIPT_HEAD_PM.CUSTOMERORDERSEQUENCE" +
               ",HAPI_PICK_RECEIPT_HEAD_PM.CUSTOMERORDERSUBSEQUENCE" +
               ",HAPI_PICK_RECEIPT_HEAD_PM.PACKINGMATERIALTYPE" +
               ",HAPI_PICK_RECEIPT_HEAD_PM.QUANTITY" +
        " from   HAPI_PICK_RECEIPT_HEAD_PM" +
        " where  HAPI_PICK_RECEIPT_HEAD_PM.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        PickReceiptHeadPackingMaterialDoc aPickReceiptHeadPackingMaterialDoc = new PickReceiptHeadPackingMaterialDoc();

        aPickReceiptHeadPackingMaterialDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aPickReceiptHeadPackingMaterialDoc.CustomerOrderNumber = null;
        else
        {
          aPickReceiptHeadPackingMaterialDoc.CustomerOrderNumber = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aPickReceiptHeadPackingMaterialDoc.CustomerOrderSequence = null;
        else
        {
          aPickReceiptHeadPackingMaterialDoc.CustomerOrderSequence = r.GetInt32( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aPickReceiptHeadPackingMaterialDoc.CustomerOrderSubSequence = null;
        else
        {
          aPickReceiptHeadPackingMaterialDoc.CustomerOrderSubSequence = r.GetInt32( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aPickReceiptHeadPackingMaterialDoc.PackingMaterialType = null;
        else
        {
          aPickReceiptHeadPackingMaterialDoc.PackingMaterialType = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aPickReceiptHeadPackingMaterialDoc.Quantity = null;
        else
        {
          aPickReceiptHeadPackingMaterialDoc.Quantity = Convert.ToDouble( r.GetDecimal( 4 ) );
        }

        aPickReceiptHeadPackingMaterialDocList.Add( aPickReceiptHeadPackingMaterialDoc );
      }

      r.Close();


      return aPickReceiptHeadPackingMaterialDocList;
    }
  }

  public class PickReceiptLineSelect
  {
    private Database db;
    private PickReceiptLineTextSelect aPickReceiptLineTextSelect;
    private PickReceiptLinePackingMaterialSelect aPickReceiptLinePackingMaterialSelect;

    public PickReceiptLineSelect(Database db)
    {
      this.db = db;

      aPickReceiptLineTextSelect = new PickReceiptLineTextSelect(this.db);
      aPickReceiptLinePackingMaterialSelect = new PickReceiptLinePackingMaterialSelect(this.db);
    }

    public PickReceiptLineDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (PickReceiptLineDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aPickReceiptLineDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_PICK_RECEIPT_LINE.CUSTOMERORDERNUMBER" +
               ",HAPI_PICK_RECEIPT_LINE.CUSTOMERORDERSEQUENCE" +
               ",HAPI_PICK_RECEIPT_LINE.CUSTOMERORDERSUBSEQUENCE" +
               ",HAPI_PICK_RECEIPT_LINE.CUSTOMERORDERLINEPOSITION" +
               ",HAPI_PICK_RECEIPT_LINE.CUSTOMERORDERLINEKITPOSITION" +
               ",HAPI_PICK_RECEIPT_LINE.CUSTOMERORDERLINESEQUENCE" +
               ",HAPI_PICK_RECEIPT_LINE.PICKORDERLINEIDENTITY" +
               ",HAPI_PICK_RECEIPT_LINE.OWNERIDENTITY" +
               ",HAPI_PICK_RECEIPT_LINE.PRODUCTIDENTITY" +
               ",HAPI_PICK_RECEIPT_LINE.PACKAGEIDENTITY" +
               ",HAPI_PICK_RECEIPT_LINE.PICKQUANTITY" +
               ",HAPI_PICK_RECEIPT_LINE.MEASUREDQTY" +
               ",HAPI_PICK_RECEIPT_LINE.RESTCODE" +
               ",HAPI_PICK_RECEIPT_LINE.DEPARTUREIDENTITY" +
               ",HAPI_PICK_RECEIPT_LINE.DEPARTUREWEEKDAY" +
               ",HAPI_PICK_RECEIPT_LINE.MARKETINGLOTIDENTITY" +
               ",HAPI_PICK_RECEIPT_LINE.QUALITYLOTIDENTITY" +
               ",HAPI_PICK_RECEIPT_LINE.FREIGHTERIDENTITY" +
               ",HAPI_PICK_RECEIPT_LINE.SHIPDATE" +
               ",HAPI_PICK_RECEIPT_LINE.CONSIGNMENTNOTE" +
               ",HAPI_PICK_RECEIPT_LINE.PACKINGSLIPIDENTITY" +
               ",HAPI_PICK_RECEIPT_LINE.ORDEREDQUANTITY" +
               ",HAPI_PICK_RECEIPT_LINE.UNDERQUANTITY" +
               ",HAPI_PICK_RECEIPT_LINE.OVERQUANTITY" +
               ",HAPI_PICK_RECEIPT_LINE.PRODUCTIONLOTIDENTITY" +
               ",HAPI_PICK_RECEIPT_LINE.PRODUCTIONSUBLOTIDENTITY" +
               ",HAPI_PICK_RECEIPT_LINE.INVENTORYSTATUSCODE" +
               ",HAPI_PICK_RECEIPT_LINE.SERIALNUMBER" +
               ",HAPI_PICK_RECEIPT_LINE.ASSEMBLETOSTOCK" +
               ",HAPI_PICK_RECEIPT_LINE.ITEMLOADIDENTITY" +
        " from   HAPI_PICK_RECEIPT_LINE" +
        " where  HAPI_PICK_RECEIPT_LINE.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        PickReceiptLineDoc aPickReceiptLineDoc = new PickReceiptLineDoc();

        aPickReceiptLineDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aPickReceiptLineDoc.CustomerOrderNumber = null;
        else
        {
          aPickReceiptLineDoc.CustomerOrderNumber = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aPickReceiptLineDoc.CustomerOrderSequence = null;
        else
        {
          aPickReceiptLineDoc.CustomerOrderSequence = r.GetInt32( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aPickReceiptLineDoc.CustomerOrderSubSequence = null;
        else
        {
          aPickReceiptLineDoc.CustomerOrderSubSequence = r.GetInt32( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aPickReceiptLineDoc.CustomerOrderLinePosition = null;
        else
        {
          aPickReceiptLineDoc.CustomerOrderLinePosition = r.GetInt32( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aPickReceiptLineDoc.CustomerOrderLineKitPosition = null;
        else
        {
          aPickReceiptLineDoc.CustomerOrderLineKitPosition = r.GetInt32( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aPickReceiptLineDoc.CustomerOrderLineSequence = null;
        else
        {
          aPickReceiptLineDoc.CustomerOrderLineSequence = r.GetInt32( 5 );
        }

        if ( r.IsDBNull( 6 ) )
          aPickReceiptLineDoc.PickOrderLineIdentity = null;
        else
        {
          aPickReceiptLineDoc.PickOrderLineIdentity = r.GetString( 6 );
        }

        if ( r.IsDBNull( 7 ) )
          aPickReceiptLineDoc.OwnerIdentity = null;
        else
        {
          aPickReceiptLineDoc.OwnerIdentity = r.GetString( 7 );
        }

        if ( r.IsDBNull( 8 ) )
          aPickReceiptLineDoc.ProductIdentity = null;
        else
        {
          aPickReceiptLineDoc.ProductIdentity = r.GetString( 8 );
        }

        if ( r.IsDBNull( 9 ) )
          aPickReceiptLineDoc.PackageIdentity = null;
        else
        {
          aPickReceiptLineDoc.PackageIdentity = r.GetString( 9 );
        }

        if ( r.IsDBNull( 10 ) )
          aPickReceiptLineDoc.PickQuantity = null;
        else
        {
          aPickReceiptLineDoc.PickQuantity = Convert.ToDouble( r.GetDecimal( 10 ) );
        }

        if ( r.IsDBNull( 11 ) )
          aPickReceiptLineDoc.MeasuredQty = null;
        else
        {
          aPickReceiptLineDoc.MeasuredQty = Convert.ToDouble( r.GetDecimal( 11 ) );
        }

        if ( r.IsDBNull( 12 ) )
          aPickReceiptLineDoc.RestCode = null;
        else
        {
          aPickReceiptLineDoc.RestCode = r.GetString( 12 );
        }

        if ( r.IsDBNull( 13 ) )
          aPickReceiptLineDoc.DepartureIdentity = null;
        else
        {
          aPickReceiptLineDoc.DepartureIdentity = r.GetString( 13 );
        }

        if ( r.IsDBNull( 14 ) )
          aPickReceiptLineDoc.DepartureWeekday = null;
        else
        {
          aPickReceiptLineDoc.DepartureWeekday = r.GetString( 14 );
        }

        if ( r.IsDBNull( 15 ) )
          aPickReceiptLineDoc.MarketingLotIdentity = null;
        else
        {
          aPickReceiptLineDoc.MarketingLotIdentity = r.GetString( 15 );
        }

        if ( r.IsDBNull( 16 ) )
          aPickReceiptLineDoc.QualityLotIdentity = null;
        else
        {
          aPickReceiptLineDoc.QualityLotIdentity = r.GetString( 16 );
        }

        if ( r.IsDBNull( 17 ) )
          aPickReceiptLineDoc.FreighterIdentity = null;
        else
        {
          aPickReceiptLineDoc.FreighterIdentity = r.GetString( 17 );
        }

        if ( r.IsDBNull( 18 ) )
          aPickReceiptLineDoc.ShipDate = null;
        else
        {
          aPickReceiptLineDoc.ShipDate = DateTime.SpecifyKind(r.GetDateTime( 18 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 19 ) )
          aPickReceiptLineDoc.ConsignmentNote = null;
        else
        {
          aPickReceiptLineDoc.ConsignmentNote = r.GetString( 19 );
        }

        if ( r.IsDBNull( 20 ) )
          aPickReceiptLineDoc.PackingSlipIdentity = null;
        else
        {
          aPickReceiptLineDoc.PackingSlipIdentity = r.GetString( 20 );
        }

        if ( r.IsDBNull( 21 ) )
          aPickReceiptLineDoc.OrderedQuantity = null;
        else
        {
          aPickReceiptLineDoc.OrderedQuantity = Convert.ToDouble( r.GetDecimal( 21 ) );
        }

        if ( r.IsDBNull( 22 ) )
          aPickReceiptLineDoc.UnderQuantity = null;
        else
        {
          aPickReceiptLineDoc.UnderQuantity = Convert.ToDouble( r.GetDecimal( 22 ) );
        }

        if ( r.IsDBNull( 23 ) )
          aPickReceiptLineDoc.OverQuantity = null;
        else
        {
          aPickReceiptLineDoc.OverQuantity = Convert.ToDouble( r.GetDecimal( 23 ) );
        }

        if ( r.IsDBNull( 24 ) )
          aPickReceiptLineDoc.ProductionLotIdentity = null;
        else
        {
          aPickReceiptLineDoc.ProductionLotIdentity = r.GetString( 24 );
        }

        if ( r.IsDBNull( 25 ) )
          aPickReceiptLineDoc.ProductionSubLotIdentity = null;
        else
        {
          aPickReceiptLineDoc.ProductionSubLotIdentity = r.GetString( 25 );
        }

        if ( r.IsDBNull( 26 ) )
          aPickReceiptLineDoc.InventoryStatusCode = null;
        else
        {
          aPickReceiptLineDoc.InventoryStatusCode = r.GetString( 26 );
        }

        if ( r.IsDBNull( 27 ) )
          aPickReceiptLineDoc.SerialNumber = null;
        else
        {
          aPickReceiptLineDoc.SerialNumber = r.GetString( 27 );
        }

        if ( r.IsDBNull( 28 ) )
          aPickReceiptLineDoc.AssembleToStock = null;
        else
        {
          aPickReceiptLineDoc.AssembleToStock = r.GetString( 28 );
        }

        if ( r.IsDBNull( 29 ) )
          aPickReceiptLineDoc.ItemLoadIdentity = null;
        else
        {
          aPickReceiptLineDoc.ItemLoadIdentity = r.GetString( 29 );
        }

        aPickReceiptLineDocList.Add( aPickReceiptLineDoc );
      }

      r.Close();

      ArrayList aPickReceiptLineTextDocList = aPickReceiptLineTextSelect.InternalProcess( HapiTransId );
      ArrayList aPickReceiptLinePackingMaterialDocList = aPickReceiptLinePackingMaterialSelect.InternalProcess( HapiTransId );

      foreach ( PickReceiptLineDoc aPickReceiptLineDoc in aPickReceiptLineDocList )
      {
        ArrayList ConnectedChildren = null;
        ConnectedChildren = new ArrayList();

        foreach ( PickReceiptLineTextDoc aPickReceiptLineTextDoc in aPickReceiptLineTextDocList )
        {
          if ( GeneratedComparer.EqualPickReceiptLineDocPickReceiptLineTextDoc( aPickReceiptLineDoc, aPickReceiptLineTextDoc ) )
            ConnectedChildren.Add( aPickReceiptLineTextDoc );
        }
        aPickReceiptLineDoc.aPickReceiptLineTextDocs = ConnectedChildren.ToArray(typeof(PickReceiptLineTextDoc)) as PickReceiptLineTextDoc[];
        ConnectedChildren = new ArrayList();

        foreach ( PickReceiptLinePackingMaterialDoc aPickReceiptLinePackingMaterialDoc in aPickReceiptLinePackingMaterialDocList )
        {
          if ( GeneratedComparer.EqualPickReceiptLineDocPickReceiptLinePackingMaterialDoc( aPickReceiptLineDoc, aPickReceiptLinePackingMaterialDoc ) )
            ConnectedChildren.Add( aPickReceiptLinePackingMaterialDoc );
        }
        aPickReceiptLineDoc.aPickReceiptLinePackingMaterialDocs = ConnectedChildren.ToArray(typeof(PickReceiptLinePackingMaterialDoc)) as PickReceiptLinePackingMaterialDoc[];
      }

      return aPickReceiptLineDocList;
    }
  }

  public class PickReceiptLineTextSelect
  {
    private Database db;

    public PickReceiptLineTextSelect(Database db)
    {
      this.db = db;

    }

    public PickReceiptLineTextDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (PickReceiptLineTextDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aPickReceiptLineTextDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_PICK_RECEIPT_LINE_TEXT.CUSTOMERORDERNUMBER" +
               ",HAPI_PICK_RECEIPT_LINE_TEXT.CUSTOMERORDERSEQUENCE" +
               ",HAPI_PICK_RECEIPT_LINE_TEXT.CUSTOMERORDERSUBSEQUENCE" +
               ",HAPI_PICK_RECEIPT_LINE_TEXT.CUSTOMERORDERLINEPOSITION" +
               ",HAPI_PICK_RECEIPT_LINE_TEXT.CUSTOMERORDERLINEKITPOSITION" +
               ",HAPI_PICK_RECEIPT_LINE_TEXT.CUSTOMERORDERLINESEQUENCE" +
               ",HAPI_PICK_RECEIPT_LINE_TEXT.PICKORDERLINEIDENTITY" +
               ",HAPI_PICK_RECEIPT_LINE_TEXT.TEXTFUNCTION" +
               ",HAPI_PICK_RECEIPT_LINE_TEXT.TEXT" +
        " from   HAPI_PICK_RECEIPT_LINE_TEXT" +
        " where  HAPI_PICK_RECEIPT_LINE_TEXT.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        PickReceiptLineTextDoc aPickReceiptLineTextDoc = new PickReceiptLineTextDoc();

        aPickReceiptLineTextDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aPickReceiptLineTextDoc.CustomerOrderNumber = null;
        else
        {
          aPickReceiptLineTextDoc.CustomerOrderNumber = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aPickReceiptLineTextDoc.CustomerOrderSequence = null;
        else
        {
          aPickReceiptLineTextDoc.CustomerOrderSequence = r.GetInt32( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aPickReceiptLineTextDoc.CustomerOrderSubSequence = null;
        else
        {
          aPickReceiptLineTextDoc.CustomerOrderSubSequence = r.GetInt32( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aPickReceiptLineTextDoc.CustomerOrderLinePosition = null;
        else
        {
          aPickReceiptLineTextDoc.CustomerOrderLinePosition = r.GetInt32( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aPickReceiptLineTextDoc.CustomerOrderLineKitPosition = null;
        else
        {
          aPickReceiptLineTextDoc.CustomerOrderLineKitPosition = r.GetInt32( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aPickReceiptLineTextDoc.CustomerOrderLineSequence = null;
        else
        {
          aPickReceiptLineTextDoc.CustomerOrderLineSequence = r.GetInt32( 5 );
        }

        if ( r.IsDBNull( 6 ) )
          aPickReceiptLineTextDoc.PickOrderLineIdentity = null;
        else
        {
          aPickReceiptLineTextDoc.PickOrderLineIdentity = r.GetString( 6 );
        }

        if ( r.IsDBNull( 7 ) )
          aPickReceiptLineTextDoc.TextFunction = null;
        else
        {
          aPickReceiptLineTextDoc.TextFunction = r.GetString( 7 );
        }

        if ( r.IsDBNull( 8 ) )
          aPickReceiptLineTextDoc.Text = null;
        else
        {
          aPickReceiptLineTextDoc.Text = r.GetString( 8 );
        }

        aPickReceiptLineTextDocList.Add( aPickReceiptLineTextDoc );
      }

      r.Close();


      return aPickReceiptLineTextDocList;
    }
  }

  public class PickReceiptLinePackingMaterialSelect
  {
    private Database db;

    public PickReceiptLinePackingMaterialSelect(Database db)
    {
      this.db = db;

    }

    public PickReceiptLinePackingMaterialDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (PickReceiptLinePackingMaterialDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aPickReceiptLinePackingMaterialDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_PICK_RECEIPT_LINE_PM.CUSTOMERORDERNUMBER" +
               ",HAPI_PICK_RECEIPT_LINE_PM.CUSTOMERORDERSEQUENCE" +
               ",HAPI_PICK_RECEIPT_LINE_PM.CUSTOMERORDERSUBSEQUENCE" +
               ",HAPI_PICK_RECEIPT_LINE_PM.CUSTOMERORDERLINEPOSITION" +
               ",HAPI_PICK_RECEIPT_LINE_PM.CUSTOMERORDERLINEKITPOSITION" +
               ",HAPI_PICK_RECEIPT_LINE_PM.CUSTOMERORDERLINESEQUENCE" +
               ",HAPI_PICK_RECEIPT_LINE_PM.PICKORDERLINEIDENTITY" +
               ",HAPI_PICK_RECEIPT_LINE_PM.PACKINGMATERIALTYPE" +
               ",HAPI_PICK_RECEIPT_LINE_PM.QUANTITY" +
        " from   HAPI_PICK_RECEIPT_LINE_PM" +
        " where  HAPI_PICK_RECEIPT_LINE_PM.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        PickReceiptLinePackingMaterialDoc aPickReceiptLinePackingMaterialDoc = new PickReceiptLinePackingMaterialDoc();

        aPickReceiptLinePackingMaterialDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aPickReceiptLinePackingMaterialDoc.CustomerOrderNumber = null;
        else
        {
          aPickReceiptLinePackingMaterialDoc.CustomerOrderNumber = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aPickReceiptLinePackingMaterialDoc.CustomerOrderSequence = null;
        else
        {
          aPickReceiptLinePackingMaterialDoc.CustomerOrderSequence = r.GetInt32( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aPickReceiptLinePackingMaterialDoc.CustomerOrderSubSequence = null;
        else
        {
          aPickReceiptLinePackingMaterialDoc.CustomerOrderSubSequence = r.GetInt32( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aPickReceiptLinePackingMaterialDoc.CustomerOrderLinePosition = null;
        else
        {
          aPickReceiptLinePackingMaterialDoc.CustomerOrderLinePosition = r.GetInt32( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aPickReceiptLinePackingMaterialDoc.CustomerOrderLineKitPosition = null;
        else
        {
          aPickReceiptLinePackingMaterialDoc.CustomerOrderLineKitPosition = r.GetInt32( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aPickReceiptLinePackingMaterialDoc.CustomerOrderLineSequence = null;
        else
        {
          aPickReceiptLinePackingMaterialDoc.CustomerOrderLineSequence = r.GetInt32( 5 );
        }

        if ( r.IsDBNull( 6 ) )
          aPickReceiptLinePackingMaterialDoc.PickOrderLineIdentity = null;
        else
        {
          aPickReceiptLinePackingMaterialDoc.PickOrderLineIdentity = r.GetString( 6 );
        }

        if ( r.IsDBNull( 7 ) )
          aPickReceiptLinePackingMaterialDoc.PackingMaterialType = null;
        else
        {
          aPickReceiptLinePackingMaterialDoc.PackingMaterialType = r.GetString( 7 );
        }

        if ( r.IsDBNull( 8 ) )
          aPickReceiptLinePackingMaterialDoc.Quantity = null;
        else
        {
          aPickReceiptLinePackingMaterialDoc.Quantity = Convert.ToDouble( r.GetDecimal( 8 ) );
        }

        aPickReceiptLinePackingMaterialDocList.Add( aPickReceiptLinePackingMaterialDoc );
      }

      r.Close();


      return aPickReceiptLinePackingMaterialDocList;
    }
  }

  public class PickReceiptServiceSelect
  {
    private Database db;

    public PickReceiptServiceSelect(Database db)
    {
      this.db = db;

    }

    public PickReceiptServiceDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (PickReceiptServiceDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aPickReceiptServiceDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_PICK_RECEIPT_SERVICE.CUSTOMERORDERNUMBER" +
               ",HAPI_PICK_RECEIPT_SERVICE.CUSTOMERORDERSEQUENCE" +
               ",HAPI_PICK_RECEIPT_SERVICE.CUSTOMERORDERSUBSEQUENCE" +
               ",HAPI_PICK_RECEIPT_SERVICE.SERVICEQUALIFIER" +
               ",HAPI_PICK_RECEIPT_SERVICE.SERVICECODE" +
               ",HAPI_PICK_RECEIPT_SERVICE.SERVICEQTY" +
        " from   HAPI_PICK_RECEIPT_SERVICE" +
        " where  HAPI_PICK_RECEIPT_SERVICE.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        PickReceiptServiceDoc aPickReceiptServiceDoc = new PickReceiptServiceDoc();

        aPickReceiptServiceDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aPickReceiptServiceDoc.CustomerOrderNumber = null;
        else
        {
          aPickReceiptServiceDoc.CustomerOrderNumber = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aPickReceiptServiceDoc.CustomerOrderSequence = null;
        else
        {
          aPickReceiptServiceDoc.CustomerOrderSequence = r.GetInt32( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aPickReceiptServiceDoc.CustomerOrderSubSequence = null;
        else
        {
          aPickReceiptServiceDoc.CustomerOrderSubSequence = r.GetInt32( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aPickReceiptServiceDoc.ServiceQualifier = null;
        else
        {
          aPickReceiptServiceDoc.ServiceQualifier = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aPickReceiptServiceDoc.ServiceCode = null;
        else
        {
          aPickReceiptServiceDoc.ServiceCode = r.GetString( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aPickReceiptServiceDoc.ServiceQty = null;
        else
        {
          aPickReceiptServiceDoc.ServiceQty = Convert.ToDouble( r.GetDecimal( 5 ) );
        }

        aPickReceiptServiceDocList.Add( aPickReceiptServiceDoc );
      }

      r.Close();


      return aPickReceiptServiceDocList;
    }
  }

  public class PickReceiptTextSelect
  {
    private Database db;

    public PickReceiptTextSelect(Database db)
    {
      this.db = db;

    }

    public PickReceiptTextDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (PickReceiptTextDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aPickReceiptTextDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_PICK_RECEIPT_TEXT.CUSTOMERORDERNUMBER" +
               ",HAPI_PICK_RECEIPT_TEXT.CUSTOMERORDERSEQUENCE" +
               ",HAPI_PICK_RECEIPT_TEXT.CUSTOMERORDERSUBSEQUENCE" +
               ",HAPI_PICK_RECEIPT_TEXT.TEXTFUNCTION" +
               ",HAPI_PICK_RECEIPT_TEXT.TEXT" +
        " from   HAPI_PICK_RECEIPT_TEXT" +
        " where  HAPI_PICK_RECEIPT_TEXT.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        PickReceiptTextDoc aPickReceiptTextDoc = new PickReceiptTextDoc();

        aPickReceiptTextDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aPickReceiptTextDoc.CustomerOrderNumber = null;
        else
        {
          aPickReceiptTextDoc.CustomerOrderNumber = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aPickReceiptTextDoc.CustomerOrderSequence = null;
        else
        {
          aPickReceiptTextDoc.CustomerOrderSequence = r.GetInt32( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aPickReceiptTextDoc.CustomerOrderSubSequence = null;
        else
        {
          aPickReceiptTextDoc.CustomerOrderSubSequence = r.GetInt32( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aPickReceiptTextDoc.TextFunction = null;
        else
        {
          aPickReceiptTextDoc.TextFunction = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aPickReceiptTextDoc.Text = null;
        else
        {
          aPickReceiptTextDoc.Text = r.GetString( 4 );
        }

        aPickReceiptTextDocList.Add( aPickReceiptTextDoc );
      }

      r.Close();


      return aPickReceiptTextDocList;
    }
  }

  public class ReturnedPackingMaterialHeadSelect
  {
    private Database db;
    private ReturnedPackingMaterialLineSelect aReturnedPackingMaterialLineSelect;

    public ReturnedPackingMaterialHeadSelect(Database db)
    {
      this.db = db;

      aReturnedPackingMaterialLineSelect = new ReturnedPackingMaterialLineSelect(this.db);
    }

    public ReturnedPackingMaterialHeadDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (ReturnedPackingMaterialHeadDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aReturnedPackingMaterialHeadDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
        " from   HAPI_RETURNED_PM_HEAD" +
        " where  HAPI_RETURNED_PM_HEAD.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        ReturnedPackingMaterialHeadDoc aReturnedPackingMaterialHeadDoc = new ReturnedPackingMaterialHeadDoc();

        aReturnedPackingMaterialHeadDoc.OPCODE = "1";

        aReturnedPackingMaterialHeadDocList.Add( aReturnedPackingMaterialHeadDoc );
      }

      r.Close();

      ArrayList aReturnedPackingMaterialLineDocList = aReturnedPackingMaterialLineSelect.InternalProcess( HapiTransId );

      foreach ( ReturnedPackingMaterialHeadDoc aReturnedPackingMaterialHeadDoc in aReturnedPackingMaterialHeadDocList )
      {
        ArrayList ConnectedChildren = null;
        ConnectedChildren = new ArrayList();

        foreach ( ReturnedPackingMaterialLineDoc aReturnedPackingMaterialLineDoc in aReturnedPackingMaterialLineDocList )
        {
          if ( GeneratedComparer.EqualReturnedPackingMaterialHeadDocReturnedPackingMaterialLineDoc( aReturnedPackingMaterialHeadDoc, aReturnedPackingMaterialLineDoc ) )
            ConnectedChildren.Add( aReturnedPackingMaterialLineDoc );
        }
        aReturnedPackingMaterialHeadDoc.aReturnedPackingMaterialLineDocs = ConnectedChildren.ToArray(typeof(ReturnedPackingMaterialLineDoc)) as ReturnedPackingMaterialLineDoc[];
      }

      return aReturnedPackingMaterialHeadDocList;
    }
  }

  public class ReturnedPackingMaterialLineSelect
  {
    private Database db;

    public ReturnedPackingMaterialLineSelect(Database db)
    {
      this.db = db;

    }

    public ReturnedPackingMaterialLineDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (ReturnedPackingMaterialLineDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aReturnedPackingMaterialLineDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
        " from   HAPI_RETURNED_PM_LINE" +
        " where  HAPI_RETURNED_PM_LINE.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        ReturnedPackingMaterialLineDoc aReturnedPackingMaterialLineDoc = new ReturnedPackingMaterialLineDoc();

        aReturnedPackingMaterialLineDoc.OPCODE = "1";

        aReturnedPackingMaterialLineDocList.Add( aReturnedPackingMaterialLineDoc );
      }

      r.Close();


      return aReturnedPackingMaterialLineDocList;
    }
  }

  public class ReturnReceiptHeadSelect
  {
    private Database db;
    private ReturnReceiptHeadPackingMaterialSelect aReturnReceiptHeadPackingMaterialSelect;
    private ReturnReceiptLineSelect aReturnReceiptLineSelect;

    public ReturnReceiptHeadSelect(Database db)
    {
      this.db = db;

      aReturnReceiptHeadPackingMaterialSelect = new ReturnReceiptHeadPackingMaterialSelect(this.db);
      aReturnReceiptLineSelect = new ReturnReceiptLineSelect(this.db);
    }

    public ReturnReceiptHeadDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (ReturnReceiptHeadDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aReturnReceiptHeadDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_RETURN_RECEIPT_HEAD.RETURNORDERNUMBER" +
               ",HAPI_RETURN_RECEIPT_HEAD.RETURNORDERSEQUENCE" +
               ",HAPI_RETURN_RECEIPT_HEAD.RETURNORDERSUBSEQUENCE" +
               ",HAPI_RETURN_RECEIPT_HEAD.WAREHOUSEIDENTITY" +
               ",HAPI_RETURN_RECEIPT_HEAD.SHIPDATE" +
               ",HAPI_RETURN_RECEIPT_HEAD.SPONTANEOUSRETURN" +
               ",HAPI_RETURN_RECEIPT_HEAD.VENDORIDENTITY" +
        " from   HAPI_RETURN_RECEIPT_HEAD" +
        " where  HAPI_RETURN_RECEIPT_HEAD.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        ReturnReceiptHeadDoc aReturnReceiptHeadDoc = new ReturnReceiptHeadDoc();

        aReturnReceiptHeadDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aReturnReceiptHeadDoc.ReturnOrderNumber = null;
        else
        {
          aReturnReceiptHeadDoc.ReturnOrderNumber = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aReturnReceiptHeadDoc.ReturnOrderSequence = null;
        else
        {
          aReturnReceiptHeadDoc.ReturnOrderSequence = r.GetInt32( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aReturnReceiptHeadDoc.ReturnOrderSubSequence = null;
        else
        {
          aReturnReceiptHeadDoc.ReturnOrderSubSequence = r.GetInt32( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aReturnReceiptHeadDoc.WarehouseIdentity = null;
        else
        {
          aReturnReceiptHeadDoc.WarehouseIdentity = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aReturnReceiptHeadDoc.ShipDate = null;
        else
        {
          aReturnReceiptHeadDoc.ShipDate = DateTime.SpecifyKind(r.GetDateTime( 4 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 5 ) )
          aReturnReceiptHeadDoc.SpontaneousReturn = null;
        else
        {
          aReturnReceiptHeadDoc.SpontaneousReturn = r.GetString( 5 );
        }

        if ( r.IsDBNull( 6 ) )
          aReturnReceiptHeadDoc.VendorIdentity = null;
        else
        {
          aReturnReceiptHeadDoc.VendorIdentity = r.GetString( 6 );
        }

        aReturnReceiptHeadDocList.Add( aReturnReceiptHeadDoc );
      }

      r.Close();

      ArrayList aReturnReceiptHeadPackingMaterialDocList = aReturnReceiptHeadPackingMaterialSelect.InternalProcess( HapiTransId );
      ArrayList aReturnReceiptLineDocList = aReturnReceiptLineSelect.InternalProcess( HapiTransId );

      foreach ( ReturnReceiptHeadDoc aReturnReceiptHeadDoc in aReturnReceiptHeadDocList )
      {
        ArrayList ConnectedChildren = null;
        ConnectedChildren = new ArrayList();

        foreach ( ReturnReceiptHeadPackingMaterialDoc aReturnReceiptHeadPackingMaterialDoc in aReturnReceiptHeadPackingMaterialDocList )
        {
          if ( GeneratedComparer.EqualReturnReceiptHeadDocReturnReceiptHeadPackingMaterialDoc( aReturnReceiptHeadDoc, aReturnReceiptHeadPackingMaterialDoc ) )
            ConnectedChildren.Add( aReturnReceiptHeadPackingMaterialDoc );
        }
        aReturnReceiptHeadDoc.aReturnReceiptHeadPackingMaterialDocs = ConnectedChildren.ToArray(typeof(ReturnReceiptHeadPackingMaterialDoc)) as ReturnReceiptHeadPackingMaterialDoc[];
        ConnectedChildren = new ArrayList();

        foreach ( ReturnReceiptLineDoc aReturnReceiptLineDoc in aReturnReceiptLineDocList )
        {
          if ( GeneratedComparer.EqualReturnReceiptHeadDocReturnReceiptLineDoc( aReturnReceiptHeadDoc, aReturnReceiptLineDoc ) )
            ConnectedChildren.Add( aReturnReceiptLineDoc );
        }
        aReturnReceiptHeadDoc.aReturnReceiptLineDocs = ConnectedChildren.ToArray(typeof(ReturnReceiptLineDoc)) as ReturnReceiptLineDoc[];
      }

      return aReturnReceiptHeadDocList;
    }
  }

  public class ReturnReceiptHeadPackingMaterialSelect
  {
    private Database db;

    public ReturnReceiptHeadPackingMaterialSelect(Database db)
    {
      this.db = db;

    }

    public ReturnReceiptHeadPackingMaterialDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (ReturnReceiptHeadPackingMaterialDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aReturnReceiptHeadPackingMaterialDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_RETURN_RECEIPT_HEAD_PM.RETURNORDERNUMBER" +
               ",HAPI_RETURN_RECEIPT_HEAD_PM.RETURNORDERSEQUENCE" +
               ",HAPI_RETURN_RECEIPT_HEAD_PM.RETURNORDERSUBSEQUENCE" +
               ",HAPI_RETURN_RECEIPT_HEAD_PM.SHIPDATE" +
               ",HAPI_RETURN_RECEIPT_HEAD_PM.PRODUCTIDENTITY" +
               ",HAPI_RETURN_RECEIPT_HEAD_PM.PICKQUANTITY" +
               ",HAPI_RETURN_RECEIPT_HEAD_PM.SPONTANEOUSRETURN" +
               ",HAPI_RETURN_RECEIPT_HEAD_PM.WAREHOUSEIDENTITY" +
        " from   HAPI_RETURN_RECEIPT_HEAD_PM" +
        " where  HAPI_RETURN_RECEIPT_HEAD_PM.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        ReturnReceiptHeadPackingMaterialDoc aReturnReceiptHeadPackingMaterialDoc = new ReturnReceiptHeadPackingMaterialDoc();

        aReturnReceiptHeadPackingMaterialDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aReturnReceiptHeadPackingMaterialDoc.ReturnOrderNumber = null;
        else
        {
          aReturnReceiptHeadPackingMaterialDoc.ReturnOrderNumber = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aReturnReceiptHeadPackingMaterialDoc.ReturnOrderSequence = null;
        else
        {
          aReturnReceiptHeadPackingMaterialDoc.ReturnOrderSequence = r.GetInt32( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aReturnReceiptHeadPackingMaterialDoc.ReturnOrderSubSequence = null;
        else
        {
          aReturnReceiptHeadPackingMaterialDoc.ReturnOrderSubSequence = r.GetInt32( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aReturnReceiptHeadPackingMaterialDoc.ShipDate = null;
        else
        {
          aReturnReceiptHeadPackingMaterialDoc.ShipDate = DateTime.SpecifyKind(r.GetDateTime( 3 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 4 ) )
          aReturnReceiptHeadPackingMaterialDoc.ProductIdentity = null;
        else
        {
          aReturnReceiptHeadPackingMaterialDoc.ProductIdentity = r.GetString( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aReturnReceiptHeadPackingMaterialDoc.PickQuantity = null;
        else
        {
          aReturnReceiptHeadPackingMaterialDoc.PickQuantity = Convert.ToDouble( r.GetDecimal( 5 ) );
        }

        if ( r.IsDBNull( 6 ) )
          aReturnReceiptHeadPackingMaterialDoc.SpontaneousReturn = null;
        else
        {
          aReturnReceiptHeadPackingMaterialDoc.SpontaneousReturn = r.GetString( 6 );
        }

        if ( r.IsDBNull( 7 ) )
          aReturnReceiptHeadPackingMaterialDoc.WarehouseIdentity = null;
        else
        {
          aReturnReceiptHeadPackingMaterialDoc.WarehouseIdentity = r.GetString( 7 );
        }

        aReturnReceiptHeadPackingMaterialDocList.Add( aReturnReceiptHeadPackingMaterialDoc );
      }

      r.Close();


      return aReturnReceiptHeadPackingMaterialDocList;
    }
  }

  public class ReturnReceiptLineSelect
  {
    private Database db;

    public ReturnReceiptLineSelect(Database db)
    {
      this.db = db;

    }

    public ReturnReceiptLineDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (ReturnReceiptLineDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aReturnReceiptLineDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_RETURN_RECEIPT_LINE.RETURNORDERNUMBER" +
               ",HAPI_RETURN_RECEIPT_LINE.RETURNORDERSEQUENCE" +
               ",HAPI_RETURN_RECEIPT_LINE.RETURNORDERSUBSEQUENCE" +
               ",HAPI_RETURN_RECEIPT_LINE.SHIPDATE" +
               ",HAPI_RETURN_RECEIPT_LINE.RETURNORDERLINEPOSITION" +
               ",HAPI_RETURN_RECEIPT_LINE.RETURNORDERLINESEQUENCE" +
               ",HAPI_RETURN_RECEIPT_LINE.PRODUCTIDENTITY" +
               ",HAPI_RETURN_RECEIPT_LINE.PACKAGEIDENTITY" +
               ",HAPI_RETURN_RECEIPT_LINE.PRODUCTIONLOTIDENTITY" +
               ",HAPI_RETURN_RECEIPT_LINE.PRODUCTIONSUBLOTIDENTITY" +
               ",HAPI_RETURN_RECEIPT_LINE.MARKETINGLOTIDENTITY" +
               ",HAPI_RETURN_RECEIPT_LINE.PICKQUANTITY" +
               ",HAPI_RETURN_RECEIPT_LINE.QTYBACK" +
               ",HAPI_RETURN_RECEIPT_LINE.QTYCANCEL" +
               ",HAPI_RETURN_RECEIPT_LINE.QTYSURPLUSPICK" +
               ",HAPI_RETURN_RECEIPT_LINE.INVENTORYSTATUSCODE" +
               ",HAPI_RETURN_RECEIPT_LINE.MEASUREDQTY" +
               ",HAPI_RETURN_RECEIPT_LINE.OWNERIDENTITY" +
               ",HAPI_RETURN_RECEIPT_LINE.SERIALNUMBER" +
               ",HAPI_RETURN_RECEIPT_LINE.PICKORDERLINEIDENTITY" +
               ",HAPI_RETURN_RECEIPT_LINE.ITEMLOADIDENTITY" +
        " from   HAPI_RETURN_RECEIPT_LINE" +
        " where  HAPI_RETURN_RECEIPT_LINE.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        ReturnReceiptLineDoc aReturnReceiptLineDoc = new ReturnReceiptLineDoc();

        aReturnReceiptLineDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aReturnReceiptLineDoc.ReturnOrderNumber = null;
        else
        {
          aReturnReceiptLineDoc.ReturnOrderNumber = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aReturnReceiptLineDoc.ReturnOrderSequence = null;
        else
        {
          aReturnReceiptLineDoc.ReturnOrderSequence = r.GetInt32( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aReturnReceiptLineDoc.ReturnOrderSubSequence = null;
        else
        {
          aReturnReceiptLineDoc.ReturnOrderSubSequence = r.GetInt32( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aReturnReceiptLineDoc.ShipDate = null;
        else
        {
          aReturnReceiptLineDoc.ShipDate = DateTime.SpecifyKind(r.GetDateTime( 3 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 4 ) )
          aReturnReceiptLineDoc.ReturnOrderLinePosition = null;
        else
        {
          aReturnReceiptLineDoc.ReturnOrderLinePosition = r.GetInt32( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aReturnReceiptLineDoc.ReturnOrderLineSequence = null;
        else
        {
          aReturnReceiptLineDoc.ReturnOrderLineSequence = r.GetInt32( 5 );
        }

        if ( r.IsDBNull( 6 ) )
          aReturnReceiptLineDoc.ProductIdentity = null;
        else
        {
          aReturnReceiptLineDoc.ProductIdentity = r.GetString( 6 );
        }

        if ( r.IsDBNull( 7 ) )
          aReturnReceiptLineDoc.PackageIdentity = null;
        else
        {
          aReturnReceiptLineDoc.PackageIdentity = r.GetString( 7 );
        }

        if ( r.IsDBNull( 8 ) )
          aReturnReceiptLineDoc.ProductionLotIdentity = null;
        else
        {
          aReturnReceiptLineDoc.ProductionLotIdentity = r.GetString( 8 );
        }

        if ( r.IsDBNull( 9 ) )
          aReturnReceiptLineDoc.ProductionSubLotIdentity = null;
        else
        {
          aReturnReceiptLineDoc.ProductionSubLotIdentity = r.GetString( 9 );
        }

        if ( r.IsDBNull( 10 ) )
          aReturnReceiptLineDoc.MarketingLotIdentity = null;
        else
        {
          aReturnReceiptLineDoc.MarketingLotIdentity = r.GetString( 10 );
        }

        if ( r.IsDBNull( 11 ) )
          aReturnReceiptLineDoc.PickQuantity = null;
        else
        {
          aReturnReceiptLineDoc.PickQuantity = Convert.ToDouble( r.GetDecimal( 11 ) );
        }

        if ( r.IsDBNull( 12 ) )
          aReturnReceiptLineDoc.Qtyback = null;
        else
        {
          aReturnReceiptLineDoc.Qtyback = Convert.ToDouble( r.GetDecimal( 12 ) );
        }

        if ( r.IsDBNull( 13 ) )
          aReturnReceiptLineDoc.Qtycancel = null;
        else
        {
          aReturnReceiptLineDoc.Qtycancel = Convert.ToDouble( r.GetDecimal( 13 ) );
        }

        if ( r.IsDBNull( 14 ) )
          aReturnReceiptLineDoc.QtySurplusPick = null;
        else
        {
          aReturnReceiptLineDoc.QtySurplusPick = Convert.ToDouble( r.GetDecimal( 14 ) );
        }

        if ( r.IsDBNull( 15 ) )
          aReturnReceiptLineDoc.InventoryStatusCode = null;
        else
        {
          aReturnReceiptLineDoc.InventoryStatusCode = r.GetString( 15 );
        }

        if ( r.IsDBNull( 16 ) )
          aReturnReceiptLineDoc.MeasuredQty = null;
        else
        {
          aReturnReceiptLineDoc.MeasuredQty = Convert.ToDouble( r.GetDecimal( 16 ) );
        }

        if ( r.IsDBNull( 17 ) )
          aReturnReceiptLineDoc.OwnerIdentity = null;
        else
        {
          aReturnReceiptLineDoc.OwnerIdentity = r.GetString( 17 );
        }

        if ( r.IsDBNull( 18 ) )
          aReturnReceiptLineDoc.SerialNumber = null;
        else
        {
          aReturnReceiptLineDoc.SerialNumber = r.GetString( 18 );
        }

        if ( r.IsDBNull( 19 ) )
          aReturnReceiptLineDoc.PickOrderLineIdentity = null;
        else
        {
          aReturnReceiptLineDoc.PickOrderLineIdentity = r.GetString( 19 );
        }

        if ( r.IsDBNull( 20 ) )
          aReturnReceiptLineDoc.ItemLoadIdentity = null;
        else
        {
          aReturnReceiptLineDoc.ItemLoadIdentity = r.GetString( 20 );
        }

        aReturnReceiptLineDocList.Add( aReturnReceiptLineDoc );
      }

      r.Close();


      return aReturnReceiptLineDocList;
    }
  }

  public class ASNHeadSelect
  {
    private Database db;
    private ASNLoadCarrierSelect aASNLoadCarrierSelect;
    private ASNHeadTextSelect aASNHeadTextSelect;
    private ASNLineSelect aASNLineSelect;

    public ASNHeadSelect(Database db)
    {
      this.db = db;

      aASNLoadCarrierSelect = new ASNLoadCarrierSelect(this.db);
      aASNHeadTextSelect = new ASNHeadTextSelect(this.db);
      aASNLineSelect = new ASNLineSelect(this.db);
    }

    public ASNHeadDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (ASNHeadDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aASNHeadDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_SHIPMENT_REPORT_HEAD.ASNIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_HEAD.ASNSEQUENCENUMBER" +
               ",HAPI_SHIPMENT_REPORT_HEAD.SHIPFROMPARTYNODEIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_HEAD.ASNLEVEL" +
               ",HAPI_SHIPMENT_REPORT_HEAD.SHIPDATETIME" +
               ",HAPI_SHIPMENT_REPORT_HEAD.DOCUMENTDATETIME" +
               ",HAPI_SHIPMENT_REPORT_HEAD.DELIVERYWINDOWFIRST" +
               ",HAPI_SHIPMENT_REPORT_HEAD.DELIVERYWINDOWLAST" +
               ",HAPI_SHIPMENT_REPORT_HEAD.SCHEDULEDARRIVALDATETIME" +
               ",HAPI_SHIPMENT_REPORT_HEAD.SHIPFROMPARTYIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_HEAD.SHIPFROMPARTYQUALIFIER" +
               ",HAPI_SHIPMENT_REPORT_HEAD.SHIPTOPARTYNODEIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_HEAD.SHIPTOPARTYIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_HEAD.SHIPTOPARTYQUALIFIER" +
               ",HAPI_SHIPMENT_REPORT_HEAD.FORWARDERIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_HEAD.INSTRUCTIONS" +
               ",HAPI_SHIPMENT_REPORT_HEAD.NUMBEROFLOADCARRIERS" +
               ",HAPI_SHIPMENT_REPORT_HEAD.VEHICLEIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_HEAD.ESTIMATEDVOLUME" +
               ",HAPI_SHIPMENT_REPORT_HEAD.VOLUMEUOMIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_HEAD.BILLOFLADINGNUMBER" +
               ",HAPI_SHIPMENT_REPORT_HEAD.PACKINGSLIPNUMBER" +
               ",HAPI_SHIPMENT_REPORT_HEAD.SHIPPEDFROMWAREHOUSEIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_HEAD.SHIPPEDONDEPARTUREIDENTITY" +
        " from   HAPI_SHIPMENT_REPORT_HEAD" +
        " where  HAPI_SHIPMENT_REPORT_HEAD.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        ASNHeadDoc aASNHeadDoc = new ASNHeadDoc();

        aASNHeadDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aASNHeadDoc.ASNIdentity = null;
        else
        {
          aASNHeadDoc.ASNIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aASNHeadDoc.ASNSequenceNumber = null;
        else
        {
          aASNHeadDoc.ASNSequenceNumber = r.GetInt32( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aASNHeadDoc.ShipFromPartyNodeIdentity = null;
        else
        {
          aASNHeadDoc.ShipFromPartyNodeIdentity = r.GetString( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aASNHeadDoc.ASNLevel = null;
        else
        {
          aASNHeadDoc.ASNLevel = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aASNHeadDoc.ShipDateTime = null;
        else
        {
          aASNHeadDoc.ShipDateTime = DateTime.SpecifyKind(r.GetDateTime( 4 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 5 ) )
          aASNHeadDoc.DocumentDateTime = null;
        else
        {
          aASNHeadDoc.DocumentDateTime = DateTime.SpecifyKind(r.GetDateTime( 5 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 6 ) )
          aASNHeadDoc.DeliveryWindowFirst = null;
        else
        {
          aASNHeadDoc.DeliveryWindowFirst = DateTime.SpecifyKind(r.GetDateTime( 6 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 7 ) )
          aASNHeadDoc.DeliveryWindowLast = null;
        else
        {
          aASNHeadDoc.DeliveryWindowLast = DateTime.SpecifyKind(r.GetDateTime( 7 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 8 ) )
          aASNHeadDoc.ScheduledArrivalDateTime = null;
        else
        {
          aASNHeadDoc.ScheduledArrivalDateTime = DateTime.SpecifyKind(r.GetDateTime( 8 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 9 ) )
          aASNHeadDoc.ShipFromPartyIdentity = null;
        else
        {
          aASNHeadDoc.ShipFromPartyIdentity = r.GetString( 9 );
        }

        if ( r.IsDBNull( 10 ) )
          aASNHeadDoc.ShipFromPartyQualifier = null;
        else
        {
          aASNHeadDoc.ShipFromPartyQualifier = r.GetString( 10 );
        }

        if ( r.IsDBNull( 11 ) )
          aASNHeadDoc.ShipToPartyNodeIdentity = null;
        else
        {
          aASNHeadDoc.ShipToPartyNodeIdentity = r.GetString( 11 );
        }

        if ( r.IsDBNull( 12 ) )
          aASNHeadDoc.ShipToPartyIdentity = null;
        else
        {
          aASNHeadDoc.ShipToPartyIdentity = r.GetString( 12 );
        }

        if ( r.IsDBNull( 13 ) )
          aASNHeadDoc.ShipToPartyQualifier = null;
        else
        {
          aASNHeadDoc.ShipToPartyQualifier = r.GetString( 13 );
        }

        if ( r.IsDBNull( 14 ) )
          aASNHeadDoc.ForwarderIdentity = null;
        else
        {
          aASNHeadDoc.ForwarderIdentity = r.GetString( 14 );
        }

        if ( r.IsDBNull( 15 ) )
          aASNHeadDoc.Instructions = null;
        else
        {
          aASNHeadDoc.Instructions = r.GetString( 15 );
        }

        if ( r.IsDBNull( 16 ) )
          aASNHeadDoc.NumberOfLoadCarriers = null;
        else
        {
          aASNHeadDoc.NumberOfLoadCarriers = r.GetInt32( 16 );
        }

        if ( r.IsDBNull( 17 ) )
          aASNHeadDoc.VehicleIdentity = null;
        else
        {
          aASNHeadDoc.VehicleIdentity = r.GetString( 17 );
        }

        if ( r.IsDBNull( 18 ) )
          aASNHeadDoc.EstimatedVolume = null;
        else
        {
          aASNHeadDoc.EstimatedVolume = Convert.ToDouble( r.GetDecimal( 18 ) );
        }

        if ( r.IsDBNull( 19 ) )
          aASNHeadDoc.VolumeUOMIdentity = null;
        else
        {
          aASNHeadDoc.VolumeUOMIdentity = r.GetString( 19 );
        }

        if ( r.IsDBNull( 20 ) )
          aASNHeadDoc.BillOfLadingNumber = null;
        else
        {
          aASNHeadDoc.BillOfLadingNumber = r.GetString( 20 );
        }

        if ( r.IsDBNull( 21 ) )
          aASNHeadDoc.PackingSlipNumber = null;
        else
        {
          aASNHeadDoc.PackingSlipNumber = r.GetString( 21 );
        }

        if ( r.IsDBNull( 22 ) )
          aASNHeadDoc.ShippedFromWarehouseIdentity = null;
        else
        {
          aASNHeadDoc.ShippedFromWarehouseIdentity = r.GetString( 22 );
        }

        if ( r.IsDBNull( 23 ) )
          aASNHeadDoc.ShippedOnDepartureIdentity = null;
        else
        {
          aASNHeadDoc.ShippedOnDepartureIdentity = r.GetString( 23 );
        }

        aASNHeadDocList.Add( aASNHeadDoc );
      }

      r.Close();

      ArrayList aASNLoadCarrierDocList = aASNLoadCarrierSelect.InternalProcess( HapiTransId );
      ArrayList aASNHeadTextDocList = aASNHeadTextSelect.InternalProcess( HapiTransId );
      ArrayList aASNLineDocList = aASNLineSelect.InternalProcess( HapiTransId );

      foreach ( ASNHeadDoc aASNHeadDoc in aASNHeadDocList )
      {
        ArrayList ConnectedChildren = null;
        ConnectedChildren = new ArrayList();

        foreach ( ASNLoadCarrierDoc aASNLoadCarrierDoc in aASNLoadCarrierDocList )
        {
          if ( GeneratedComparer.EqualASNHeadDocASNLoadCarrierDoc( aASNHeadDoc, aASNLoadCarrierDoc ) )
            ConnectedChildren.Add( aASNLoadCarrierDoc );
        }
        aASNHeadDoc.aASNLoadCarrierDocs = ConnectedChildren.ToArray(typeof(ASNLoadCarrierDoc)) as ASNLoadCarrierDoc[];
        ConnectedChildren = new ArrayList();

        foreach ( ASNHeadTextDoc aASNHeadTextDoc in aASNHeadTextDocList )
        {
          if ( GeneratedComparer.EqualASNHeadDocASNHeadTextDoc( aASNHeadDoc, aASNHeadTextDoc ) )
            ConnectedChildren.Add( aASNHeadTextDoc );
        }
        aASNHeadDoc.aASNHeadTextDocs = ConnectedChildren.ToArray(typeof(ASNHeadTextDoc)) as ASNHeadTextDoc[];
        ConnectedChildren = new ArrayList();

        foreach ( ASNLineDoc aASNLineDoc in aASNLineDocList )
        {
          if ( GeneratedComparer.EqualASNHeadDocASNLineDoc( aASNHeadDoc, aASNLineDoc ) )
            ConnectedChildren.Add( aASNLineDoc );
        }
        aASNHeadDoc.aASNLineDocs = ConnectedChildren.ToArray(typeof(ASNLineDoc)) as ASNLineDoc[];
      }

      return aASNHeadDocList;
    }
  }

  public class ASNLoadCarrierSelect
  {
    private Database db;

    public ASNLoadCarrierSelect(Database db)
    {
      this.db = db;

    }

    public ASNLoadCarrierDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (ASNLoadCarrierDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aASNLoadCarrierDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_SHIPMENT_REPORT_CARRIER.ASNIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_CARRIER.ASNSEQUENCENUMBER" +
               ",HAPI_SHIPMENT_REPORT_CARRIER.SHIPFROMPARTYNODEIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_CARRIER.LOADCARRIERIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_CARRIER.LOADCARRIERQUALIFIER" +
               ",HAPI_SHIPMENT_REPORT_CARRIER.LOADCARRIERTYPE" +
               ",HAPI_SHIPMENT_REPORT_CARRIER.EXTERNALLOADCARRIERTYPE" +
               ",HAPI_SHIPMENT_REPORT_CARRIER.PARENTLOADCARRIERIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_CARRIER.PRODUCTTRANSPORTIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_CARRIER.SHIPFROMPARTYIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_CARRIER.SHIPTOPARTYNODEIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_CARRIER.SHIPTOPARTYIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_CARRIER.SHIPTOPARTYQUALIFIER" +
               ",HAPI_SHIPMENT_REPORT_CARRIER.SHIPTOCUSTOMERNODEIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_CARRIER.SHIPTOCUSTOMERIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_CARRIER.SHIPTOCUSTOMERQUALIFIER" +
               ",HAPI_SHIPMENT_REPORT_CARRIER.INSTRUCTIONS" +
               ",HAPI_SHIPMENT_REPORT_CARRIER.TOTALWEIGHT" +
               ",HAPI_SHIPMENT_REPORT_CARRIER.WEIGHTUOMIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_CARRIER.TOTALVOLUME" +
               ",HAPI_SHIPMENT_REPORT_CARRIER.VOLUMEUOMIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_CARRIER.TOTALHEIGHT" +
               ",HAPI_SHIPMENT_REPORT_CARRIER.HEIGHTUOMIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_CARRIER.FIRSTPLANNEDDELIVERYDTM" +
               ",HAPI_SHIPMENT_REPORT_CARRIER.LASTPLANNEDDELIVERYDTM" +
        " from   HAPI_SHIPMENT_REPORT_CARRIER" +
        " where  HAPI_SHIPMENT_REPORT_CARRIER.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        ASNLoadCarrierDoc aASNLoadCarrierDoc = new ASNLoadCarrierDoc();

        aASNLoadCarrierDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aASNLoadCarrierDoc.ASNIdentity = null;
        else
        {
          aASNLoadCarrierDoc.ASNIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aASNLoadCarrierDoc.ASNSequenceNumber = null;
        else
        {
          aASNLoadCarrierDoc.ASNSequenceNumber = r.GetInt32( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aASNLoadCarrierDoc.ShipFromPartyNodeIdentity = null;
        else
        {
          aASNLoadCarrierDoc.ShipFromPartyNodeIdentity = r.GetString( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aASNLoadCarrierDoc.LoadCarrierIdentity = null;
        else
        {
          aASNLoadCarrierDoc.LoadCarrierIdentity = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aASNLoadCarrierDoc.LoadCarrierQualifier = null;
        else
        {
          aASNLoadCarrierDoc.LoadCarrierQualifier = r.GetString( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aASNLoadCarrierDoc.LoadCarrierType = null;
        else
        {
          aASNLoadCarrierDoc.LoadCarrierType = r.GetString( 5 );
        }

        if ( r.IsDBNull( 6 ) )
          aASNLoadCarrierDoc.ExternalLoadCarrierType = null;
        else
        {
          aASNLoadCarrierDoc.ExternalLoadCarrierType = r.GetString( 6 );
        }

        if ( r.IsDBNull( 7 ) )
          aASNLoadCarrierDoc.ParentLoadCarrierIdentity = null;
        else
        {
          aASNLoadCarrierDoc.ParentLoadCarrierIdentity = r.GetString( 7 );
        }

        if ( r.IsDBNull( 8 ) )
          aASNLoadCarrierDoc.ProductTransportIdentity = null;
        else
        {
          aASNLoadCarrierDoc.ProductTransportIdentity = r.GetString( 8 );
        }

        if ( r.IsDBNull( 9 ) )
          aASNLoadCarrierDoc.ShipFromPartyIdentity = null;
        else
        {
          aASNLoadCarrierDoc.ShipFromPartyIdentity = r.GetString( 9 );
        }

        if ( r.IsDBNull( 10 ) )
          aASNLoadCarrierDoc.ShipToPartyNodeIdentity = null;
        else
        {
          aASNLoadCarrierDoc.ShipToPartyNodeIdentity = r.GetString( 10 );
        }

        if ( r.IsDBNull( 11 ) )
          aASNLoadCarrierDoc.ShipToPartyIdentity = null;
        else
        {
          aASNLoadCarrierDoc.ShipToPartyIdentity = r.GetString( 11 );
        }

        if ( r.IsDBNull( 12 ) )
          aASNLoadCarrierDoc.ShipToPartyQualifier = null;
        else
        {
          aASNLoadCarrierDoc.ShipToPartyQualifier = r.GetString( 12 );
        }

        if ( r.IsDBNull( 13 ) )
          aASNLoadCarrierDoc.ShipToCustomerNodeIdentity = null;
        else
        {
          aASNLoadCarrierDoc.ShipToCustomerNodeIdentity = r.GetString( 13 );
        }

        if ( r.IsDBNull( 14 ) )
          aASNLoadCarrierDoc.ShipToCustomerIdentity = null;
        else
        {
          aASNLoadCarrierDoc.ShipToCustomerIdentity = r.GetString( 14 );
        }

        if ( r.IsDBNull( 15 ) )
          aASNLoadCarrierDoc.ShipToCustomerQualifier = null;
        else
        {
          aASNLoadCarrierDoc.ShipToCustomerQualifier = r.GetString( 15 );
        }

        if ( r.IsDBNull( 16 ) )
          aASNLoadCarrierDoc.Instructions = null;
        else
        {
          aASNLoadCarrierDoc.Instructions = r.GetString( 16 );
        }

        if ( r.IsDBNull( 17 ) )
          aASNLoadCarrierDoc.TotalWeight = null;
        else
        {
          aASNLoadCarrierDoc.TotalWeight = Convert.ToDouble( r.GetDecimal( 17 ) );
        }

        if ( r.IsDBNull( 18 ) )
          aASNLoadCarrierDoc.WeightUOMIdentity = null;
        else
        {
          aASNLoadCarrierDoc.WeightUOMIdentity = r.GetString( 18 );
        }

        if ( r.IsDBNull( 19 ) )
          aASNLoadCarrierDoc.TotalVolume = null;
        else
        {
          aASNLoadCarrierDoc.TotalVolume = Convert.ToDouble( r.GetDecimal( 19 ) );
        }

        if ( r.IsDBNull( 20 ) )
          aASNLoadCarrierDoc.VolumeUOMIdentity = null;
        else
        {
          aASNLoadCarrierDoc.VolumeUOMIdentity = r.GetString( 20 );
        }

        if ( r.IsDBNull( 21 ) )
          aASNLoadCarrierDoc.TotalHeight = null;
        else
        {
          aASNLoadCarrierDoc.TotalHeight = Convert.ToDouble( r.GetDecimal( 21 ) );
        }

        if ( r.IsDBNull( 22 ) )
          aASNLoadCarrierDoc.HeightUOMIdentity = null;
        else
        {
          aASNLoadCarrierDoc.HeightUOMIdentity = r.GetString( 22 );
        }

        if ( r.IsDBNull( 23 ) )
          aASNLoadCarrierDoc.FirstPlannedDeliveryDtm = null;
        else
        {
          aASNLoadCarrierDoc.FirstPlannedDeliveryDtm = DateTime.SpecifyKind(r.GetDateTime( 23 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 24 ) )
          aASNLoadCarrierDoc.LastPlannedDeliveryDtm = null;
        else
        {
          aASNLoadCarrierDoc.LastPlannedDeliveryDtm = DateTime.SpecifyKind(r.GetDateTime( 24 ), DateTimeKind.Local);
        }

        aASNLoadCarrierDocList.Add( aASNLoadCarrierDoc );
      }

      r.Close();


      return aASNLoadCarrierDocList;
    }
  }

  public class ASNHeadTextSelect
  {
    private Database db;

    public ASNHeadTextSelect(Database db)
    {
      this.db = db;

    }

    public ASNHeadTextDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (ASNHeadTextDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aASNHeadTextDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_SHIPMENT_REPORT_HEAD_TEXT.ASNIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_HEAD_TEXT.ASNSEQUENCENUMBER" +
               ",HAPI_SHIPMENT_REPORT_HEAD_TEXT.CUSTOMERORDERNUMBER" +
               ",HAPI_SHIPMENT_REPORT_HEAD_TEXT.CUSTOMERORDERSEQUENCE" +
               ",HAPI_SHIPMENT_REPORT_HEAD_TEXT.TEXTFUNCTION" +
               ",HAPI_SHIPMENT_REPORT_HEAD_TEXT.TEXT" +
        " from   HAPI_SHIPMENT_REPORT_HEAD_TEXT" +
        " where  HAPI_SHIPMENT_REPORT_HEAD_TEXT.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        ASNHeadTextDoc aASNHeadTextDoc = new ASNHeadTextDoc();

        aASNHeadTextDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aASNHeadTextDoc.ASNIdentity = null;
        else
        {
          aASNHeadTextDoc.ASNIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aASNHeadTextDoc.ASNSequenceNumber = null;
        else
        {
          aASNHeadTextDoc.ASNSequenceNumber = r.GetInt32( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aASNHeadTextDoc.CustomerOrderNumber = null;
        else
        {
          aASNHeadTextDoc.CustomerOrderNumber = r.GetString( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aASNHeadTextDoc.CustomerOrderSequence = null;
        else
        {
          aASNHeadTextDoc.CustomerOrderSequence = r.GetInt32( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aASNHeadTextDoc.TextFunction = null;
        else
        {
          aASNHeadTextDoc.TextFunction = r.GetString( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aASNHeadTextDoc.Text = null;
        else
        {
          aASNHeadTextDoc.Text = r.GetString( 5 );
        }

        aASNHeadTextDocList.Add( aASNHeadTextDoc );
      }

      r.Close();


      return aASNHeadTextDocList;
    }
  }

  public class ASNLineSelect
  {
    private Database db;
    private ASNLineTextSelect aASNLineTextSelect;

    public ASNLineSelect(Database db)
    {
      this.db = db;

      aASNLineTextSelect = new ASNLineTextSelect(this.db);
    }

    public ASNLineDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (ASNLineDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aASNLineDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_SHIPMENT_REPORT_LINE.ASNIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_LINE.ASNSEQUENCENUMBER" +
               ",HAPI_SHIPMENT_REPORT_LINE.SHIPFROMPARTYNODEIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_LINE.ASNLINENUMBER" +
               ",HAPI_SHIPMENT_REPORT_LINE.ASNLINESEQUENCENUMBER" +
               ",HAPI_SHIPMENT_REPORT_LINE.LOADCARRIERIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_LINE.SHIPFROMPARTYIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_LINE.SHIPTOPARTYNODEIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_LINE.SHIPTOPARTYIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_LINE.SHIPTOPARTYQUALIFIER" +
               ",HAPI_SHIPMENT_REPORT_LINE.SHIPTOCUSTOMERNODEIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_LINE.SHIPTOCUSTOMERIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_LINE.SHIPTOCUSTOMERQUALIFIER" +
               ",HAPI_SHIPMENT_REPORT_LINE.SELLTOCUSTOMERIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_LINE.SELLTOCUSTOMERQUALIFIER" +
               ",HAPI_SHIPMENT_REPORT_LINE.OWNERIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_LINE.OWNERIDENTITYATSHIPTOCUSTOMER" +
               ",HAPI_SHIPMENT_REPORT_LINE.VENDORIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_LINE.VENDORPARTYNODEIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_LINE.PRODUCTNUMBER" +
               ",HAPI_SHIPMENT_REPORT_LINE.PRODUCTDESCRIPTION" +
               ",HAPI_SHIPMENT_REPORT_LINE.PRODUCTNUMBERTYPE" +
               ",HAPI_SHIPMENT_REPORT_LINE.ALTERNATIVEPRODUCTNUMBER" +
               ",HAPI_SHIPMENT_REPORT_LINE.ALTERNATIVEPRODUCTDESCRIPTION" +
               ",HAPI_SHIPMENT_REPORT_LINE.PRODUCTDATE" +
               ",HAPI_SHIPMENT_REPORT_LINE.EXPIRYDATE" +
               ",HAPI_SHIPMENT_REPORT_LINE.MANUFACTURINGDATE" +
               ",HAPI_SHIPMENT_REPORT_LINE.VENDORPRODUCTNUMBER" +
               ",HAPI_SHIPMENT_REPORT_LINE.PURCHASEPRICE" +
               ",HAPI_SHIPMENT_REPORT_LINE.PACKAGEIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_LINE.PRODUCTIONLOTIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_LINE.PRODUCTIONSUBLOTIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_LINE.MANUFACTURINGUNIT" +
               ",HAPI_SHIPMENT_REPORT_LINE.MARKETINGLOTIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_LINE.SERIALNUMBER" +
               ",HAPI_SHIPMENT_REPORT_LINE.STORAGELOT" +
               ",HAPI_SHIPMENT_REPORT_LINE.SHIPPEDQUANTITY" +
               ",HAPI_SHIPMENT_REPORT_LINE.MEASUREDQUANTITY" +
               ",HAPI_SHIPMENT_REPORT_LINE.MEASUREQUALIFIER" +
               ",HAPI_SHIPMENT_REPORT_LINE.VOLUME" +
               ",HAPI_SHIPMENT_REPORT_LINE.VOLUMEUOMIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_LINE.WEIGHT" +
               ",HAPI_SHIPMENT_REPORT_LINE.WEIGHTUOMIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_LINE.CUSTOMERORDERNUMBER" +
               ",HAPI_SHIPMENT_REPORT_LINE.CUSTOMERORDERSEQUENCE" +
               ",HAPI_SHIPMENT_REPORT_LINE.CUSTOMERORDERLINEPOSITION" +
               ",HAPI_SHIPMENT_REPORT_LINE.CUSTOMERORDERLINESEQUENCE" +
               ",HAPI_SHIPMENT_REPORT_LINE.CUSTOMERORDERLINEKITPOSITION" +
               ",HAPI_SHIPMENT_REPORT_LINE.ORIGINALPURCHASEORDERNUMBER" +
               ",HAPI_SHIPMENT_REPORT_LINE.ORIGINALPURCHASEORDERSEQUENCE" +
               ",HAPI_SHIPMENT_REPORT_LINE.ORIGINALPURCHASEORDERLINEPOS" +
               ",HAPI_SHIPMENT_REPORT_LINE.ORIGINALPURCHASEORDERLINESEQ" +
               ",HAPI_SHIPMENT_REPORT_LINE.ORIGINALCUSTOMERREFERENCE" +
               ",HAPI_SHIPMENT_REPORT_LINE.INVENTORYSTATUSCODE" +
               ",HAPI_SHIPMENT_REPORT_LINE.INVENTORYSTATUSDAYS" +
               ",HAPI_SHIPMENT_REPORT_LINE.INVENTORYSTATUSKEY" +
               ",HAPI_SHIPMENT_REPORT_LINE.INVENTORYSTATUSTEXT" +
               ",HAPI_SHIPMENT_REPORT_LINE.INVENTORYSTATUSALARMDATE" +
               ",HAPI_SHIPMENT_REPORT_LINE.INSTRUCTIONS" +
               ",HAPI_SHIPMENT_REPORT_LINE.PREDEFINEDITEMLOADIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_LINE.PRODUCTNUMBERSHIPFROMPARTNER" +
               ",HAPI_SHIPMENT_REPORT_LINE.PRODUCTNUMBERSHIPTOPARTNER" +
               ",HAPI_SHIPMENT_REPORT_LINE.GLOBALPRODUCTNUMBER" +
               ",HAPI_SHIPMENT_REPORT_LINE.PACKINGMATERIAL" +
               ",HAPI_SHIPMENT_REPORT_LINE.CUSTOMERORDERTYPE" +
               ",HAPI_SHIPMENT_REPORT_LINE.PURCHASEORDERNUMBER" +
               ",HAPI_SHIPMENT_REPORT_LINE.PURCHASEORDERSEQUENCE" +
               ",HAPI_SHIPMENT_REPORT_LINE.PURCHASEORDERLINEPOS" +
               ",HAPI_SHIPMENT_REPORT_LINE.PURCHASEORDERLINESEQ" +
               ",HAPI_SHIPMENT_REPORT_LINE.STOCKEDPRODUCTNUMBER" +
               ",HAPI_SHIPMENT_REPORT_LINE.GLOBALSTOCKEDPRODUCTNUMBER" +
               ",HAPI_SHIPMENT_REPORT_LINE.FROMPARTYIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_LINE.FROMPARTYQUALIFIER" +
               ",HAPI_SHIPMENT_REPORT_LINE.CUSTOMERRETURNORDERNUMBER" +
               ",HAPI_SHIPMENT_REPORT_LINE.CUSTOMERRETURNORDERSEQUENCE" +
               ",HAPI_SHIPMENT_REPORT_LINE.CUSTOMERRETURNORDERLINEPOS" +
               ",HAPI_SHIPMENT_REPORT_LINE.CUSTOMERRETURNORDERLINEKITPOS" +
               ",HAPI_SHIPMENT_REPORT_LINE.CUSTOMERRETURNORDERLINESEQ" +
               ",HAPI_SHIPMENT_REPORT_LINE.ACTIONCODE" +
               ",HAPI_SHIPMENT_REPORT_LINE.ACTIONCODEREQUIREMENT" +
               ",HAPI_SHIPMENT_REPORT_LINE.REASONCODE" +
               ",HAPI_SHIPMENT_REPORT_LINE.REASONTEXT" +
               ",HAPI_SHIPMENT_REPORT_LINE.SHIPTOVENDORIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_LINE.SHIPTOVENDORQUALIFIER" +
               ",HAPI_SHIPMENT_REPORT_LINE.DISCREPANCYQUANTITY" +
               ",HAPI_SHIPMENT_REPORT_LINE.DISCREPANCYCODE" +
               ",HAPI_SHIPMENT_REPORT_LINE.DISCREPANCYTEXT" +
               ",HAPI_SHIPMENT_REPORT_LINE.QUANTITYUPPERTOLERANCE" +
               ",HAPI_SHIPMENT_REPORT_LINE.CATCHMEASURELOWERTOLERANCE" +
               ",HAPI_SHIPMENT_REPORT_LINE.CATCHMEASUREUPPERTOLERANCE" +
               ",HAPI_SHIPMENT_REPORT_LINE.RESERVEFORASSEMBLY" +
        " from   HAPI_SHIPMENT_REPORT_LINE" +
        " where  HAPI_SHIPMENT_REPORT_LINE.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        ASNLineDoc aASNLineDoc = new ASNLineDoc();

        aASNLineDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aASNLineDoc.ASNIdentity = null;
        else
        {
          aASNLineDoc.ASNIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aASNLineDoc.ASNSequenceNumber = null;
        else
        {
          aASNLineDoc.ASNSequenceNumber = r.GetInt32( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aASNLineDoc.ShipFromPartyNodeIdentity = null;
        else
        {
          aASNLineDoc.ShipFromPartyNodeIdentity = r.GetString( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aASNLineDoc.ASNLineNumber = null;
        else
        {
          aASNLineDoc.ASNLineNumber = r.GetInt32( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aASNLineDoc.ASNLineSequenceNumber = null;
        else
        {
          aASNLineDoc.ASNLineSequenceNumber = r.GetInt32( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aASNLineDoc.LoadCarrierIdentity = null;
        else
        {
          aASNLineDoc.LoadCarrierIdentity = r.GetString( 5 );
        }

        if ( r.IsDBNull( 6 ) )
          aASNLineDoc.ShipFromPartyIdentity = null;
        else
        {
          aASNLineDoc.ShipFromPartyIdentity = r.GetString( 6 );
        }

        if ( r.IsDBNull( 7 ) )
          aASNLineDoc.ShipToPartyNodeIdentity = null;
        else
        {
          aASNLineDoc.ShipToPartyNodeIdentity = r.GetString( 7 );
        }

        if ( r.IsDBNull( 8 ) )
          aASNLineDoc.ShipToPartyIdentity = null;
        else
        {
          aASNLineDoc.ShipToPartyIdentity = r.GetString( 8 );
        }

        if ( r.IsDBNull( 9 ) )
          aASNLineDoc.ShipToPartyQualifier = null;
        else
        {
          aASNLineDoc.ShipToPartyQualifier = r.GetString( 9 );
        }

        if ( r.IsDBNull( 10 ) )
          aASNLineDoc.ShipToCustomerNodeIdentity = null;
        else
        {
          aASNLineDoc.ShipToCustomerNodeIdentity = r.GetString( 10 );
        }

        if ( r.IsDBNull( 11 ) )
          aASNLineDoc.ShipToCustomerIdentity = null;
        else
        {
          aASNLineDoc.ShipToCustomerIdentity = r.GetString( 11 );
        }

        if ( r.IsDBNull( 12 ) )
          aASNLineDoc.ShipToCustomerQualifier = null;
        else
        {
          aASNLineDoc.ShipToCustomerQualifier = r.GetString( 12 );
        }

        if ( r.IsDBNull( 13 ) )
          aASNLineDoc.SellToCustomerIdentity = null;
        else
        {
          aASNLineDoc.SellToCustomerIdentity = r.GetString( 13 );
        }

        if ( r.IsDBNull( 14 ) )
          aASNLineDoc.SellToCustomerQualifier = null;
        else
        {
          aASNLineDoc.SellToCustomerQualifier = r.GetString( 14 );
        }

        if ( r.IsDBNull( 15 ) )
          aASNLineDoc.OwnerIdentity = null;
        else
        {
          aASNLineDoc.OwnerIdentity = r.GetString( 15 );
        }

        if ( r.IsDBNull( 16 ) )
          aASNLineDoc.OwnerIdentityAtShipToCustomer = null;
        else
        {
          aASNLineDoc.OwnerIdentityAtShipToCustomer = r.GetString( 16 );
        }

        if ( r.IsDBNull( 17 ) )
          aASNLineDoc.VendorIdentity = null;
        else
        {
          aASNLineDoc.VendorIdentity = r.GetString( 17 );
        }

        if ( r.IsDBNull( 18 ) )
          aASNLineDoc.VendorPartyNodeIdentity = null;
        else
        {
          aASNLineDoc.VendorPartyNodeIdentity = r.GetString( 18 );
        }

        if ( r.IsDBNull( 19 ) )
          aASNLineDoc.ProductNumber = null;
        else
        {
          aASNLineDoc.ProductNumber = r.GetString( 19 );
        }

        if ( r.IsDBNull( 20 ) )
          aASNLineDoc.ProductDescription = null;
        else
        {
          aASNLineDoc.ProductDescription = r.GetString( 20 );
        }

        if ( r.IsDBNull( 21 ) )
          aASNLineDoc.ProductNumberType = null;
        else
        {
          aASNLineDoc.ProductNumberType = r.GetString( 21 );
        }

        if ( r.IsDBNull( 22 ) )
          aASNLineDoc.AlternativeProductNumber = null;
        else
        {
          aASNLineDoc.AlternativeProductNumber = r.GetString( 22 );
        }

        if ( r.IsDBNull( 23 ) )
          aASNLineDoc.AlternativeProductDescription = null;
        else
        {
          aASNLineDoc.AlternativeProductDescription = r.GetString( 23 );
        }

        if ( r.IsDBNull( 24 ) )
          aASNLineDoc.ProductDate = null;
        else
        {
          aASNLineDoc.ProductDate = DateTime.SpecifyKind(r.GetDateTime( 24 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 25 ) )
          aASNLineDoc.ExpiryDate = null;
        else
        {
          aASNLineDoc.ExpiryDate = DateTime.SpecifyKind(r.GetDateTime( 25 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 26 ) )
          aASNLineDoc.ManufacturingDate = null;
        else
        {
          aASNLineDoc.ManufacturingDate = DateTime.SpecifyKind(r.GetDateTime( 26 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 27 ) )
          aASNLineDoc.VendorProductNumber = null;
        else
        {
          aASNLineDoc.VendorProductNumber = r.GetString( 27 );
        }

        if ( r.IsDBNull( 28 ) )
          aASNLineDoc.PurchasePrice = null;
        else
        {
          aASNLineDoc.PurchasePrice = Convert.ToDouble( r.GetDecimal( 28 ) );
        }

        if ( r.IsDBNull( 29 ) )
          aASNLineDoc.PackageIdentity = null;
        else
        {
          aASNLineDoc.PackageIdentity = r.GetString( 29 );
        }

        if ( r.IsDBNull( 30 ) )
          aASNLineDoc.ProductionLotIdentity = null;
        else
        {
          aASNLineDoc.ProductionLotIdentity = r.GetString( 30 );
        }

        if ( r.IsDBNull( 31 ) )
          aASNLineDoc.ProductionSubLotIdentity = null;
        else
        {
          aASNLineDoc.ProductionSubLotIdentity = r.GetString( 31 );
        }

        if ( r.IsDBNull( 32 ) )
          aASNLineDoc.ManufacturingUnit = null;
        else
        {
          aASNLineDoc.ManufacturingUnit = r.GetString( 32 );
        }

        if ( r.IsDBNull( 33 ) )
          aASNLineDoc.MarketingLotIdentity = null;
        else
        {
          aASNLineDoc.MarketingLotIdentity = r.GetString( 33 );
        }

        if ( r.IsDBNull( 34 ) )
          aASNLineDoc.SerialNumber = null;
        else
        {
          aASNLineDoc.SerialNumber = r.GetString( 34 );
        }

        if ( r.IsDBNull( 35 ) )
          aASNLineDoc.StorageLot = null;
        else
        {
          aASNLineDoc.StorageLot = r.GetString( 35 );
        }

        if ( r.IsDBNull( 36 ) )
          aASNLineDoc.ShippedQuantity = null;
        else
        {
          aASNLineDoc.ShippedQuantity = Convert.ToDouble( r.GetDecimal( 36 ) );
        }

        if ( r.IsDBNull( 37 ) )
          aASNLineDoc.MeasuredQuantity = null;
        else
        {
          aASNLineDoc.MeasuredQuantity = Convert.ToDouble( r.GetDecimal( 37 ) );
        }

        if ( r.IsDBNull( 38 ) )
          aASNLineDoc.MeasureQualifier = null;
        else
        {
          aASNLineDoc.MeasureQualifier = r.GetString( 38 );
        }

        if ( r.IsDBNull( 39 ) )
          aASNLineDoc.Volume = null;
        else
        {
          aASNLineDoc.Volume = Convert.ToDouble( r.GetDecimal( 39 ) );
        }

        if ( r.IsDBNull( 40 ) )
          aASNLineDoc.VolumeUOMIdentity = null;
        else
        {
          aASNLineDoc.VolumeUOMIdentity = r.GetString( 40 );
        }

        if ( r.IsDBNull( 41 ) )
          aASNLineDoc.Weight = null;
        else
        {
          aASNLineDoc.Weight = Convert.ToDouble( r.GetDecimal( 41 ) );
        }

        if ( r.IsDBNull( 42 ) )
          aASNLineDoc.WeightUOMIdentity = null;
        else
        {
          aASNLineDoc.WeightUOMIdentity = r.GetString( 42 );
        }

        if ( r.IsDBNull( 43 ) )
          aASNLineDoc.CustomerOrderNumber = null;
        else
        {
          aASNLineDoc.CustomerOrderNumber = r.GetString( 43 );
        }

        if ( r.IsDBNull( 44 ) )
          aASNLineDoc.CustomerOrderSequence = null;
        else
        {
          aASNLineDoc.CustomerOrderSequence = r.GetInt32( 44 );
        }

        if ( r.IsDBNull( 45 ) )
          aASNLineDoc.CustomerOrderLinePosition = null;
        else
        {
          aASNLineDoc.CustomerOrderLinePosition = r.GetInt32( 45 );
        }

        if ( r.IsDBNull( 46 ) )
          aASNLineDoc.CustomerOrderLineSequence = null;
        else
        {
          aASNLineDoc.CustomerOrderLineSequence = r.GetInt32( 46 );
        }

        if ( r.IsDBNull( 47 ) )
          aASNLineDoc.CustomerOrderLineKitPosition = null;
        else
        {
          aASNLineDoc.CustomerOrderLineKitPosition = r.GetInt32( 47 );
        }

        if ( r.IsDBNull( 48 ) )
          aASNLineDoc.OriginalPurchaseOrderNumber = null;
        else
        {
          aASNLineDoc.OriginalPurchaseOrderNumber = r.GetString( 48 );
        }

        if ( r.IsDBNull( 49 ) )
          aASNLineDoc.OriginalPurchaseOrderSequence = null;
        else
        {
          aASNLineDoc.OriginalPurchaseOrderSequence = r.GetInt32( 49 );
        }

        if ( r.IsDBNull( 50 ) )
          aASNLineDoc.OriginalPurchaseOrderLinePos = null;
        else
        {
          aASNLineDoc.OriginalPurchaseOrderLinePos = Convert.ToDouble( r.GetDecimal( 50 ) );
        }

        if ( r.IsDBNull( 51 ) )
          aASNLineDoc.OriginalPurchaseOrderLineSeq = null;
        else
        {
          aASNLineDoc.OriginalPurchaseOrderLineSeq = r.GetInt32( 51 );
        }

        if ( r.IsDBNull( 52 ) )
          aASNLineDoc.OriginalCustomerReference = null;
        else
        {
          aASNLineDoc.OriginalCustomerReference = r.GetString( 52 );
        }

        if ( r.IsDBNull( 53 ) )
          aASNLineDoc.InventoryStatusCode = null;
        else
        {
          aASNLineDoc.InventoryStatusCode = r.GetString( 53 );
        }

        if ( r.IsDBNull( 54 ) )
          aASNLineDoc.InventoryStatusDays = null;
        else
        {
          aASNLineDoc.InventoryStatusDays = r.GetInt32( 54 );
        }

        if ( r.IsDBNull( 55 ) )
          aASNLineDoc.InventorystatusKey = null;
        else
        {
          aASNLineDoc.InventorystatusKey = r.GetString( 55 );
        }

        if ( r.IsDBNull( 56 ) )
          aASNLineDoc.InventorystatusText = null;
        else
        {
          aASNLineDoc.InventorystatusText = r.GetString( 56 );
        }

        if ( r.IsDBNull( 57 ) )
          aASNLineDoc.InventorystatusAlarmDate = null;
        else
        {
          aASNLineDoc.InventorystatusAlarmDate = DateTime.SpecifyKind(r.GetDateTime( 57 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 58 ) )
          aASNLineDoc.Instructions = null;
        else
        {
          aASNLineDoc.Instructions = r.GetString( 58 );
        }

        if ( r.IsDBNull( 59 ) )
          aASNLineDoc.PredefinedItemLoadIdentity = null;
        else
        {
          aASNLineDoc.PredefinedItemLoadIdentity = r.GetString( 59 );
        }

        if ( r.IsDBNull( 60 ) )
          aASNLineDoc.ProductNumberShipFromPartner = null;
        else
        {
          aASNLineDoc.ProductNumberShipFromPartner = r.GetString( 60 );
        }

        if ( r.IsDBNull( 61 ) )
          aASNLineDoc.ProductNumberShipToPartner = null;
        else
        {
          aASNLineDoc.ProductNumberShipToPartner = r.GetString( 61 );
        }

        if ( r.IsDBNull( 62 ) )
          aASNLineDoc.GlobalProductNumber = null;
        else
        {
          aASNLineDoc.GlobalProductNumber = r.GetString( 62 );
        }

        if ( r.IsDBNull( 63 ) )
          aASNLineDoc.PackingMaterial = null;
        else
        {
          aASNLineDoc.PackingMaterial = r.GetString( 63 );
        }

        if ( r.IsDBNull( 64 ) )
          aASNLineDoc.CustomerOrderType = null;
        else
        {
          aASNLineDoc.CustomerOrderType = r.GetString( 64 );
        }

        if ( r.IsDBNull( 65 ) )
          aASNLineDoc.PurchaseOrderNumber = null;
        else
        {
          aASNLineDoc.PurchaseOrderNumber = r.GetString( 65 );
        }

        if ( r.IsDBNull( 66 ) )
          aASNLineDoc.PurchaseOrderSequence = null;
        else
        {
          aASNLineDoc.PurchaseOrderSequence = r.GetInt32( 66 );
        }

        if ( r.IsDBNull( 67 ) )
          aASNLineDoc.PurchaseOrderLinePos = null;
        else
        {
          aASNLineDoc.PurchaseOrderLinePos = r.GetInt32( 67 );
        }

        if ( r.IsDBNull( 68 ) )
          aASNLineDoc.PurchaseOrderLineSeq = null;
        else
        {
          aASNLineDoc.PurchaseOrderLineSeq = r.GetInt32( 68 );
        }

        if ( r.IsDBNull( 69 ) )
          aASNLineDoc.StockedProductNumber = null;
        else
        {
          aASNLineDoc.StockedProductNumber = r.GetString( 69 );
        }

        if ( r.IsDBNull( 70 ) )
          aASNLineDoc.GlobalStockedProductNumber = null;
        else
        {
          aASNLineDoc.GlobalStockedProductNumber = r.GetString( 70 );
        }

        if ( r.IsDBNull( 71 ) )
          aASNLineDoc.FromPartyIdentity = null;
        else
        {
          aASNLineDoc.FromPartyIdentity = r.GetString( 71 );
        }

        if ( r.IsDBNull( 72 ) )
          aASNLineDoc.FromPartyQualifier = null;
        else
        {
          aASNLineDoc.FromPartyQualifier = r.GetString( 72 );
        }

        if ( r.IsDBNull( 73 ) )
          aASNLineDoc.CustomerReturnOrderNumber = null;
        else
        {
          aASNLineDoc.CustomerReturnOrderNumber = r.GetString( 73 );
        }

        if ( r.IsDBNull( 74 ) )
          aASNLineDoc.CustomerReturnOrderSequence = null;
        else
        {
          aASNLineDoc.CustomerReturnOrderSequence = r.GetInt32( 74 );
        }

        if ( r.IsDBNull( 75 ) )
          aASNLineDoc.CustomerReturnOrderLinePos = null;
        else
        {
          aASNLineDoc.CustomerReturnOrderLinePos = r.GetInt32( 75 );
        }

        if ( r.IsDBNull( 76 ) )
          aASNLineDoc.CustomerReturnOrderLineKitPos = null;
        else
        {
          aASNLineDoc.CustomerReturnOrderLineKitPos = r.GetInt32( 76 );
        }

        if ( r.IsDBNull( 77 ) )
          aASNLineDoc.CustomerReturnOrderLineSeq = null;
        else
        {
          aASNLineDoc.CustomerReturnOrderLineSeq = r.GetInt32( 77 );
        }

        if ( r.IsDBNull( 78 ) )
          aASNLineDoc.ActionCode = null;
        else
        {
          aASNLineDoc.ActionCode = r.GetString( 78 );
        }

        if ( r.IsDBNull( 79 ) )
          aASNLineDoc.ActionCodeRequirement = null;
        else
        {
          aASNLineDoc.ActionCodeRequirement = r.GetString( 79 );
        }

        if ( r.IsDBNull( 80 ) )
          aASNLineDoc.ReasonCode = null;
        else
        {
          aASNLineDoc.ReasonCode = r.GetString( 80 );
        }

        if ( r.IsDBNull( 81 ) )
          aASNLineDoc.ReasonText = null;
        else
        {
          aASNLineDoc.ReasonText = r.GetString( 81 );
        }

        if ( r.IsDBNull( 82 ) )
          aASNLineDoc.ShipToVendorIdentity = null;
        else
        {
          aASNLineDoc.ShipToVendorIdentity = r.GetString( 82 );
        }

        if ( r.IsDBNull( 83 ) )
          aASNLineDoc.ShipToVendorQualifier = null;
        else
        {
          aASNLineDoc.ShipToVendorQualifier = r.GetString( 83 );
        }

        if ( r.IsDBNull( 84 ) )
          aASNLineDoc.DiscrepancyQuantity = null;
        else
        {
          aASNLineDoc.DiscrepancyQuantity = Convert.ToDouble( r.GetDecimal( 84 ) );
        }

        if ( r.IsDBNull( 85 ) )
          aASNLineDoc.DiscrepancyCode = null;
        else
        {
          aASNLineDoc.DiscrepancyCode = r.GetString( 85 );
        }

        if ( r.IsDBNull( 86 ) )
          aASNLineDoc.DiscrepancyText = null;
        else
        {
          aASNLineDoc.DiscrepancyText = r.GetString( 86 );
        }

        if ( r.IsDBNull( 87 ) )
          aASNLineDoc.QuantityUpperTolerance = null;
        else
        {
          aASNLineDoc.QuantityUpperTolerance = Convert.ToDouble( r.GetDecimal( 87 ) );
        }

        if ( r.IsDBNull( 88 ) )
          aASNLineDoc.CatchMeasureLowerTolerance = null;
        else
        {
          aASNLineDoc.CatchMeasureLowerTolerance = Convert.ToDouble( r.GetDecimal( 88 ) );
        }

        if ( r.IsDBNull( 89 ) )
          aASNLineDoc.CatchMeasureUpperTolerance = null;
        else
        {
          aASNLineDoc.CatchMeasureUpperTolerance = Convert.ToDouble( r.GetDecimal( 89 ) );
        }

        if ( r.IsDBNull( 90 ) )
          aASNLineDoc.ReserveForAssembly = null;
        else
        {
          aASNLineDoc.ReserveForAssembly = r.GetString( 90 );
        }

        aASNLineDocList.Add( aASNLineDoc );
      }

      r.Close();

      ArrayList aASNLineTextDocList = aASNLineTextSelect.InternalProcess( HapiTransId );

      foreach ( ASNLineDoc aASNLineDoc in aASNLineDocList )
      {
        ArrayList ConnectedChildren = null;
        ConnectedChildren = new ArrayList();

        foreach ( ASNLineTextDoc aASNLineTextDoc in aASNLineTextDocList )
        {
          if ( GeneratedComparer.EqualASNLineDocASNLineTextDoc( aASNLineDoc, aASNLineTextDoc ) )
            ConnectedChildren.Add( aASNLineTextDoc );
        }
        aASNLineDoc.aASNLineTextDocs = ConnectedChildren.ToArray(typeof(ASNLineTextDoc)) as ASNLineTextDoc[];
      }

      return aASNLineDocList;
    }
  }

  public class ASNLineTextSelect
  {
    private Database db;

    public ASNLineTextSelect(Database db)
    {
      this.db = db;

    }

    public ASNLineTextDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (ASNLineTextDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aASNLineTextDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_SHIPMENT_REPORT_LINE_TEXT.ASNIDENTITY" +
               ",HAPI_SHIPMENT_REPORT_LINE_TEXT.ASNSEQUENCENUMBER" +
               ",HAPI_SHIPMENT_REPORT_LINE_TEXT.ASNLINENUMBER" +
               ",HAPI_SHIPMENT_REPORT_LINE_TEXT.ASNLINESEQUENCENUMBER" +
               ",HAPI_SHIPMENT_REPORT_LINE_TEXT.TEXTFUNCTION" +
               ",HAPI_SHIPMENT_REPORT_LINE_TEXT.TEXT" +
        " from   HAPI_SHIPMENT_REPORT_LINE_TEXT" +
        " where  HAPI_SHIPMENT_REPORT_LINE_TEXT.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        ASNLineTextDoc aASNLineTextDoc = new ASNLineTextDoc();

        aASNLineTextDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aASNLineTextDoc.ASNIdentity = null;
        else
        {
          aASNLineTextDoc.ASNIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aASNLineTextDoc.ASNSequenceNumber = null;
        else
        {
          aASNLineTextDoc.ASNSequenceNumber = r.GetInt32( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aASNLineTextDoc.ASNLineNumber = null;
        else
        {
          aASNLineTextDoc.ASNLineNumber = r.GetInt32( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aASNLineTextDoc.ASNLineSequenceNumber = null;
        else
        {
          aASNLineTextDoc.ASNLineSequenceNumber = r.GetInt32( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aASNLineTextDoc.TextFunction = null;
        else
        {
          aASNLineTextDoc.TextFunction = r.GetString( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aASNLineTextDoc.Text = null;
        else
        {
          aASNLineTextDoc.Text = r.GetString( 5 );
        }

        aASNLineTextDocList.Add( aASNLineTextDoc );
      }

      r.Close();


      return aASNLineTextDocList;
    }
  }

  public class ConfirmationOfReceiptHeadSelect
  {
    private Database db;
    private ConfirmationOfReceiptLoadCarrierSelect aConfirmationOfReceiptLoadCarrierSelect;
    private ConfirmationOfReceiptLineSelect aConfirmationOfReceiptLineSelect;

    public ConfirmationOfReceiptHeadSelect(Database db)
    {
      this.db = db;

      aConfirmationOfReceiptLoadCarrierSelect = new ConfirmationOfReceiptLoadCarrierSelect(this.db);
      aConfirmationOfReceiptLineSelect = new ConfirmationOfReceiptLineSelect(this.db);
    }

    public ConfirmationOfReceiptHeadDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (ConfirmationOfReceiptHeadDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aConfirmationOfReceiptHeadDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_CONF_OF_RECEIPT_HEAD.ACKNOWLEDGEINBOUNDASNIDENTITY" +
               ",HAPI_CONF_OF_RECEIPT_HEAD.ARRIVALDATETIME" +
               ",HAPI_CONF_OF_RECEIPT_HEAD.SHIPTOPARTYNODEIDENTITY" +
               ",HAPI_CONF_OF_RECEIPT_HEAD.SHIPTOPARTYIDENTITY" +
               ",HAPI_CONF_OF_RECEIPT_HEAD.SHIPTOPARTYQUALIFIER" +
               ",HAPI_CONF_OF_RECEIPT_HEAD.SHIPFROMPARTYNODEIDENTITY" +
               ",HAPI_CONF_OF_RECEIPT_HEAD.SHIPFROMPARTYIDENTITY" +
               ",HAPI_CONF_OF_RECEIPT_HEAD.SHIPFROMPARTYQUALIFIER" +
               ",HAPI_CONF_OF_RECEIPT_HEAD.INBOUNDASNIDENTITY" +
               ",HAPI_CONF_OF_RECEIPT_HEAD.INBOUNDASNSEQUENCENUMBER" +
               ",HAPI_CONF_OF_RECEIPT_HEAD.FORWARDERIDENTITY" +
               ",HAPI_CONF_OF_RECEIPT_HEAD.RECEIPTTYPE" +
               ",HAPI_CONF_OF_RECEIPT_HEAD.PACKINGSLIPNUMBER" +
               ",HAPI_CONF_OF_RECEIPT_HEAD.BILLOFLADINGNUMBER" +
               ",HAPI_CONF_OF_RECEIPT_HEAD.VEHICLEIDENTITY" +
        " from   HAPI_CONF_OF_RECEIPT_HEAD" +
        " where  HAPI_CONF_OF_RECEIPT_HEAD.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        ConfirmationOfReceiptHeadDoc aConfirmationOfReceiptHeadDoc = new ConfirmationOfReceiptHeadDoc();

        aConfirmationOfReceiptHeadDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aConfirmationOfReceiptHeadDoc.AcknowledgeInboundAsnIdentity = null;
        else
        {
          aConfirmationOfReceiptHeadDoc.AcknowledgeInboundAsnIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aConfirmationOfReceiptHeadDoc.ArrivalDateTime = null;
        else
        {
          aConfirmationOfReceiptHeadDoc.ArrivalDateTime = DateTime.SpecifyKind(r.GetDateTime( 1 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 2 ) )
          aConfirmationOfReceiptHeadDoc.ShipToPartyNodeIdentity = null;
        else
        {
          aConfirmationOfReceiptHeadDoc.ShipToPartyNodeIdentity = r.GetString( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aConfirmationOfReceiptHeadDoc.ShipToPartyIdentity = null;
        else
        {
          aConfirmationOfReceiptHeadDoc.ShipToPartyIdentity = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aConfirmationOfReceiptHeadDoc.ShipToPartyQualifier = null;
        else
        {
          aConfirmationOfReceiptHeadDoc.ShipToPartyQualifier = r.GetString( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aConfirmationOfReceiptHeadDoc.ShipFromPartyNodeIdentity = null;
        else
        {
          aConfirmationOfReceiptHeadDoc.ShipFromPartyNodeIdentity = r.GetString( 5 );
        }

        if ( r.IsDBNull( 6 ) )
          aConfirmationOfReceiptHeadDoc.ShipFromPartyIdentity = null;
        else
        {
          aConfirmationOfReceiptHeadDoc.ShipFromPartyIdentity = r.GetString( 6 );
        }

        if ( r.IsDBNull( 7 ) )
          aConfirmationOfReceiptHeadDoc.ShipFromPartyQualifier = null;
        else
        {
          aConfirmationOfReceiptHeadDoc.ShipFromPartyQualifier = r.GetString( 7 );
        }

        if ( r.IsDBNull( 8 ) )
          aConfirmationOfReceiptHeadDoc.InboundAsnIdentity = null;
        else
        {
          aConfirmationOfReceiptHeadDoc.InboundAsnIdentity = r.GetString( 8 );
        }

        if ( r.IsDBNull( 9 ) )
          aConfirmationOfReceiptHeadDoc.InboundAsnSequenceNumber = null;
        else
        {
          aConfirmationOfReceiptHeadDoc.InboundAsnSequenceNumber = r.GetInt32( 9 );
        }

        if ( r.IsDBNull( 10 ) )
          aConfirmationOfReceiptHeadDoc.ForwarderIdentity = null;
        else
        {
          aConfirmationOfReceiptHeadDoc.ForwarderIdentity = r.GetString( 10 );
        }

        if ( r.IsDBNull( 11 ) )
          aConfirmationOfReceiptHeadDoc.ReceiptType = null;
        else
        {
          aConfirmationOfReceiptHeadDoc.ReceiptType = r.GetString( 11 );
        }

        if ( r.IsDBNull( 12 ) )
          aConfirmationOfReceiptHeadDoc.PackingSlipNumber = null;
        else
        {
          aConfirmationOfReceiptHeadDoc.PackingSlipNumber = r.GetString( 12 );
        }

        if ( r.IsDBNull( 13 ) )
          aConfirmationOfReceiptHeadDoc.BillOfLadingNumber = null;
        else
        {
          aConfirmationOfReceiptHeadDoc.BillOfLadingNumber = r.GetString( 13 );
        }

        if ( r.IsDBNull( 14 ) )
          aConfirmationOfReceiptHeadDoc.VehicleIdentity = null;
        else
        {
          aConfirmationOfReceiptHeadDoc.VehicleIdentity = r.GetString( 14 );
        }

        aConfirmationOfReceiptHeadDocList.Add( aConfirmationOfReceiptHeadDoc );
      }

      r.Close();

      ArrayList aConfirmationOfReceiptLoadCarrierDocList = aConfirmationOfReceiptLoadCarrierSelect.InternalProcess( HapiTransId );
      ArrayList aConfirmationOfReceiptLineDocList = aConfirmationOfReceiptLineSelect.InternalProcess( HapiTransId );

      foreach ( ConfirmationOfReceiptHeadDoc aConfirmationOfReceiptHeadDoc in aConfirmationOfReceiptHeadDocList )
      {
        ArrayList ConnectedChildren = null;
        ConnectedChildren = new ArrayList();

        foreach ( ConfirmationOfReceiptLoadCarrierDoc aConfirmationOfReceiptLoadCarrierDoc in aConfirmationOfReceiptLoadCarrierDocList )
        {
          if ( GeneratedComparer.EqualConfirmationOfReceiptHeadDocConfirmationOfReceiptLoadCarrierDoc( aConfirmationOfReceiptHeadDoc, aConfirmationOfReceiptLoadCarrierDoc ) )
            ConnectedChildren.Add( aConfirmationOfReceiptLoadCarrierDoc );
        }
        aConfirmationOfReceiptHeadDoc.aConfirmationOfReceiptLoadCarrierDocs = ConnectedChildren.ToArray(typeof(ConfirmationOfReceiptLoadCarrierDoc)) as ConfirmationOfReceiptLoadCarrierDoc[];
        ConnectedChildren = new ArrayList();

        foreach ( ConfirmationOfReceiptLineDoc aConfirmationOfReceiptLineDoc in aConfirmationOfReceiptLineDocList )
        {
          if ( GeneratedComparer.EqualConfirmationOfReceiptHeadDocConfirmationOfReceiptLineDoc( aConfirmationOfReceiptHeadDoc, aConfirmationOfReceiptLineDoc ) )
            ConnectedChildren.Add( aConfirmationOfReceiptLineDoc );
        }
        aConfirmationOfReceiptHeadDoc.aConfirmationOfReceiptLineDocs = ConnectedChildren.ToArray(typeof(ConfirmationOfReceiptLineDoc)) as ConfirmationOfReceiptLineDoc[];
      }

      return aConfirmationOfReceiptHeadDocList;
    }
  }

  public class ConfirmationOfReceiptLoadCarrierSelect
  {
    private Database db;

    public ConfirmationOfReceiptLoadCarrierSelect(Database db)
    {
      this.db = db;

    }

    public ConfirmationOfReceiptLoadCarrierDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (ConfirmationOfReceiptLoadCarrierDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aConfirmationOfReceiptLoadCarrierDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_CONF_OF_RECEIPT_CARRIER.ACKNOWLEDGEINBOUNDASNIDENTITY" +
               ",HAPI_CONF_OF_RECEIPT_CARRIER.LOADCARRIERIDENTITY" +
               ",HAPI_CONF_OF_RECEIPT_CARRIER.PARENTLOADCARRIERIDENTITY" +
               ",HAPI_CONF_OF_RECEIPT_CARRIER.LOADCARRIERQUALIFIER" +
               ",HAPI_CONF_OF_RECEIPT_CARRIER.ARRIVALDATETIME" +
               ",HAPI_CONF_OF_RECEIPT_CARRIER.SHIPTOPARTYNODEIDENTITY" +
               ",HAPI_CONF_OF_RECEIPT_CARRIER.SHIPTOPARTYIDENTITY" +
               ",HAPI_CONF_OF_RECEIPT_CARRIER.SHIPTOPARTYQUALIFIER" +
               ",HAPI_CONF_OF_RECEIPT_CARRIER.SHIPFROMPARTYNODEIDENTITY" +
               ",HAPI_CONF_OF_RECEIPT_CARRIER.SHIPFROMPARTYIDENTITY" +
               ",HAPI_CONF_OF_RECEIPT_CARRIER.SHIPFROMPARTYQUALIFIER" +
               ",HAPI_CONF_OF_RECEIPT_CARRIER.INBOUNDASNIDENTITY" +
               ",HAPI_CONF_OF_RECEIPT_CARRIER.INBOUNDASNSEQUENCENUMBER" +
               ",HAPI_CONF_OF_RECEIPT_CARRIER.DELIVERYIDENTITY" +
        " from   HAPI_CONF_OF_RECEIPT_CARRIER" +
        " where  HAPI_CONF_OF_RECEIPT_CARRIER.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        ConfirmationOfReceiptLoadCarrierDoc aConfirmationOfReceiptLoadCarrierDoc = new ConfirmationOfReceiptLoadCarrierDoc();

        aConfirmationOfReceiptLoadCarrierDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aConfirmationOfReceiptLoadCarrierDoc.AcknowledgeInboundAsnIdentity = null;
        else
        {
          aConfirmationOfReceiptLoadCarrierDoc.AcknowledgeInboundAsnIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aConfirmationOfReceiptLoadCarrierDoc.LoadCarrierIdentity = null;
        else
        {
          aConfirmationOfReceiptLoadCarrierDoc.LoadCarrierIdentity = r.GetString( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aConfirmationOfReceiptLoadCarrierDoc.ParentLoadCarrierIdentity = null;
        else
        {
          aConfirmationOfReceiptLoadCarrierDoc.ParentLoadCarrierIdentity = r.GetString( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aConfirmationOfReceiptLoadCarrierDoc.LoadCarrierQualifier = null;
        else
        {
          aConfirmationOfReceiptLoadCarrierDoc.LoadCarrierQualifier = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aConfirmationOfReceiptLoadCarrierDoc.ArrivalDateTime = null;
        else
        {
          aConfirmationOfReceiptLoadCarrierDoc.ArrivalDateTime = DateTime.SpecifyKind(r.GetDateTime( 4 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 5 ) )
          aConfirmationOfReceiptLoadCarrierDoc.ShipToPartyNodeIdentity = null;
        else
        {
          aConfirmationOfReceiptLoadCarrierDoc.ShipToPartyNodeIdentity = r.GetString( 5 );
        }

        if ( r.IsDBNull( 6 ) )
          aConfirmationOfReceiptLoadCarrierDoc.ShipToPartyIdentity = null;
        else
        {
          aConfirmationOfReceiptLoadCarrierDoc.ShipToPartyIdentity = r.GetString( 6 );
        }

        if ( r.IsDBNull( 7 ) )
          aConfirmationOfReceiptLoadCarrierDoc.ShipToPartyQualifier = null;
        else
        {
          aConfirmationOfReceiptLoadCarrierDoc.ShipToPartyQualifier = r.GetString( 7 );
        }

        if ( r.IsDBNull( 8 ) )
          aConfirmationOfReceiptLoadCarrierDoc.ShipFromPartyNodeIdentity = null;
        else
        {
          aConfirmationOfReceiptLoadCarrierDoc.ShipFromPartyNodeIdentity = r.GetString( 8 );
        }

        if ( r.IsDBNull( 9 ) )
          aConfirmationOfReceiptLoadCarrierDoc.ShipFromPartyIdentity = null;
        else
        {
          aConfirmationOfReceiptLoadCarrierDoc.ShipFromPartyIdentity = r.GetString( 9 );
        }

        if ( r.IsDBNull( 10 ) )
          aConfirmationOfReceiptLoadCarrierDoc.ShipFromPartyQualifier = null;
        else
        {
          aConfirmationOfReceiptLoadCarrierDoc.ShipFromPartyQualifier = r.GetString( 10 );
        }

        if ( r.IsDBNull( 11 ) )
          aConfirmationOfReceiptLoadCarrierDoc.InboundAsnIdentity = null;
        else
        {
          aConfirmationOfReceiptLoadCarrierDoc.InboundAsnIdentity = r.GetString( 11 );
        }

        if ( r.IsDBNull( 12 ) )
          aConfirmationOfReceiptLoadCarrierDoc.InboundAsnSequenceNumber = null;
        else
        {
          aConfirmationOfReceiptLoadCarrierDoc.InboundAsnSequenceNumber = r.GetInt32( 12 );
        }

        if ( r.IsDBNull( 13 ) )
          aConfirmationOfReceiptLoadCarrierDoc.DeliveryIdentity = null;
        else
        {
          aConfirmationOfReceiptLoadCarrierDoc.DeliveryIdentity = r.GetInt32( 13 );
        }

        aConfirmationOfReceiptLoadCarrierDocList.Add( aConfirmationOfReceiptLoadCarrierDoc );
      }

      r.Close();


      return aConfirmationOfReceiptLoadCarrierDocList;
    }
  }

  public class ConfirmationOfReceiptLineSelect
  {
    private Database db;

    public ConfirmationOfReceiptLineSelect(Database db)
    {
      this.db = db;

    }

    public ConfirmationOfReceiptLineDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (ConfirmationOfReceiptLineDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aConfirmationOfReceiptLineDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_CONF_OF_RECEIPT_LINE.ACKNOWLEDGEINBOUNDASNIDENTITY" +
               ",HAPI_CONF_OF_RECEIPT_LINE.ACKNOWLEDGEINBOUNDASNLINENUM" +
               ",HAPI_CONF_OF_RECEIPT_LINE.ARRIVALDATETIME" +
               ",HAPI_CONF_OF_RECEIPT_LINE.SHIPFROMPARTYNODEIDENTITY" +
               ",HAPI_CONF_OF_RECEIPT_LINE.SHIPFROMPARTYIDENTITY" +
               ",HAPI_CONF_OF_RECEIPT_LINE.SHIPFROMPARTYQUALIFIER" +
               ",HAPI_CONF_OF_RECEIPT_LINE.INBOUNDASNIDENTITY" +
               ",HAPI_CONF_OF_RECEIPT_LINE.INBOUNDASNSEQUENCENUMBER" +
               ",HAPI_CONF_OF_RECEIPT_LINE.INBOUNDASNLINENUMBER" +
               ",HAPI_CONF_OF_RECEIPT_LINE.INBOUNDASNLINESEQUENCENUMBER" +
               ",HAPI_CONF_OF_RECEIPT_LINE.PRODUCTNUMBER" +
               ",HAPI_CONF_OF_RECEIPT_LINE.ASNLINEQUANTITY" +
               ",HAPI_CONF_OF_RECEIPT_LINE.ARRIVEDQUANTITY" +
               ",HAPI_CONF_OF_RECEIPT_LINE.RECEIPTQUANTITY" +
               ",HAPI_CONF_OF_RECEIPT_LINE.PACKAGEIDENTITY" +
               ",HAPI_CONF_OF_RECEIPT_LINE.PRODUCTIONLOTIDENTITY" +
               ",HAPI_CONF_OF_RECEIPT_LINE.PRODUCTIONSUBLOTIDENTITY" +
               ",HAPI_CONF_OF_RECEIPT_LINE.SERIALNUMBER" +
               ",HAPI_CONF_OF_RECEIPT_LINE.DELIVERYIDENTITY" +
               ",HAPI_CONF_OF_RECEIPT_LINE.LOADCARRIERIDENTITY" +
               ",HAPI_CONF_OF_RECEIPT_LINE.PURCHASEORDERNUMBER" +
               ",HAPI_CONF_OF_RECEIPT_LINE.PURCHASEORDERSEQUENCE" +
               ",HAPI_CONF_OF_RECEIPT_LINE.PURCHASEORDERLINEPOS" +
               ",HAPI_CONF_OF_RECEIPT_LINE.PURCHASEORDERLINESEQ" +
               ",HAPI_CONF_OF_RECEIPT_LINE.CUSTOMERORDERTYPE" +
               ",HAPI_CONF_OF_RECEIPT_LINE.EXPIRYDATE" +
               ",HAPI_CONF_OF_RECEIPT_LINE.MANUFACTURINGDATE" +
               ",HAPI_CONF_OF_RECEIPT_LINE.INVENTORYSTATUSCODE" +
               ",HAPI_CONF_OF_RECEIPT_LINE.MEASUREDQUANTITY" +
               ",HAPI_CONF_OF_RECEIPT_LINE.MEASUREQUALIFIER" +
               ",HAPI_CONF_OF_RECEIPT_LINE.CUSTOMERORDERNUMBER" +
               ",HAPI_CONF_OF_RECEIPT_LINE.CUSTOMERORDERSEQUENCE" +
               ",HAPI_CONF_OF_RECEIPT_LINE.CUSTOMERORDERLINEPOSITION" +
               ",HAPI_CONF_OF_RECEIPT_LINE.CUSTOMERORDERLINEKITPOSITION" +
               ",HAPI_CONF_OF_RECEIPT_LINE.CUSTOMERORDERLINESEQUENCE" +
               ",HAPI_CONF_OF_RECEIPT_LINE.RETURNSFINISHED" +
               ",HAPI_CONF_OF_RECEIPT_LINE.DECIDEDACTIONCODE" +
               ",HAPI_CONF_OF_RECEIPT_LINE.FROMPARTYID" +
               ",HAPI_CONF_OF_RECEIPT_LINE.FROMPARTYQUALIFIER" +
               ",HAPI_CONF_OF_RECEIPT_LINE.CUSTOMERRETURNORDERNUMBER" +
               ",HAPI_CONF_OF_RECEIPT_LINE.CUSTOMERRETURNORDERSEQUENCE" +
               ",HAPI_CONF_OF_RECEIPT_LINE.CUSTOMERRETURNORDERLINEPOS" +
               ",HAPI_CONF_OF_RECEIPT_LINE.CUSTOMERRETURNORDERLINEKITPOS" +
               ",HAPI_CONF_OF_RECEIPT_LINE.CUSTOMERRETURNORDERLINESEQ" +
               ",HAPI_CONF_OF_RECEIPT_LINE.DISCREPANCYCODE" +
               ",HAPI_CONF_OF_RECEIPT_LINE.DISCREPANCYACTIONCODE" +
               ",HAPI_CONF_OF_RECEIPT_LINE.MARKETINGLOTIDENTITY" +
        " from   HAPI_CONF_OF_RECEIPT_LINE" +
        " where  HAPI_CONF_OF_RECEIPT_LINE.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        ConfirmationOfReceiptLineDoc aConfirmationOfReceiptLineDoc = new ConfirmationOfReceiptLineDoc();

        aConfirmationOfReceiptLineDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aConfirmationOfReceiptLineDoc.AcknowledgeInboundAsnIdentity = null;
        else
        {
          aConfirmationOfReceiptLineDoc.AcknowledgeInboundAsnIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aConfirmationOfReceiptLineDoc.AcknowledgeInboundAsnLinenum = null;
        else
        {
          aConfirmationOfReceiptLineDoc.AcknowledgeInboundAsnLinenum = r.GetInt32( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aConfirmationOfReceiptLineDoc.ArrivalDateTime = null;
        else
        {
          aConfirmationOfReceiptLineDoc.ArrivalDateTime = DateTime.SpecifyKind(r.GetDateTime( 2 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 3 ) )
          aConfirmationOfReceiptLineDoc.ShipFromPartyNodeIdentity = null;
        else
        {
          aConfirmationOfReceiptLineDoc.ShipFromPartyNodeIdentity = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aConfirmationOfReceiptLineDoc.ShipFromPartyIdentity = null;
        else
        {
          aConfirmationOfReceiptLineDoc.ShipFromPartyIdentity = r.GetString( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aConfirmationOfReceiptLineDoc.ShipFromPartyQualifier = null;
        else
        {
          aConfirmationOfReceiptLineDoc.ShipFromPartyQualifier = r.GetString( 5 );
        }

        if ( r.IsDBNull( 6 ) )
          aConfirmationOfReceiptLineDoc.InboundAsnIdentity = null;
        else
        {
          aConfirmationOfReceiptLineDoc.InboundAsnIdentity = r.GetString( 6 );
        }

        if ( r.IsDBNull( 7 ) )
          aConfirmationOfReceiptLineDoc.InboundAsnSequenceNumber = null;
        else
        {
          aConfirmationOfReceiptLineDoc.InboundAsnSequenceNumber = r.GetInt32( 7 );
        }

        if ( r.IsDBNull( 8 ) )
          aConfirmationOfReceiptLineDoc.InboundAsnLineNumber = null;
        else
        {
          aConfirmationOfReceiptLineDoc.InboundAsnLineNumber = r.GetInt32( 8 );
        }

        if ( r.IsDBNull( 9 ) )
          aConfirmationOfReceiptLineDoc.InboundAsnLineSequenceNumber = null;
        else
        {
          aConfirmationOfReceiptLineDoc.InboundAsnLineSequenceNumber = r.GetInt32( 9 );
        }

        if ( r.IsDBNull( 10 ) )
          aConfirmationOfReceiptLineDoc.ProductNumber = null;
        else
        {
          aConfirmationOfReceiptLineDoc.ProductNumber = r.GetString( 10 );
        }

        if ( r.IsDBNull( 11 ) )
          aConfirmationOfReceiptLineDoc.AsnLineQuantity = null;
        else
        {
          aConfirmationOfReceiptLineDoc.AsnLineQuantity = Convert.ToDouble( r.GetDecimal( 11 ) );
        }

        if ( r.IsDBNull( 12 ) )
          aConfirmationOfReceiptLineDoc.ArrivedQuantity = null;
        else
        {
          aConfirmationOfReceiptLineDoc.ArrivedQuantity = Convert.ToDouble( r.GetDecimal( 12 ) );
        }

        if ( r.IsDBNull( 13 ) )
          aConfirmationOfReceiptLineDoc.ReceiptQuantity = null;
        else
        {
          aConfirmationOfReceiptLineDoc.ReceiptQuantity = Convert.ToDouble( r.GetDecimal( 13 ) );
        }

        if ( r.IsDBNull( 14 ) )
          aConfirmationOfReceiptLineDoc.PackageIdentity = null;
        else
        {
          aConfirmationOfReceiptLineDoc.PackageIdentity = r.GetString( 14 );
        }

        if ( r.IsDBNull( 15 ) )
          aConfirmationOfReceiptLineDoc.ProductionLotIdentity = null;
        else
        {
          aConfirmationOfReceiptLineDoc.ProductionLotIdentity = r.GetString( 15 );
        }

        if ( r.IsDBNull( 16 ) )
          aConfirmationOfReceiptLineDoc.ProductionSubLotIdentity = null;
        else
        {
          aConfirmationOfReceiptLineDoc.ProductionSubLotIdentity = r.GetString( 16 );
        }

        if ( r.IsDBNull( 17 ) )
          aConfirmationOfReceiptLineDoc.SerialNumber = null;
        else
        {
          aConfirmationOfReceiptLineDoc.SerialNumber = r.GetString( 17 );
        }

        if ( r.IsDBNull( 18 ) )
          aConfirmationOfReceiptLineDoc.DeliveryIdentity = null;
        else
        {
          aConfirmationOfReceiptLineDoc.DeliveryIdentity = r.GetInt32( 18 );
        }

        if ( r.IsDBNull( 19 ) )
          aConfirmationOfReceiptLineDoc.LoadCarrierIdentity = null;
        else
        {
          aConfirmationOfReceiptLineDoc.LoadCarrierIdentity = r.GetString( 19 );
        }

        if ( r.IsDBNull( 20 ) )
          aConfirmationOfReceiptLineDoc.PurchaseOrderNumber = null;
        else
        {
          aConfirmationOfReceiptLineDoc.PurchaseOrderNumber = r.GetString( 20 );
        }

        if ( r.IsDBNull( 21 ) )
          aConfirmationOfReceiptLineDoc.PurchaseOrderSequence = null;
        else
        {
          aConfirmationOfReceiptLineDoc.PurchaseOrderSequence = r.GetInt32( 21 );
        }

        if ( r.IsDBNull( 22 ) )
          aConfirmationOfReceiptLineDoc.PurchaseOrderLinePos = null;
        else
        {
          aConfirmationOfReceiptLineDoc.PurchaseOrderLinePos = r.GetInt32( 22 );
        }

        if ( r.IsDBNull( 23 ) )
          aConfirmationOfReceiptLineDoc.PurchaseOrderLineSeq = null;
        else
        {
          aConfirmationOfReceiptLineDoc.PurchaseOrderLineSeq = r.GetInt32( 23 );
        }

        if ( r.IsDBNull( 24 ) )
          aConfirmationOfReceiptLineDoc.CustomerOrderType = null;
        else
        {
          aConfirmationOfReceiptLineDoc.CustomerOrderType = r.GetString( 24 );
        }

        if ( r.IsDBNull( 25 ) )
          aConfirmationOfReceiptLineDoc.ExpiryDate = null;
        else
        {
          aConfirmationOfReceiptLineDoc.ExpiryDate = DateTime.SpecifyKind(r.GetDateTime( 25 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 26 ) )
          aConfirmationOfReceiptLineDoc.ManufacturingDate = null;
        else
        {
          aConfirmationOfReceiptLineDoc.ManufacturingDate = DateTime.SpecifyKind(r.GetDateTime( 26 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 27 ) )
          aConfirmationOfReceiptLineDoc.InventoryStatusCode = null;
        else
        {
          aConfirmationOfReceiptLineDoc.InventoryStatusCode = r.GetString( 27 );
        }

        if ( r.IsDBNull( 28 ) )
          aConfirmationOfReceiptLineDoc.MeasuredQuantity = null;
        else
        {
          aConfirmationOfReceiptLineDoc.MeasuredQuantity = Convert.ToDouble( r.GetDecimal( 28 ) );
        }

        if ( r.IsDBNull( 29 ) )
          aConfirmationOfReceiptLineDoc.MeasureQualifier = null;
        else
        {
          aConfirmationOfReceiptLineDoc.MeasureQualifier = r.GetString( 29 );
        }

        if ( r.IsDBNull( 30 ) )
          aConfirmationOfReceiptLineDoc.CustomerOrderNumber = null;
        else
        {
          aConfirmationOfReceiptLineDoc.CustomerOrderNumber = r.GetString( 30 );
        }

        if ( r.IsDBNull( 31 ) )
          aConfirmationOfReceiptLineDoc.CustomerOrderSequence = null;
        else
        {
          aConfirmationOfReceiptLineDoc.CustomerOrderSequence = r.GetInt32( 31 );
        }

        if ( r.IsDBNull( 32 ) )
          aConfirmationOfReceiptLineDoc.CustomerOrderLinePosition = null;
        else
        {
          aConfirmationOfReceiptLineDoc.CustomerOrderLinePosition = r.GetInt32( 32 );
        }

        if ( r.IsDBNull( 33 ) )
          aConfirmationOfReceiptLineDoc.CustomerOrderLineKitPosition = null;
        else
        {
          aConfirmationOfReceiptLineDoc.CustomerOrderLineKitPosition = r.GetInt32( 33 );
        }

        if ( r.IsDBNull( 34 ) )
          aConfirmationOfReceiptLineDoc.CustomerOrderLineSequence = null;
        else
        {
          aConfirmationOfReceiptLineDoc.CustomerOrderLineSequence = r.GetInt32( 34 );
        }

        if ( r.IsDBNull( 35 ) )
          aConfirmationOfReceiptLineDoc.ReturnsFinished = null;
        else
        {
          aConfirmationOfReceiptLineDoc.ReturnsFinished = r.GetString( 35 );
        }

        if ( r.IsDBNull( 36 ) )
          aConfirmationOfReceiptLineDoc.DecidedActionCode = null;
        else
        {
          aConfirmationOfReceiptLineDoc.DecidedActionCode = r.GetString( 36 );
        }

        if ( r.IsDBNull( 37 ) )
          aConfirmationOfReceiptLineDoc.FromPartyId = null;
        else
        {
          aConfirmationOfReceiptLineDoc.FromPartyId = r.GetString( 37 );
        }

        if ( r.IsDBNull( 38 ) )
          aConfirmationOfReceiptLineDoc.FromPartyQualifier = null;
        else
        {
          aConfirmationOfReceiptLineDoc.FromPartyQualifier = r.GetString( 38 );
        }

        if ( r.IsDBNull( 39 ) )
          aConfirmationOfReceiptLineDoc.CustomerReturnOrderNumber = null;
        else
        {
          aConfirmationOfReceiptLineDoc.CustomerReturnOrderNumber = r.GetString( 39 );
        }

        if ( r.IsDBNull( 40 ) )
          aConfirmationOfReceiptLineDoc.CustomerReturnOrderSequence = null;
        else
        {
          aConfirmationOfReceiptLineDoc.CustomerReturnOrderSequence = r.GetInt32( 40 );
        }

        if ( r.IsDBNull( 41 ) )
          aConfirmationOfReceiptLineDoc.CustomerReturnOrderLinePos = null;
        else
        {
          aConfirmationOfReceiptLineDoc.CustomerReturnOrderLinePos = r.GetInt32( 41 );
        }

        if ( r.IsDBNull( 42 ) )
          aConfirmationOfReceiptLineDoc.CustomerReturnOrderLineKitPos = null;
        else
        {
          aConfirmationOfReceiptLineDoc.CustomerReturnOrderLineKitPos = r.GetInt32( 42 );
        }

        if ( r.IsDBNull( 43 ) )
          aConfirmationOfReceiptLineDoc.CustomerReturnOrderLineSeq = null;
        else
        {
          aConfirmationOfReceiptLineDoc.CustomerReturnOrderLineSeq = r.GetInt32( 43 );
        }

        if ( r.IsDBNull( 44 ) )
          aConfirmationOfReceiptLineDoc.DiscrepancyCode = null;
        else
        {
          aConfirmationOfReceiptLineDoc.DiscrepancyCode = r.GetString( 44 );
        }

        if ( r.IsDBNull( 45 ) )
          aConfirmationOfReceiptLineDoc.DiscrepancyActionCode = null;
        else
        {
          aConfirmationOfReceiptLineDoc.DiscrepancyActionCode = r.GetString( 45 );
        }

        if ( r.IsDBNull( 46 ) )
          aConfirmationOfReceiptLineDoc.MarketingLotIdentity = null;
        else
        {
          aConfirmationOfReceiptLineDoc.MarketingLotIdentity = r.GetString( 46 );
        }

        aConfirmationOfReceiptLineDocList.Add( aConfirmationOfReceiptLineDoc );
      }

      r.Close();


      return aConfirmationOfReceiptLineDocList;
    }
  }

  public class InboundOrderCompletedSelect
  {
    private Database db;

    public InboundOrderCompletedSelect(Database db)
    {
      this.db = db;

    }

    public InboundOrderCompletedDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (InboundOrderCompletedDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aInboundOrderCompletedDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_INBOUND_ORDER_COMPLETED.WAREHOUSEIDENTITY" +
               ",HAPI_INBOUND_ORDER_COMPLETED.EMPLOYEEIDENTITY" +
               ",HAPI_INBOUND_ORDER_COMPLETED.PURCHASEORDERNUMBER" +
               ",HAPI_INBOUND_ORDER_COMPLETED.PURCHASEORDERSEQUENCE" +
               ",HAPI_INBOUND_ORDER_COMPLETED.PURCHASEORDERLINEPOSITION" +
               ",HAPI_INBOUND_ORDER_COMPLETED.PURCHASEORDERLINESEQUENCE" +
               ",HAPI_INBOUND_ORDER_COMPLETED.CUSTOMERRETURNORDERNUMBER" +
               ",HAPI_INBOUND_ORDER_COMPLETED.CUSTOMERRETURNORDERSEQUENCE" +
               ",HAPI_INBOUND_ORDER_COMPLETED.CUSTOMERRETURNORDERLINEPOS" +
               ",HAPI_INBOUND_ORDER_COMPLETED.CUSTOMERRETURNORDERLINEKITPOS" +
               ",HAPI_INBOUND_ORDER_COMPLETED.CUSTOMERRETURNORDERLINESEQ" +
        " from   HAPI_INBOUND_ORDER_COMPLETED" +
        " where  HAPI_INBOUND_ORDER_COMPLETED.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        InboundOrderCompletedDoc aInboundOrderCompletedDoc = new InboundOrderCompletedDoc();

        aInboundOrderCompletedDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aInboundOrderCompletedDoc.WarehouseIdentity = null;
        else
        {
          aInboundOrderCompletedDoc.WarehouseIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aInboundOrderCompletedDoc.EmployeeIdentity = null;
        else
        {
          aInboundOrderCompletedDoc.EmployeeIdentity = r.GetString( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aInboundOrderCompletedDoc.PurchaseOrderNumber = null;
        else
        {
          aInboundOrderCompletedDoc.PurchaseOrderNumber = r.GetString( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aInboundOrderCompletedDoc.PurchaseOrderSequence = null;
        else
        {
          aInboundOrderCompletedDoc.PurchaseOrderSequence = r.GetInt32( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aInboundOrderCompletedDoc.PurchaseOrderLinePosition = null;
        else
        {
          aInboundOrderCompletedDoc.PurchaseOrderLinePosition = r.GetInt32( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aInboundOrderCompletedDoc.PurchaseOrderLineSequence = null;
        else
        {
          aInboundOrderCompletedDoc.PurchaseOrderLineSequence = r.GetInt32( 5 );
        }

        if ( r.IsDBNull( 6 ) )
          aInboundOrderCompletedDoc.CustomerReturnOrderNumber = null;
        else
        {
          aInboundOrderCompletedDoc.CustomerReturnOrderNumber = r.GetString( 6 );
        }

        if ( r.IsDBNull( 7 ) )
          aInboundOrderCompletedDoc.CustomerReturnOrderSequence = null;
        else
        {
          aInboundOrderCompletedDoc.CustomerReturnOrderSequence = r.GetInt32( 7 );
        }

        if ( r.IsDBNull( 8 ) )
          aInboundOrderCompletedDoc.CustomerReturnOrderLinePos = null;
        else
        {
          aInboundOrderCompletedDoc.CustomerReturnOrderLinePos = r.GetInt32( 8 );
        }

        if ( r.IsDBNull( 9 ) )
          aInboundOrderCompletedDoc.CustomerReturnOrderLineKitPos = null;
        else
        {
          aInboundOrderCompletedDoc.CustomerReturnOrderLineKitPos = r.GetInt32( 9 );
        }

        if ( r.IsDBNull( 10 ) )
          aInboundOrderCompletedDoc.CustomerReturnOrderLineSeq = null;
        else
        {
          aInboundOrderCompletedDoc.CustomerReturnOrderLineSeq = r.GetInt32( 10 );
        }

        aInboundOrderCompletedDocList.Add( aInboundOrderCompletedDoc );
      }

      r.Close();


      return aInboundOrderCompletedDocList;
    }
  }

  public class TransportInstructionSelect
  {
    private Database db;
    private TRIConsignmentSelect aTRIConsignmentSelect;

    public TransportInstructionSelect(Database db)
    {
      this.db = db;

      aTRIConsignmentSelect = new TRIConsignmentSelect(this.db);
    }

    public TransportInstructionDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (TransportInstructionDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aTransportInstructionDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_TRPINSTR.DEPARTUREIDENTITY" +
               ",HAPI_TRPINSTR.ROUTE_ID" +
               ",HAPI_TRPINSTR.DELIVERYMETH_ID" +
               ",HAPI_TRPINSTR.SHIPDATETIME" +
               ",HAPI_TRPINSTR.DEPARTURE_DTM" +
               ",HAPI_TRPINSTR.SHIPFROMPARTYIDENTITY" +
               ",HAPI_TRPINSTR.SHIPFROMPARTY_NAME" +
               ",HAPI_TRPINSTR.SHIPFROMPARTY_NAME2" +
               ",HAPI_TRPINSTR.SHIPFROMPARTY_NAME3" +
               ",HAPI_TRPINSTR.SHIPFROMPARTY_NAME4" +
               ",HAPI_TRPINSTR.SHIPFROMPARTY_NAME5" +
               ",HAPI_TRPINSTR.SHIPFROMPARTY_ADR" +
               ",HAPI_TRPINSTR.SHIPFROMPARTY_ADR2" +
               ",HAPI_TRPINSTR.SHIPFROMPARTY_ADR3" +
               ",HAPI_TRPINSTR.SHIPFROMPARTY_ADR4" +
               ",HAPI_TRPINSTR.SHIPFROMPARTY_POSTCODE" +
               ",HAPI_TRPINSTR.SHIPFROMPARTY_CITY" +
               ",HAPI_TRPINSTR.SHIPFROMPARTY_COUNTRY" +
               ",HAPI_TRPINSTR.SHIPFROMPARTY_COUNTRYCODE" +
               ",HAPI_TRPINSTR.SHIPFROMPARTYNODEIDENTITY" +
               ",HAPI_TRPINSTR.FREIGHTERIDENTITY" +
               ",HAPI_TRPINSTR.FRENAME" +
               ",HAPI_TRPINSTR.FRE_ADR" +
               ",HAPI_TRPINSTR.FRE_POSTCODE" +
               ",HAPI_TRPINSTR.FRE_CITY" +
               ",HAPI_TRPINSTR.FRE_COUNTRY" +
               ",HAPI_TRPINSTR.FRE_COUNTRYCODE" +
               ",HAPI_TRPINSTR.FRE_GEOREF" +
               ",HAPI_TRPINSTR.SHIPFROMCOMPANYIDENTITY" +
               ",HAPI_TRPINSTR.SHIPFROMCOMPANY_NAME" +
               ",HAPI_TRPINSTR.SHIPFROMCOMPANY_NAME2" +
               ",HAPI_TRPINSTR.SHIPFROMCOMPANY_NAME3" +
               ",HAPI_TRPINSTR.SHIPFROMCOMPANY_NAME4" +
               ",HAPI_TRPINSTR.SHIPFROMCOMPANY_NAME5" +
               ",HAPI_TRPINSTR.SHIPFROMCOMPANY_ADR" +
               ",HAPI_TRPINSTR.SHIPFROMCOMPANY_ADR2" +
               ",HAPI_TRPINSTR.SHIPFROMCOMPANY_ADR3" +
               ",HAPI_TRPINSTR.SHIPFROMCOMPANY_ADR4" +
               ",HAPI_TRPINSTR.SHIPFROMCOMPANY_POSTCODE" +
               ",HAPI_TRPINSTR.SHIPFROMCOMPANY_CITY" +
               ",HAPI_TRPINSTR.SHIPFROMCOMPANY_COUNTRY" +
               ",HAPI_TRPINSTR.SHIPFROMCOMPANY_COUNTRYCODE" +
               ",HAPI_TRPINSTR.SHIPFROMCOMPANYNODEIDENTITY" +
               ",HAPI_TRPINSTR.SHIPFROMCOMPANY_PHONE" +
               ",HAPI_TRPINSTR.SHIPFROMCOMPANY_EMAIL" +
               ",HAPI_TRPINSTR.SHIPFROMCOMPANY_CONTACTNAME" +
               ",HAPI_TRPINSTR.SHIPFROMCOMPANY_TYPEOFGOODS" +
        " from   HAPI_TRPINSTR" +
        " where  HAPI_TRPINSTR.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        TransportInstructionDoc aTransportInstructionDoc = new TransportInstructionDoc();

        aTransportInstructionDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aTransportInstructionDoc.DepartureIdentity = null;
        else
        {
          aTransportInstructionDoc.DepartureIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aTransportInstructionDoc.Route_id = null;
        else
        {
          aTransportInstructionDoc.Route_id = r.GetString( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aTransportInstructionDoc.Deliverymeth_id = null;
        else
        {
          aTransportInstructionDoc.Deliverymeth_id = r.GetString( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aTransportInstructionDoc.ShipDateTime = null;
        else
        {
          aTransportInstructionDoc.ShipDateTime = DateTime.SpecifyKind(r.GetDateTime( 3 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 4 ) )
          aTransportInstructionDoc.Departure_dtm = null;
        else
        {
          aTransportInstructionDoc.Departure_dtm = DateTime.SpecifyKind(r.GetDateTime( 4 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 5 ) )
          aTransportInstructionDoc.ShipFromPartyIdentity = null;
        else
        {
          aTransportInstructionDoc.ShipFromPartyIdentity = r.GetString( 5 );
        }

        if ( r.IsDBNull( 6 ) )
          aTransportInstructionDoc.ShipFromParty_Name = null;
        else
        {
          aTransportInstructionDoc.ShipFromParty_Name = r.GetString( 6 );
        }

        if ( r.IsDBNull( 7 ) )
          aTransportInstructionDoc.ShipFromParty_Name2 = null;
        else
        {
          aTransportInstructionDoc.ShipFromParty_Name2 = r.GetString( 7 );
        }

        if ( r.IsDBNull( 8 ) )
          aTransportInstructionDoc.ShipFromParty_Name3 = null;
        else
        {
          aTransportInstructionDoc.ShipFromParty_Name3 = r.GetString( 8 );
        }

        if ( r.IsDBNull( 9 ) )
          aTransportInstructionDoc.ShipFromParty_Name4 = null;
        else
        {
          aTransportInstructionDoc.ShipFromParty_Name4 = r.GetString( 9 );
        }

        if ( r.IsDBNull( 10 ) )
          aTransportInstructionDoc.ShipFromParty_Name5 = null;
        else
        {
          aTransportInstructionDoc.ShipFromParty_Name5 = r.GetString( 10 );
        }

        if ( r.IsDBNull( 11 ) )
          aTransportInstructionDoc.ShipFromParty_Adr = null;
        else
        {
          aTransportInstructionDoc.ShipFromParty_Adr = r.GetString( 11 );
        }

        if ( r.IsDBNull( 12 ) )
          aTransportInstructionDoc.ShipFromParty_Adr2 = null;
        else
        {
          aTransportInstructionDoc.ShipFromParty_Adr2 = r.GetString( 12 );
        }

        if ( r.IsDBNull( 13 ) )
          aTransportInstructionDoc.ShipFromParty_Adr3 = null;
        else
        {
          aTransportInstructionDoc.ShipFromParty_Adr3 = r.GetString( 13 );
        }

        if ( r.IsDBNull( 14 ) )
          aTransportInstructionDoc.ShipFromParty_Adr4 = null;
        else
        {
          aTransportInstructionDoc.ShipFromParty_Adr4 = r.GetString( 14 );
        }

        if ( r.IsDBNull( 15 ) )
          aTransportInstructionDoc.ShipFromParty_PostCode = null;
        else
        {
          aTransportInstructionDoc.ShipFromParty_PostCode = r.GetString( 15 );
        }

        if ( r.IsDBNull( 16 ) )
          aTransportInstructionDoc.ShipFromParty_City = null;
        else
        {
          aTransportInstructionDoc.ShipFromParty_City = r.GetString( 16 );
        }

        if ( r.IsDBNull( 17 ) )
          aTransportInstructionDoc.ShipFromParty_Country = null;
        else
        {
          aTransportInstructionDoc.ShipFromParty_Country = r.GetString( 17 );
        }

        if ( r.IsDBNull( 18 ) )
          aTransportInstructionDoc.ShipFromParty_CountryCode = null;
        else
        {
          aTransportInstructionDoc.ShipFromParty_CountryCode = r.GetString( 18 );
        }

        if ( r.IsDBNull( 19 ) )
          aTransportInstructionDoc.ShipFromPartyNodeIdentity = null;
        else
        {
          aTransportInstructionDoc.ShipFromPartyNodeIdentity = r.GetString( 19 );
        }

        if ( r.IsDBNull( 20 ) )
          aTransportInstructionDoc.FreighterIdentity = null;
        else
        {
          aTransportInstructionDoc.FreighterIdentity = r.GetString( 20 );
        }

        if ( r.IsDBNull( 21 ) )
          aTransportInstructionDoc.FreName = null;
        else
        {
          aTransportInstructionDoc.FreName = r.GetString( 21 );
        }

        if ( r.IsDBNull( 22 ) )
          aTransportInstructionDoc.Fre_Adr = null;
        else
        {
          aTransportInstructionDoc.Fre_Adr = r.GetString( 22 );
        }

        if ( r.IsDBNull( 23 ) )
          aTransportInstructionDoc.Fre_PostCode = null;
        else
        {
          aTransportInstructionDoc.Fre_PostCode = r.GetString( 23 );
        }

        if ( r.IsDBNull( 24 ) )
          aTransportInstructionDoc.Fre_City = null;
        else
        {
          aTransportInstructionDoc.Fre_City = r.GetString( 24 );
        }

        if ( r.IsDBNull( 25 ) )
          aTransportInstructionDoc.Fre_Country = null;
        else
        {
          aTransportInstructionDoc.Fre_Country = r.GetString( 25 );
        }

        if ( r.IsDBNull( 26 ) )
          aTransportInstructionDoc.Fre_CountryCode = null;
        else
        {
          aTransportInstructionDoc.Fre_CountryCode = r.GetString( 26 );
        }

        if ( r.IsDBNull( 27 ) )
          aTransportInstructionDoc.Fre_Georef = null;
        else
        {
          aTransportInstructionDoc.Fre_Georef = r.GetString( 27 );
        }

        if ( r.IsDBNull( 28 ) )
          aTransportInstructionDoc.ShipFromCompanyIdentity = null;
        else
        {
          aTransportInstructionDoc.ShipFromCompanyIdentity = r.GetString( 28 );
        }

        if ( r.IsDBNull( 29 ) )
          aTransportInstructionDoc.ShipFromCompany_Name = null;
        else
        {
          aTransportInstructionDoc.ShipFromCompany_Name = r.GetString( 29 );
        }

        if ( r.IsDBNull( 30 ) )
          aTransportInstructionDoc.ShipFromCompany_Name2 = null;
        else
        {
          aTransportInstructionDoc.ShipFromCompany_Name2 = r.GetString( 30 );
        }

        if ( r.IsDBNull( 31 ) )
          aTransportInstructionDoc.ShipFromCompany_Name3 = null;
        else
        {
          aTransportInstructionDoc.ShipFromCompany_Name3 = r.GetString( 31 );
        }

        if ( r.IsDBNull( 32 ) )
          aTransportInstructionDoc.ShipFromCompany_Name4 = null;
        else
        {
          aTransportInstructionDoc.ShipFromCompany_Name4 = r.GetString( 32 );
        }

        if ( r.IsDBNull( 33 ) )
          aTransportInstructionDoc.ShipFromCompany_Name5 = null;
        else
        {
          aTransportInstructionDoc.ShipFromCompany_Name5 = r.GetString( 33 );
        }

        if ( r.IsDBNull( 34 ) )
          aTransportInstructionDoc.ShipFromCompany_Adr = null;
        else
        {
          aTransportInstructionDoc.ShipFromCompany_Adr = r.GetString( 34 );
        }

        if ( r.IsDBNull( 35 ) )
          aTransportInstructionDoc.ShipFromCompany_Adr2 = null;
        else
        {
          aTransportInstructionDoc.ShipFromCompany_Adr2 = r.GetString( 35 );
        }

        if ( r.IsDBNull( 36 ) )
          aTransportInstructionDoc.ShipFromCompany_Adr3 = null;
        else
        {
          aTransportInstructionDoc.ShipFromCompany_Adr3 = r.GetString( 36 );
        }

        if ( r.IsDBNull( 37 ) )
          aTransportInstructionDoc.ShipFromCompany_Adr4 = null;
        else
        {
          aTransportInstructionDoc.ShipFromCompany_Adr4 = r.GetString( 37 );
        }

        if ( r.IsDBNull( 38 ) )
          aTransportInstructionDoc.Shipfromcompany_PostCode = null;
        else
        {
          aTransportInstructionDoc.Shipfromcompany_PostCode = r.GetString( 38 );
        }

        if ( r.IsDBNull( 39 ) )
          aTransportInstructionDoc.ShipFromCompany_City = null;
        else
        {
          aTransportInstructionDoc.ShipFromCompany_City = r.GetString( 39 );
        }

        if ( r.IsDBNull( 40 ) )
          aTransportInstructionDoc.ShipFromCompany_Country = null;
        else
        {
          aTransportInstructionDoc.ShipFromCompany_Country = r.GetString( 40 );
        }

        if ( r.IsDBNull( 41 ) )
          aTransportInstructionDoc.ShipFromCompany_CountryCode = null;
        else
        {
          aTransportInstructionDoc.ShipFromCompany_CountryCode = r.GetString( 41 );
        }

        if ( r.IsDBNull( 42 ) )
          aTransportInstructionDoc.ShipFromCompanyNodeIdentity = null;
        else
        {
          aTransportInstructionDoc.ShipFromCompanyNodeIdentity = r.GetString( 42 );
        }

        if ( r.IsDBNull( 43 ) )
          aTransportInstructionDoc.ShipFromCompany_Phone = null;
        else
        {
          aTransportInstructionDoc.ShipFromCompany_Phone = r.GetString( 43 );
        }

        if ( r.IsDBNull( 44 ) )
          aTransportInstructionDoc.ShipFromCompany_Email = null;
        else
        {
          aTransportInstructionDoc.ShipFromCompany_Email = r.GetString( 44 );
        }

        if ( r.IsDBNull( 45 ) )
          aTransportInstructionDoc.ShipFromCompany_ContactName = null;
        else
        {
          aTransportInstructionDoc.ShipFromCompany_ContactName = r.GetString( 45 );
        }

        if ( r.IsDBNull( 46 ) )
          aTransportInstructionDoc.ShipFromCompany_TypeOfGoods = null;
        else
        {
          aTransportInstructionDoc.ShipFromCompany_TypeOfGoods = r.GetString( 46 );
        }

        aTransportInstructionDocList.Add( aTransportInstructionDoc );
      }

      r.Close();

      ArrayList aTRIConsignmentDocList = aTRIConsignmentSelect.InternalProcess( HapiTransId );

      foreach ( TransportInstructionDoc aTransportInstructionDoc in aTransportInstructionDocList )
      {
        ArrayList ConnectedChildren = null;
        ConnectedChildren = new ArrayList();

        foreach ( TRIConsignmentDoc aTRIConsignmentDoc in aTRIConsignmentDocList )
        {
          if ( GeneratedComparer.EqualTransportInstructionDocTRIConsignmentDoc( aTransportInstructionDoc, aTRIConsignmentDoc ) )
            ConnectedChildren.Add( aTRIConsignmentDoc );
        }
        aTransportInstructionDoc.aTRIConsignmentDocs = ConnectedChildren.ToArray(typeof(TRIConsignmentDoc)) as TRIConsignmentDoc[];
      }

      return aTransportInstructionDocList;
    }
  }

  public class TRIConsignmentSelect
  {
    private Database db;
    private TRIPartySelect aTRIPartySelect;
    private TRILoadCarrierSelect aTRILoadCarrierSelect;

    public TRIConsignmentSelect(Database db)
    {
      this.db = db;

      aTRIPartySelect = new TRIPartySelect(this.db);
      aTRILoadCarrierSelect = new TRILoadCarrierSelect(this.db);
    }

    public TRIConsignmentDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (TRIConsignmentDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aTRIConsignmentDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_TRPINSTR_CONSIGNMENT.DEPARTUREIDENTITY" +
               ",HAPI_TRPINSTR_CONSIGNMENT.CONSIGNMENT_ID" +
               ",HAPI_TRPINSTR_CONSIGNMENT.SHIPTOPARTYIDENTITY" +
               ",HAPI_TRPINSTR_CONSIGNMENT.SHIPTOPARTYNODEIDENTITY" +
               ",HAPI_TRPINSTR_CONSIGNMENT.FRE_CONSIGNMENTIDENTITY" +
        " from   HAPI_TRPINSTR_CONSIGNMENT" +
        " where  HAPI_TRPINSTR_CONSIGNMENT.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        TRIConsignmentDoc aTRIConsignmentDoc = new TRIConsignmentDoc();

        aTRIConsignmentDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aTRIConsignmentDoc.DepartureIdentity = null;
        else
        {
          aTRIConsignmentDoc.DepartureIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aTRIConsignmentDoc.Consignment_id = null;
        else
        {
          aTRIConsignmentDoc.Consignment_id = r.GetString( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aTRIConsignmentDoc.ShipToPartyIdentity = null;
        else
        {
          aTRIConsignmentDoc.ShipToPartyIdentity = r.GetString( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aTRIConsignmentDoc.ShipToPartyNodeIdentity = null;
        else
        {
          aTRIConsignmentDoc.ShipToPartyNodeIdentity = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aTRIConsignmentDoc.Fre_ConsignmentIdentity = null;
        else
        {
          aTRIConsignmentDoc.Fre_ConsignmentIdentity = r.GetString( 4 );
        }

        aTRIConsignmentDocList.Add( aTRIConsignmentDoc );
      }

      r.Close();

      ArrayList aTRIPartyDocList = aTRIPartySelect.InternalProcess( HapiTransId );
      ArrayList aTRILoadCarrierDocList = aTRILoadCarrierSelect.InternalProcess( HapiTransId );

      foreach ( TRIConsignmentDoc aTRIConsignmentDoc in aTRIConsignmentDocList )
      {
        ArrayList ConnectedChildren = null;
        ConnectedChildren = new ArrayList();

        foreach ( TRIPartyDoc aTRIPartyDoc in aTRIPartyDocList )
        {
          if ( GeneratedComparer.EqualTRIConsignmentDocTRIPartyDoc( aTRIConsignmentDoc, aTRIPartyDoc ) )
            ConnectedChildren.Add( aTRIPartyDoc );
        }
        aTRIConsignmentDoc.aTRIPartyDocs = ConnectedChildren.ToArray(typeof(TRIPartyDoc)) as TRIPartyDoc[];
        ConnectedChildren = new ArrayList();

        foreach ( TRILoadCarrierDoc aTRILoadCarrierDoc in aTRILoadCarrierDocList )
        {
          if ( GeneratedComparer.EqualTRIConsignmentDocTRILoadCarrierDoc( aTRIConsignmentDoc, aTRILoadCarrierDoc ) )
            ConnectedChildren.Add( aTRILoadCarrierDoc );
        }
        aTRIConsignmentDoc.aTRILoadCarrierDocs = ConnectedChildren.ToArray(typeof(TRILoadCarrierDoc)) as TRILoadCarrierDoc[];
      }

      return aTRIConsignmentDocList;
    }
  }

  public class TRIPartySelect
  {
    private Database db;

    public TRIPartySelect(Database db)
    {
      this.db = db;

    }

    public TRIPartyDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (TRIPartyDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aTRIPartyDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_TRPINSTR_PARTY.DEPARTUREIDENTITY" +
               ",HAPI_TRPINSTR_PARTY.CONSIGNMENT_ID" +
               ",HAPI_TRPINSTR_PARTY.SHIPTOPARTYIDENTITY" +
               ",HAPI_TRPINSTR_PARTY.SHIPTOPARTYNODEIDENTITY" +
               ",HAPI_TRPINSTR_PARTY.ARRIVAL_DTM" +
               ",HAPI_TRPINSTR_PARTY.SHIPTOPARTY_NAME" +
               ",HAPI_TRPINSTR_PARTY.SHIPTOPARTY_NAME2" +
               ",HAPI_TRPINSTR_PARTY.SHIPTOPARTY_NAME3" +
               ",HAPI_TRPINSTR_PARTY.SHIPTOPARTY_NAME4" +
               ",HAPI_TRPINSTR_PARTY.SHIPTOPARTY_NAME5" +
               ",HAPI_TRPINSTR_PARTY.SHIPTOPARTY_ADR" +
               ",HAPI_TRPINSTR_PARTY.SHIPTOPARTY_ADR2" +
               ",HAPI_TRPINSTR_PARTY.SHIPTOPARTY_ADR3" +
               ",HAPI_TRPINSTR_PARTY.SHIPTOPARTY_ADR4" +
               ",HAPI_TRPINSTR_PARTY.SHIPTOPARTY_POSTCODE" +
               ",HAPI_TRPINSTR_PARTY.SHIPTOPARTY_CITY" +
               ",HAPI_TRPINSTR_PARTY.SHIPTOPARTY_COUNTRY" +
               ",HAPI_TRPINSTR_PARTY.SHIPTOPARTY_COUNTRYCODE" +
               ",HAPI_TRPINSTR_PARTY.SHIPTOPARTY_PHONE" +
               ",HAPI_TRPINSTR_PARTY.SHIPTOPARTY_EMAIL" +
               ",HAPI_TRPINSTR_PARTY.SHIPTOPARTY_CONTACTNAME" +
               ",HAPI_TRPINSTR_PARTY.SHIPFROMCOMPANYIDENTITY" +
               ",HAPI_TRPINSTR_PARTY.SHIPFROMCOMPANY_NAME" +
               ",HAPI_TRPINSTR_PARTY.SHIPFROMCOMPANY_NAME2" +
               ",HAPI_TRPINSTR_PARTY.SHIPFROMCOMPANY_NAME3" +
               ",HAPI_TRPINSTR_PARTY.SHIPFROMCOMPANY_NAME4" +
               ",HAPI_TRPINSTR_PARTY.SHIPFROMCOMPANY_NAME5" +
               ",HAPI_TRPINSTR_PARTY.SHIPFROMCOMPANY_ADR" +
               ",HAPI_TRPINSTR_PARTY.SHIPFROMCOMPANY_ADR2" +
               ",HAPI_TRPINSTR_PARTY.SHIPFROMCOMPANY_ADR3" +
               ",HAPI_TRPINSTR_PARTY.SHIPFROMCOMPANY_ADR4" +
               ",HAPI_TRPINSTR_PARTY.SHIPFROMCOMPANY_POSTCODE" +
               ",HAPI_TRPINSTR_PARTY.SHIPFROMCOMPANY_CITY" +
               ",HAPI_TRPINSTR_PARTY.SHIPFROMCOMPANY_COUNTRY" +
               ",HAPI_TRPINSTR_PARTY.SHIPFROMCOMPANY_COUNTRYCODE" +
               ",HAPI_TRPINSTR_PARTY.SHIPFROMCOMPANYNODEIDENTITY" +
               ",HAPI_TRPINSTR_PARTY.SHIPFROMCOMPANY_PHONE" +
               ",HAPI_TRPINSTR_PARTY.SHIPFROMCOMPANY_EMAIL" +
               ",HAPI_TRPINSTR_PARTY.SHIPFROMCOMPANY_CONTACTNAME" +
        " from   HAPI_TRPINSTR_PARTY" +
        " where  HAPI_TRPINSTR_PARTY.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        TRIPartyDoc aTRIPartyDoc = new TRIPartyDoc();

        aTRIPartyDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aTRIPartyDoc.DepartureIdentity = null;
        else
        {
          aTRIPartyDoc.DepartureIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aTRIPartyDoc.Consignment_id = null;
        else
        {
          aTRIPartyDoc.Consignment_id = r.GetString( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aTRIPartyDoc.ShipToPartyIdentity = null;
        else
        {
          aTRIPartyDoc.ShipToPartyIdentity = r.GetString( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aTRIPartyDoc.ShipToPartyNodeIdentity = null;
        else
        {
          aTRIPartyDoc.ShipToPartyNodeIdentity = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aTRIPartyDoc.Arrival_dtm = null;
        else
        {
          aTRIPartyDoc.Arrival_dtm = DateTime.SpecifyKind(r.GetDateTime( 4 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 5 ) )
          aTRIPartyDoc.ShipToParty_Name = null;
        else
        {
          aTRIPartyDoc.ShipToParty_Name = r.GetString( 5 );
        }

        if ( r.IsDBNull( 6 ) )
          aTRIPartyDoc.ShipToParty_Name2 = null;
        else
        {
          aTRIPartyDoc.ShipToParty_Name2 = r.GetString( 6 );
        }

        if ( r.IsDBNull( 7 ) )
          aTRIPartyDoc.ShipToParty_Name3 = null;
        else
        {
          aTRIPartyDoc.ShipToParty_Name3 = r.GetString( 7 );
        }

        if ( r.IsDBNull( 8 ) )
          aTRIPartyDoc.ShipToParty_Name4 = null;
        else
        {
          aTRIPartyDoc.ShipToParty_Name4 = r.GetString( 8 );
        }

        if ( r.IsDBNull( 9 ) )
          aTRIPartyDoc.ShipToParty_Name5 = null;
        else
        {
          aTRIPartyDoc.ShipToParty_Name5 = r.GetString( 9 );
        }

        if ( r.IsDBNull( 10 ) )
          aTRIPartyDoc.ShipToParty_Adr = null;
        else
        {
          aTRIPartyDoc.ShipToParty_Adr = r.GetString( 10 );
        }

        if ( r.IsDBNull( 11 ) )
          aTRIPartyDoc.ShipToParty_Adr2 = null;
        else
        {
          aTRIPartyDoc.ShipToParty_Adr2 = r.GetString( 11 );
        }

        if ( r.IsDBNull( 12 ) )
          aTRIPartyDoc.ShipToParty_Adr3 = null;
        else
        {
          aTRIPartyDoc.ShipToParty_Adr3 = r.GetString( 12 );
        }

        if ( r.IsDBNull( 13 ) )
          aTRIPartyDoc.ShipToParty_Adr4 = null;
        else
        {
          aTRIPartyDoc.ShipToParty_Adr4 = r.GetString( 13 );
        }

        if ( r.IsDBNull( 14 ) )
          aTRIPartyDoc.ShipToParty_PostCode = null;
        else
        {
          aTRIPartyDoc.ShipToParty_PostCode = r.GetString( 14 );
        }

        if ( r.IsDBNull( 15 ) )
          aTRIPartyDoc.ShipToParty_City = null;
        else
        {
          aTRIPartyDoc.ShipToParty_City = r.GetString( 15 );
        }

        if ( r.IsDBNull( 16 ) )
          aTRIPartyDoc.ShipToParty_Country = null;
        else
        {
          aTRIPartyDoc.ShipToParty_Country = r.GetString( 16 );
        }

        if ( r.IsDBNull( 17 ) )
          aTRIPartyDoc.ShipToParty_CountryCode = null;
        else
        {
          aTRIPartyDoc.ShipToParty_CountryCode = r.GetString( 17 );
        }

        if ( r.IsDBNull( 18 ) )
          aTRIPartyDoc.ShipToParty_Phone = null;
        else
        {
          aTRIPartyDoc.ShipToParty_Phone = r.GetString( 18 );
        }

        if ( r.IsDBNull( 19 ) )
          aTRIPartyDoc.ShipToParty_Email = null;
        else
        {
          aTRIPartyDoc.ShipToParty_Email = r.GetString( 19 );
        }

        if ( r.IsDBNull( 20 ) )
          aTRIPartyDoc.ShipToParty_ContactName = null;
        else
        {
          aTRIPartyDoc.ShipToParty_ContactName = r.GetString( 20 );
        }

        if ( r.IsDBNull( 21 ) )
          aTRIPartyDoc.ShipFromCompanyIdentity = null;
        else
        {
          aTRIPartyDoc.ShipFromCompanyIdentity = r.GetString( 21 );
        }

        if ( r.IsDBNull( 22 ) )
          aTRIPartyDoc.ShipFromCompany_Name = null;
        else
        {
          aTRIPartyDoc.ShipFromCompany_Name = r.GetString( 22 );
        }

        if ( r.IsDBNull( 23 ) )
          aTRIPartyDoc.ShipFromCompany_Name2 = null;
        else
        {
          aTRIPartyDoc.ShipFromCompany_Name2 = r.GetString( 23 );
        }

        if ( r.IsDBNull( 24 ) )
          aTRIPartyDoc.ShipFromCompany_Name3 = null;
        else
        {
          aTRIPartyDoc.ShipFromCompany_Name3 = r.GetString( 24 );
        }

        if ( r.IsDBNull( 25 ) )
          aTRIPartyDoc.ShipFromCompany_Name4 = null;
        else
        {
          aTRIPartyDoc.ShipFromCompany_Name4 = r.GetString( 25 );
        }

        if ( r.IsDBNull( 26 ) )
          aTRIPartyDoc.ShipFromCompany_Name5 = null;
        else
        {
          aTRIPartyDoc.ShipFromCompany_Name5 = r.GetString( 26 );
        }

        if ( r.IsDBNull( 27 ) )
          aTRIPartyDoc.ShipFromCompany_Adr = null;
        else
        {
          aTRIPartyDoc.ShipFromCompany_Adr = r.GetString( 27 );
        }

        if ( r.IsDBNull( 28 ) )
          aTRIPartyDoc.ShipFromCompany_Adr2 = null;
        else
        {
          aTRIPartyDoc.ShipFromCompany_Adr2 = r.GetString( 28 );
        }

        if ( r.IsDBNull( 29 ) )
          aTRIPartyDoc.ShipFromCompany_Adr3 = null;
        else
        {
          aTRIPartyDoc.ShipFromCompany_Adr3 = r.GetString( 29 );
        }

        if ( r.IsDBNull( 30 ) )
          aTRIPartyDoc.ShipFromCompany_Adr4 = null;
        else
        {
          aTRIPartyDoc.ShipFromCompany_Adr4 = r.GetString( 30 );
        }

        if ( r.IsDBNull( 31 ) )
          aTRIPartyDoc.Shipfromcompany_PostCode = null;
        else
        {
          aTRIPartyDoc.Shipfromcompany_PostCode = r.GetString( 31 );
        }

        if ( r.IsDBNull( 32 ) )
          aTRIPartyDoc.ShipFromCompany_City = null;
        else
        {
          aTRIPartyDoc.ShipFromCompany_City = r.GetString( 32 );
        }

        if ( r.IsDBNull( 33 ) )
          aTRIPartyDoc.ShipFromCompany_Country = null;
        else
        {
          aTRIPartyDoc.ShipFromCompany_Country = r.GetString( 33 );
        }

        if ( r.IsDBNull( 34 ) )
          aTRIPartyDoc.ShipFromCompany_CountryCode = null;
        else
        {
          aTRIPartyDoc.ShipFromCompany_CountryCode = r.GetString( 34 );
        }

        if ( r.IsDBNull( 35 ) )
          aTRIPartyDoc.ShipFromCompanyNodeIdentity = null;
        else
        {
          aTRIPartyDoc.ShipFromCompanyNodeIdentity = r.GetString( 35 );
        }

        if ( r.IsDBNull( 36 ) )
          aTRIPartyDoc.ShipFromCompany_Phone = null;
        else
        {
          aTRIPartyDoc.ShipFromCompany_Phone = r.GetString( 36 );
        }

        if ( r.IsDBNull( 37 ) )
          aTRIPartyDoc.ShipFromCompany_Email = null;
        else
        {
          aTRIPartyDoc.ShipFromCompany_Email = r.GetString( 37 );
        }

        if ( r.IsDBNull( 38 ) )
          aTRIPartyDoc.ShipFromCompany_ContactName = null;
        else
        {
          aTRIPartyDoc.ShipFromCompany_ContactName = r.GetString( 38 );
        }

        aTRIPartyDocList.Add( aTRIPartyDoc );
      }

      r.Close();


      return aTRIPartyDocList;
    }
  }

  public class TRILoadCarrierSelect
  {
    private Database db;
    private TRIProductSelect aTRIProductSelect;

    public TRILoadCarrierSelect(Database db)
    {
      this.db = db;

      aTRIProductSelect = new TRIProductSelect(this.db);
    }

    public TRILoadCarrierDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (TRILoadCarrierDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aTRILoadCarrierDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_TRPINSTR_CAR.DEPARTUREIDENTITY" +
               ",HAPI_TRPINSTR_CAR.CONSIGNMENT_ID" +
               ",HAPI_TRPINSTR_CAR.SHIPTOPARTYIDENTITY" +
               ",HAPI_TRPINSTR_CAR.SHIPTOPARTYNODEIDENTITY" +
               ",HAPI_TRPINSTR_CAR.LOADCARRIERIDENTITY" +
               ",HAPI_TRPINSTR_CAR.LOADCARRIERQUALIFIER" +
               ",HAPI_TRPINSTR_CAR.LOADCARRIERTYPE" +
               ",HAPI_TRPINSTR_CAR.EXTERNALLOADCARRIERTYPE" +
               ",HAPI_TRPINSTR_CAR.PARENTLOADCARRIERIDENTITY" +
               ",HAPI_TRPINSTR_CAR.NETWEIGHT" +
               ",HAPI_TRPINSTR_CAR.NETVOLUME" +
               ",HAPI_TRPINSTR_CAR.TOTALWEIGHT" +
               ",HAPI_TRPINSTR_CAR.TOTALVOLUME" +
               ",HAPI_TRPINSTR_CAR.BOTTOMAREA" +
               ",HAPI_TRPINSTR_CAR.LOADINGMETER" +
               ",HAPI_TRPINSTR_CAR.PIKNOPAKS" +
               ",HAPI_TRPINSTR_CAR.PRODUCTTRANSPORTIDENTITY" +
               ",HAPI_TRPINSTR_CAR.FRE_PARTY_ID" +
               ",HAPI_TRPINSTR_CAR.FRE_PARTY_NAME" +
               ",HAPI_TRPINSTR_CAR.FRE_PARTY_NAME2" +
               ",HAPI_TRPINSTR_CAR.FRE_PARTY_NAME3" +
               ",HAPI_TRPINSTR_CAR.FRE_PARTY_NAME4" +
               ",HAPI_TRPINSTR_CAR.FRE_PARTY_NAME5" +
               ",HAPI_TRPINSTR_CAR.FRE_PARTY_ADR" +
               ",HAPI_TRPINSTR_CAR.FRE_PARTY_ADR2" +
               ",HAPI_TRPINSTR_CAR.FRE_PARTY_ADR3" +
               ",HAPI_TRPINSTR_CAR.FRE_PARTY_ADR4" +
               ",HAPI_TRPINSTR_CAR.FRE_PARTY_POSTCODE" +
               ",HAPI_TRPINSTR_CAR.FRE_PARTY_CITY" +
               ",HAPI_TRPINSTR_CAR.FRE_PARTY_COUNTRY" +
               ",HAPI_TRPINSTR_CAR.FRE_PARTY_COUNTRYCODE" +
               ",HAPI_TRPINSTR_CAR.FRE_PARTY_GEOREF" +
               ",HAPI_TRPINSTR_CAR.FREIGHT_PAYMENT_CODE" +
               ",HAPI_TRPINSTR_CAR.FRE_CUSTOMER_NAME_OTHER" +
               ",HAPI_TRPINSTR_CAR.NUMBEROFLOADCARRIERS" +
               ",HAPI_TRPINSTR_CAR.NUMBEROFCONSIGNMENTPACKAGES" +
               ",HAPI_TRPINSTR_CAR.CUSTOMERORDERNUMBER" +
               ",HAPI_TRPINSTR_CAR.CUSTOMERORDERSEQUENCE" +
               ",HAPI_TRPINSTR_CAR.SHIPPINGINSTRUCTION" +
               ",HAPI_TRPINSTR_CAR.TRANSPORTINSTRUCTION" +
               ",HAPI_TRPINSTR_CAR.FRE_CUSTOMER_ID" +
               ",HAPI_TRPINSTR_CAR.FRE_CUSTOMER_ID_EUR" +
               ",HAPI_TRPINSTR_CAR.ASNIDENTITY" +
               ",HAPI_TRPINSTR_CAR.ASNIDENTITYSEQUENCE" +
               ",HAPI_TRPINSTR_CAR.SHIPFROMCOMPANYIDENTITY" +
               ",HAPI_TRPINSTR_CAR.SHIPTOCUSTOMERIDENTITY" +
               ",HAPI_TRPINSTR_CAR.SHIPTOCUSTOMER_NAME" +
               ",HAPI_TRPINSTR_CAR.SHIPTOCUSTOMER_NAME2" +
               ",HAPI_TRPINSTR_CAR.SHIPTOCUSTOMER_NAME3" +
               ",HAPI_TRPINSTR_CAR.SHIPTOCUSTOMER_NAME4" +
               ",HAPI_TRPINSTR_CAR.SHIPTOCUSTOMER_NAME5" +
               ",HAPI_TRPINSTR_CAR.SHIPTOCUSTOMER_ADR" +
               ",HAPI_TRPINSTR_CAR.SHIPTOCUSTOMER_ADR2" +
               ",HAPI_TRPINSTR_CAR.SHIPTOCUSTOMER_ADR3" +
               ",HAPI_TRPINSTR_CAR.SHIPTOCUSTOMER_ADR4" +
               ",HAPI_TRPINSTR_CAR.SHIPTOCUSTOMER_POSTCODE" +
               ",HAPI_TRPINSTR_CAR.SHIPTOCUSTOMER_CITY" +
               ",HAPI_TRPINSTR_CAR.SHIPTOCUSTOMER_COUNTRY" +
               ",HAPI_TRPINSTR_CAR.SHIPTOCUSTOMER_COUNTRYCODE" +
               ",HAPI_TRPINSTR_CAR.SHIPTOCUSTOMERNODEIDENTITY" +
               ",HAPI_TRPINSTR_CAR.SHIPTOCUSTOMER_PHONE" +
               ",HAPI_TRPINSTR_CAR.SHIPTOCUSTOMER_EMAIL" +
               ",HAPI_TRPINSTR_CAR.SHIPTOCUSTOMER_CONTACTNAME" +
               ",HAPI_TRPINSTR_CAR.VEHICLEIDENTITY" +
               ",HAPI_TRPINSTR_CAR.VLUIDENTITY" +
        " from   HAPI_TRPINSTR_CAR" +
        " where  HAPI_TRPINSTR_CAR.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        TRILoadCarrierDoc aTRILoadCarrierDoc = new TRILoadCarrierDoc();

        aTRILoadCarrierDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aTRILoadCarrierDoc.DepartureIdentity = null;
        else
        {
          aTRILoadCarrierDoc.DepartureIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aTRILoadCarrierDoc.Consignment_id = null;
        else
        {
          aTRILoadCarrierDoc.Consignment_id = r.GetString( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aTRILoadCarrierDoc.ShipToPartyIdentity = null;
        else
        {
          aTRILoadCarrierDoc.ShipToPartyIdentity = r.GetString( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aTRILoadCarrierDoc.ShipToPartyNodeIdentity = null;
        else
        {
          aTRILoadCarrierDoc.ShipToPartyNodeIdentity = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aTRILoadCarrierDoc.LoadCarrierIdentity = null;
        else
        {
          aTRILoadCarrierDoc.LoadCarrierIdentity = r.GetString( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aTRILoadCarrierDoc.LoadCarrierQualifier = null;
        else
        {
          aTRILoadCarrierDoc.LoadCarrierQualifier = r.GetString( 5 );
        }

        if ( r.IsDBNull( 6 ) )
          aTRILoadCarrierDoc.LoadCarrierType = null;
        else
        {
          aTRILoadCarrierDoc.LoadCarrierType = r.GetString( 6 );
        }

        if ( r.IsDBNull( 7 ) )
          aTRILoadCarrierDoc.ExternalLoadCarrierType = null;
        else
        {
          aTRILoadCarrierDoc.ExternalLoadCarrierType = r.GetString( 7 );
        }

        if ( r.IsDBNull( 8 ) )
          aTRILoadCarrierDoc.ParentLoadCarrierIdentity = null;
        else
        {
          aTRILoadCarrierDoc.ParentLoadCarrierIdentity = r.GetString( 8 );
        }

        if ( r.IsDBNull( 9 ) )
          aTRILoadCarrierDoc.NetWeight = null;
        else
        {
          aTRILoadCarrierDoc.NetWeight = Convert.ToDouble( r.GetDecimal( 9 ) );
        }

        if ( r.IsDBNull( 10 ) )
          aTRILoadCarrierDoc.NetVolume = null;
        else
        {
          aTRILoadCarrierDoc.NetVolume = Convert.ToDouble( r.GetDecimal( 10 ) );
        }

        if ( r.IsDBNull( 11 ) )
          aTRILoadCarrierDoc.TotalWeight = null;
        else
        {
          aTRILoadCarrierDoc.TotalWeight = Convert.ToDouble( r.GetDecimal( 11 ) );
        }

        if ( r.IsDBNull( 12 ) )
          aTRILoadCarrierDoc.TotalVolume = null;
        else
        {
          aTRILoadCarrierDoc.TotalVolume = Convert.ToDouble( r.GetDecimal( 12 ) );
        }

        if ( r.IsDBNull( 13 ) )
          aTRILoadCarrierDoc.BottomArea = null;
        else
        {
          aTRILoadCarrierDoc.BottomArea = Convert.ToDouble( r.GetDecimal( 13 ) );
        }

        if ( r.IsDBNull( 14 ) )
          aTRILoadCarrierDoc.LoadingMeter = null;
        else
        {
          aTRILoadCarrierDoc.LoadingMeter = Convert.ToDouble( r.GetDecimal( 14 ) );
        }

        if ( r.IsDBNull( 15 ) )
          aTRILoadCarrierDoc.Piknopaks = null;
        else
        {
          aTRILoadCarrierDoc.Piknopaks = r.GetInt32( 15 );
        }

        if ( r.IsDBNull( 16 ) )
          aTRILoadCarrierDoc.ProductTransportIdentity = null;
        else
        {
          aTRILoadCarrierDoc.ProductTransportIdentity = r.GetString( 16 );
        }

        if ( r.IsDBNull( 17 ) )
          aTRILoadCarrierDoc.Fre_Party_Id = null;
        else
        {
          aTRILoadCarrierDoc.Fre_Party_Id = r.GetString( 17 );
        }

        if ( r.IsDBNull( 18 ) )
          aTRILoadCarrierDoc.Fre_Party_Name = null;
        else
        {
          aTRILoadCarrierDoc.Fre_Party_Name = r.GetString( 18 );
        }

        if ( r.IsDBNull( 19 ) )
          aTRILoadCarrierDoc.Fre_Party_Name2 = null;
        else
        {
          aTRILoadCarrierDoc.Fre_Party_Name2 = r.GetString( 19 );
        }

        if ( r.IsDBNull( 20 ) )
          aTRILoadCarrierDoc.Fre_Party_Name3 = null;
        else
        {
          aTRILoadCarrierDoc.Fre_Party_Name3 = r.GetString( 20 );
        }

        if ( r.IsDBNull( 21 ) )
          aTRILoadCarrierDoc.Fre_Party_Name4 = null;
        else
        {
          aTRILoadCarrierDoc.Fre_Party_Name4 = r.GetString( 21 );
        }

        if ( r.IsDBNull( 22 ) )
          aTRILoadCarrierDoc.Fre_Party_Name5 = null;
        else
        {
          aTRILoadCarrierDoc.Fre_Party_Name5 = r.GetString( 22 );
        }

        if ( r.IsDBNull( 23 ) )
          aTRILoadCarrierDoc.Fre_Party_Adr = null;
        else
        {
          aTRILoadCarrierDoc.Fre_Party_Adr = r.GetString( 23 );
        }

        if ( r.IsDBNull( 24 ) )
          aTRILoadCarrierDoc.Fre_Party_Adr2 = null;
        else
        {
          aTRILoadCarrierDoc.Fre_Party_Adr2 = r.GetString( 24 );
        }

        if ( r.IsDBNull( 25 ) )
          aTRILoadCarrierDoc.Fre_Party_Adr3 = null;
        else
        {
          aTRILoadCarrierDoc.Fre_Party_Adr3 = r.GetString( 25 );
        }

        if ( r.IsDBNull( 26 ) )
          aTRILoadCarrierDoc.Fre_Party_Adr4 = null;
        else
        {
          aTRILoadCarrierDoc.Fre_Party_Adr4 = r.GetString( 26 );
        }

        if ( r.IsDBNull( 27 ) )
          aTRILoadCarrierDoc.Fre_Party_PostCode = null;
        else
        {
          aTRILoadCarrierDoc.Fre_Party_PostCode = r.GetString( 27 );
        }

        if ( r.IsDBNull( 28 ) )
          aTRILoadCarrierDoc.Fre_Party_City = null;
        else
        {
          aTRILoadCarrierDoc.Fre_Party_City = r.GetString( 28 );
        }

        if ( r.IsDBNull( 29 ) )
          aTRILoadCarrierDoc.Fre_Party_Country = null;
        else
        {
          aTRILoadCarrierDoc.Fre_Party_Country = r.GetString( 29 );
        }

        if ( r.IsDBNull( 30 ) )
          aTRILoadCarrierDoc.Fre_Party_CountryCode = null;
        else
        {
          aTRILoadCarrierDoc.Fre_Party_CountryCode = r.GetString( 30 );
        }

        if ( r.IsDBNull( 31 ) )
          aTRILoadCarrierDoc.Fre_Party_Georef = null;
        else
        {
          aTRILoadCarrierDoc.Fre_Party_Georef = r.GetString( 31 );
        }

        if ( r.IsDBNull( 32 ) )
          aTRILoadCarrierDoc.Freight_payment_code = null;
        else
        {
          aTRILoadCarrierDoc.Freight_payment_code = r.GetString( 32 );
        }

        if ( r.IsDBNull( 33 ) )
          aTRILoadCarrierDoc.Fre_Customer_Name_other = null;
        else
        {
          aTRILoadCarrierDoc.Fre_Customer_Name_other = r.GetString( 33 );
        }

        if ( r.IsDBNull( 34 ) )
          aTRILoadCarrierDoc.NumberOfLoadCarriers = null;
        else
        {
          aTRILoadCarrierDoc.NumberOfLoadCarriers = r.GetInt32( 34 );
        }

        if ( r.IsDBNull( 35 ) )
          aTRILoadCarrierDoc.Numberofconsignmentpackages = null;
        else
        {
          aTRILoadCarrierDoc.Numberofconsignmentpackages = r.GetInt32( 35 );
        }

        if ( r.IsDBNull( 36 ) )
          aTRILoadCarrierDoc.CustomerOrderNumber = null;
        else
        {
          aTRILoadCarrierDoc.CustomerOrderNumber = r.GetString( 36 );
        }

        if ( r.IsDBNull( 37 ) )
          aTRILoadCarrierDoc.CustomerOrderSequence = null;
        else
        {
          aTRILoadCarrierDoc.CustomerOrderSequence = r.GetInt32( 37 );
        }

        if ( r.IsDBNull( 38 ) )
          aTRILoadCarrierDoc.ShippingInstruction = null;
        else
        {
          aTRILoadCarrierDoc.ShippingInstruction = r.GetString( 38 );
        }

        if ( r.IsDBNull( 39 ) )
          aTRILoadCarrierDoc.TransportInstruction = null;
        else
        {
          aTRILoadCarrierDoc.TransportInstruction = r.GetString( 39 );
        }

        if ( r.IsDBNull( 40 ) )
          aTRILoadCarrierDoc.Fre_Customer_Id = null;
        else
        {
          aTRILoadCarrierDoc.Fre_Customer_Id = r.GetString( 40 );
        }

        if ( r.IsDBNull( 41 ) )
          aTRILoadCarrierDoc.Fre_Customer_Id_Eur = null;
        else
        {
          aTRILoadCarrierDoc.Fre_Customer_Id_Eur = r.GetString( 41 );
        }

        if ( r.IsDBNull( 42 ) )
          aTRILoadCarrierDoc.ASNIdentity = null;
        else
        {
          aTRILoadCarrierDoc.ASNIdentity = r.GetString( 42 );
        }

        if ( r.IsDBNull( 43 ) )
          aTRILoadCarrierDoc.ASNIdentitySequence = null;
        else
        {
          aTRILoadCarrierDoc.ASNIdentitySequence = r.GetInt32( 43 );
        }

        if ( r.IsDBNull( 44 ) )
          aTRILoadCarrierDoc.ShipFromCompanyIdentity = null;
        else
        {
          aTRILoadCarrierDoc.ShipFromCompanyIdentity = r.GetString( 44 );
        }

        if ( r.IsDBNull( 45 ) )
          aTRILoadCarrierDoc.ShipToCustomerIdentity = null;
        else
        {
          aTRILoadCarrierDoc.ShipToCustomerIdentity = r.GetString( 45 );
        }

        if ( r.IsDBNull( 46 ) )
          aTRILoadCarrierDoc.ShipToCustomer_Name = null;
        else
        {
          aTRILoadCarrierDoc.ShipToCustomer_Name = r.GetString( 46 );
        }

        if ( r.IsDBNull( 47 ) )
          aTRILoadCarrierDoc.ShipToCustomer_Name2 = null;
        else
        {
          aTRILoadCarrierDoc.ShipToCustomer_Name2 = r.GetString( 47 );
        }

        if ( r.IsDBNull( 48 ) )
          aTRILoadCarrierDoc.ShipToCustomer_Name3 = null;
        else
        {
          aTRILoadCarrierDoc.ShipToCustomer_Name3 = r.GetString( 48 );
        }

        if ( r.IsDBNull( 49 ) )
          aTRILoadCarrierDoc.ShipToCustomer_Name4 = null;
        else
        {
          aTRILoadCarrierDoc.ShipToCustomer_Name4 = r.GetString( 49 );
        }

        if ( r.IsDBNull( 50 ) )
          aTRILoadCarrierDoc.ShipToCustomer_Name5 = null;
        else
        {
          aTRILoadCarrierDoc.ShipToCustomer_Name5 = r.GetString( 50 );
        }

        if ( r.IsDBNull( 51 ) )
          aTRILoadCarrierDoc.ShipToCustomer_Adr = null;
        else
        {
          aTRILoadCarrierDoc.ShipToCustomer_Adr = r.GetString( 51 );
        }

        if ( r.IsDBNull( 52 ) )
          aTRILoadCarrierDoc.ShipToCustomer_Adr2 = null;
        else
        {
          aTRILoadCarrierDoc.ShipToCustomer_Adr2 = r.GetString( 52 );
        }

        if ( r.IsDBNull( 53 ) )
          aTRILoadCarrierDoc.ShipToCustomer_Adr3 = null;
        else
        {
          aTRILoadCarrierDoc.ShipToCustomer_Adr3 = r.GetString( 53 );
        }

        if ( r.IsDBNull( 54 ) )
          aTRILoadCarrierDoc.ShipToCustomer_Adr4 = null;
        else
        {
          aTRILoadCarrierDoc.ShipToCustomer_Adr4 = r.GetString( 54 );
        }

        if ( r.IsDBNull( 55 ) )
          aTRILoadCarrierDoc.ShipToCustomer_PostCode = null;
        else
        {
          aTRILoadCarrierDoc.ShipToCustomer_PostCode = r.GetString( 55 );
        }

        if ( r.IsDBNull( 56 ) )
          aTRILoadCarrierDoc.ShipToCustomer_City = null;
        else
        {
          aTRILoadCarrierDoc.ShipToCustomer_City = r.GetString( 56 );
        }

        if ( r.IsDBNull( 57 ) )
          aTRILoadCarrierDoc.ShipToCustomer_Country = null;
        else
        {
          aTRILoadCarrierDoc.ShipToCustomer_Country = r.GetString( 57 );
        }

        if ( r.IsDBNull( 58 ) )
          aTRILoadCarrierDoc.ShipToCustomer_CountryCode = null;
        else
        {
          aTRILoadCarrierDoc.ShipToCustomer_CountryCode = r.GetString( 58 );
        }

        if ( r.IsDBNull( 59 ) )
          aTRILoadCarrierDoc.ShipToCustomerNodeIdentity = null;
        else
        {
          aTRILoadCarrierDoc.ShipToCustomerNodeIdentity = r.GetString( 59 );
        }

        if ( r.IsDBNull( 60 ) )
          aTRILoadCarrierDoc.ShipToCustomer_Phone = null;
        else
        {
          aTRILoadCarrierDoc.ShipToCustomer_Phone = r.GetString( 60 );
        }

        if ( r.IsDBNull( 61 ) )
          aTRILoadCarrierDoc.ShipToCustomer_Email = null;
        else
        {
          aTRILoadCarrierDoc.ShipToCustomer_Email = r.GetString( 61 );
        }

        if ( r.IsDBNull( 62 ) )
          aTRILoadCarrierDoc.ShipToCustomer_ContactName = null;
        else
        {
          aTRILoadCarrierDoc.ShipToCustomer_ContactName = r.GetString( 62 );
        }

        if ( r.IsDBNull( 63 ) )
          aTRILoadCarrierDoc.VehicleIdentity = null;
        else
        {
          aTRILoadCarrierDoc.VehicleIdentity = r.GetString( 63 );
        }

        if ( r.IsDBNull( 64 ) )
          aTRILoadCarrierDoc.VLUIdentity = null;
        else
        {
          aTRILoadCarrierDoc.VLUIdentity = r.GetString( 64 );
        }

        aTRILoadCarrierDocList.Add( aTRILoadCarrierDoc );
      }

      r.Close();

      ArrayList aTRIProductDocList = aTRIProductSelect.InternalProcess( HapiTransId );

      foreach ( TRILoadCarrierDoc aTRILoadCarrierDoc in aTRILoadCarrierDocList )
      {
        ArrayList ConnectedChildren = null;
        ConnectedChildren = new ArrayList();

        foreach ( TRIProductDoc aTRIProductDoc in aTRIProductDocList )
        {
          if ( GeneratedComparer.EqualTRILoadCarrierDocTRIProductDoc( aTRILoadCarrierDoc, aTRIProductDoc ) )
            ConnectedChildren.Add( aTRIProductDoc );
        }
        aTRILoadCarrierDoc.aTRIProductDocs = ConnectedChildren.ToArray(typeof(TRIProductDoc)) as TRIProductDoc[];
      }

      return aTRILoadCarrierDocList;
    }
  }

  public class TRIProductSelect
  {
    private Database db;
    private TRIProductCodeSelect aTRIProductCodeSelect;

    public TRIProductSelect(Database db)
    {
      this.db = db;

      aTRIProductCodeSelect = new TRIProductCodeSelect(this.db);
    }

    public TRIProductDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (TRIProductDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aTRIProductDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_TRPINSTR_ART.DEPARTUREIDENTITY" +
               ",HAPI_TRPINSTR_ART.CONSIGNMENT_ID" +
               ",HAPI_TRPINSTR_ART.SHIPTOPARTYIDENTITY" +
               ",HAPI_TRPINSTR_ART.SHIPTOPARTYNODEIDENTITY" +
               ",HAPI_TRPINSTR_ART.LOADCARRIERIDENTITY" +
               ",HAPI_TRPINSTR_ART.PRODUCTIDENTITY" +
        " from   HAPI_TRPINSTR_ART" +
        " where  HAPI_TRPINSTR_ART.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        TRIProductDoc aTRIProductDoc = new TRIProductDoc();

        aTRIProductDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aTRIProductDoc.DepartureIdentity = null;
        else
        {
          aTRIProductDoc.DepartureIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aTRIProductDoc.Consignment_id = null;
        else
        {
          aTRIProductDoc.Consignment_id = r.GetString( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aTRIProductDoc.ShipToPartyIdentity = null;
        else
        {
          aTRIProductDoc.ShipToPartyIdentity = r.GetString( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aTRIProductDoc.ShipToPartyNodeIdentity = null;
        else
        {
          aTRIProductDoc.ShipToPartyNodeIdentity = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aTRIProductDoc.LoadCarrierIdentity = null;
        else
        {
          aTRIProductDoc.LoadCarrierIdentity = r.GetString( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aTRIProductDoc.ProductIdentity = null;
        else
        {
          aTRIProductDoc.ProductIdentity = r.GetString( 5 );
        }

        aTRIProductDocList.Add( aTRIProductDoc );
      }

      r.Close();

      ArrayList aTRIProductCodeDocList = aTRIProductCodeSelect.InternalProcess( HapiTransId );

      foreach ( TRIProductDoc aTRIProductDoc in aTRIProductDocList )
      {
        ArrayList ConnectedChildren = null;
        ConnectedChildren = new ArrayList();

        foreach ( TRIProductCodeDoc aTRIProductCodeDoc in aTRIProductCodeDocList )
        {
          if ( GeneratedComparer.EqualTRIProductDocTRIProductCodeDoc( aTRIProductDoc, aTRIProductCodeDoc ) )
            ConnectedChildren.Add( aTRIProductCodeDoc );
        }
        aTRIProductDoc.aTRIProductCodeDocs = ConnectedChildren.ToArray(typeof(TRIProductCodeDoc)) as TRIProductCodeDoc[];
      }

      return aTRIProductDocList;
    }
  }

  public class TRIProductCodeSelect
  {
    private Database db;

    public TRIProductCodeSelect(Database db)
    {
      this.db = db;

    }

    public TRIProductCodeDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (TRIProductCodeDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aTRIProductCodeDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_TRPINSTR_ARTCOD.DEPARTUREIDENTITY" +
               ",HAPI_TRPINSTR_ARTCOD.CONSIGNMENT_ID" +
               ",HAPI_TRPINSTR_ARTCOD.SHIPTOPARTYIDENTITY" +
               ",HAPI_TRPINSTR_ARTCOD.SHIPTOPARTYNODEIDENTITY" +
               ",HAPI_TRPINSTR_ARTCOD.LOADCARRIERIDENTITY" +
               ",HAPI_TRPINSTR_ARTCOD.PRODUCTIDENTITY" +
               ",HAPI_TRPINSTR_ARTCOD.TYPE" +
               ",HAPI_TRPINSTR_ARTCOD.DESCRIPTION" +
               ",HAPI_TRPINSTR_ARTCOD.CODE" +
        " from   HAPI_TRPINSTR_ARTCOD" +
        " where  HAPI_TRPINSTR_ARTCOD.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        TRIProductCodeDoc aTRIProductCodeDoc = new TRIProductCodeDoc();

        aTRIProductCodeDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aTRIProductCodeDoc.DepartureIdentity = null;
        else
        {
          aTRIProductCodeDoc.DepartureIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aTRIProductCodeDoc.Consignment_id = null;
        else
        {
          aTRIProductCodeDoc.Consignment_id = r.GetString( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aTRIProductCodeDoc.ShipToPartyIdentity = null;
        else
        {
          aTRIProductCodeDoc.ShipToPartyIdentity = r.GetString( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aTRIProductCodeDoc.ShipToPartyNodeIdentity = null;
        else
        {
          aTRIProductCodeDoc.ShipToPartyNodeIdentity = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aTRIProductCodeDoc.LoadCarrierIdentity = null;
        else
        {
          aTRIProductCodeDoc.LoadCarrierIdentity = r.GetString( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aTRIProductCodeDoc.ProductIdentity = null;
        else
        {
          aTRIProductCodeDoc.ProductIdentity = r.GetString( 5 );
        }

        if ( r.IsDBNull( 6 ) )
          aTRIProductCodeDoc.Type = null;
        else
        {
          aTRIProductCodeDoc.Type = r.GetString( 6 );
        }

        if ( r.IsDBNull( 7 ) )
          aTRIProductCodeDoc.Description = null;
        else
        {
          aTRIProductCodeDoc.Description = r.GetString( 7 );
        }

        if ( r.IsDBNull( 8 ) )
          aTRIProductCodeDoc.Code = null;
        else
        {
          aTRIProductCodeDoc.Code = r.GetString( 8 );
        }

        aTRIProductCodeDocList.Add( aTRIProductCodeDoc );
      }

      r.Close();


      return aTRIProductCodeDocList;
    }
  }

  public class TransportPlanHeadSelect
  {
    private Database db;
    private TransportPlanLineSelect aTransportPlanLineSelect;

    public TransportPlanHeadSelect(Database db)
    {
      this.db = db;

      aTransportPlanLineSelect = new TransportPlanLineSelect(this.db);
    }

    public TransportPlanHeadDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (TransportPlanHeadDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aTransportPlanHeadDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_TRANSPORT_PLAN_HEAD.TRANSPORTORDERNO" +
               ",HAPI_TRANSPORT_PLAN_HEAD.CUSTOMERORDERNUMBER" +
               ",HAPI_TRANSPORT_PLAN_HEAD.CUSTOMERORDERSEQUENCE" +
               ",HAPI_TRANSPORT_PLAN_HEAD.CUSTYPID" +
        " from   HAPI_TRANSPORT_PLAN_HEAD" +
        " where  HAPI_TRANSPORT_PLAN_HEAD.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        TransportPlanHeadDoc aTransportPlanHeadDoc = new TransportPlanHeadDoc();

        aTransportPlanHeadDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aTransportPlanHeadDoc.TransportOrderNo = null;
        else
        {
          aTransportPlanHeadDoc.TransportOrderNo = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aTransportPlanHeadDoc.CustomerOrderNumber = null;
        else
        {
          aTransportPlanHeadDoc.CustomerOrderNumber = r.GetString( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aTransportPlanHeadDoc.CustomerOrderSequence = null;
        else
        {
          aTransportPlanHeadDoc.CustomerOrderSequence = r.GetInt32( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aTransportPlanHeadDoc.Custypid = null;
        else
        {
          aTransportPlanHeadDoc.Custypid = r.GetString( 3 );
        }

        aTransportPlanHeadDocList.Add( aTransportPlanHeadDoc );
      }

      r.Close();

      ArrayList aTransportPlanLineDocList = aTransportPlanLineSelect.InternalProcess( HapiTransId );

      foreach ( TransportPlanHeadDoc aTransportPlanHeadDoc in aTransportPlanHeadDocList )
      {
        ArrayList ConnectedChildren = null;
        ConnectedChildren = new ArrayList();

        foreach ( TransportPlanLineDoc aTransportPlanLineDoc in aTransportPlanLineDocList )
        {
          if ( GeneratedComparer.EqualTransportPlanHeadDocTransportPlanLineDoc( aTransportPlanHeadDoc, aTransportPlanLineDoc ) )
            ConnectedChildren.Add( aTransportPlanLineDoc );
        }
        aTransportPlanHeadDoc.aTransportPlanLineDocs = ConnectedChildren.ToArray(typeof(TransportPlanLineDoc)) as TransportPlanLineDoc[];
      }

      return aTransportPlanHeadDocList;
    }
  }

  public class TransportPlanLineSelect
  {
    private Database db;

    public TransportPlanLineSelect(Database db)
    {
      this.db = db;

    }

    public TransportPlanLineDoc Process( System.String HapiTransId )
    {
      ArrayList l = InternalProcess( HapiTransId );

      if ( l.Count == 1 )
        return (TransportPlanLineDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String HapiTransId )
    {
      ArrayList aTransportPlanLineDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " HAPI_TRANSPORT_PLAN_LINE.TRANSPORTORDERNO" +
               ",HAPI_TRANSPORT_PLAN_LINE.CUSTOMERORDERNUMBER" +
               ",HAPI_TRANSPORT_PLAN_LINE.CUSTOMERORDERSEQUENCE" +
               ",HAPI_TRANSPORT_PLAN_LINE.CUSTOMERORDERLINEPOSITION" +
               ",HAPI_TRANSPORT_PLAN_LINE.CUSTOMERORDERLINEKITPOSITION" +
               ",HAPI_TRANSPORT_PLAN_LINE.CUSTOMERORDERLINESEQUENCE" +
               ",HAPI_TRANSPORT_PLAN_LINE.CUSTOMERORDERLINETYPE" +
               ",HAPI_TRANSPORT_PLAN_LINE.LOADCARRIERIDENTITY" +
               ",HAPI_TRANSPORT_PLAN_LINE.LOADCARRIERTYPE" +
               ",HAPI_TRANSPORT_PLAN_LINE.PALLETPACKAGE" +
               ",HAPI_TRANSPORT_PLAN_LINE.LOADCARRIERENCLOSED" +
               ",HAPI_TRANSPORT_PLAN_LINE.LOADCARRIERVOLUME" +
               ",HAPI_TRANSPORT_PLAN_LINE.LOADCARRIERWEIGHT" +
               ",HAPI_TRANSPORT_PLAN_LINE.LOADCARRIERHEIGHT" +
               ",HAPI_TRANSPORT_PLAN_LINE.PRODUCTNUMBER" +
               ",HAPI_TRANSPORT_PLAN_LINE.ORDEREDQUANTITY" +
               ",HAPI_TRANSPORT_PLAN_LINE.VOLUME" +
               ",HAPI_TRANSPORT_PLAN_LINE.WEIGHT" +
               ",HAPI_TRANSPORT_PLAN_LINE.HEIGHT" +
        " from   HAPI_TRANSPORT_PLAN_LINE" +
        " where  HAPI_TRANSPORT_PLAN_LINE.HAPITRANS_ID = '" + HapiTransId + "'" );

      while ( r.Read() )
      {
        TransportPlanLineDoc aTransportPlanLineDoc = new TransportPlanLineDoc();

        aTransportPlanLineDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aTransportPlanLineDoc.TransportOrderNo = null;
        else
        {
          aTransportPlanLineDoc.TransportOrderNo = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aTransportPlanLineDoc.CustomerOrderNumber = null;
        else
        {
          aTransportPlanLineDoc.CustomerOrderNumber = r.GetString( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aTransportPlanLineDoc.CustomerOrderSequence = null;
        else
        {
          aTransportPlanLineDoc.CustomerOrderSequence = r.GetInt32( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aTransportPlanLineDoc.CustomerOrderLinePosition = null;
        else
        {
          aTransportPlanLineDoc.CustomerOrderLinePosition = r.GetInt32( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aTransportPlanLineDoc.CustomerOrderLineKitPosition = null;
        else
        {
          aTransportPlanLineDoc.CustomerOrderLineKitPosition = r.GetInt32( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aTransportPlanLineDoc.CustomerOrderLineSequence = null;
        else
        {
          aTransportPlanLineDoc.CustomerOrderLineSequence = r.GetInt32( 5 );
        }

        if ( r.IsDBNull( 6 ) )
          aTransportPlanLineDoc.CustomerOrderLineType = null;
        else
        {
          aTransportPlanLineDoc.CustomerOrderLineType = r.GetString( 6 );
        }

        if ( r.IsDBNull( 7 ) )
          aTransportPlanLineDoc.LoadCarrierIdentity = null;
        else
        {
          aTransportPlanLineDoc.LoadCarrierIdentity = r.GetString( 7 );
        }

        if ( r.IsDBNull( 8 ) )
          aTransportPlanLineDoc.LoadCarrierType = null;
        else
        {
          aTransportPlanLineDoc.LoadCarrierType = r.GetString( 8 );
        }

        if ( r.IsDBNull( 9 ) )
          aTransportPlanLineDoc.PalletPackage = null;
        else
        {
          aTransportPlanLineDoc.PalletPackage = r.GetString( 9 );
        }

        if ( r.IsDBNull( 10 ) )
          aTransportPlanLineDoc.LoadCarrierEnclosed = null;
        else
        {
          aTransportPlanLineDoc.LoadCarrierEnclosed = r.GetString( 10 );
        }

        if ( r.IsDBNull( 11 ) )
          aTransportPlanLineDoc.LoadCarrierVolume = null;
        else
        {
          aTransportPlanLineDoc.LoadCarrierVolume = Convert.ToDouble( r.GetDecimal( 11 ) );
        }

        if ( r.IsDBNull( 12 ) )
          aTransportPlanLineDoc.LoadCarrierWeight = null;
        else
        {
          aTransportPlanLineDoc.LoadCarrierWeight = Convert.ToDouble( r.GetDecimal( 12 ) );
        }

        if ( r.IsDBNull( 13 ) )
          aTransportPlanLineDoc.LoadCarrierHeight = null;
        else
        {
          aTransportPlanLineDoc.LoadCarrierHeight = Convert.ToDouble( r.GetDecimal( 13 ) );
        }

        if ( r.IsDBNull( 14 ) )
          aTransportPlanLineDoc.ProductNumber = null;
        else
        {
          aTransportPlanLineDoc.ProductNumber = r.GetString( 14 );
        }

        if ( r.IsDBNull( 15 ) )
          aTransportPlanLineDoc.OrderedQuantity = null;
        else
        {
          aTransportPlanLineDoc.OrderedQuantity = Convert.ToDouble( r.GetDecimal( 15 ) );
        }

        if ( r.IsDBNull( 16 ) )
          aTransportPlanLineDoc.Volume = null;
        else
        {
          aTransportPlanLineDoc.Volume = Convert.ToDouble( r.GetDecimal( 16 ) );
        }

        if ( r.IsDBNull( 17 ) )
          aTransportPlanLineDoc.Weight = null;
        else
        {
          aTransportPlanLineDoc.Weight = Convert.ToDouble( r.GetDecimal( 17 ) );
        }

        if ( r.IsDBNull( 18 ) )
          aTransportPlanLineDoc.Height = null;
        else
        {
          aTransportPlanLineDoc.Height = Convert.ToDouble( r.GetDecimal( 18 ) );
        }

        aTransportPlanLineDocList.Add( aTransportPlanLineDoc );
      }

      r.Close();


      return aTransportPlanLineDocList;
    }
  }

  public class GeneratedComparer
  {
    static public bool EqualDeliveryReceiptHeadDocDeliveryReceiptHeadTextDoc( DeliveryReceiptHeadDoc aDeliveryReceiptHeadDoc, DeliveryReceiptHeadTextDoc aDeliveryReceiptHeadTextDoc )
    {
      return (  ( aDeliveryReceiptHeadDoc.DeliveryIdentity == aDeliveryReceiptHeadTextDoc.DeliveryIdentity )
              && ( aDeliveryReceiptHeadDoc.ArrivalDateTime == aDeliveryReceiptHeadTextDoc.ArrivalDateTime ) );
    }

    static public bool EqualDeliveryReceiptHeadDocDeliveryReceiptLineDoc( DeliveryReceiptHeadDoc aDeliveryReceiptHeadDoc, DeliveryReceiptLineDoc aDeliveryReceiptLineDoc )
    {
      return (  ( aDeliveryReceiptHeadDoc.DeliveryIdentity == aDeliveryReceiptLineDoc.DeliveryIdentity )
              && ( aDeliveryReceiptHeadDoc.ArrivalDateTime == aDeliveryReceiptLineDoc.ArrivalDateTime ) );
    }

    static public bool EqualDeliveryReceiptHeadDocDeliveryReceiptPackingMaterialDoc( DeliveryReceiptHeadDoc aDeliveryReceiptHeadDoc, DeliveryReceiptPackingMaterialDoc aDeliveryReceiptPackingMaterialDoc )
    {
      return (  ( aDeliveryReceiptHeadDoc.DeliveryIdentity == aDeliveryReceiptPackingMaterialDoc.DeliveryIdentity )
              && ( aDeliveryReceiptHeadDoc.ArrivalDateTime == aDeliveryReceiptPackingMaterialDoc.ArrivalDateTime ) );
    }

    static public bool EqualDeliveryReceiptLineDocDeliveryReceiptLineTextDoc( DeliveryReceiptLineDoc aDeliveryReceiptLineDoc, DeliveryReceiptLineTextDoc aDeliveryReceiptLineTextDoc )
    {
      return (  ( aDeliveryReceiptLineDoc.DeliveryIdentity == aDeliveryReceiptLineTextDoc.DeliveryIdentity )
              && ( aDeliveryReceiptLineDoc.DeliveryidentityLine == aDeliveryReceiptLineTextDoc.DeliveryidentityLine )
              && ( aDeliveryReceiptLineDoc.ArrivalDateTime == aDeliveryReceiptLineTextDoc.ArrivalDateTime ) );
    }

    static public bool EqualInspectionReceiptHeadDocInspectionReceiptLineDoc( InspectionReceiptHeadDoc aInspectionReceiptHeadDoc, InspectionReceiptLineDoc aInspectionReceiptLineDoc )
    {
      return false;
    }

    static public bool EqualInspectionReceiptLineDocInspectionReceiptLinePackingMaterialDoc( InspectionReceiptLineDoc aInspectionReceiptLineDoc, InspectionReceiptLinePackingMaterialDoc aInspectionReceiptLinePackingMaterialDoc )
    {
      return (  ( Convert.ToString( aInspectionReceiptLineDoc.WorkOrderIdentity ) == Convert.ToString( aInspectionReceiptLinePackingMaterialDoc.WorkOrderIdentity ) )
              && ( aInspectionReceiptLineDoc.WorkOrderLine == aInspectionReceiptLinePackingMaterialDoc.WorkOrderLine )
              && ( aInspectionReceiptLineDoc.WorkOrderLineSeq == aInspectionReceiptLinePackingMaterialDoc.WorkOrderLineSeq ) );
    }

    static public bool EqualPickReceiptHeadDocPickReceiptHeadPackingMaterialDoc( PickReceiptHeadDoc aPickReceiptHeadDoc, PickReceiptHeadPackingMaterialDoc aPickReceiptHeadPackingMaterialDoc )
    {
      return (  ( Convert.ToString( aPickReceiptHeadDoc.CustomerOrderNumber ) == Convert.ToString( aPickReceiptHeadPackingMaterialDoc.CustomerOrderNumber ) )
              && ( aPickReceiptHeadDoc.CustomerOrderSequence == aPickReceiptHeadPackingMaterialDoc.CustomerOrderSequence )
              && ( aPickReceiptHeadDoc.CustomerOrderSubSequence == aPickReceiptHeadPackingMaterialDoc.CustomerOrderSubSequence ) );
    }

    static public bool EqualPickReceiptHeadDocPickReceiptLineDoc( PickReceiptHeadDoc aPickReceiptHeadDoc, PickReceiptLineDoc aPickReceiptLineDoc )
    {
      return (  ( Convert.ToString( aPickReceiptHeadDoc.CustomerOrderNumber ) == Convert.ToString( aPickReceiptLineDoc.CustomerOrderNumber ) )
              && ( aPickReceiptHeadDoc.CustomerOrderSequence == aPickReceiptLineDoc.CustomerOrderSequence )
              && ( aPickReceiptHeadDoc.CustomerOrderSubSequence == aPickReceiptLineDoc.CustomerOrderSubSequence ) );
    }

    static public bool EqualPickReceiptHeadDocPickReceiptServiceDoc( PickReceiptHeadDoc aPickReceiptHeadDoc, PickReceiptServiceDoc aPickReceiptServiceDoc )
    {
      return (  ( Convert.ToString( aPickReceiptHeadDoc.CustomerOrderNumber ) == Convert.ToString( aPickReceiptServiceDoc.CustomerOrderNumber ) )
              && ( aPickReceiptHeadDoc.CustomerOrderSequence == aPickReceiptServiceDoc.CustomerOrderSequence )
              && ( aPickReceiptHeadDoc.CustomerOrderSubSequence == aPickReceiptServiceDoc.CustomerOrderSubSequence ) );
    }

    static public bool EqualPickReceiptHeadDocPickReceiptTextDoc( PickReceiptHeadDoc aPickReceiptHeadDoc, PickReceiptTextDoc aPickReceiptTextDoc )
    {
      return (  ( Convert.ToString( aPickReceiptHeadDoc.CustomerOrderNumber ) == Convert.ToString( aPickReceiptTextDoc.CustomerOrderNumber ) )
              && ( aPickReceiptHeadDoc.CustomerOrderSequence == aPickReceiptTextDoc.CustomerOrderSequence )
              && ( aPickReceiptHeadDoc.CustomerOrderSubSequence == aPickReceiptTextDoc.CustomerOrderSubSequence ) );
    }

    static public bool EqualPickReceiptLineDocPickReceiptLineTextDoc( PickReceiptLineDoc aPickReceiptLineDoc, PickReceiptLineTextDoc aPickReceiptLineTextDoc )
    {
      return (  ( Convert.ToString( aPickReceiptLineDoc.CustomerOrderNumber ) == Convert.ToString( aPickReceiptLineTextDoc.CustomerOrderNumber ) )
              && ( aPickReceiptLineDoc.CustomerOrderSequence == aPickReceiptLineTextDoc.CustomerOrderSequence )
              && ( aPickReceiptLineDoc.CustomerOrderSubSequence == aPickReceiptLineTextDoc.CustomerOrderSubSequence )
              && ( aPickReceiptLineDoc.CustomerOrderLinePosition == aPickReceiptLineTextDoc.CustomerOrderLinePosition )
              && ( aPickReceiptLineDoc.CustomerOrderLineKitPosition == aPickReceiptLineTextDoc.CustomerOrderLineKitPosition )
              && ( aPickReceiptLineDoc.CustomerOrderLineSequence == aPickReceiptLineTextDoc.CustomerOrderLineSequence )
              && ( Convert.ToString( aPickReceiptLineDoc.PickOrderLineIdentity ) == Convert.ToString( aPickReceiptLineTextDoc.PickOrderLineIdentity ) ) );
    }

    static public bool EqualPickReceiptLineDocPickReceiptLinePackingMaterialDoc( PickReceiptLineDoc aPickReceiptLineDoc, PickReceiptLinePackingMaterialDoc aPickReceiptLinePackingMaterialDoc )
    {
      return (  ( Convert.ToString( aPickReceiptLineDoc.CustomerOrderNumber ) == Convert.ToString( aPickReceiptLinePackingMaterialDoc.CustomerOrderNumber ) )
              && ( aPickReceiptLineDoc.CustomerOrderSequence == aPickReceiptLinePackingMaterialDoc.CustomerOrderSequence )
              && ( aPickReceiptLineDoc.CustomerOrderSubSequence == aPickReceiptLinePackingMaterialDoc.CustomerOrderSubSequence )
              && ( aPickReceiptLineDoc.CustomerOrderLinePosition == aPickReceiptLinePackingMaterialDoc.CustomerOrderLinePosition )
              && ( aPickReceiptLineDoc.CustomerOrderLineKitPosition == aPickReceiptLinePackingMaterialDoc.CustomerOrderLineKitPosition )
              && ( aPickReceiptLineDoc.CustomerOrderLineSequence == aPickReceiptLinePackingMaterialDoc.CustomerOrderLineSequence )
              && ( Convert.ToString( aPickReceiptLineDoc.PickOrderLineIdentity ) == Convert.ToString( aPickReceiptLinePackingMaterialDoc.PickOrderLineIdentity ) ) );
    }

    static public bool EqualReturnedPackingMaterialHeadDocReturnedPackingMaterialLineDoc( ReturnedPackingMaterialHeadDoc aReturnedPackingMaterialHeadDoc, ReturnedPackingMaterialLineDoc aReturnedPackingMaterialLineDoc )
    {
      return false;
    }

    static public bool EqualReturnReceiptHeadDocReturnReceiptHeadPackingMaterialDoc( ReturnReceiptHeadDoc aReturnReceiptHeadDoc, ReturnReceiptHeadPackingMaterialDoc aReturnReceiptHeadPackingMaterialDoc )
    {
      return (  ( Convert.ToString( aReturnReceiptHeadDoc.ReturnOrderNumber ) == Convert.ToString( aReturnReceiptHeadPackingMaterialDoc.ReturnOrderNumber ) )
              && ( aReturnReceiptHeadDoc.ReturnOrderSequence == aReturnReceiptHeadPackingMaterialDoc.ReturnOrderSequence )
              && ( aReturnReceiptHeadDoc.ReturnOrderSubSequence == aReturnReceiptHeadPackingMaterialDoc.ReturnOrderSubSequence )
              && ( Convert.ToString( aReturnReceiptHeadDoc.SpontaneousReturn ) == Convert.ToString( aReturnReceiptHeadPackingMaterialDoc.SpontaneousReturn ) ) );
    }

    static public bool EqualReturnReceiptHeadDocReturnReceiptLineDoc( ReturnReceiptHeadDoc aReturnReceiptHeadDoc, ReturnReceiptLineDoc aReturnReceiptLineDoc )
    {
      return (  ( Convert.ToString( aReturnReceiptHeadDoc.ReturnOrderNumber ) == Convert.ToString( aReturnReceiptLineDoc.ReturnOrderNumber ) )
              && ( aReturnReceiptHeadDoc.ReturnOrderSequence == aReturnReceiptLineDoc.ReturnOrderSequence )
              && ( aReturnReceiptHeadDoc.ReturnOrderSubSequence == aReturnReceiptLineDoc.ReturnOrderSubSequence ) );
    }

    static public bool EqualASNHeadDocASNLoadCarrierDoc( ASNHeadDoc aASNHeadDoc, ASNLoadCarrierDoc aASNLoadCarrierDoc )
    {
      return (  ( Convert.ToString( aASNHeadDoc.ASNIdentity ) == Convert.ToString( aASNLoadCarrierDoc.ASNIdentity ) )
              && ( aASNHeadDoc.ASNSequenceNumber == aASNLoadCarrierDoc.ASNSequenceNumber ) );
    }

    static public bool EqualASNHeadDocASNHeadTextDoc( ASNHeadDoc aASNHeadDoc, ASNHeadTextDoc aASNHeadTextDoc )
    {
      return (  ( Convert.ToString( aASNHeadDoc.ASNIdentity ) == Convert.ToString( aASNHeadTextDoc.ASNIdentity ) )
              && ( aASNHeadDoc.ASNSequenceNumber == aASNHeadTextDoc.ASNSequenceNumber ) );
    }

    static public bool EqualASNHeadDocASNLineDoc( ASNHeadDoc aASNHeadDoc, ASNLineDoc aASNLineDoc )
    {
      return (  ( Convert.ToString( aASNHeadDoc.ASNIdentity ) == Convert.ToString( aASNLineDoc.ASNIdentity ) )
              && ( aASNHeadDoc.ASNSequenceNumber == aASNLineDoc.ASNSequenceNumber ) );
    }

    static public bool EqualASNLineDocASNLineTextDoc( ASNLineDoc aASNLineDoc, ASNLineTextDoc aASNLineTextDoc )
    {
      return (  ( Convert.ToString( aASNLineDoc.ASNIdentity ) == Convert.ToString( aASNLineTextDoc.ASNIdentity ) )
              && ( aASNLineDoc.ASNSequenceNumber == aASNLineTextDoc.ASNSequenceNumber )
              && ( aASNLineDoc.ASNLineNumber == aASNLineTextDoc.ASNLineNumber )
              && ( aASNLineDoc.ASNLineSequenceNumber == aASNLineTextDoc.ASNLineSequenceNumber ) );
    }

    static public bool EqualConfirmationOfReceiptHeadDocConfirmationOfReceiptLoadCarrierDoc( ConfirmationOfReceiptHeadDoc aConfirmationOfReceiptHeadDoc, ConfirmationOfReceiptLoadCarrierDoc aConfirmationOfReceiptLoadCarrierDoc )
    {
      return (  ( Convert.ToString( aConfirmationOfReceiptHeadDoc.AcknowledgeInboundAsnIdentity ) == Convert.ToString( aConfirmationOfReceiptLoadCarrierDoc.AcknowledgeInboundAsnIdentity ) ) );
    }

    static public bool EqualConfirmationOfReceiptHeadDocConfirmationOfReceiptLineDoc( ConfirmationOfReceiptHeadDoc aConfirmationOfReceiptHeadDoc, ConfirmationOfReceiptLineDoc aConfirmationOfReceiptLineDoc )
    {
      return (  ( Convert.ToString( aConfirmationOfReceiptHeadDoc.AcknowledgeInboundAsnIdentity ) == Convert.ToString( aConfirmationOfReceiptLineDoc.AcknowledgeInboundAsnIdentity ) ) );
    }

    static public bool EqualTransportInstructionDocTRIConsignmentDoc( TransportInstructionDoc aTransportInstructionDoc, TRIConsignmentDoc aTRIConsignmentDoc )
    {
      return (  ( Convert.ToString( aTransportInstructionDoc.DepartureIdentity ) == Convert.ToString( aTRIConsignmentDoc.DepartureIdentity ) ) );
    }

    static public bool EqualTRIConsignmentDocTRIPartyDoc( TRIConsignmentDoc aTRIConsignmentDoc, TRIPartyDoc aTRIPartyDoc )
    {
      return (  ( Convert.ToString( aTRIConsignmentDoc.DepartureIdentity ) == Convert.ToString( aTRIPartyDoc.DepartureIdentity ) )
              && ( Convert.ToString( aTRIConsignmentDoc.Consignment_id ) == Convert.ToString( aTRIPartyDoc.Consignment_id ) )
              && ( Convert.ToString( aTRIConsignmentDoc.ShipToPartyIdentity ) == Convert.ToString( aTRIPartyDoc.ShipToPartyIdentity ) )
              && ( Convert.ToString( aTRIConsignmentDoc.ShipToPartyNodeIdentity ) == Convert.ToString( aTRIPartyDoc.ShipToPartyNodeIdentity ) ) );
    }

    static public bool EqualTRIConsignmentDocTRILoadCarrierDoc( TRIConsignmentDoc aTRIConsignmentDoc, TRILoadCarrierDoc aTRILoadCarrierDoc )
    {
      return (  ( Convert.ToString( aTRIConsignmentDoc.DepartureIdentity ) == Convert.ToString( aTRILoadCarrierDoc.DepartureIdentity ) )
              && ( Convert.ToString( aTRIConsignmentDoc.Consignment_id ) == Convert.ToString( aTRILoadCarrierDoc.Consignment_id ) )
              && ( Convert.ToString( aTRIConsignmentDoc.ShipToPartyIdentity ) == Convert.ToString( aTRILoadCarrierDoc.ShipToPartyIdentity ) )
              && ( Convert.ToString( aTRIConsignmentDoc.ShipToPartyNodeIdentity ) == Convert.ToString( aTRILoadCarrierDoc.ShipToPartyNodeIdentity ) ) );
    }

    static public bool EqualTRILoadCarrierDocTRIProductDoc( TRILoadCarrierDoc aTRILoadCarrierDoc, TRIProductDoc aTRIProductDoc )
    {
      return (  ( Convert.ToString( aTRILoadCarrierDoc.DepartureIdentity ) == Convert.ToString( aTRIProductDoc.DepartureIdentity ) )
              && ( Convert.ToString( aTRILoadCarrierDoc.Consignment_id ) == Convert.ToString( aTRIProductDoc.Consignment_id ) )
              && ( Convert.ToString( aTRILoadCarrierDoc.ShipToPartyIdentity ) == Convert.ToString( aTRIProductDoc.ShipToPartyIdentity ) )
              && ( Convert.ToString( aTRILoadCarrierDoc.ShipToPartyNodeIdentity ) == Convert.ToString( aTRIProductDoc.ShipToPartyNodeIdentity ) )
              && ( Convert.ToString( aTRILoadCarrierDoc.LoadCarrierIdentity ) == Convert.ToString( aTRIProductDoc.LoadCarrierIdentity ) ) );
    }

    static public bool EqualTRIProductDocTRIProductCodeDoc( TRIProductDoc aTRIProductDoc, TRIProductCodeDoc aTRIProductCodeDoc )
    {
      return (  ( Convert.ToString( aTRIProductDoc.DepartureIdentity ) == Convert.ToString( aTRIProductCodeDoc.DepartureIdentity ) )
              && ( Convert.ToString( aTRIProductDoc.Consignment_id ) == Convert.ToString( aTRIProductCodeDoc.Consignment_id ) )
              && ( Convert.ToString( aTRIProductDoc.ShipToPartyIdentity ) == Convert.ToString( aTRIProductCodeDoc.ShipToPartyIdentity ) )
              && ( Convert.ToString( aTRIProductDoc.ShipToPartyNodeIdentity ) == Convert.ToString( aTRIProductCodeDoc.ShipToPartyNodeIdentity ) )
              && ( Convert.ToString( aTRIProductDoc.LoadCarrierIdentity ) == Convert.ToString( aTRIProductCodeDoc.LoadCarrierIdentity ) )
              && ( Convert.ToString( aTRIProductDoc.ProductIdentity ) == Convert.ToString( aTRIProductCodeDoc.ProductIdentity ) ) );
    }

    static public bool EqualTransportPlanHeadDocTransportPlanLineDoc( TransportPlanHeadDoc aTransportPlanHeadDoc, TransportPlanLineDoc aTransportPlanLineDoc )
    {
      return (  ( Convert.ToString( aTransportPlanHeadDoc.TransportOrderNo ) == Convert.ToString( aTransportPlanLineDoc.TransportOrderNo ) )
              && ( Convert.ToString( aTransportPlanHeadDoc.CustomerOrderNumber ) == Convert.ToString( aTransportPlanLineDoc.CustomerOrderNumber ) )
              && ( aTransportPlanHeadDoc.CustomerOrderSequence == aTransportPlanLineDoc.CustomerOrderSequence ) );
    }

  }
}
