using System;
using System.Collections;
using System.Collections.Specialized;
using System.IO;
using System.Text;
using Imi.CodeGenerators.WebServices.Framework;

namespace Imi.CodeGenerators.WebServices.XML2CreateTable
{
    /// <summary>
    /// Summary description for CreateTriggerGenerator.
    /// </summary>
    public class CreateCleanGenerator : GenericGenerator
    {
        private code_target code_target;
        private string mapi_number;

        public CreateCleanGenerator(MessageDefinition messageDef, Package packageDef, code_target ct, string mn)
            : base(messageDef, packageDef)
        {
            code_target = ct;
            mapi_number = mn;
        }

        public override void GetOutPut(TextWriter writer)
        {
            StringBuilder s = new StringBuilder();

            int curr = 0;
            int total = messageDef.structures.Length + 1;
            ProgressEventArgs progressArgs;
            progressArgs = new ProgressEventArgs(curr, total);
            OnProgress(progressArgs);
            string tableName;
            string packageName;

            switch (code_target)
            {
                case code_target.hapi:
                    {
                        tableName = "HAPIRCV";
                        packageName = "HapiRcv_Clean";
                        break;
                    }
                case code_target.msg:
                    {
                        tableName = "MSG_IN";
                        packageName = "MessageRcv_Clean";
                        break;
                    }
                case code_target.mapi:
                    {
                        tableName = "MAPI_IN";
                        packageName = "MAPIIn_" + mapi_number + "Clean";
                        break;
                    }
                default:
                    tableName = "Internal error";
                    packageName = "Internal error";
                    break;
            }

            s.Append("\r\n");
            s.Append("/*\r\n");
            s.Append("** File         : " + packageName + ".body\r\n");
            s.Append("**                                                  \r\n");
            s.Append("** Description  : Package body for autogenerated clean procedures for " + tableName + " tables.\r\n");
            s.Append("** Author       : Tommy Grovnes, IMI\r\n");
            s.Append("** Date         : 050822\r\n");
            s.Append("** \r\n");
            s.Append("** Rev.                Sign. Date    Note\r\n");
            s.Append("** -----------------   ----- ------  ------------------------------------------------\r\n");
            s.Append("** 5.0.15              togr  050822  Original version.\r\n");
            s.Append("** 5.1.1               stnl  060116  Clean_TRANS: Remove inparameter PROID.\r\n");
            s.Append("**                                   General: Remove the use of the table TMPTXT.\r\n");
            s.Append("********************************************************************************\r\n");
            s.Append("*/\r\n");
            s.Append("\r\n");
            s.Append("\r\n");
            s.Append("\r\n");
            s.Append("create or replace package body " + packageName + " as \r\n");
            s.Append("\r\n");
            s.Append("/* --------- Local variabels -------------- */\r\n");
            s.Append("\r\n");
            s.Append("/* --------- Local functions/procedures ----------- */\r\n");
            s.Append("\r\n");
            s.Append("\r\n");
            s.Append("/*page\r\n");
            s.Append("********************************************************************************\r\n");
            s.Append("**\r\n");
            s.Append("** Procedure     : Clean_TRANS.\r\n");
            s.Append("**\r\n");
            s.Append("** Description   : Deletes " + tableName + " and " + tableName + "_CHECK\r\n");
            s.Append("**\r\n");
            s.Append("** Global output : Global.ALMID when error. \r\n");
            s.Append("**\r\n");
            s.Append("********************************************************************************\r\n");
            s.Append("*/\r\n");
            s.Append("procedure Clean_TRANS\r\n");
            s.Append("is\r\n");
            s.Append("\r\n");
            s.Append("  TimeIsUp      date;\r\n");
            s.Append("  Now           number;\r\n");
            s.Append("\r\n");
            s.Append("  RowCount_W    number;\r\n");
            s.Append("\r\n");
            switch (code_target)
            {
                case code_target.mapi:
                    s.Append("  cursor " + tableName + "_Cur( TimeIsUp_I  date, MHID_I MH.MHID%type ) is\r\n");
                    s.Append("    select  *\r\n");
                    s.Append("      from  " + tableName + "\r\n");
                    s.Append("      where LASTRCVDTM <= TimeIsUp_I\r\n");
                    s.Append("      and   MHID = MHID_I;\r\n");
                    s.Append("\r\n");
                    s.Append("  cursor " + tableName + "_CHECK_Cur( TimeIsUp_I  date, MHID_I MH.MHID%type ) is\r\n");
                    s.Append("    select  *\r\n");
                    s.Append("      from  " + tableName + "_CHECK\r\n");
                    s.Append("      where UPDDTM <= TimeIsUp_I\r\n");
                    s.Append("      and   MHID = MHID_I;\r\n");
                    s.Append("\r\n");
                    s.Append("  cursor MH_Cur is\r\n");
                    s.Append("    select  *\r\n");
                    s.Append("      from  MH\r\n");
                    s.Append("     where  MHID = '" + mapi_number.Replace("_", "") + "';\r\n");
                    break;
                default:
                    s.Append("  cursor " + tableName + "_Cur( TimeIsUp_I  date ) is\r\n");
                    s.Append("    select  *\r\n");
                    s.Append("      from  " + tableName + "\r\n");
                    s.Append("      where LASTRCVDTM <= TimeIsUp_I;\r\n");
                    s.Append("\r\n");
                    s.Append("  cursor " + tableName + "_CHECK_Cur( TimeIsUp_I  date ) is\r\n");
                    s.Append("    select  *\r\n");
                    s.Append("      from  " + tableName + "_CHECK\r\n");
                    s.Append("      where UPDDTM <= TimeIsUp_I;\r\n");
                    break;
            }

            s.Append("\r\n");
            s.Append("begin\r\n");
            s.Append("\r\n");
            s.Append("  logg_output.put_line('>>> " + packageName + ".Clean_TRANS');\r\n");
            s.Append("\r\n");
            s.Append("  /* ----------------------------------------\r\n");
            s.Append("  **  Clean " + tableName + "\r\n");
            s.Append("  ** ---------------------------------------- */\r\n");
            s.Append("  Now        := to_number(to_char(sysdate,'J'));\r\n");

            switch (code_target)
            {
                case code_target.hapi:
                    {
                        s.Append("  TimeIsUp   := to_date(Now - Global.OW_Rec.DIHAPIRCV,'J'); \r\n");
                        break;
                    }
                case code_target.msg:
                    {
                        s.Append("  TimeIsUp   := to_date(Now - Global.GBL_Rec.DIMSGIN,'J'); \r\n");
                        break;
                    }
                case code_target.mapi:
                    {
                        s.Append("\r\n");
                        s.Append("for MH_Cur_Rec in MH_Cur\r\n");
                        s.Append("loop\r\n");
                        s.Append("\r\n");
                        s.Append("  TimeIsUp   := to_date(Now - MH_Cur_Rec.DIMSGIN,'J'); \r\n");
                        break;
                    }
                default:
                    break;
            }

            s.Append("  RowCount_W := 0;\r\n");
            s.Append("\r\n");
            s.Append("  logg_output.put_line('- TimeIsUp:' || to_char(TimeIsUp,'YYYYMMDD HH24:MI:SS'));\r\n");
            s.Append("\r\n");
            s.Append("\r\n");
            switch (code_target)
            {
                case code_target.mapi:
                    s.Append("  for " + tableName + "_Cur_Rec in " + tableName + "_Cur( TimeIsUp, MH_Cur_Rec.MHID )\r\n");
                    break;
                default:
                    s.Append("  for " + tableName + "_Cur_Rec in " + tableName + "_Cur( TimeIsUp )\r\n");
                    break;
            }
            s.Append("  loop\r\n");
            s.Append("\r\n");

            bool first = true;

            foreach (InterfaceType i in messageDef.interfaces)
            {
                if (first)
                    s.Append("    if ");
                else
                    s.Append("    elsif ");
                first = false;

                switch (code_target)
                {
                    case code_target.hapi:
                        {
                            s.Append("" + tableName + "_Cur_Rec.HAPIOBJECTNAME = '");
                            break;
                        }
                    case code_target.msg:
                        {
                            s.Append("" + tableName + "_Cur_Rec.MSG_ID = '");
                            break;
                        }
                    case code_target.mapi:
                        {
                            s.Append("" + tableName + "_Cur_Rec.MSG_ID = '");
                            break;
                        }
                    default:
                        break;
                }

                s.Append(i.HAPIObjectName);
                s.Append("' then\r\n");
                s.Append("    \r\n");
                s.Append("      /* ----------------------------------------\r\n");
                s.Append("      **  Remove ");
                s.Append(i.name);
                s.Append(".\r\n");
                s.Append("      ** ---------------------------------------- */\r\n");
                s.Append("\r\n");

                StructureType[] stlist = GetUniqueStructureList(i);

                if (stlist == null)
                    continue;

                foreach (StructureType structure in stlist)
                {

                    if (structure.queueTable == "")
                        continue;

                    s.Append("      delete  ");
                    s.Append(structure.queueTable);
                    s.Append("\r\n");
                    s.Append("        where " + tableName + "_ID = " + tableName + "_Cur_Rec." + tableName + "_ID;\r\n");
                    s.Append("\r\n");

                    progressArgs.Update(++curr);
                    OnProgress(progressArgs);
                }
            }

            s.Append("    end if;\r\n");
            s.Append("\r\n");
            s.Append("    /* ----------------------------------------\r\n");
            s.Append("    **  Remove main " + tableName + ".\r\n");
            s.Append("    ** ---------------------------------------- */\r\n");
            s.Append("\r\n");
            s.Append("    delete  " + tableName + "\r\n");
            s.Append("      where " + tableName + "_ID = " + tableName + "_Cur_Rec." + tableName + "_ID;\r\n");
            s.Append("\r\n");
            s.Append("    RowCount_W := RowCount_W + 1;\r\n");
            s.Append("\r\n");
            s.Append("    logg_output.put_line('- " + tableName + "_ID:' || " + tableName + "_Cur_Rec." + tableName + "_ID || ' removed.');\r\n");
            s.Append("\r\n");
            s.Append("    commit;\r\n");
            s.Append("\r\n");
            s.Append("  end loop;   /* " + tableName + "_Cur */\r\n");
            s.Append("\r\n");
            s.Append("  logg_output.put_line('- ' || to_char(RowCount_W) \r\n");

            switch (code_target)
            {
                case code_target.hapi:
                    {
                        s.Append("                    || ' rows of ' || to_char(Global.OW_Rec.DIHAPIRCV)\r\n");
                        break;
                    }
                case code_target.msg:
                    {
                        s.Append("                    || ' rows of ' || to_char(Global.GBL_Rec.DIMSGIN)\r\n");
                        break;
                    }
                case code_target.mapi:
                    {
                        s.Append("                    || ' rows of ' || to_char(MH_Cur_Rec.DIMSGIN)\r\n");
                        break;
                    }
                default:
                    break;
            }

            s.Append("                    || ' days or older " + tableName + "-records deleted');\r\n");
            s.Append("\r\n");
            s.Append("  /* ----------------------------------------\r\n");
            s.Append("  **  Clean " + tableName + "_CHECK\r\n");
            s.Append("  ** ---------------------------------------- */\r\n");
            s.Append("\r\n");
            s.Append("  RowCount_W := 0;\r\n");
            s.Append("\r\n");
            switch (code_target)
            {
                case code_target.mapi:
                    s.Append("  for " + tableName + "_CHECK_Cur_Rec in " + tableName + "_CHECK_Cur( TimeIsUp, MH_Cur_Rec.MHID )\r\n");
                    break;
                default:
                    s.Append("  for " + tableName + "_CHECK_Cur_Rec in " + tableName + "_CHECK_Cur( TimeIsUp )\r\n");
                    break;
            }
            s.Append("  loop\r\n");
            s.Append("\r\n");
            s.Append("    /* ----------------------------------------\r\n");
            s.Append("    **  Remove " + tableName + "_CHECK.\r\n");
            s.Append("    ** ---------------------------------------- */\r\n");
            s.Append("\r\n");

            switch (code_target)
            {
                case code_target.hapi:
                    {
                        s.Append("    delete  " + tableName + "_CHECK\r\n");
                        s.Append("      where CHANNEL_ID     = " + tableName + "_CHECK_Cur_Rec.CHANNEL_ID\r\n");
                        s.Append("      and   TRANSACTION_ID = " + tableName + "_CHECK_Cur_Rec.TRANSACTION_ID;\r\n");
                        break;
                    }
                case code_target.msg:
                    {
                        s.Append("    delete  " + tableName + "_CHECK\r\n");
                        s.Append("      where COMM_PARTNER_ID = " + tableName + "_CHECK_Cur_Rec.COMM_PARTNER_ID\r\n");
                        s.Append("      and   TRANSACTION_ID = " + tableName + "_CHECK_Cur_Rec.TRANSACTION_ID;\r\n");
                        break;
                    }
                case code_target.mapi:
                    {
                        s.Append("    delete  " + tableName + "_CHECK\r\n");
                        s.Append("      where TRANSACTION_ID_IN = " + tableName + "_CHECK_Cur_Rec.TRANSACTION_ID_IN;\r\n");
                        break;
                    }
                default:
                    break;
            }

            s.Append("\r\n");
            s.Append("    RowCount_W := RowCount_W + 1;\r\n");
            s.Append("\r\n");

            switch (code_target)
            {
                case code_target.hapi:
                    {
                        s.Append("    logg_output.put_line('- EXTERNAL_COMPANY_ID:' || " + tableName + "_CHECK_Cur_Rec.CHANNEL_ID ||\r\n");
                        s.Append("                         '  TRANSACTION_ID:'      || " + tableName + "_CHECK_Cur_Rec.TRANSACTION_ID || ' removed.');\r\n");
                        break;
                    }
                case code_target.msg:
                    {
                        s.Append("    logg_output.put_line('- COMM_PARTNER_ID:' || " + tableName + "_CHECK_Cur_Rec.COMM_PARTNER_ID ||\r\n");
                        s.Append("                         '  TRANSACTION_ID:'      || " + tableName + "_CHECK_Cur_Rec.TRANSACTION_ID || ' removed.');\r\n");
                        break;
                    }
                case code_target.mapi:
                    {
                        s.Append("    logg_output.put_line('- TRANSACTION_ID:'      || " + tableName + "_CHECK_Cur_Rec.TRANSACTION_ID_IN || ' removed.');\r\n");
                        break;
                    }
                default:
                    break;
            }

            s.Append("\r\n");
            s.Append("    commit;\r\n");
            s.Append("\r\n");
            s.Append("  end loop;   /* " + tableName + "_CHECK_Cur */\r\n");
            s.Append("\r\n");
            s.Append("  logg_output.put_line('- ' || to_char(RowCount_W) \r\n");

            switch (code_target)
            {
                case code_target.hapi:
                    {
                        s.Append("                    || ' rows of ' || to_char(Global.OW_Rec.DIHAPIRCV)\r\n");
                        break;
                    }
                case code_target.msg:
                    {
                        s.Append("                    || ' rows of ' || to_char(Global.GBL_Rec.DIMSGIN)\r\n");
                        break;
                    }
                case code_target.mapi:
                    {
                        s.Append("                    || ' rows of ' || to_char(MH_Cur_Rec.DIMSGIN)\r\n");
                        break;
                    }
                default:
                    break;
            }

            s.Append("                    || ' days or older " + tableName + "_CHECK-records deleted');\r\n");
            s.Append("\r\n");
            switch (code_target)
            {
                case code_target.mapi:
                    s.Append("end loop; /* MH_Cur */\r\n");
                    break;
                default:
                    break;
            }
            s.Append("\r\n");
            s.Append("  logg_output.put_line('<<< " + packageName + ".Clean_TRANS');\r\n");
            s.Append("\r\n");
            s.Append("end Clean_TRANS;\r\n");
            s.Append("\r\n");
            s.Append("end " + packageName + ";\r\n");
            s.Append("/\r\n");

            writer.Write(s.ToString());

            progressArgs.Update(total);
            OnProgress(progressArgs);
        }
    }
}
