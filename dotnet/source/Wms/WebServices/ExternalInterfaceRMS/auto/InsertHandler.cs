/*
  File           : 

  Description    : Internal classes for inserting inbound data into queue tables.
                   This code was generated, do not edit.

*/
using System;
using System.Text;
using System.Data;
using System.Data.Common;

namespace Imi.Wms.WebServices.ExternalInterfaceRMS
{
  public class InsertHandler
  {
      public string _Debug()
      {
          return "Generated on   : 2017-09-08 11:57:04\r\n" +
                 "Generated by   : SWG\\aron@SE0133D\r\n" +
                 "Generated in   : C:\\projects\\views\\aron_80M_ss\\dotnet\\source\\CodeGenerators\\wscc\r\n";
      }
  }

  public class MethodOfShipmentInsert : SegmentImpl
  {

    public MethodOfShipmentInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into MSG_IN_METHOD_OF_SHIPMENT ( ");
        s.Append(" MSG_IN_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",CommPartnerIdentity");
        s.Append(",DeliveryMethod");
        s.Append(",DeliveryMethodDescription");
        s.Append(",MinimumAllowedVolume");
        s.Append(",MaximumAllowedVolume");
        s.Append(",MinimumAllowedWeight");
        s.Append(",MaximumAllowedWeight");

        s.Append(" ) values ( ");

        s.Append(" :MSG_IN_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:CommPartnerIdentity");
        s.Append(",:DeliveryMethod");
        s.Append(",:DeliveryMethodDescription");
        s.Append(",:MinimumAllowedVolume");
        s.Append(",:MaximumAllowedVolume");
        s.Append(",:MinimumAllowedWeight");
        s.Append(",:MaximumAllowedWeight");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("MSG_IN_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("CommPartnerIdentity", 35));
        fStmt.Parameters.Add(StringParam("DeliveryMethod", 17));
        fStmt.Parameters.Add(StringParam("DeliveryMethodDescription", 35));
        fStmt.Parameters.Add(NumberParam("MinimumAllowedVolume", 16, 6));
        fStmt.Parameters.Add(NumberParam("MaximumAllowedVolume", 16, 6));
        fStmt.Parameters.Add(NumberParam("MinimumAllowedWeight", 16, 6));
        fStmt.Parameters.Add(NumberParam("MaximumAllowedWeight", 16, 6));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, MethodOfShipmentDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "2");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["MSG_IN_ID"] as IDbDataParameter).Value = StringValue(trans.MsgInId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.TransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for MethodOfShipmentDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["CommPartnerIdentity"] as IDbDataParameter).Value = StringValue(trans.CommPartnerId);

        if (p.DeliveryMethod != null)
        {
            if (p.DeliveryMethod.Length > 17)
                error.AppendLine("Value for MethodOfShipmentDoc.DeliveryMethod too long, max 17 chars");

            if (p.DeliveryMethod.Length == 0)
                error.AppendLine("Zero length for mandatory parameter MethodOfShipmentDoc.DeliveryMethod not allowed");

            (fStmt.Parameters["DeliveryMethod"] as IDbDataParameter).Value = p.DeliveryMethod;
        }
        else
            error.AppendLine("Null value for mandatory parameter MethodOfShipmentDoc.DeliveryMethod not allowed");


        if (p.DeliveryMethodDescription != null)
        {
            if (p.DeliveryMethodDescription.Length > 35)
                error.AppendLine("Value for MethodOfShipmentDoc.DeliveryMethodDescription too long, max 35 chars");

            if (p.DeliveryMethodDescription.Length == 0)
                error.AppendLine("Zero length for mandatory parameter MethodOfShipmentDoc.DeliveryMethodDescription not allowed");

            (fStmt.Parameters["DeliveryMethodDescription"] as IDbDataParameter).Value = p.DeliveryMethodDescription;
        }
        else
            error.AppendLine("Null value for mandatory parameter MethodOfShipmentDoc.DeliveryMethodDescription not allowed");


        if (p.MinimumAllowedVolume != null)
        {
            (fStmt.Parameters["MinimumAllowedVolume"] as IDbDataParameter).Value = p.MinimumAllowedVolume;
        }
        else
            (fStmt.Parameters["MinimumAllowedVolume"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MaximumAllowedVolume != null)
        {
            (fStmt.Parameters["MaximumAllowedVolume"] as IDbDataParameter).Value = p.MaximumAllowedVolume;
        }
        else
            (fStmt.Parameters["MaximumAllowedVolume"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MinimumAllowedWeight != null)
        {
            (fStmt.Parameters["MinimumAllowedWeight"] as IDbDataParameter).Value = p.MinimumAllowedWeight;
        }
        else
            (fStmt.Parameters["MinimumAllowedWeight"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MaximumAllowedWeight != null)
        {
            (fStmt.Parameters["MaximumAllowedWeight"] as IDbDataParameter).Value = p.MaximumAllowedWeight;
        }
        else
            (fStmt.Parameters["MaximumAllowedWeight"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.TransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class ForwarderInsert : SegmentImpl
  {

    public ForwarderInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into MSG_IN_FORWARDER ( ");
        s.Append(" MSG_IN_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",CommPartnerIdentity");
        s.Append(",ForwarderIdentity");
        s.Append(",ForwarderIdentityName");

        s.Append(" ) values ( ");

        s.Append(" :MSG_IN_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:CommPartnerIdentity");
        s.Append(",:ForwarderIdentity");
        s.Append(",:ForwarderIdentityName");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("MSG_IN_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("CommPartnerIdentity", 35));
        fStmt.Parameters.Add(StringParam("ForwarderIdentity", 17));
        fStmt.Parameters.Add(StringParam("ForwarderIdentityName", 35));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ForwarderDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "2");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["MSG_IN_ID"] as IDbDataParameter).Value = StringValue(trans.MsgInId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.TransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ForwarderDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["CommPartnerIdentity"] as IDbDataParameter).Value = StringValue(trans.CommPartnerId);

        if (p.ForwarderIdentity != null)
        {
            if (p.ForwarderIdentity.Length > 17)
                error.AppendLine("Value for ForwarderDoc.ForwarderIdentity too long, max 17 chars");

            if (p.ForwarderIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ForwarderDoc.ForwarderIdentity not allowed");

            (fStmt.Parameters["ForwarderIdentity"] as IDbDataParameter).Value = p.ForwarderIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter ForwarderDoc.ForwarderIdentity not allowed");


        if (p.ForwarderIdentityName != null)
        {
            if (p.ForwarderIdentityName.Length > 35)
                error.AppendLine("Value for ForwarderDoc.ForwarderIdentityName too long, max 35 chars");

            if (p.ForwarderIdentityName.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ForwarderDoc.ForwarderIdentityName not allowed");

            (fStmt.Parameters["ForwarderIdentityName"] as IDbDataParameter).Value = p.ForwarderIdentityName;
        }
        else
            error.AppendLine("Null value for mandatory parameter ForwarderDoc.ForwarderIdentityName not allowed");


        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.TransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class VehicleTypeInsert : SegmentImpl
  {

    public VehicleTypeInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into MSG_IN_VEHICLETYPE ( ");
        s.Append(" MSG_IN_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",CommPartnerIdentity");
        s.Append(",VehicleTypeIdentity");
        s.Append(",VehicleTypeDescription");
        s.Append(",TotalWeightCapacity");
        s.Append(",TotalVolumeCapacity");
        s.Append(",TotalSpaceCapacity");
        s.Append(",Instructions");

        s.Append(" ) values ( ");

        s.Append(" :MSG_IN_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:CommPartnerIdentity");
        s.Append(",:VehicleTypeIdentity");
        s.Append(",:VehicleTypeDescription");
        s.Append(",:TotalWeightCapacity");
        s.Append(",:TotalVolumeCapacity");
        s.Append(",:TotalSpaceCapacity");
        s.Append(",:Instructions");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("MSG_IN_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("CommPartnerIdentity", 35));
        fStmt.Parameters.Add(StringParam("VehicleTypeIdentity", 12));
        fStmt.Parameters.Add(StringParam("VehicleTypeDescription", 35));
        fStmt.Parameters.Add(NumberParam("TotalWeightCapacity", 16, 6));
        fStmt.Parameters.Add(NumberParam("TotalVolumeCapacity", 16, 6));
        fStmt.Parameters.Add(NumberParam("TotalSpaceCapacity", 16, 6));
        fStmt.Parameters.Add(StringParam("Instructions", 400));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, VehicleTypeDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "2");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["MSG_IN_ID"] as IDbDataParameter).Value = StringValue(trans.MsgInId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.TransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for VehicleTypeDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["CommPartnerIdentity"] as IDbDataParameter).Value = StringValue(trans.CommPartnerId);

        if (p.VehicleTypeIdentity != null)
        {
            if (p.VehicleTypeIdentity.Length > 12)
                error.AppendLine("Value for VehicleTypeDoc.VehicleTypeIdentity too long, max 12 chars");

            (fStmt.Parameters["VehicleTypeIdentity"] as IDbDataParameter).Value = p.VehicleTypeIdentity;
        }
        else
            (fStmt.Parameters["VehicleTypeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VehicleTypeDescription != null)
        {
            if (p.VehicleTypeDescription.Length > 35)
                error.AppendLine("Value for VehicleTypeDoc.VehicleTypeDescription too long, max 35 chars");

            (fStmt.Parameters["VehicleTypeDescription"] as IDbDataParameter).Value = p.VehicleTypeDescription;
        }
        else
            (fStmt.Parameters["VehicleTypeDescription"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TotalWeightCapacity != null)
        {
            (fStmt.Parameters["TotalWeightCapacity"] as IDbDataParameter).Value = p.TotalWeightCapacity;
        }
        else
            (fStmt.Parameters["TotalWeightCapacity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TotalVolumeCapacity != null)
        {
            (fStmt.Parameters["TotalVolumeCapacity"] as IDbDataParameter).Value = p.TotalVolumeCapacity;
        }
        else
            (fStmt.Parameters["TotalVolumeCapacity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TotalSpaceCapacity != null)
        {
            (fStmt.Parameters["TotalSpaceCapacity"] as IDbDataParameter).Value = p.TotalSpaceCapacity;
        }
        else
            (fStmt.Parameters["TotalSpaceCapacity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Instructions != null)
        {
            if (p.Instructions.Length > 400)
                error.AppendLine("Value for VehicleTypeDoc.Instructions too long, max 400 chars");

            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = p.Instructions;
        }
        else
            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.TransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class VehicleTypePTTInsert : SegmentImpl
  {

    public VehicleTypePTTInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into MSG_IN_VEHICLETYPE_PTT ( ");
        s.Append(" MSG_IN_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",CommPartnerIdentity");
        s.Append(",VehicleTypeIdentity");
        s.Append(",ProductTransportIdentity");
        s.Append(",MaximumWeight");
        s.Append(",MaximumVolume");
        s.Append(",MaximumSpace");

        s.Append(" ) values ( ");

        s.Append(" :MSG_IN_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:CommPartnerIdentity");
        s.Append(",:VehicleTypeIdentity");
        s.Append(",:ProductTransportIdentity");
        s.Append(",:MaximumWeight");
        s.Append(",:MaximumVolume");
        s.Append(",:MaximumSpace");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("MSG_IN_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("CommPartnerIdentity", 35));
        fStmt.Parameters.Add(StringParam("VehicleTypeIdentity", 12));
        fStmt.Parameters.Add(StringParam("ProductTransportIdentity", 5));
        fStmt.Parameters.Add(NumberParam("MaximumWeight", 16, 6));
        fStmt.Parameters.Add(NumberParam("MaximumVolume", 16, 6));
        fStmt.Parameters.Add(NumberParam("MaximumSpace", 16, 6));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, VehicleTypePTTDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "2");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["MSG_IN_ID"] as IDbDataParameter).Value = StringValue(trans.MsgInId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.TransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for VehicleTypePTTDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["CommPartnerIdentity"] as IDbDataParameter).Value = StringValue(trans.CommPartnerId);

        if (p.VehicleTypeIdentity != null)
        {
            if (p.VehicleTypeIdentity.Length > 12)
                error.AppendLine("Value for VehicleTypePTTDoc.VehicleTypeIdentity too long, max 12 chars");

            if (p.VehicleTypeIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter VehicleTypePTTDoc.VehicleTypeIdentity not allowed");

            (fStmt.Parameters["VehicleTypeIdentity"] as IDbDataParameter).Value = p.VehicleTypeIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter VehicleTypePTTDoc.VehicleTypeIdentity not allowed");


        if (p.ProductTransportIdentity != null)
        {
            if (p.ProductTransportIdentity.Length > 5)
                error.AppendLine("Value for VehicleTypePTTDoc.ProductTransportIdentity too long, max 5 chars");

            if (p.ProductTransportIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter VehicleTypePTTDoc.ProductTransportIdentity not allowed");

            (fStmt.Parameters["ProductTransportIdentity"] as IDbDataParameter).Value = p.ProductTransportIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter VehicleTypePTTDoc.ProductTransportIdentity not allowed");


        if (p.MaximumWeight != null)
        {
            (fStmt.Parameters["MaximumWeight"] as IDbDataParameter).Value = p.MaximumWeight;
        }
        else
            (fStmt.Parameters["MaximumWeight"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MaximumVolume != null)
        {
            (fStmt.Parameters["MaximumVolume"] as IDbDataParameter).Value = p.MaximumVolume;
        }
        else
            (fStmt.Parameters["MaximumVolume"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MaximumSpace != null)
        {
            (fStmt.Parameters["MaximumSpace"] as IDbDataParameter).Value = p.MaximumSpace;
        }
        else
            (fStmt.Parameters["MaximumSpace"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.TransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class RouteInsert : SegmentImpl
  {

    public RouteInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into MSG_IN_ROUTE ( ");
        s.Append(" MSG_IN_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",CommPartnerIdentity");
        s.Append(",RouteIdentity");
        s.Append(",RouteDescription");
        s.Append(",FromNodeIdentity");
        s.Append(",DeliveryMethod");
        s.Append(",ForwarderIdentity");
        s.Append(",VehicleTypeIdentity");
        s.Append(",VehicleIdentity");
        s.Append(",DriverIdentity");
        s.Append(",Instructions");
        s.Append(",CheckProductTransportType");

        s.Append(" ) values ( ");

        s.Append(" :MSG_IN_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:CommPartnerIdentity");
        s.Append(",:RouteIdentity");
        s.Append(",:RouteDescription");
        s.Append(",:FromNodeIdentity");
        s.Append(",:DeliveryMethod");
        s.Append(",:ForwarderIdentity");
        s.Append(",:VehicleTypeIdentity");
        s.Append(",:VehicleIdentity");
        s.Append(",:DriverIdentity");
        s.Append(",:Instructions");
        s.Append(",:CheckProductTransportType");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("MSG_IN_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("CommPartnerIdentity", 35));
        fStmt.Parameters.Add(StringParam("RouteIdentity", 17));
        fStmt.Parameters.Add(StringParam("RouteDescription", 35));
        fStmt.Parameters.Add(StringParam("FromNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("DeliveryMethod", 17));
        fStmt.Parameters.Add(StringParam("ForwarderIdentity", 17));
        fStmt.Parameters.Add(StringParam("VehicleTypeIdentity", 12));
        fStmt.Parameters.Add(StringParam("VehicleIdentity", 35));
        fStmt.Parameters.Add(StringParam("DriverIdentity", 35));
        fStmt.Parameters.Add(StringParam("Instructions", 400));
        fStmt.Parameters.Add(StringParam("CheckProductTransportType", 1));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, RouteDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "2");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["MSG_IN_ID"] as IDbDataParameter).Value = StringValue(trans.MsgInId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.TransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for RouteDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["CommPartnerIdentity"] as IDbDataParameter).Value = StringValue(trans.CommPartnerId);

        if (p.RouteIdentity != null)
        {
            if (p.RouteIdentity.Length > 17)
                error.AppendLine("Value for RouteDoc.RouteIdentity too long, max 17 chars");

            if (p.RouteIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter RouteDoc.RouteIdentity not allowed");

            (fStmt.Parameters["RouteIdentity"] as IDbDataParameter).Value = p.RouteIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter RouteDoc.RouteIdentity not allowed");


        if (p.RouteDescription != null)
        {
            if (p.RouteDescription.Length > 35)
                error.AppendLine("Value for RouteDoc.RouteDescription too long, max 35 chars");

            if (p.RouteDescription.Length == 0)
                error.AppendLine("Zero length for mandatory parameter RouteDoc.RouteDescription not allowed");

            (fStmt.Parameters["RouteDescription"] as IDbDataParameter).Value = p.RouteDescription;
        }
        else
            error.AppendLine("Null value for mandatory parameter RouteDoc.RouteDescription not allowed");


        if (p.FromNodeIdentity != null)
        {
            if (p.FromNodeIdentity.Length > 35)
                error.AppendLine("Value for RouteDoc.FromNodeIdentity too long, max 35 chars");

            if (p.FromNodeIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter RouteDoc.FromNodeIdentity not allowed");

            (fStmt.Parameters["FromNodeIdentity"] as IDbDataParameter).Value = p.FromNodeIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter RouteDoc.FromNodeIdentity not allowed");


        if (p.DeliveryMethod != null)
        {
            if (p.DeliveryMethod.Length > 17)
                error.AppendLine("Value for RouteDoc.DeliveryMethod too long, max 17 chars");

            if (p.DeliveryMethod.Length == 0)
                error.AppendLine("Zero length for mandatory parameter RouteDoc.DeliveryMethod not allowed");

            (fStmt.Parameters["DeliveryMethod"] as IDbDataParameter).Value = p.DeliveryMethod;
        }
        else
            error.AppendLine("Null value for mandatory parameter RouteDoc.DeliveryMethod not allowed");


        if (p.ForwarderIdentity != null)
        {
            if (p.ForwarderIdentity.Length > 17)
                error.AppendLine("Value for RouteDoc.ForwarderIdentity too long, max 17 chars");

            if (p.ForwarderIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter RouteDoc.ForwarderIdentity not allowed");

            (fStmt.Parameters["ForwarderIdentity"] as IDbDataParameter).Value = p.ForwarderIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter RouteDoc.ForwarderIdentity not allowed");


        if (p.VehicleTypeIdentity != null)
        {
            if (p.VehicleTypeIdentity.Length > 12)
                error.AppendLine("Value for RouteDoc.VehicleTypeIdentity too long, max 12 chars");

            if (p.VehicleTypeIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter RouteDoc.VehicleTypeIdentity not allowed");

            (fStmt.Parameters["VehicleTypeIdentity"] as IDbDataParameter).Value = p.VehicleTypeIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter RouteDoc.VehicleTypeIdentity not allowed");


        if (p.VehicleIdentity != null)
        {
            if (p.VehicleIdentity.Length > 35)
                error.AppendLine("Value for RouteDoc.VehicleIdentity too long, max 35 chars");

            (fStmt.Parameters["VehicleIdentity"] as IDbDataParameter).Value = p.VehicleIdentity;
        }
        else
            (fStmt.Parameters["VehicleIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DriverIdentity != null)
        {
            if (p.DriverIdentity.Length > 35)
                error.AppendLine("Value for RouteDoc.DriverIdentity too long, max 35 chars");

            (fStmt.Parameters["DriverIdentity"] as IDbDataParameter).Value = p.DriverIdentity;
        }
        else
            (fStmt.Parameters["DriverIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Instructions != null)
        {
            if (p.Instructions.Length > 400)
                error.AppendLine("Value for RouteDoc.Instructions too long, max 400 chars");

            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = p.Instructions;
        }
        else
            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CheckProductTransportType != null)
        {
            if (p.CheckProductTransportType.Length > 1)
                error.AppendLine("Value for RouteDoc.CheckProductTransportType too long, max 1 chars");

            (fStmt.Parameters["CheckProductTransportType"] as IDbDataParameter).Value = p.CheckProductTransportType;
        }
        else
            (fStmt.Parameters["CheckProductTransportType"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.TransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class RouteNodeInsert : SegmentImpl
  {

    public RouteNodeInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into MSG_IN_ROUTE_NODE ( ");
        s.Append(" MSG_IN_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",CommPartnerIdentity");
        s.Append(",RouteIdentity");
        s.Append(",FromNodeIdentity");
        s.Append(",ToNodeIdentity");
        s.Append(",StopSequence");
        s.Append(",StopType");
        s.Append(",PrevNodeDrivingTime_Day");
        s.Append(",PrevNodeDrivingTime_Hour");
        s.Append(",PrevNodeDrivingTime_Minutes");
        s.Append(",NodeStopTime_Day");
        s.Append(",NodeStopTime_Hour");
        s.Append(",NodeStopTime_Minutes");
        s.Append(",PrevNodeDrivingDistance");
        s.Append(",EarliestArrivalTime");
        s.Append(",LatestArrivalTime");
        s.Append(",Instructions");
        s.Append(",ReceiveTransitGoods_Mon");
        s.Append(",ReceiveTransitGoods_Tue");
        s.Append(",ReceiveTransitGoods_Wed");
        s.Append(",ReceiveTransitGoods_Thu");
        s.Append(",ReceiveTransitGoods_Fri");
        s.Append(",ReceiveTransitGoods_Sat");
        s.Append(",ReceiveTransitGoods_Sun");

        s.Append(" ) values ( ");

        s.Append(" :MSG_IN_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:CommPartnerIdentity");
        s.Append(",:RouteIdentity");
        s.Append(",:FromNodeIdentity");
        s.Append(",:ToNodeIdentity");
        s.Append(",:StopSequence");
        s.Append(",:StopType");
        s.Append(",:PrevNodeDrivingTime_Day");
        s.Append(",:PrevNodeDrivingTime_Hour");
        s.Append(",:PrevNodeDrivingTime_Minutes");
        s.Append(",:NodeStopTime_Day");
        s.Append(",:NodeStopTime_Hour");
        s.Append(",:NodeStopTime_Minutes");
        s.Append(",:PrevNodeDrivingDistance");
        s.Append(",:EarliestArrivalTime");
        s.Append(",:LatestArrivalTime");
        s.Append(",:Instructions");
        s.Append(",:ReceiveTransitGoods_Mon");
        s.Append(",:ReceiveTransitGoods_Tue");
        s.Append(",:ReceiveTransitGoods_Wed");
        s.Append(",:ReceiveTransitGoods_Thu");
        s.Append(",:ReceiveTransitGoods_Fri");
        s.Append(",:ReceiveTransitGoods_Sat");
        s.Append(",:ReceiveTransitGoods_Sun");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("MSG_IN_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("CommPartnerIdentity", 35));
        fStmt.Parameters.Add(StringParam("RouteIdentity", 17));
        fStmt.Parameters.Add(StringParam("FromNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ToNodeIdentity", 35));
        fStmt.Parameters.Add(NumberParam("StopSequence", 5, 0));
        fStmt.Parameters.Add(StringParam("StopType", 1));
        fStmt.Parameters.Add(NumberParam("PrevNodeDrivingTime_Day", 15, 9));
        fStmt.Parameters.Add(NumberParam("PrevNodeDrivingTime_Hour", 15, 9));
        fStmt.Parameters.Add(NumberParam("PrevNodeDrivingTime_Minutes", 15, 9));
        fStmt.Parameters.Add(NumberParam("NodeStopTime_Day", 15, 9));
        fStmt.Parameters.Add(NumberParam("NodeStopTime_Hour", 15, 9));
        fStmt.Parameters.Add(NumberParam("NodeStopTime_Minutes", 15, 9));
        fStmt.Parameters.Add(NumberParam("PrevNodeDrivingDistance", 12, 1));
        fStmt.Parameters.Add(DateParam("EarliestArrivalTime"));
        fStmt.Parameters.Add(DateParam("LatestArrivalTime"));
        fStmt.Parameters.Add(StringParam("Instructions", 400));
        fStmt.Parameters.Add(StringParam("ReceiveTransitGoods_Mon", 1));
        fStmt.Parameters.Add(StringParam("ReceiveTransitGoods_Tue", 1));
        fStmt.Parameters.Add(StringParam("ReceiveTransitGoods_Wed", 1));
        fStmt.Parameters.Add(StringParam("ReceiveTransitGoods_Thu", 1));
        fStmt.Parameters.Add(StringParam("ReceiveTransitGoods_Fri", 1));
        fStmt.Parameters.Add(StringParam("ReceiveTransitGoods_Sat", 1));
        fStmt.Parameters.Add(StringParam("ReceiveTransitGoods_Sun", 1));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, RouteNodeDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "2");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["MSG_IN_ID"] as IDbDataParameter).Value = StringValue(trans.MsgInId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.TransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for RouteNodeDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["CommPartnerIdentity"] as IDbDataParameter).Value = StringValue(trans.CommPartnerId);

        if (p.RouteIdentity != null)
        {
            if (p.RouteIdentity.Length > 17)
                error.AppendLine("Value for RouteNodeDoc.RouteIdentity too long, max 17 chars");

            if (p.RouteIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter RouteNodeDoc.RouteIdentity not allowed");

            (fStmt.Parameters["RouteIdentity"] as IDbDataParameter).Value = p.RouteIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter RouteNodeDoc.RouteIdentity not allowed");


        if (p.FromNodeIdentity != null)
        {
            if (p.FromNodeIdentity.Length > 35)
                error.AppendLine("Value for RouteNodeDoc.FromNodeIdentity too long, max 35 chars");

            if (p.FromNodeIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter RouteNodeDoc.FromNodeIdentity not allowed");

            (fStmt.Parameters["FromNodeIdentity"] as IDbDataParameter).Value = p.FromNodeIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter RouteNodeDoc.FromNodeIdentity not allowed");


        if (p.ToNodeIdentity != null)
        {
            if (p.ToNodeIdentity.Length > 35)
                error.AppendLine("Value for RouteNodeDoc.ToNodeIdentity too long, max 35 chars");

            if (p.ToNodeIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter RouteNodeDoc.ToNodeIdentity not allowed");

            (fStmt.Parameters["ToNodeIdentity"] as IDbDataParameter).Value = p.ToNodeIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter RouteNodeDoc.ToNodeIdentity not allowed");


        if (p.StopSequence != null)
        {
            (fStmt.Parameters["StopSequence"] as IDbDataParameter).Value = p.StopSequence;
        }
        else
            error.AppendLine("Null value for mandatory parameter RouteNodeDoc.StopSequence not allowed");


        if (p.StopType != null)
        {
            if (p.StopType.Length > 1)
                error.AppendLine("Value for RouteNodeDoc.StopType too long, max 1 chars");

            if (p.StopType.Length == 0)
                error.AppendLine("Zero length for mandatory parameter RouteNodeDoc.StopType not allowed");

            (fStmt.Parameters["StopType"] as IDbDataParameter).Value = p.StopType;
        }
        else
            error.AppendLine("Null value for mandatory parameter RouteNodeDoc.StopType not allowed");


        if (p.PrevNodeDrivingTime_Day != null)
        {
            (fStmt.Parameters["PrevNodeDrivingTime_Day"] as IDbDataParameter).Value = p.PrevNodeDrivingTime_Day;
        }
        else
            (fStmt.Parameters["PrevNodeDrivingTime_Day"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PrevNodeDrivingTime_Hour != null)
        {
            (fStmt.Parameters["PrevNodeDrivingTime_Hour"] as IDbDataParameter).Value = p.PrevNodeDrivingTime_Hour;
        }
        else
            (fStmt.Parameters["PrevNodeDrivingTime_Hour"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PrevNodeDrivingTime_Minutes != null)
        {
            (fStmt.Parameters["PrevNodeDrivingTime_Minutes"] as IDbDataParameter).Value = p.PrevNodeDrivingTime_Minutes;
        }
        else
            (fStmt.Parameters["PrevNodeDrivingTime_Minutes"] as IDbDataParameter).Value = DBNull.Value;

        if (p.NodeStopTime_Day != null)
        {
            (fStmt.Parameters["NodeStopTime_Day"] as IDbDataParameter).Value = p.NodeStopTime_Day;
        }
        else
            (fStmt.Parameters["NodeStopTime_Day"] as IDbDataParameter).Value = DBNull.Value;

        if (p.NodeStopTime_Hour != null)
        {
            (fStmt.Parameters["NodeStopTime_Hour"] as IDbDataParameter).Value = p.NodeStopTime_Hour;
        }
        else
            (fStmt.Parameters["NodeStopTime_Hour"] as IDbDataParameter).Value = DBNull.Value;

        if (p.NodeStopTime_Minutes != null)
        {
            (fStmt.Parameters["NodeStopTime_Minutes"] as IDbDataParameter).Value = p.NodeStopTime_Minutes;
        }
        else
            (fStmt.Parameters["NodeStopTime_Minutes"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PrevNodeDrivingDistance != null)
        {
            (fStmt.Parameters["PrevNodeDrivingDistance"] as IDbDataParameter).Value = p.PrevNodeDrivingDistance;
        }
        else
            (fStmt.Parameters["PrevNodeDrivingDistance"] as IDbDataParameter).Value = DBNull.Value;

        if (p.EarliestArrivalTime != null)
        {
            (fStmt.Parameters["EarliestArrivalTime"] as IDbDataParameter).Value = p.EarliestArrivalTime;
        }
        else
            (fStmt.Parameters["EarliestArrivalTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LatestArrivalTime != null)
        {
            (fStmt.Parameters["LatestArrivalTime"] as IDbDataParameter).Value = p.LatestArrivalTime;
        }
        else
            (fStmt.Parameters["LatestArrivalTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Instructions != null)
        {
            if (p.Instructions.Length > 400)
                error.AppendLine("Value for RouteNodeDoc.Instructions too long, max 400 chars");

            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = p.Instructions;
        }
        else
            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReceiveTransitGoods_Mon != null)
        {
            if (p.ReceiveTransitGoods_Mon.Length > 1)
                error.AppendLine("Value for RouteNodeDoc.ReceiveTransitGoods_Mon too long, max 1 chars");

            (fStmt.Parameters["ReceiveTransitGoods_Mon"] as IDbDataParameter).Value = p.ReceiveTransitGoods_Mon;
        }
        else
            (fStmt.Parameters["ReceiveTransitGoods_Mon"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReceiveTransitGoods_Tue != null)
        {
            if (p.ReceiveTransitGoods_Tue.Length > 1)
                error.AppendLine("Value for RouteNodeDoc.ReceiveTransitGoods_Tue too long, max 1 chars");

            (fStmt.Parameters["ReceiveTransitGoods_Tue"] as IDbDataParameter).Value = p.ReceiveTransitGoods_Tue;
        }
        else
            (fStmt.Parameters["ReceiveTransitGoods_Tue"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReceiveTransitGoods_Wed != null)
        {
            if (p.ReceiveTransitGoods_Wed.Length > 1)
                error.AppendLine("Value for RouteNodeDoc.ReceiveTransitGoods_Wed too long, max 1 chars");

            (fStmt.Parameters["ReceiveTransitGoods_Wed"] as IDbDataParameter).Value = p.ReceiveTransitGoods_Wed;
        }
        else
            (fStmt.Parameters["ReceiveTransitGoods_Wed"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReceiveTransitGoods_Thu != null)
        {
            if (p.ReceiveTransitGoods_Thu.Length > 1)
                error.AppendLine("Value for RouteNodeDoc.ReceiveTransitGoods_Thu too long, max 1 chars");

            (fStmt.Parameters["ReceiveTransitGoods_Thu"] as IDbDataParameter).Value = p.ReceiveTransitGoods_Thu;
        }
        else
            (fStmt.Parameters["ReceiveTransitGoods_Thu"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReceiveTransitGoods_Fri != null)
        {
            if (p.ReceiveTransitGoods_Fri.Length > 1)
                error.AppendLine("Value for RouteNodeDoc.ReceiveTransitGoods_Fri too long, max 1 chars");

            (fStmt.Parameters["ReceiveTransitGoods_Fri"] as IDbDataParameter).Value = p.ReceiveTransitGoods_Fri;
        }
        else
            (fStmt.Parameters["ReceiveTransitGoods_Fri"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReceiveTransitGoods_Sat != null)
        {
            if (p.ReceiveTransitGoods_Sat.Length > 1)
                error.AppendLine("Value for RouteNodeDoc.ReceiveTransitGoods_Sat too long, max 1 chars");

            (fStmt.Parameters["ReceiveTransitGoods_Sat"] as IDbDataParameter).Value = p.ReceiveTransitGoods_Sat;
        }
        else
            (fStmt.Parameters["ReceiveTransitGoods_Sat"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReceiveTransitGoods_Sun != null)
        {
            if (p.ReceiveTransitGoods_Sun.Length > 1)
                error.AppendLine("Value for RouteNodeDoc.ReceiveTransitGoods_Sun too long, max 1 chars");

            (fStmt.Parameters["ReceiveTransitGoods_Sun"] as IDbDataParameter).Value = p.ReceiveTransitGoods_Sun;
        }
        else
            (fStmt.Parameters["ReceiveTransitGoods_Sun"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.TransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class RouteNodeTransitNodeInsert : SegmentImpl
  {

    public RouteNodeTransitNodeInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into MSG_IN_ROUTE_NOD_TRNOD ( ");
        s.Append(" MSG_IN_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",CommPartnerIdentity");
        s.Append(",RouteIdentity");
        s.Append(",FromNodeIdentity");
        s.Append(",ToNodeIdentity");
        s.Append(",TransitNodeIdentity");

        s.Append(" ) values ( ");

        s.Append(" :MSG_IN_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:CommPartnerIdentity");
        s.Append(",:RouteIdentity");
        s.Append(",:FromNodeIdentity");
        s.Append(",:ToNodeIdentity");
        s.Append(",:TransitNodeIdentity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("MSG_IN_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("CommPartnerIdentity", 35));
        fStmt.Parameters.Add(StringParam("RouteIdentity", 17));
        fStmt.Parameters.Add(StringParam("FromNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ToNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("TransitNodeIdentity", 35));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, RouteNodeTransitNodeDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["MSG_IN_ID"] as IDbDataParameter).Value = StringValue(trans.MsgInId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.TransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for RouteNodeTransitNodeDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["CommPartnerIdentity"] as IDbDataParameter).Value = StringValue(trans.CommPartnerId);

        if (p.RouteIdentity != null)
        {
            if (p.RouteIdentity.Length > 17)
                error.AppendLine("Value for RouteNodeTransitNodeDoc.RouteIdentity too long, max 17 chars");

            if (p.RouteIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter RouteNodeTransitNodeDoc.RouteIdentity not allowed");

            (fStmt.Parameters["RouteIdentity"] as IDbDataParameter).Value = p.RouteIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter RouteNodeTransitNodeDoc.RouteIdentity not allowed");


        if (p.FromNodeIdentity != null)
        {
            if (p.FromNodeIdentity.Length > 35)
                error.AppendLine("Value for RouteNodeTransitNodeDoc.FromNodeIdentity too long, max 35 chars");

            if (p.FromNodeIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter RouteNodeTransitNodeDoc.FromNodeIdentity not allowed");

            (fStmt.Parameters["FromNodeIdentity"] as IDbDataParameter).Value = p.FromNodeIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter RouteNodeTransitNodeDoc.FromNodeIdentity not allowed");


        if (p.ToNodeIdentity != null)
        {
            if (p.ToNodeIdentity.Length > 35)
                error.AppendLine("Value for RouteNodeTransitNodeDoc.ToNodeIdentity too long, max 35 chars");

            if (p.ToNodeIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter RouteNodeTransitNodeDoc.ToNodeIdentity not allowed");

            (fStmt.Parameters["ToNodeIdentity"] as IDbDataParameter).Value = p.ToNodeIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter RouteNodeTransitNodeDoc.ToNodeIdentity not allowed");


        if (p.TransitNodeIdentity != null)
        {
            if (p.TransitNodeIdentity.Length > 35)
                error.AppendLine("Value for RouteNodeTransitNodeDoc.TransitNodeIdentity too long, max 35 chars");

            if (p.TransitNodeIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter RouteNodeTransitNodeDoc.TransitNodeIdentity not allowed");

            (fStmt.Parameters["TransitNodeIdentity"] as IDbDataParameter).Value = p.TransitNodeIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter RouteNodeTransitNodeDoc.TransitNodeIdentity not allowed");


        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.TransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class DepartureInsert : SegmentImpl
  {

    public DepartureInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into MSG_IN_DEPARTURE ( ");
        s.Append(" MSG_IN_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",CommPartnerIdentity");
        s.Append(",DepartureIdentity");
        s.Append(",DepartureIdentityReference");
        s.Append(",FromNodeIdentity");
        s.Append(",PlannedDepartureDateTime");
        s.Append(",RouteIdentity");
        s.Append(",DeliveryMethod");
        s.Append(",ForwarderIdentity");
        s.Append(",VehicleTypeIdentity");
        s.Append(",VehicleIdentity");
        s.Append(",DriverIdentity");
        s.Append(",Instructions");
        s.Append(",CheckProductTransportType");
        s.Append(",PreBookedWeight");
        s.Append(",PreBookedVolume");
        s.Append(",PreBookedSpace");

        s.Append(" ) values ( ");

        s.Append(" :MSG_IN_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:CommPartnerIdentity");
        s.Append(",:DepartureIdentity");
        s.Append(",:DepartureIdentityReference");
        s.Append(",:FromNodeIdentity");
        s.Append(",:PlannedDepartureDateTime");
        s.Append(",:RouteIdentity");
        s.Append(",:DeliveryMethod");
        s.Append(",:ForwarderIdentity");
        s.Append(",:VehicleTypeIdentity");
        s.Append(",:VehicleIdentity");
        s.Append(",:DriverIdentity");
        s.Append(",:Instructions");
        s.Append(",:CheckProductTransportType");
        s.Append(",:PreBookedWeight");
        s.Append(",:PreBookedVolume");
        s.Append(",:PreBookedSpace");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("MSG_IN_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("CommPartnerIdentity", 35));
        fStmt.Parameters.Add(StringParam("DepartureIdentity", 35));
        fStmt.Parameters.Add(StringParam("DepartureIdentityReference", 35));
        fStmt.Parameters.Add(StringParam("FromNodeIdentity", 35));
        fStmt.Parameters.Add(DateParam("PlannedDepartureDateTime"));
        fStmt.Parameters.Add(StringParam("RouteIdentity", 17));
        fStmt.Parameters.Add(StringParam("DeliveryMethod", 17));
        fStmt.Parameters.Add(StringParam("ForwarderIdentity", 17));
        fStmt.Parameters.Add(StringParam("VehicleTypeIdentity", 12));
        fStmt.Parameters.Add(StringParam("VehicleIdentity", 35));
        fStmt.Parameters.Add(StringParam("DriverIdentity", 35));
        fStmt.Parameters.Add(StringParam("Instructions", 400));
        fStmt.Parameters.Add(StringParam("CheckProductTransportType", 1));
        fStmt.Parameters.Add(NumberParam("PreBookedWeight", 16, 6));
        fStmt.Parameters.Add(NumberParam("PreBookedVolume", 16, 6));
        fStmt.Parameters.Add(NumberParam("PreBookedSpace", 16, 6));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, DepartureDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["MSG_IN_ID"] as IDbDataParameter).Value = StringValue(trans.MsgInId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.TransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for DepartureDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["CommPartnerIdentity"] as IDbDataParameter).Value = StringValue(trans.CommPartnerId);

        if (p.DepartureIdentity != null)
        {
            if (p.DepartureIdentity.Length > 35)
                error.AppendLine("Value for DepartureDoc.DepartureIdentity too long, max 35 chars");

            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = p.DepartureIdentity;
        }
        else
            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DepartureIdentityReference != null)
        {
            if (p.DepartureIdentityReference.Length > 35)
                error.AppendLine("Value for DepartureDoc.DepartureIdentityReference too long, max 35 chars");

            (fStmt.Parameters["DepartureIdentityReference"] as IDbDataParameter).Value = p.DepartureIdentityReference;
        }
        else
            (fStmt.Parameters["DepartureIdentityReference"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FromNodeIdentity != null)
        {
            if (p.FromNodeIdentity.Length > 35)
                error.AppendLine("Value for DepartureDoc.FromNodeIdentity too long, max 35 chars");

            if (p.FromNodeIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter DepartureDoc.FromNodeIdentity not allowed");

            (fStmt.Parameters["FromNodeIdentity"] as IDbDataParameter).Value = p.FromNodeIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter DepartureDoc.FromNodeIdentity not allowed");


        if (p.PlannedDepartureDateTime != null)
        {
            (fStmt.Parameters["PlannedDepartureDateTime"] as IDbDataParameter).Value = p.PlannedDepartureDateTime;
        }
        else
            error.AppendLine("Null value for mandatory parameter DepartureDoc.PlannedDepartureDateTime not allowed");


        if (p.RouteIdentity != null)
        {
            if (p.RouteIdentity.Length > 17)
                error.AppendLine("Value for DepartureDoc.RouteIdentity too long, max 17 chars");

            (fStmt.Parameters["RouteIdentity"] as IDbDataParameter).Value = p.RouteIdentity;
        }
        else
            (fStmt.Parameters["RouteIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveryMethod != null)
        {
            if (p.DeliveryMethod.Length > 17)
                error.AppendLine("Value for DepartureDoc.DeliveryMethod too long, max 17 chars");

            if (p.DeliveryMethod.Length == 0)
                error.AppendLine("Zero length for mandatory parameter DepartureDoc.DeliveryMethod not allowed");

            (fStmt.Parameters["DeliveryMethod"] as IDbDataParameter).Value = p.DeliveryMethod;
        }
        else
            error.AppendLine("Null value for mandatory parameter DepartureDoc.DeliveryMethod not allowed");


        if (p.ForwarderIdentity != null)
        {
            if (p.ForwarderIdentity.Length > 17)
                error.AppendLine("Value for DepartureDoc.ForwarderIdentity too long, max 17 chars");

            if (p.ForwarderIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter DepartureDoc.ForwarderIdentity not allowed");

            (fStmt.Parameters["ForwarderIdentity"] as IDbDataParameter).Value = p.ForwarderIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter DepartureDoc.ForwarderIdentity not allowed");


        if (p.VehicleTypeIdentity != null)
        {
            if (p.VehicleTypeIdentity.Length > 12)
                error.AppendLine("Value for DepartureDoc.VehicleTypeIdentity too long, max 12 chars");

            if (p.VehicleTypeIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter DepartureDoc.VehicleTypeIdentity not allowed");

            (fStmt.Parameters["VehicleTypeIdentity"] as IDbDataParameter).Value = p.VehicleTypeIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter DepartureDoc.VehicleTypeIdentity not allowed");


        if (p.VehicleIdentity != null)
        {
            if (p.VehicleIdentity.Length > 35)
                error.AppendLine("Value for DepartureDoc.VehicleIdentity too long, max 35 chars");

            (fStmt.Parameters["VehicleIdentity"] as IDbDataParameter).Value = p.VehicleIdentity;
        }
        else
            (fStmt.Parameters["VehicleIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DriverIdentity != null)
        {
            if (p.DriverIdentity.Length > 35)
                error.AppendLine("Value for DepartureDoc.DriverIdentity too long, max 35 chars");

            (fStmt.Parameters["DriverIdentity"] as IDbDataParameter).Value = p.DriverIdentity;
        }
        else
            (fStmt.Parameters["DriverIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Instructions != null)
        {
            if (p.Instructions.Length > 400)
                error.AppendLine("Value for DepartureDoc.Instructions too long, max 400 chars");

            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = p.Instructions;
        }
        else
            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CheckProductTransportType != null)
        {
            if (p.CheckProductTransportType.Length > 1)
                error.AppendLine("Value for DepartureDoc.CheckProductTransportType too long, max 1 chars");

            (fStmt.Parameters["CheckProductTransportType"] as IDbDataParameter).Value = p.CheckProductTransportType;
        }
        else
            (fStmt.Parameters["CheckProductTransportType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PreBookedWeight != null)
        {
            (fStmt.Parameters["PreBookedWeight"] as IDbDataParameter).Value = p.PreBookedWeight;
        }
        else
            (fStmt.Parameters["PreBookedWeight"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PreBookedVolume != null)
        {
            (fStmt.Parameters["PreBookedVolume"] as IDbDataParameter).Value = p.PreBookedVolume;
        }
        else
            (fStmt.Parameters["PreBookedVolume"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PreBookedSpace != null)
        {
            (fStmt.Parameters["PreBookedSpace"] as IDbDataParameter).Value = p.PreBookedSpace;
        }
        else
            (fStmt.Parameters["PreBookedSpace"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.TransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class DepartureNodeInsert : SegmentImpl
  {

    public DepartureNodeInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into MSG_IN_DEPARTURE_NODE ( ");
        s.Append(" MSG_IN_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",CommPartnerIdentity");
        s.Append(",DepartureIdentity");
        s.Append(",DepartureIdentityReference");
        s.Append(",ToNodeIdentity");
        s.Append(",StopSequence");
        s.Append(",StopType");
        s.Append(",PrevNodeDrivingTime_Day");
        s.Append(",PrevNodeDrivingTime_Hour");
        s.Append(",PrevNodeDrivingTime_Minutes");
        s.Append(",NodeStopTime_Day");
        s.Append(",NodeStopTime_Hour");
        s.Append(",NodeStopTime_Minutes");
        s.Append(",PrevNodeDrivingDistance");
        s.Append(",EarliestArrivalTime");
        s.Append(",LatestArrivalTime");
        s.Append(",Instructions");
        s.Append(",ReceiveTransitGoods");

        s.Append(" ) values ( ");

        s.Append(" :MSG_IN_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:CommPartnerIdentity");
        s.Append(",:DepartureIdentity");
        s.Append(",:DepartureIdentityReference");
        s.Append(",:ToNodeIdentity");
        s.Append(",:StopSequence");
        s.Append(",:StopType");
        s.Append(",:PrevNodeDrivingTime_Day");
        s.Append(",:PrevNodeDrivingTime_Hour");
        s.Append(",:PrevNodeDrivingTime_Minutes");
        s.Append(",:NodeStopTime_Day");
        s.Append(",:NodeStopTime_Hour");
        s.Append(",:NodeStopTime_Minutes");
        s.Append(",:PrevNodeDrivingDistance");
        s.Append(",:EarliestArrivalTime");
        s.Append(",:LatestArrivalTime");
        s.Append(",:Instructions");
        s.Append(",:ReceiveTransitGoods");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("MSG_IN_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("CommPartnerIdentity", 35));
        fStmt.Parameters.Add(StringParam("DepartureIdentity", 35));
        fStmt.Parameters.Add(StringParam("DepartureIdentityReference", 35));
        fStmt.Parameters.Add(StringParam("ToNodeIdentity", 35));
        fStmt.Parameters.Add(NumberParam("StopSequence", 5, 0));
        fStmt.Parameters.Add(StringParam("StopType", 1));
        fStmt.Parameters.Add(NumberParam("PrevNodeDrivingTime_Day", 15, 9));
        fStmt.Parameters.Add(NumberParam("PrevNodeDrivingTime_Hour", 15, 9));
        fStmt.Parameters.Add(NumberParam("PrevNodeDrivingTime_Minutes", 15, 9));
        fStmt.Parameters.Add(NumberParam("NodeStopTime_Day", 15, 9));
        fStmt.Parameters.Add(NumberParam("NodeStopTime_Hour", 15, 9));
        fStmt.Parameters.Add(NumberParam("NodeStopTime_Minutes", 15, 9));
        fStmt.Parameters.Add(NumberParam("PrevNodeDrivingDistance", 12, 1));
        fStmt.Parameters.Add(DateParam("EarliestArrivalTime"));
        fStmt.Parameters.Add(DateParam("LatestArrivalTime"));
        fStmt.Parameters.Add(StringParam("Instructions", 400));
        fStmt.Parameters.Add(StringParam("ReceiveTransitGoods", 1));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, DepartureNodeDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["MSG_IN_ID"] as IDbDataParameter).Value = StringValue(trans.MsgInId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.TransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for DepartureNodeDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["CommPartnerIdentity"] as IDbDataParameter).Value = StringValue(trans.CommPartnerId);

        if (p.DepartureIdentity != null)
        {
            if (p.DepartureIdentity.Length > 35)
                error.AppendLine("Value for DepartureNodeDoc.DepartureIdentity too long, max 35 chars");

            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = p.DepartureIdentity;
        }
        else
            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DepartureIdentityReference != null)
        {
            if (p.DepartureIdentityReference.Length > 35)
                error.AppendLine("Value for DepartureNodeDoc.DepartureIdentityReference too long, max 35 chars");

            (fStmt.Parameters["DepartureIdentityReference"] as IDbDataParameter).Value = p.DepartureIdentityReference;
        }
        else
            (fStmt.Parameters["DepartureIdentityReference"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ToNodeIdentity != null)
        {
            if (p.ToNodeIdentity.Length > 35)
                error.AppendLine("Value for DepartureNodeDoc.ToNodeIdentity too long, max 35 chars");

            if (p.ToNodeIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter DepartureNodeDoc.ToNodeIdentity not allowed");

            (fStmt.Parameters["ToNodeIdentity"] as IDbDataParameter).Value = p.ToNodeIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter DepartureNodeDoc.ToNodeIdentity not allowed");


        if (p.StopSequence != null)
        {
            (fStmt.Parameters["StopSequence"] as IDbDataParameter).Value = p.StopSequence;
        }
        else
            error.AppendLine("Null value for mandatory parameter DepartureNodeDoc.StopSequence not allowed");


        if (p.StopType != null)
        {
            if (p.StopType.Length > 1)
                error.AppendLine("Value for DepartureNodeDoc.StopType too long, max 1 chars");

            if (p.StopType.Length == 0)
                error.AppendLine("Zero length for mandatory parameter DepartureNodeDoc.StopType not allowed");

            (fStmt.Parameters["StopType"] as IDbDataParameter).Value = p.StopType;
        }
        else
            error.AppendLine("Null value for mandatory parameter DepartureNodeDoc.StopType not allowed");


        if (p.PrevNodeDrivingTime_Day != null)
        {
            (fStmt.Parameters["PrevNodeDrivingTime_Day"] as IDbDataParameter).Value = p.PrevNodeDrivingTime_Day;
        }
        else
            (fStmt.Parameters["PrevNodeDrivingTime_Day"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PrevNodeDrivingTime_Hour != null)
        {
            (fStmt.Parameters["PrevNodeDrivingTime_Hour"] as IDbDataParameter).Value = p.PrevNodeDrivingTime_Hour;
        }
        else
            (fStmt.Parameters["PrevNodeDrivingTime_Hour"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PrevNodeDrivingTime_Minutes != null)
        {
            (fStmt.Parameters["PrevNodeDrivingTime_Minutes"] as IDbDataParameter).Value = p.PrevNodeDrivingTime_Minutes;
        }
        else
            (fStmt.Parameters["PrevNodeDrivingTime_Minutes"] as IDbDataParameter).Value = DBNull.Value;

        if (p.NodeStopTime_Day != null)
        {
            (fStmt.Parameters["NodeStopTime_Day"] as IDbDataParameter).Value = p.NodeStopTime_Day;
        }
        else
            (fStmt.Parameters["NodeStopTime_Day"] as IDbDataParameter).Value = DBNull.Value;

        if (p.NodeStopTime_Hour != null)
        {
            (fStmt.Parameters["NodeStopTime_Hour"] as IDbDataParameter).Value = p.NodeStopTime_Hour;
        }
        else
            (fStmt.Parameters["NodeStopTime_Hour"] as IDbDataParameter).Value = DBNull.Value;

        if (p.NodeStopTime_Minutes != null)
        {
            (fStmt.Parameters["NodeStopTime_Minutes"] as IDbDataParameter).Value = p.NodeStopTime_Minutes;
        }
        else
            (fStmt.Parameters["NodeStopTime_Minutes"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PrevNodeDrivingDistance != null)
        {
            (fStmt.Parameters["PrevNodeDrivingDistance"] as IDbDataParameter).Value = p.PrevNodeDrivingDistance;
        }
        else
            (fStmt.Parameters["PrevNodeDrivingDistance"] as IDbDataParameter).Value = DBNull.Value;

        if (p.EarliestArrivalTime != null)
        {
            (fStmt.Parameters["EarliestArrivalTime"] as IDbDataParameter).Value = p.EarliestArrivalTime;
        }
        else
            (fStmt.Parameters["EarliestArrivalTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LatestArrivalTime != null)
        {
            (fStmt.Parameters["LatestArrivalTime"] as IDbDataParameter).Value = p.LatestArrivalTime;
        }
        else
            (fStmt.Parameters["LatestArrivalTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Instructions != null)
        {
            if (p.Instructions.Length > 400)
                error.AppendLine("Value for DepartureNodeDoc.Instructions too long, max 400 chars");

            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = p.Instructions;
        }
        else
            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReceiveTransitGoods != null)
        {
            if (p.ReceiveTransitGoods.Length > 1)
                error.AppendLine("Value for DepartureNodeDoc.ReceiveTransitGoods too long, max 1 chars");

            (fStmt.Parameters["ReceiveTransitGoods"] as IDbDataParameter).Value = p.ReceiveTransitGoods;
        }
        else
            (fStmt.Parameters["ReceiveTransitGoods"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.TransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class DepartureNodeTransitNodeInsert : SegmentImpl
  {

    public DepartureNodeTransitNodeInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into MSG_IN_DEP_NOD_TRNOD ( ");
        s.Append(" MSG_IN_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",CommPartnerIdentity");
        s.Append(",DepartureIdentity");
        s.Append(",DepartureIdentityReference");
        s.Append(",ToNodeIdentity");
        s.Append(",TransitNodeIdentity");

        s.Append(" ) values ( ");

        s.Append(" :MSG_IN_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:CommPartnerIdentity");
        s.Append(",:DepartureIdentity");
        s.Append(",:DepartureIdentityReference");
        s.Append(",:ToNodeIdentity");
        s.Append(",:TransitNodeIdentity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("MSG_IN_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("CommPartnerIdentity", 35));
        fStmt.Parameters.Add(StringParam("DepartureIdentity", 35));
        fStmt.Parameters.Add(StringParam("DepartureIdentityReference", 35));
        fStmt.Parameters.Add(StringParam("ToNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("TransitNodeIdentity", 35));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, DepartureNodeTransitNodeDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["MSG_IN_ID"] as IDbDataParameter).Value = StringValue(trans.MsgInId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.TransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for DepartureNodeTransitNodeDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["CommPartnerIdentity"] as IDbDataParameter).Value = StringValue(trans.CommPartnerId);

        if (p.DepartureIdentity != null)
        {
            if (p.DepartureIdentity.Length > 35)
                error.AppendLine("Value for DepartureNodeTransitNodeDoc.DepartureIdentity too long, max 35 chars");

            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = p.DepartureIdentity;
        }
        else
            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DepartureIdentityReference != null)
        {
            if (p.DepartureIdentityReference.Length > 35)
                error.AppendLine("Value for DepartureNodeTransitNodeDoc.DepartureIdentityReference too long, max 35 chars");

            (fStmt.Parameters["DepartureIdentityReference"] as IDbDataParameter).Value = p.DepartureIdentityReference;
        }
        else
            (fStmt.Parameters["DepartureIdentityReference"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ToNodeIdentity != null)
        {
            if (p.ToNodeIdentity.Length > 35)
                error.AppendLine("Value for DepartureNodeTransitNodeDoc.ToNodeIdentity too long, max 35 chars");

            if (p.ToNodeIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter DepartureNodeTransitNodeDoc.ToNodeIdentity not allowed");

            (fStmt.Parameters["ToNodeIdentity"] as IDbDataParameter).Value = p.ToNodeIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter DepartureNodeTransitNodeDoc.ToNodeIdentity not allowed");


        if (p.TransitNodeIdentity != null)
        {
            if (p.TransitNodeIdentity.Length > 35)
                error.AppendLine("Value for DepartureNodeTransitNodeDoc.TransitNodeIdentity too long, max 35 chars");

            if (p.TransitNodeIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter DepartureNodeTransitNodeDoc.TransitNodeIdentity not allowed");

            (fStmt.Parameters["TransitNodeIdentity"] as IDbDataParameter).Value = p.TransitNodeIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter DepartureNodeTransitNodeDoc.TransitNodeIdentity not allowed");


        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.TransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class PrebookedTransitOrderInsert : SegmentImpl
  {

    public PrebookedTransitOrderInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into MSG_IN_PREBOOKED_TR_ORDER ( ");
        s.Append(" MSG_IN_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",CommPartnerIdentity");
        s.Append(",PreBookedTransitOrderNumber");
        s.Append(",PreBookedTransitOrderRef");
        s.Append(",FromNodeIdentity");
        s.Append(",ToNodeIdentity");
        s.Append(",ProductTransportIdentity");
        s.Append(",PlannedWeight");
        s.Append(",PlannedVolume");
        s.Append(",PlannedSpace");
        s.Append(",ZipCode");
        s.Append(",CountryCode");
        s.Append(",DeliveryMethod");
        s.Append(",AcknowledgedShipDtm");
        s.Append(",SearchReference");
        s.Append(",OriginNodeIdentity");
        s.Append(",OriginNodeName");

        s.Append(" ) values ( ");

        s.Append(" :MSG_IN_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:CommPartnerIdentity");
        s.Append(",:PreBookedTransitOrderNumber");
        s.Append(",:PreBookedTransitOrderRef");
        s.Append(",:FromNodeIdentity");
        s.Append(",:ToNodeIdentity");
        s.Append(",:ProductTransportIdentity");
        s.Append(",:PlannedWeight");
        s.Append(",:PlannedVolume");
        s.Append(",:PlannedSpace");
        s.Append(",:ZipCode");
        s.Append(",:CountryCode");
        s.Append(",:DeliveryMethod");
        s.Append(",:AcknowledgedShipDtm");
        s.Append(",:SearchReference");
        s.Append(",:OriginNodeIdentity");
        s.Append(",:OriginNodeName");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("MSG_IN_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("CommPartnerIdentity", 35));
        fStmt.Parameters.Add(StringParam("PreBookedTransitOrderNumber", 35));
        fStmt.Parameters.Add(StringParam("PreBookedTransitOrderRef", 100));
        fStmt.Parameters.Add(StringParam("FromNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ToNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ProductTransportIdentity", 5));
        fStmt.Parameters.Add(NumberParam("PlannedWeight", 16, 6));
        fStmt.Parameters.Add(NumberParam("PlannedVolume", 16, 6));
        fStmt.Parameters.Add(NumberParam("PlannedSpace", 16, 6));
        fStmt.Parameters.Add(StringParam("ZipCode", 12));
        fStmt.Parameters.Add(StringParam("CountryCode", 6));
        fStmt.Parameters.Add(StringParam("DeliveryMethod", 17));
        fStmt.Parameters.Add(DateParam("AcknowledgedShipDtm"));
        fStmt.Parameters.Add(StringParam("SearchReference", 35));
        fStmt.Parameters.Add(StringParam("OriginNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("OriginNodeName", 35));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, PrebookedTransitOrderDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "2");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["MSG_IN_ID"] as IDbDataParameter).Value = StringValue(trans.MsgInId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.TransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for PrebookedTransitOrderDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["CommPartnerIdentity"] as IDbDataParameter).Value = StringValue(trans.CommPartnerId);

        if (p.PreBookedTransitOrderNumber != null)
        {
            if (p.PreBookedTransitOrderNumber.Length > 35)
                error.AppendLine("Value for PrebookedTransitOrderDoc.PreBookedTransitOrderNumber too long, max 35 chars");

            if (p.PreBookedTransitOrderNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter PrebookedTransitOrderDoc.PreBookedTransitOrderNumber not allowed");

            (fStmt.Parameters["PreBookedTransitOrderNumber"] as IDbDataParameter).Value = p.PreBookedTransitOrderNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter PrebookedTransitOrderDoc.PreBookedTransitOrderNumber not allowed");


        if (p.PreBookedTransitOrderRef != null)
        {
            if (p.PreBookedTransitOrderRef.Length > 100)
                error.AppendLine("Value for PrebookedTransitOrderDoc.PreBookedTransitOrderRef too long, max 100 chars");

            if (p.PreBookedTransitOrderRef.Length == 0)
                error.AppendLine("Zero length for mandatory parameter PrebookedTransitOrderDoc.PreBookedTransitOrderRef not allowed");

            (fStmt.Parameters["PreBookedTransitOrderRef"] as IDbDataParameter).Value = p.PreBookedTransitOrderRef;
        }
        else
            error.AppendLine("Null value for mandatory parameter PrebookedTransitOrderDoc.PreBookedTransitOrderRef not allowed");


        if (p.FromNodeIdentity != null)
        {
            if (p.FromNodeIdentity.Length > 35)
                error.AppendLine("Value for PrebookedTransitOrderDoc.FromNodeIdentity too long, max 35 chars");

            if (p.FromNodeIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter PrebookedTransitOrderDoc.FromNodeIdentity not allowed");

            (fStmt.Parameters["FromNodeIdentity"] as IDbDataParameter).Value = p.FromNodeIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter PrebookedTransitOrderDoc.FromNodeIdentity not allowed");


        if (p.ToNodeIdentity != null)
        {
            if (p.ToNodeIdentity.Length > 35)
                error.AppendLine("Value for PrebookedTransitOrderDoc.ToNodeIdentity too long, max 35 chars");

            if (p.ToNodeIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter PrebookedTransitOrderDoc.ToNodeIdentity not allowed");

            (fStmt.Parameters["ToNodeIdentity"] as IDbDataParameter).Value = p.ToNodeIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter PrebookedTransitOrderDoc.ToNodeIdentity not allowed");


        if (p.ProductTransportIdentity != null)
        {
            if (p.ProductTransportIdentity.Length > 5)
                error.AppendLine("Value for PrebookedTransitOrderDoc.ProductTransportIdentity too long, max 5 chars");

            if (p.ProductTransportIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter PrebookedTransitOrderDoc.ProductTransportIdentity not allowed");

            (fStmt.Parameters["ProductTransportIdentity"] as IDbDataParameter).Value = p.ProductTransportIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter PrebookedTransitOrderDoc.ProductTransportIdentity not allowed");


        if (p.PlannedWeight != null)
        {
            (fStmt.Parameters["PlannedWeight"] as IDbDataParameter).Value = p.PlannedWeight;
        }
        else
            error.AppendLine("Null value for mandatory parameter PrebookedTransitOrderDoc.PlannedWeight not allowed");


        if (p.PlannedVolume != null)
        {
            (fStmt.Parameters["PlannedVolume"] as IDbDataParameter).Value = p.PlannedVolume;
        }
        else
            error.AppendLine("Null value for mandatory parameter PrebookedTransitOrderDoc.PlannedVolume not allowed");


        if (p.PlannedSpace != null)
        {
            (fStmt.Parameters["PlannedSpace"] as IDbDataParameter).Value = p.PlannedSpace;
        }
        else
            error.AppendLine("Null value for mandatory parameter PrebookedTransitOrderDoc.PlannedSpace not allowed");


        if (p.ZipCode != null)
        {
            if (p.ZipCode.Length > 12)
                error.AppendLine("Value for PrebookedTransitOrderDoc.ZipCode too long, max 12 chars");

            (fStmt.Parameters["ZipCode"] as IDbDataParameter).Value = p.ZipCode;
        }
        else
            (fStmt.Parameters["ZipCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CountryCode != null)
        {
            if (p.CountryCode.Length > 6)
                error.AppendLine("Value for PrebookedTransitOrderDoc.CountryCode too long, max 6 chars");

            (fStmt.Parameters["CountryCode"] as IDbDataParameter).Value = p.CountryCode;
        }
        else
            (fStmt.Parameters["CountryCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveryMethod != null)
        {
            if (p.DeliveryMethod.Length > 17)
                error.AppendLine("Value for PrebookedTransitOrderDoc.DeliveryMethod too long, max 17 chars");

            (fStmt.Parameters["DeliveryMethod"] as IDbDataParameter).Value = p.DeliveryMethod;
        }
        else
            (fStmt.Parameters["DeliveryMethod"] as IDbDataParameter).Value = DBNull.Value;

        if (p.AcknowledgedShipDtm != null)
        {
            (fStmt.Parameters["AcknowledgedShipDtm"] as IDbDataParameter).Value = p.AcknowledgedShipDtm;
        }
        else
            (fStmt.Parameters["AcknowledgedShipDtm"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SearchReference != null)
        {
            if (p.SearchReference.Length > 35)
                error.AppendLine("Value for PrebookedTransitOrderDoc.SearchReference too long, max 35 chars");

            (fStmt.Parameters["SearchReference"] as IDbDataParameter).Value = p.SearchReference;
        }
        else
            (fStmt.Parameters["SearchReference"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OriginNodeIdentity != null)
        {
            if (p.OriginNodeIdentity.Length > 35)
                error.AppendLine("Value for PrebookedTransitOrderDoc.OriginNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["OriginNodeIdentity"] as IDbDataParameter).Value = p.OriginNodeIdentity;
        }
        else
            (fStmt.Parameters["OriginNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OriginNodeName != null)
        {
            if (p.OriginNodeName.Length > 35)
                error.AppendLine("Value for PrebookedTransitOrderDoc.OriginNodeName too long, max 35 chars");

            (fStmt.Parameters["OriginNodeName"] as IDbDataParameter).Value = p.OriginNodeName;
        }
        else
            (fStmt.Parameters["OriginNodeName"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.TransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class CustomerOrderInsert : SegmentImpl
  {

    public CustomerOrderInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into MSG_IN_ORDER ( ");
        s.Append(" MSG_IN_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",CommPartnerIdentity");
        s.Append(",ClientIdentity");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderSequence");
        s.Append(",FromNodeIdentity");
        s.Append(",ToNodeIdentity");
        s.Append(",ProductTransportIdentity");
        s.Append(",PlannedWeight");
        s.Append(",PlannedVolume");
        s.Append(",PlannedSpace");
        s.Append(",DepartureIdentity");
        s.Append(",ZipCode");
        s.Append(",CountryCode");
        s.Append(",DeliveryMethod");
        s.Append(",ViaNodeIdentity");
        s.Append(",DateSelectionType");
        s.Append(",FirstPlannedShipDtm");
        s.Append(",LastPlannedShipDtm");
        s.Append(",FirstPlannedDeliveryDtm");
        s.Append(",LastPlannedDeliveryDtm");
        s.Append(",PlanLoad");
        s.Append(",CustomerOrderClass");
        s.Append(",SearchReference");
        s.Append(",ForceURL");
        s.Append(",AllowTransit");
        s.Append(",DepartureLoadIdentity");

        s.Append(" ) values ( ");

        s.Append(" :MSG_IN_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:CommPartnerIdentity");
        s.Append(",:ClientIdentity");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderSequence");
        s.Append(",:FromNodeIdentity");
        s.Append(",:ToNodeIdentity");
        s.Append(",:ProductTransportIdentity");
        s.Append(",:PlannedWeight");
        s.Append(",:PlannedVolume");
        s.Append(",:PlannedSpace");
        s.Append(",:DepartureIdentity");
        s.Append(",:ZipCode");
        s.Append(",:CountryCode");
        s.Append(",:DeliveryMethod");
        s.Append(",:ViaNodeIdentity");
        s.Append(",:DateSelectionType");
        s.Append(",:FirstPlannedShipDtm");
        s.Append(",:LastPlannedShipDtm");
        s.Append(",:FirstPlannedDeliveryDtm");
        s.Append(",:LastPlannedDeliveryDtm");
        s.Append(",:PlanLoad");
        s.Append(",:CustomerOrderClass");
        s.Append(",:SearchReference");
        s.Append(",:ForceURL");
        s.Append(",:AllowTransit");
        s.Append(",:DepartureLoadIdentity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("MSG_IN_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("CommPartnerIdentity", 35));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 10, 0));
        fStmt.Parameters.Add(StringParam("FromNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ToNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ProductTransportIdentity", 5));
        fStmt.Parameters.Add(NumberParam("PlannedWeight", 16, 6));
        fStmt.Parameters.Add(NumberParam("PlannedVolume", 16, 6));
        fStmt.Parameters.Add(NumberParam("PlannedSpace", 16, 6));
        fStmt.Parameters.Add(StringParam("DepartureIdentity", 35));
        fStmt.Parameters.Add(StringParam("ZipCode", 12));
        fStmt.Parameters.Add(StringParam("CountryCode", 6));
        fStmt.Parameters.Add(StringParam("DeliveryMethod", 17));
        fStmt.Parameters.Add(StringParam("ViaNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("DateSelectionType", 1));
        fStmt.Parameters.Add(DateParam("FirstPlannedShipDtm"));
        fStmt.Parameters.Add(DateParam("LastPlannedShipDtm"));
        fStmt.Parameters.Add(DateParam("FirstPlannedDeliveryDtm"));
        fStmt.Parameters.Add(DateParam("LastPlannedDeliveryDtm"));
        fStmt.Parameters.Add(StringParam("PlanLoad", 255));
        fStmt.Parameters.Add(StringParam("CustomerOrderClass", 2));
        fStmt.Parameters.Add(StringParam("SearchReference", 35));
        fStmt.Parameters.Add(StringParam("ForceURL", 1024));
        fStmt.Parameters.Add(StringParam("AllowTransit", 255));
        fStmt.Parameters.Add(StringParam("DepartureLoadIdentity", 35));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, CustomerOrderDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "2");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["MSG_IN_ID"] as IDbDataParameter).Value = StringValue(trans.MsgInId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.TransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for CustomerOrderDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["CommPartnerIdentity"] as IDbDataParameter).Value = StringValue(trans.CommPartnerId);

        if (p.ClientIdentity != null)
        {
            if (p.ClientIdentity.Length > 17)
                error.AppendLine("Value for CustomerOrderDoc.ClientIdentity too long, max 17 chars");

            if (p.ClientIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerOrderDoc.ClientIdentity not allowed");

            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = p.ClientIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderDoc.ClientIdentity not allowed");


        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for CustomerOrderDoc.CustomerOrderNumber too long, max 35 chars");

            if (p.CustomerOrderNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerOrderDoc.CustomerOrderNumber not allowed");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderDoc.CustomerOrderNumber not allowed");


        if (p.CustomerOrderSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderDoc.CustomerOrderSequence not allowed");


        if (p.FromNodeIdentity != null)
        {
            if (p.FromNodeIdentity.Length > 35)
                error.AppendLine("Value for CustomerOrderDoc.FromNodeIdentity too long, max 35 chars");

            if (p.FromNodeIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerOrderDoc.FromNodeIdentity not allowed");

            (fStmt.Parameters["FromNodeIdentity"] as IDbDataParameter).Value = p.FromNodeIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderDoc.FromNodeIdentity not allowed");


        if (p.ToNodeIdentity != null)
        {
            if (p.ToNodeIdentity.Length > 35)
                error.AppendLine("Value for CustomerOrderDoc.ToNodeIdentity too long, max 35 chars");

            if (p.ToNodeIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerOrderDoc.ToNodeIdentity not allowed");

            (fStmt.Parameters["ToNodeIdentity"] as IDbDataParameter).Value = p.ToNodeIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderDoc.ToNodeIdentity not allowed");


        if (p.ProductTransportIdentity != null)
        {
            if (p.ProductTransportIdentity.Length > 5)
                error.AppendLine("Value for CustomerOrderDoc.ProductTransportIdentity too long, max 5 chars");

            if (p.ProductTransportIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerOrderDoc.ProductTransportIdentity not allowed");

            (fStmt.Parameters["ProductTransportIdentity"] as IDbDataParameter).Value = p.ProductTransportIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderDoc.ProductTransportIdentity not allowed");


        if (p.PlannedWeight != null)
        {
            (fStmt.Parameters["PlannedWeight"] as IDbDataParameter).Value = p.PlannedWeight;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderDoc.PlannedWeight not allowed");


        if (p.PlannedVolume != null)
        {
            (fStmt.Parameters["PlannedVolume"] as IDbDataParameter).Value = p.PlannedVolume;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderDoc.PlannedVolume not allowed");


        if (p.PlannedSpace != null)
        {
            (fStmt.Parameters["PlannedSpace"] as IDbDataParameter).Value = p.PlannedSpace;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderDoc.PlannedSpace not allowed");


        if (p.DepartureIdentity != null)
        {
            if (p.DepartureIdentity.Length > 35)
                error.AppendLine("Value for CustomerOrderDoc.DepartureIdentity too long, max 35 chars");

            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = p.DepartureIdentity;
        }
        else
            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ZipCode != null)
        {
            if (p.ZipCode.Length > 12)
                error.AppendLine("Value for CustomerOrderDoc.ZipCode too long, max 12 chars");

            (fStmt.Parameters["ZipCode"] as IDbDataParameter).Value = p.ZipCode;
        }
        else
            (fStmt.Parameters["ZipCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CountryCode != null)
        {
            if (p.CountryCode.Length > 6)
                error.AppendLine("Value for CustomerOrderDoc.CountryCode too long, max 6 chars");

            (fStmt.Parameters["CountryCode"] as IDbDataParameter).Value = p.CountryCode;
        }
        else
            (fStmt.Parameters["CountryCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveryMethod != null)
        {
            if (p.DeliveryMethod.Length > 17)
                error.AppendLine("Value for CustomerOrderDoc.DeliveryMethod too long, max 17 chars");

            (fStmt.Parameters["DeliveryMethod"] as IDbDataParameter).Value = p.DeliveryMethod;
        }
        else
            (fStmt.Parameters["DeliveryMethod"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ViaNodeIdentity != null)
        {
            if (p.ViaNodeIdentity.Length > 35)
                error.AppendLine("Value for CustomerOrderDoc.ViaNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ViaNodeIdentity"] as IDbDataParameter).Value = p.ViaNodeIdentity;
        }
        else
            (fStmt.Parameters["ViaNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DateSelectionType != null)
        {
            if (p.DateSelectionType.Length > 1)
                error.AppendLine("Value for CustomerOrderDoc.DateSelectionType too long, max 1 chars");

            (fStmt.Parameters["DateSelectionType"] as IDbDataParameter).Value = p.DateSelectionType;
        }
        else
            (fStmt.Parameters["DateSelectionType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FirstPlannedShipDtm != null)
        {
            (fStmt.Parameters["FirstPlannedShipDtm"] as IDbDataParameter).Value = p.FirstPlannedShipDtm;
        }
        else
            (fStmt.Parameters["FirstPlannedShipDtm"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LastPlannedShipDtm != null)
        {
            (fStmt.Parameters["LastPlannedShipDtm"] as IDbDataParameter).Value = p.LastPlannedShipDtm;
        }
        else
            (fStmt.Parameters["LastPlannedShipDtm"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FirstPlannedDeliveryDtm != null)
        {
            (fStmt.Parameters["FirstPlannedDeliveryDtm"] as IDbDataParameter).Value = p.FirstPlannedDeliveryDtm;
        }
        else
            (fStmt.Parameters["FirstPlannedDeliveryDtm"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LastPlannedDeliveryDtm != null)
        {
            (fStmt.Parameters["LastPlannedDeliveryDtm"] as IDbDataParameter).Value = p.LastPlannedDeliveryDtm;
        }
        else
            (fStmt.Parameters["LastPlannedDeliveryDtm"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PlanLoad != null)
        {
            if (p.PlanLoad.Length > 255)
                error.AppendLine("Value for CustomerOrderDoc.PlanLoad too long, max 255 chars");

            (fStmt.Parameters["PlanLoad"] as IDbDataParameter).Value = p.PlanLoad;
        }
        else
            (fStmt.Parameters["PlanLoad"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderClass != null)
        {
            if (p.CustomerOrderClass.Length > 2)
                error.AppendLine("Value for CustomerOrderDoc.CustomerOrderClass too long, max 2 chars");

            (fStmt.Parameters["CustomerOrderClass"] as IDbDataParameter).Value = p.CustomerOrderClass;
        }
        else
            (fStmt.Parameters["CustomerOrderClass"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SearchReference != null)
        {
            if (p.SearchReference.Length > 35)
                error.AppendLine("Value for CustomerOrderDoc.SearchReference too long, max 35 chars");

            (fStmt.Parameters["SearchReference"] as IDbDataParameter).Value = p.SearchReference;
        }
        else
            (fStmt.Parameters["SearchReference"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ForceURL != null)
        {
            if (p.ForceURL.Length > 1024)
                error.AppendLine("Value for CustomerOrderDoc.ForceURL too long, max 1024 chars");

            (fStmt.Parameters["ForceURL"] as IDbDataParameter).Value = p.ForceURL;
        }
        else
            (fStmt.Parameters["ForceURL"] as IDbDataParameter).Value = DBNull.Value;

        if (p.AllowTransit != null)
        {
            if (p.AllowTransit.Length > 255)
                error.AppendLine("Value for CustomerOrderDoc.AllowTransit too long, max 255 chars");

            (fStmt.Parameters["AllowTransit"] as IDbDataParameter).Value = p.AllowTransit;
        }
        else
            (fStmt.Parameters["AllowTransit"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DepartureLoadIdentity != null)
        {
            if (p.DepartureLoadIdentity.Length > 35)
                error.AppendLine("Value for CustomerOrderDoc.DepartureLoadIdentity too long, max 35 chars");

            if (p.DepartureLoadIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerOrderDoc.DepartureLoadIdentity not allowed");

            (fStmt.Parameters["DepartureLoadIdentity"] as IDbDataParameter).Value = p.DepartureLoadIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderDoc.DepartureLoadIdentity not allowed");


        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.TransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class NodePartyInsert : SegmentImpl
  {

    public NodePartyInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into MSG_IN_NODE_PARTY ( ");
        s.Append(" MSG_IN_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",CommPartnerIdentity");
        s.Append(",PartyIdentity");
        s.Append(",PartyQualifier");
        s.Append(",ClientIdentity");
        s.Append(",ClientName");
        s.Append(",NodeIdentity");
        s.Append(",PartyName1");
        s.Append(",PartyName2");
        s.Append(",PartyName3");
        s.Append(",PartyName4");
        s.Append(",PartyName5");
        s.Append(",PartyAddress1");
        s.Append(",PartyAddress2");
        s.Append(",PartyAddress3");
        s.Append(",PartyAddress4");
        s.Append(",ZipCode");
        s.Append(",City");
        s.Append(",Region");
        s.Append(",CountryCode");
        s.Append(",Country");
        s.Append(",Division");
        s.Append(",Phone");
        s.Append(",Fax");
        s.Append(",Telex");
        s.Append(",Email");
        s.Append(",OrganizationNumber");
        s.Append(",GlobalLocationNumber");
        s.Append(",Latitude");
        s.Append(",Longitude");

        s.Append(" ) values ( ");

        s.Append(" :MSG_IN_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:CommPartnerIdentity");
        s.Append(",:PartyIdentity");
        s.Append(",:PartyQualifier");
        s.Append(",:ClientIdentity");
        s.Append(",:ClientName");
        s.Append(",:NodeIdentity");
        s.Append(",:PartyName1");
        s.Append(",:PartyName2");
        s.Append(",:PartyName3");
        s.Append(",:PartyName4");
        s.Append(",:PartyName5");
        s.Append(",:PartyAddress1");
        s.Append(",:PartyAddress2");
        s.Append(",:PartyAddress3");
        s.Append(",:PartyAddress4");
        s.Append(",:ZipCode");
        s.Append(",:City");
        s.Append(",:Region");
        s.Append(",:CountryCode");
        s.Append(",:Country");
        s.Append(",:Division");
        s.Append(",:Phone");
        s.Append(",:Fax");
        s.Append(",:Telex");
        s.Append(",:Email");
        s.Append(",:OrganizationNumber");
        s.Append(",:GlobalLocationNumber");
        s.Append(",:Latitude");
        s.Append(",:Longitude");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("MSG_IN_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("CommPartnerIdentity", 35));
        fStmt.Parameters.Add(StringParam("PartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("PartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("ClientName", 35));
        fStmt.Parameters.Add(StringParam("NodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("PartyName1", 35));
        fStmt.Parameters.Add(StringParam("PartyName2", 35));
        fStmt.Parameters.Add(StringParam("PartyName3", 35));
        fStmt.Parameters.Add(StringParam("PartyName4", 35));
        fStmt.Parameters.Add(StringParam("PartyName5", 35));
        fStmt.Parameters.Add(StringParam("PartyAddress1", 35));
        fStmt.Parameters.Add(StringParam("PartyAddress2", 35));
        fStmt.Parameters.Add(StringParam("PartyAddress3", 35));
        fStmt.Parameters.Add(StringParam("PartyAddress4", 35));
        fStmt.Parameters.Add(StringParam("ZipCode", 12));
        fStmt.Parameters.Add(StringParam("City", 35));
        fStmt.Parameters.Add(StringParam("Region", 2));
        fStmt.Parameters.Add(StringParam("CountryCode", 6));
        fStmt.Parameters.Add(StringParam("Country", 35));
        fStmt.Parameters.Add(StringParam("Division", 17));
        fStmt.Parameters.Add(StringParam("Phone", 35));
        fStmt.Parameters.Add(StringParam("Fax", 35));
        fStmt.Parameters.Add(StringParam("Telex", 35));
        fStmt.Parameters.Add(StringParam("Email", 50));
        fStmt.Parameters.Add(StringParam("OrganizationNumber", 35));
        fStmt.Parameters.Add(StringParam("GlobalLocationNumber", 35));
        fStmt.Parameters.Add(StringParam("Latitude", 35));
        fStmt.Parameters.Add(StringParam("Longitude", 35));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, NodePartyDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "2");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["MSG_IN_ID"] as IDbDataParameter).Value = StringValue(trans.MsgInId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.TransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for NodePartyDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["CommPartnerIdentity"] as IDbDataParameter).Value = StringValue(trans.CommPartnerId);

        if (p.PartyIdentity != null)
        {
            if (p.PartyIdentity.Length > 35)
                error.AppendLine("Value for NodePartyDoc.PartyIdentity too long, max 35 chars");

            if (p.PartyIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter NodePartyDoc.PartyIdentity not allowed");

            (fStmt.Parameters["PartyIdentity"] as IDbDataParameter).Value = p.PartyIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter NodePartyDoc.PartyIdentity not allowed");


        if (p.PartyQualifier != null)
        {
            if (p.PartyQualifier.Length > 3)
                error.AppendLine("Value for NodePartyDoc.PartyQualifier too long, max 3 chars");

            if (p.PartyQualifier.Length == 0)
                error.AppendLine("Zero length for mandatory parameter NodePartyDoc.PartyQualifier not allowed");

            (fStmt.Parameters["PartyQualifier"] as IDbDataParameter).Value = p.PartyQualifier;
        }
        else
            error.AppendLine("Null value for mandatory parameter NodePartyDoc.PartyQualifier not allowed");


        if (p.ClientIdentity != null)
        {
            if (p.ClientIdentity.Length > 17)
                error.AppendLine("Value for NodePartyDoc.ClientIdentity too long, max 17 chars");

            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = p.ClientIdentity;
        }
        else
            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ClientName != null)
        {
            if (p.ClientName.Length > 35)
                error.AppendLine("Value for NodePartyDoc.ClientName too long, max 35 chars");

            (fStmt.Parameters["ClientName"] as IDbDataParameter).Value = p.ClientName;
        }
        else
            (fStmt.Parameters["ClientName"] as IDbDataParameter).Value = DBNull.Value;

        if (p.NodeIdentity != null)
        {
            if (p.NodeIdentity.Length > 35)
                error.AppendLine("Value for NodePartyDoc.NodeIdentity too long, max 35 chars");

            (fStmt.Parameters["NodeIdentity"] as IDbDataParameter).Value = p.NodeIdentity;
        }
        else
            (fStmt.Parameters["NodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PartyName1 != null)
        {
            if (p.PartyName1.Length > 35)
                error.AppendLine("Value for NodePartyDoc.PartyName1 too long, max 35 chars");

            (fStmt.Parameters["PartyName1"] as IDbDataParameter).Value = p.PartyName1;
        }
        else
            (fStmt.Parameters["PartyName1"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PartyName2 != null)
        {
            if (p.PartyName2.Length > 35)
                error.AppendLine("Value for NodePartyDoc.PartyName2 too long, max 35 chars");

            (fStmt.Parameters["PartyName2"] as IDbDataParameter).Value = p.PartyName2;
        }
        else
            (fStmt.Parameters["PartyName2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PartyName3 != null)
        {
            if (p.PartyName3.Length > 35)
                error.AppendLine("Value for NodePartyDoc.PartyName3 too long, max 35 chars");

            (fStmt.Parameters["PartyName3"] as IDbDataParameter).Value = p.PartyName3;
        }
        else
            (fStmt.Parameters["PartyName3"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PartyName4 != null)
        {
            if (p.PartyName4.Length > 35)
                error.AppendLine("Value for NodePartyDoc.PartyName4 too long, max 35 chars");

            (fStmt.Parameters["PartyName4"] as IDbDataParameter).Value = p.PartyName4;
        }
        else
            (fStmt.Parameters["PartyName4"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PartyName5 != null)
        {
            if (p.PartyName5.Length > 35)
                error.AppendLine("Value for NodePartyDoc.PartyName5 too long, max 35 chars");

            (fStmt.Parameters["PartyName5"] as IDbDataParameter).Value = p.PartyName5;
        }
        else
            (fStmt.Parameters["PartyName5"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PartyAddress1 != null)
        {
            if (p.PartyAddress1.Length > 35)
                error.AppendLine("Value for NodePartyDoc.PartyAddress1 too long, max 35 chars");

            (fStmt.Parameters["PartyAddress1"] as IDbDataParameter).Value = p.PartyAddress1;
        }
        else
            (fStmt.Parameters["PartyAddress1"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PartyAddress2 != null)
        {
            if (p.PartyAddress2.Length > 35)
                error.AppendLine("Value for NodePartyDoc.PartyAddress2 too long, max 35 chars");

            (fStmt.Parameters["PartyAddress2"] as IDbDataParameter).Value = p.PartyAddress2;
        }
        else
            (fStmt.Parameters["PartyAddress2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PartyAddress3 != null)
        {
            if (p.PartyAddress3.Length > 35)
                error.AppendLine("Value for NodePartyDoc.PartyAddress3 too long, max 35 chars");

            (fStmt.Parameters["PartyAddress3"] as IDbDataParameter).Value = p.PartyAddress3;
        }
        else
            (fStmt.Parameters["PartyAddress3"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PartyAddress4 != null)
        {
            if (p.PartyAddress4.Length > 35)
                error.AppendLine("Value for NodePartyDoc.PartyAddress4 too long, max 35 chars");

            (fStmt.Parameters["PartyAddress4"] as IDbDataParameter).Value = p.PartyAddress4;
        }
        else
            (fStmt.Parameters["PartyAddress4"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ZipCode != null)
        {
            if (p.ZipCode.Length > 12)
                error.AppendLine("Value for NodePartyDoc.ZipCode too long, max 12 chars");

            (fStmt.Parameters["ZipCode"] as IDbDataParameter).Value = p.ZipCode;
        }
        else
            (fStmt.Parameters["ZipCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.City != null)
        {
            if (p.City.Length > 35)
                error.AppendLine("Value for NodePartyDoc.City too long, max 35 chars");

            (fStmt.Parameters["City"] as IDbDataParameter).Value = p.City;
        }
        else
            (fStmt.Parameters["City"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Region != null)
        {
            if (p.Region.Length > 2)
                error.AppendLine("Value for NodePartyDoc.Region too long, max 2 chars");

            (fStmt.Parameters["Region"] as IDbDataParameter).Value = p.Region;
        }
        else
            (fStmt.Parameters["Region"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CountryCode != null)
        {
            if (p.CountryCode.Length > 6)
                error.AppendLine("Value for NodePartyDoc.CountryCode too long, max 6 chars");

            (fStmt.Parameters["CountryCode"] as IDbDataParameter).Value = p.CountryCode;
        }
        else
            (fStmt.Parameters["CountryCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Country != null)
        {
            if (p.Country.Length > 35)
                error.AppendLine("Value for NodePartyDoc.Country too long, max 35 chars");

            (fStmt.Parameters["Country"] as IDbDataParameter).Value = p.Country;
        }
        else
            (fStmt.Parameters["Country"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Division != null)
        {
            if (p.Division.Length > 17)
                error.AppendLine("Value for NodePartyDoc.Division too long, max 17 chars");

            (fStmt.Parameters["Division"] as IDbDataParameter).Value = p.Division;
        }
        else
            (fStmt.Parameters["Division"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Phone != null)
        {
            if (p.Phone.Length > 35)
                error.AppendLine("Value for NodePartyDoc.Phone too long, max 35 chars");

            (fStmt.Parameters["Phone"] as IDbDataParameter).Value = p.Phone;
        }
        else
            (fStmt.Parameters["Phone"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fax != null)
        {
            if (p.Fax.Length > 35)
                error.AppendLine("Value for NodePartyDoc.Fax too long, max 35 chars");

            (fStmt.Parameters["Fax"] as IDbDataParameter).Value = p.Fax;
        }
        else
            (fStmt.Parameters["Fax"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Telex != null)
        {
            if (p.Telex.Length > 35)
                error.AppendLine("Value for NodePartyDoc.Telex too long, max 35 chars");

            (fStmt.Parameters["Telex"] as IDbDataParameter).Value = p.Telex;
        }
        else
            (fStmt.Parameters["Telex"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Email != null)
        {
            if (p.Email.Length > 50)
                error.AppendLine("Value for NodePartyDoc.Email too long, max 50 chars");

            (fStmt.Parameters["Email"] as IDbDataParameter).Value = p.Email;
        }
        else
            (fStmt.Parameters["Email"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OrganizationNumber != null)
        {
            if (p.OrganizationNumber.Length > 35)
                error.AppendLine("Value for NodePartyDoc.OrganizationNumber too long, max 35 chars");

            (fStmt.Parameters["OrganizationNumber"] as IDbDataParameter).Value = p.OrganizationNumber;
        }
        else
            (fStmt.Parameters["OrganizationNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.GlobalLocationNumber != null)
        {
            if (p.GlobalLocationNumber.Length > 35)
                error.AppendLine("Value for NodePartyDoc.GlobalLocationNumber too long, max 35 chars");

            (fStmt.Parameters["GlobalLocationNumber"] as IDbDataParameter).Value = p.GlobalLocationNumber;
        }
        else
            (fStmt.Parameters["GlobalLocationNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Latitude != null)
        {
            if (p.Latitude.Length > 35)
                error.AppendLine("Value for NodePartyDoc.Latitude too long, max 35 chars");

            (fStmt.Parameters["Latitude"] as IDbDataParameter).Value = p.Latitude;
        }
        else
            (fStmt.Parameters["Latitude"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Longitude != null)
        {
            if (p.Longitude.Length > 35)
                error.AppendLine("Value for NodePartyDoc.Longitude too long, max 35 chars");

            (fStmt.Parameters["Longitude"] as IDbDataParameter).Value = p.Longitude;
        }
        else
            (fStmt.Parameters["Longitude"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.TransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

}
