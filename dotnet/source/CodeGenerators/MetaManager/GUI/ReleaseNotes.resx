<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>MetaManager 

Version 2.0.10
*Added possibility to exclude files with zero size when creating a new database from metadata.
*Changed code generation to clear hidden search parameters after jump to
*Changed function when setting Viewnode not visible. To hide the view instead of not generate code for it.
  This is done to make it possible to hide a detail view when the dialog starts and then unhide it with a rule.
*Added handling of incorrect values entered in Datepicker.
NOTE: This version needs issue TFS_102447

Version 2.0.9
*Minor change in code generation to make check-boxes look empty when an empty view is displayed
*Fixed ImportDataModel to accept table columns with date type TIMESTAMP

Version 2.0.8
* Changed code generation to fix problems with hint text not showing for checkbox and radiogroup
* Changed code generation to be able to add custom combobox.
* Changed code generation to fix problem with grid not scrolling to current item after search
* Changed code generation to fix problem with move next and validation error.
* Changed code generation to fix validation balloon pop up missplaced for comboboxes.
* Changed code generation to fix Dashboard dialogs showing default search parameters.
* Changed code generation to empty detail tabs in dialogs when search returns no rows.
* Changed code generation to fix Combo dialog graphic error.
NOTE: This version needs issue TFS_93674, TFS_102350 and TFS_102217

Version 2.0.7

* Bugg fixed when merging changed component type with merge function
* Added functionality to make update propagation = Parent work for inline views

Version 2.0.6
NOTE: This version needs fix 342_TFS_90207_C.

* Changed code generating templates to set proid to logged on user when 
   calling stored procedure that is not returning a ref cursor 
   (e.g. insert, update, delete)
* Minor fixes for error message that do not show during check in.
* Changed code generating templates and added the property SelectSingelItem
   to ComboBox. To make it possible to get a value default selected in a 
   combobox when there is only one item in the list.
   Only to be used in create dialogs.
* Added the BETA version om the Import Change function. Where the user can
   Import a singel issue, based on a Deploy issue number. From one development
   track to another.


Version 2.0.5

* Changed code generating templates to better support multi select in dialogs.
* Changed behaviour of combo dialogs to avoid errors.
* Minor bug fixes
* NOTE: Needs issue MetaManager_1 

Version 2.0.4

* Fixed loss of precision when converting from Oracle Number to .NET Double 
   data type.
* Reduced XML overhead by factor &gt;2 in communication between frontend and
   backend.
* Improved layout of labels when radio groups are used.


Version 2.0.3

* Correct errors in depoymentkit. Wrong version of code generation dll.
* Previous version from 2.0 is not workable due to problems with deploymentkit 
   build


Version 2.0.2

* Correction of installation package. Missing files added.


Version 2.0.1

* Correction for bug 88166 (Error in HAPI Outboundmessage Queue)
* Change in code generation to increase performance for dialogs with 
   many components. 
* NOTE!!! Fix 169_TFS_88101_C must be installed prior to using this
   this version and versions after this of MetaManager.


Version 2.0.0

* Instance handling
* New routine for code generation
* Use of snapshot views instead of dynamic view
* CLI for code generation
* Improved functionality in UpdateDataModel
* Usability improvements
** Unnecessary mappings removed in UXAction
** Menu options reorganized in Dialog editor
** Properties of objects without gain for user, hidden.
** New functionality for faster navigation between objects
** Action wizard: added property information
** Service method editor: added property information</value>
  </data>
</root>