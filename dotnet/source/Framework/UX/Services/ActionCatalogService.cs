//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by this guidance package as part of the solution template
//
// The ActionCatalogService class provides the ability to conditionally execute code based upon 
// aspects of a program that can change at run time 
// 
// For more information see: 
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/03-01-140-How_to_Use_the_Action_Catalog.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.Utility;

namespace Imi.Framework.UX.Services
{
    public class ActionCatalogService : IActionCatalogService
    {
        private Dictionary<string, List<IActionCondition>> _specificActionConditions = new Dictionary<string, List<IActionCondition>>();
        private List<IActionCondition> _generalActionConditions = new List<IActionCondition>();
        private Dictionary<string, ActionDelegate> _actionImplementations = new Dictionary<string, ActionDelegate>();
        private Dictionary<string, Dictionary<string, ActionSpecialFunctionDelegate>> _specialFunctionImplementations = new Dictionary<string, Dictionary<string, ActionSpecialFunctionDelegate>>();

        public void RegisterSpecificCondition(string action, IActionCondition actionCondition)
        {
            Guard.ArgumentNotNullOrEmptyString(action, "action");
            Guard.ArgumentNotNull(actionCondition, "actionCondition");

            List<IActionCondition> conditions = null;

            if (_specificActionConditions.TryGetValue(action, out conditions))
            {
                IActionCondition registered = conditions.Find(delegate(IActionCondition test)
                {
                    return test.GetType() == actionCondition.GetType();
                });
                if (registered != null) throw new ActionCatalogException();
                conditions.Add(actionCondition);
            }
            else
            {
                _specificActionConditions.Add(action, new List<IActionCondition>());
                _specificActionConditions[action].Add(actionCondition);
            }
        }

        public void RegisterGeneralCondition(IActionCondition actionCondition)
        {
            Guard.ArgumentNotNull(actionCondition, "actionCondition");

            IActionCondition registered = _generalActionConditions.Find(delegate(IActionCondition test)
            {
                return test.GetType() == actionCondition.GetType();
            });
            if (registered != null) throw new ActionCatalogException();
            _generalActionConditions.Add(actionCondition);
        }

        public bool CanExecute(string action)
        {
            return CanExecute(action, null, null, null);
        }

        public bool CanExecute(string action, WorkItem context, object caller, object target)
        {
            Guard.ArgumentNotNullOrEmptyString(action, "action");

            bool result = true;
            List<IActionCondition> conditions = BuildActionConditionPipeline(action);
            conditions.ForEach(delegate(IActionCondition condition)
            {
                result &= condition.CanExecute(action, context, caller, target);
            });
            return result;
        }

        public void RemoveSpecificCondition(string action, IActionCondition actionCondition)
        {
            Guard.ArgumentNotNullOrEmptyString(action, "action");
            Guard.ArgumentNotNull(actionCondition, "actionCondition");

            List<IActionCondition> conditions;
            if (_specificActionConditions.TryGetValue(action, out conditions))
            {
                conditions.Remove(actionCondition);
            }
        }

        public void RemoveGeneralCondition(IActionCondition actionCondition)
        {
            Guard.ArgumentNotNull(actionCondition, "actionCondition");

            _generalActionConditions.Remove(actionCondition);
        }

        public void RegisterActionImplementation(string action, ActionDelegate actionDelegate)
        {
            Guard.ArgumentNotNullOrEmptyString(action, "action");
            Guard.ArgumentNotNull(actionDelegate, "actionDelegate");

            _actionImplementations[action] = actionDelegate;
       }

        public void RemoveActionImplementation(string action)
        {
            Guard.ArgumentNotNullOrEmptyString(action, "action");

            List<IActionCondition> conditions;

            if (_specificActionConditions.TryGetValue(action, out conditions))
            {
                conditions.Clear();
            }

            _actionImplementations.Remove(action);
        }

        public void Execute(string action, WorkItem context, object caller, object target)
        {
            Guard.ArgumentNotNullOrEmptyString(action, "action");

            ActionDelegate actionDelegate = null;
            if (CanExecute(action, context, caller, target))
            {
                if (_actionImplementations.TryGetValue(action, out actionDelegate))
                {
                    actionDelegate(context, caller, target);
                }
            }
        }

        public void RegisterSpecialFunction(string action, string name, ActionSpecialFunctionDelegate specialFunctionDelegate)
        {
            if (!_specialFunctionImplementations.ContainsKey(action))
            {
                _specialFunctionImplementations.Add(action, new Dictionary<string, ActionSpecialFunctionDelegate>());
            }

            if (!_specialFunctionImplementations[action].ContainsKey(name))
            {
                _specialFunctionImplementations[action].Add(name, specialFunctionDelegate);
            }
        }

        public object ExecuteSpecialFunction(string action, string name, object[] args, WorkItem context)
        {
            if (_specialFunctionImplementations.ContainsKey(action))
            {
                if (_specialFunctionImplementations[action].ContainsKey(name))
                {
                    return _specialFunctionImplementations[action][name].Invoke(context, args);
                }
            }

            return null;
        }

        public void RemoveSpecialFunction(string action, string name)
        {
            if (_specialFunctionImplementations.ContainsKey(action))
            {
                if (_specialFunctionImplementations[action].ContainsKey(name))
                {
                    _specialFunctionImplementations[action].Remove(name);
                }

                if (_specialFunctionImplementations[action].Count == 0)
                {
                    _specialFunctionImplementations.Remove(action);
                }
            }
        }

        private List<IActionCondition> BuildActionConditionPipeline(string action)
        {
            List<IActionCondition> pipeline = new List<IActionCondition>(_generalActionConditions);
            List<IActionCondition> conditions;
            if (_specificActionConditions.TryGetValue(action, out conditions))
            {
                pipeline.AddRange(conditions);
            }
            return pipeline;
        }
    }
}
