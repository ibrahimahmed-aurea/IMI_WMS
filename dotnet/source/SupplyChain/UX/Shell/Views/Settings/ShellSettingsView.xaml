<ribbon:RibbonWindow
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  xmlns:ribbon="http://schemas.actiprosoftware.com/winfx/xaml/ribbon"
  xmlns:shared="http://schemas.actiprosoftware.com/winfx/xaml/shared"
  xmlns:navigation="http://schemas.actiprosoftware.com/winfx/xaml/navigation"
  xmlns:themes="http://schemas.actiprosoftware.com/winfx/xaml/themes"
  xmlns:resources="clr-namespace:Imi.SupplyChain.UX.Shell"
	mc:Ignorable="d" xmlns:local="clr-namespace:Imi.SupplyChain.UX.Shell.Views"
	x:Class="Imi.SupplyChain.UX.Shell.Views.ShellSettingsView"
  DocumentName="{x:Static resources:StringResources.Settings_Title}"
	x:Name="Window"
  ResizeMode="NoResize"
	Title="{Binding DocumentName}" 
  ShowInTaskbar="False"
	Width="700" 
  Height="500"
  Background="{DynamicResource {x:Static themes:AssetResourceKeys.WorkspaceMediumBackgroundNormalBrushKey}}"
  WindowStartupLocation="CenterOwner">
    <ribbon:RibbonWindow.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/Imi.SupplyChain.UX;component/Resources/generic.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <Style TargetType="{x:Type ListBoxItem}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Border x:Name="OuterBorder" Margin="2,2,2,0" BorderThickness="1" CornerRadius="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemBorderNormalCornerRadiusKey}}" BorderBrush="Transparent" Background="Transparent">
                                <Border x:Name="InnerBorder" BorderThickness="1" CornerRadius="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemBorderNormalCornerRadiusKey}}" BorderBrush="Transparent" Background="Transparent">
                                    <ContentPresenter x:Name="Content" Margin="10,3,10,3" />
                                </Border>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="OuterBorder" Property="BorderThickness" Value="0" />
                                    <Setter TargetName="InnerBorder" Property="BorderThickness" Value="0" />
                                    <Setter TargetName="Content" Property="Margin" Value="0" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderHoverBrushKey}}" />
                                    <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundHoverBrushKey}}" />
                                    <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderHoverBrushKey}}" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="True" />
                                        <Condition Property="IsMouseOver" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderCheckedNormalBrushKey}}" />
                                    <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundCheckedNormalBrushKey}}" />
                                    <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderCheckedNormalBrushKey}}" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="True" />
                                        <Condition Property="IsMouseOver" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderCheckedHoverBrushKey}}" />
                                    <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundCheckedHoverBrushKey}}" />
                                    <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderCheckedHoverBrushKey}}" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </ribbon:RibbonWindow.Resources>
    <Grid x:Name="LayoutRoot">
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="36"/>
        </Grid.RowDefinitions>
        <Grid Margin="5,5,5,0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="5"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <ListBox x:Name="viewSelector"  Width="200">
                <ListBoxItem x:Name="diagnosticsItem" IsSelected="True" Content="{x:Static resources:StringResources.Settings_DiagnosticsTitle}" Selected="ViewSelectionChanged"/>
                <ListBoxItem x:Name="popularItem" Content="{x:Static resources:StringResources.Settings_PopularTitle}" Selected="ViewSelectionChanged"/>
                <ListBoxItem x:Name="resourcesItem" Content="{x:Static resources:StringResources.Settings_ResourcesTitle}" Selected="ViewSelectionChanged"/>
            </ListBox>
            <Border Grid.Column="2" BorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.ListBorderNormalBrushKey}}" Background="{DynamicResource {x:Static themes:AssetResourceKeys.ListBackgroundNormalBrushKey}}" BorderThickness="1" SnapsToDevicePixels="True">
                <Grid>
                    <local:DiagnosticsView x:Name="diagnosticsView" />
                    <local:PopularSettingsView x:Name="popularView" Visibility="Collapsed" />
                    <local:ResourcesView x:Name="resourcesView" Visibility="Collapsed" />
                </Grid>
            </Border>
        </Grid>
        <StackPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Stretch" Margin="5,0,0,0">
            <Button Content="{x:Static resources:StringResources.Settings_OK}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,5,0" MinWidth="80" IsDefault="True" Click="OKButtonClick"/>
            <Button Content="{x:Static resources:StringResources.Settings_Cancel}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,5,0" MinWidth="80" Click="CancelButtonClick" IsCancel="True"/>
        </StackPanel>
    </Grid>
</ribbon:RibbonWindow>