/*
  File           : DbJob.cs

  Description    : Wrapper class for Oracle package Job.
                   This code was generated, do not edit.

*/
#define ODP_NET
using System;
using System.IO;
using System.Text;
using System.Data;
#if ODP_NET
using Oracle.DataAccess.Client;
using Oracle.DataAccess.Types;
#else
using System.Data.OracleClient;
#endif
using System.Collections.Generic;
using System.Xml;
using Imi.Framework.Job;
using Imi.Framework.Job.Data;

namespace Imi.SupplyChain.Server.Job.StandardJob.OraclePackage
{
    public class DbJob
    {
        private IDbConnectionProvider connectionProvider;
        private IDbCommand            sp_Execute;

        public string _Debug()
        {
            return "Package        : Job\r\n" +
              "Generated on   : 2005-09-02 10:56:22\r\n" +
              "Generated by   : IMINT1\\olla@IMIPC1091\r\n" +
              "Generated in   : C:\\TEMP\\wscc\r\n";
        }

        public DbJob(IDbConnectionProvider connectionProvider)
        {
            this.connectionProvider = connectionProvider;
        }


        // ----------------------------------------------------------------------------

        private void CreateSP_Execute()
        {
            OracleParameter p;

            sp_Execute = connectionProvider.GetConnection().CreateCommand();
            sp_Execute.CommandText = "JOB.EXECUTEXML";
            sp_Execute.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
            ((OracleCommand)sp_Execute).BindByName = true;
#endif

            p = sp_Execute.CreateParameter() as OracleParameter;
            p.ParameterName = "ARGS_I";
            p.DbType = DbType.String;
            p.Size = 32500;
            p.Direction = ParameterDirection.Input;
            sp_Execute.Parameters.Add(p);

            p = sp_Execute.CreateParameter() as OracleParameter;
            p.ParameterName = "EVENTLIST_O";
            p.DbType = DbType.String;
            p.Size = 32500;
            p.Direction = ParameterDirection.Output;
            sp_Execute.Parameters.Add(p);
        }

        // ----------------------------------------------------------------------------

        public static String CreateNameValuePairListXml(Dictionary<string,string> args)
        {
            XmlDocument doc = new XmlDocument();

            XmlElement argsXml = doc.CreateElement("List");
            
            foreach (string key in args.Keys)
            {
                XmlElement arg = doc.CreateElement("Item");
                
                XmlAttribute name = doc.CreateAttribute("name");
                name.Value = key;
                XmlAttribute value = doc.CreateAttribute("value");
                value.Value = args[key];

                arg.Attributes.Append(name);
                arg.Attributes.Append(value);
                argsXml.AppendChild(arg);
            }

            doc.AppendChild(argsXml);

            return (doc.InnerXml);
        }

        public static Array CreateArrayFromXml(string xmlList, string nodeName)
        {
            XmlReader reader = XmlReader.Create(new StringReader(xmlList));
            List<string> resultList = new List<string>();

            while (reader.Read())
            {
                if ((reader.NodeType == XmlNodeType.Element) &&
                    (reader.Name == nodeName) &&
                    (reader.HasAttributes)
                    )
                {
                    reader.MoveToFirstAttribute();
                    do
                    {
                        resultList.Add(reader.Value);
                    } while (reader.MoveToNextAttribute());
                }
            }

            return (resultList.ToArray() as Array);
        }

        public void Execute(JobArgumentCollection ARGS_I, ref Array eventArr)
        {

            if (sp_Execute == null)
                CreateSP_Execute();

            sp_Execute.Transaction = connectionProvider.CurrentTransaction;

            // Set In Parameters
            string argsXml = DbJob.CreateNameValuePairListXml(ARGS_I);

            if (ARGS_I == null)
            {
                (sp_Execute.Parameters["ARGS_I"] as IDbDataParameter).Value = DBNull.Value;
            }
            else
            {
                (sp_Execute.Parameters["ARGS_I"] as IDbDataParameter).Value = argsXml;
            }

            // Execute stored procedure

            sp_Execute.Prepare();
            sp_Execute.ExecuteNonQuery();

            // Set Out Parameters
            if ((sp_Execute.Parameters["EVENTLIST_O"] as IDbDataParameter).Value == DBNull.Value)
            {
                eventArr = null;
            }
            else
            {
                String eventXml = (sp_Execute.Parameters["EVENTLIST_O"] as IDbDataParameter).Value as string;
                eventArr = CreateArrayFromXml(eventXml, "Event");
            }

        }

        public void Cancel()
        {
            if (sp_Execute != null)
            {
                if (sp_Execute.Connection != null)
                {
                    if (sp_Execute.Connection.State != ConnectionState.Closed)
                    {
                        sp_Execute.Cancel();
                    }
                }
            }
        }

    }
}
