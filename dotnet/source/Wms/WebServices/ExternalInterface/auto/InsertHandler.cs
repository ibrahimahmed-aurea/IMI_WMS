/*
  File           : 

  Description    : Internal classes for inserting inbound data into queue tables.
                   This code was generated, do not edit.

*/
using System;
using System.Text;
using System.Data;
using System.Data.Common;

namespace Imi.Wms.WebServices.ExternalInterface
{
  public class InsertHandler
  {
      public string _Debug()
      {
          return "Generated on   : 2017-09-08 11:46:54\r\n" +
                 "Generated by   : SWG\\aron@SE0133D\r\n" +
                 "Generated in   : C:\\projects\\views\\aron_80M_ss\\dotnet\\source\\CodeGenerators\\wscc\r\n";
      }
  }

  public class ProductStockGroupInsert : SegmentImpl
  {

    public ProductStockGroupInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_PRODUCT_STOCK_GROUP ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",ProductStockGroupIdentity");
        s.Append(",ProductStockGroupName");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:ProductStockGroupIdentity");
        s.Append(",:ProductStockGroupName");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("ProductStockGroupIdentity", 12));
        fStmt.Parameters.Add(StringParam("ProductStockGroupName", 35));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ProductStockGroupDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "2");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ProductStockGroupDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.ProductStockGroupIdentity != null)
        {
            if (p.ProductStockGroupIdentity.Length > 12)
                error.AppendLine("Value for ProductStockGroupDoc.ProductStockGroupIdentity too long, max 12 chars");

            if (p.ProductStockGroupIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ProductStockGroupDoc.ProductStockGroupIdentity not allowed");

            (fStmt.Parameters["ProductStockGroupIdentity"] as IDbDataParameter).Value = p.ProductStockGroupIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter ProductStockGroupDoc.ProductStockGroupIdentity not allowed");


        if (p.ProductStockGroupName != null)
        {
            if (p.ProductStockGroupName.Length > 35)
                error.AppendLine("Value for ProductStockGroupDoc.ProductStockGroupName too long, max 35 chars");

            if (p.ProductStockGroupName.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ProductStockGroupDoc.ProductStockGroupName not allowed");

            (fStmt.Parameters["ProductStockGroupName"] as IDbDataParameter).Value = p.ProductStockGroupName;
        }
        else
            error.AppendLine("Null value for mandatory parameter ProductStockGroupDoc.ProductStockGroupName not allowed");


        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class CustomerReturnOrderHeadInsert : SegmentImpl
  {
    private CustomerReturnOrderLineInsert aCustomerReturnOrderLineInsert;

    public CustomerReturnOrderHeadInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_CUS_RET_ORD_HEAD ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",CustomerReturnOrderNumber");
        s.Append(",CustomerReturnOrderSequence");
        s.Append(",CustomerReturnOrderType");
        s.Append(",ScheduledArrivalDateTime");
        s.Append(",TransportMethod");
        s.Append(",HostStatus");
        s.Append(",VendorNumber");
        s.Append(",WarehouseIdentity");
        s.Append(",WarehouseReceiveArea");
        s.Append(",WarehouseDock");
        s.Append(",Instructions");
        s.Append(",Division");
        s.Append(",DeliveryWindowFirst");
        s.Append(",DeliveryWindowLast");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:CustomerReturnOrderNumber");
        s.Append(",:CustomerReturnOrderSequence");
        s.Append(",:CustomerReturnOrderType");
        s.Append(",:ScheduledArrivalDateTime");
        s.Append(",:TransportMethod");
        s.Append(",:HostStatus");
        s.Append(",:VendorNumber");
        s.Append(",:WarehouseIdentity");
        s.Append(",:WarehouseReceiveArea");
        s.Append(",:WarehouseDock");
        s.Append(",:Instructions");
        s.Append(",:Division");
        s.Append(",:DeliveryWindowFirst");
        s.Append(",:DeliveryWindowLast");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("CustomerReturnOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("CustomerReturnOrderType", 2));
        fStmt.Parameters.Add(DateParam("ScheduledArrivalDateTime"));
        fStmt.Parameters.Add(StringParam("TransportMethod", 17));
        fStmt.Parameters.Add(StringParam("HostStatus", 15));
        fStmt.Parameters.Add(StringParam("VendorNumber", 35));
        fStmt.Parameters.Add(StringParam("WarehouseIdentity", 4));
        fStmt.Parameters.Add(StringParam("WarehouseReceiveArea", 3));
        fStmt.Parameters.Add(StringParam("WarehouseDock", 5));
        fStmt.Parameters.Add(StringParam("Instructions", 400));
        fStmt.Parameters.Add(StringParam("Division", 17));
        fStmt.Parameters.Add(DateParam("DeliveryWindowFirst"));
        fStmt.Parameters.Add(DateParam("DeliveryWindowLast"));

        fStmt.Prepare();

        aCustomerReturnOrderLineInsert = new CustomerReturnOrderLineInsert(owner);
    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, CustomerReturnOrderHeadDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "2");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for CustomerReturnOrderHeadDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.CustomerReturnOrderNumber != null)
        {
            if (p.CustomerReturnOrderNumber.Length > 35)
                error.AppendLine("Value for CustomerReturnOrderHeadDoc.CustomerReturnOrderNumber too long, max 35 chars");

            if (p.CustomerReturnOrderNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerReturnOrderHeadDoc.CustomerReturnOrderNumber not allowed");

            (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = p.CustomerReturnOrderNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerReturnOrderHeadDoc.CustomerReturnOrderNumber not allowed");


        if (p.CustomerReturnOrderSequence != null)
        {
            (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = p.CustomerReturnOrderSequence;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerReturnOrderHeadDoc.CustomerReturnOrderSequence not allowed");


        if (p.CustomerReturnOrderType != null)
        {
            if (p.CustomerReturnOrderType.Length > 2)
                error.AppendLine("Value for CustomerReturnOrderHeadDoc.CustomerReturnOrderType too long, max 2 chars");

            if (p.CustomerReturnOrderType.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerReturnOrderHeadDoc.CustomerReturnOrderType not allowed");

            (fStmt.Parameters["CustomerReturnOrderType"] as IDbDataParameter).Value = p.CustomerReturnOrderType;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerReturnOrderHeadDoc.CustomerReturnOrderType not allowed");


        if (p.ScheduledArrivalDateTime != null)
        {
            (fStmt.Parameters["ScheduledArrivalDateTime"] as IDbDataParameter).Value = p.ScheduledArrivalDateTime;
        }
        else
            (fStmt.Parameters["ScheduledArrivalDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TransportMethod != null)
        {
            if (p.TransportMethod.Length > 17)
                error.AppendLine("Value for CustomerReturnOrderHeadDoc.TransportMethod too long, max 17 chars");

            (fStmt.Parameters["TransportMethod"] as IDbDataParameter).Value = p.TransportMethod;
        }
        else
            (fStmt.Parameters["TransportMethod"] as IDbDataParameter).Value = DBNull.Value;

        if (p.HostStatus != null)
        {
            if (p.HostStatus.Length > 15)
                error.AppendLine("Value for CustomerReturnOrderHeadDoc.HostStatus too long, max 15 chars");

            (fStmt.Parameters["HostStatus"] as IDbDataParameter).Value = p.HostStatus;
        }
        else
            (fStmt.Parameters["HostStatus"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VendorNumber != null)
        {
            if (p.VendorNumber.Length > 35)
                error.AppendLine("Value for CustomerReturnOrderHeadDoc.VendorNumber too long, max 35 chars");

            if (p.VendorNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerReturnOrderHeadDoc.VendorNumber not allowed");

            (fStmt.Parameters["VendorNumber"] as IDbDataParameter).Value = p.VendorNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerReturnOrderHeadDoc.VendorNumber not allowed");


        if (p.WarehouseIdentity != null)
        {
            if (p.WarehouseIdentity.Length > 4)
                error.AppendLine("Value for CustomerReturnOrderHeadDoc.WarehouseIdentity too long, max 4 chars");

            if (p.WarehouseIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerReturnOrderHeadDoc.WarehouseIdentity not allowed");

            (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = p.WarehouseIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerReturnOrderHeadDoc.WarehouseIdentity not allowed");


        if (p.WarehouseReceiveArea != null)
        {
            if (p.WarehouseReceiveArea.Length > 3)
                error.AppendLine("Value for CustomerReturnOrderHeadDoc.WarehouseReceiveArea too long, max 3 chars");

            (fStmt.Parameters["WarehouseReceiveArea"] as IDbDataParameter).Value = p.WarehouseReceiveArea;
        }
        else
            (fStmt.Parameters["WarehouseReceiveArea"] as IDbDataParameter).Value = DBNull.Value;

        if (p.WarehouseDock != null)
        {
            if (p.WarehouseDock.Length > 5)
                error.AppendLine("Value for CustomerReturnOrderHeadDoc.WarehouseDock too long, max 5 chars");

            (fStmt.Parameters["WarehouseDock"] as IDbDataParameter).Value = p.WarehouseDock;
        }
        else
            (fStmt.Parameters["WarehouseDock"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Instructions != null)
        {
            if (p.Instructions.Length > 400)
                error.AppendLine("Value for CustomerReturnOrderHeadDoc.Instructions too long, max 400 chars");

            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = p.Instructions;
        }
        else
            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Division != null)
        {
            if (p.Division.Length > 17)
                error.AppendLine("Value for CustomerReturnOrderHeadDoc.Division too long, max 17 chars");

            (fStmt.Parameters["Division"] as IDbDataParameter).Value = p.Division;
        }
        else
            (fStmt.Parameters["Division"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveryWindowFirst != null)
        {
            (fStmt.Parameters["DeliveryWindowFirst"] as IDbDataParameter).Value = p.DeliveryWindowFirst;
        }
        else
            (fStmt.Parameters["DeliveryWindowFirst"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveryWindowLast != null)
        {
            (fStmt.Parameters["DeliveryWindowLast"] as IDbDataParameter).Value = p.DeliveryWindowLast;
        }
        else
            (fStmt.Parameters["DeliveryWindowLast"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

        if (p.aCustomerReturnOrderLineDocs != null)
            foreach (CustomerReturnOrderLineDoc c in p.aCustomerReturnOrderLineDocs)
                aCustomerReturnOrderLineInsert.Process(ref trans, this, c);
      }
  }

  public class CustomerReturnOrderLineInsert : SegmentImpl
  {

    public CustomerReturnOrderLineInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_CUS_RET_ORD_LINE ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",CustomerReturnOrderNumber");
        s.Append(",CustomerReturnOrderSequence");
        s.Append(",CustomerReturnOrderLinePos");
        s.Append(",CustomerReturnOrderLineKitPos");
        s.Append(",CustomerReturnOrderLineSeq");
        s.Append(",OwnerIdentity");
        s.Append(",ProductNumber");
        s.Append(",ProductDescription");
        s.Append(",VendorProductNumber");
        s.Append(",ScheduledArrivalDateTime");
        s.Append(",PackageIdentity");
        s.Append(",CustomerReturnQuantity");
        s.Append(",MarketingLotIdentity");
        s.Append(",CustomerReturnPrice");
        s.Append(",InventoryStatusCode");
        s.Append(",InventoryStatusDays");
        s.Append(",Instructions");
        s.Append(",OriginalOrderIdentity");
        s.Append(",OriginalOrderLinePosition");
        s.Append(",OriginalCustomerReference");
        s.Append(",ShipToCustomerQualifier");
        s.Append(",ShipToCustomerIdentity");
        s.Append(",SellToCustomerQualifier");
        s.Append(",SellToCustomerIdentity");
        s.Append(",ActionCode");
        s.Append(",ReasonCode");
        s.Append(",FromPartyId");
        s.Append(",FromPartyQualifier");
        s.Append(",ShipToVendorIdentity");
        s.Append(",ShipToVendorQualifier");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderLinePosition");
        s.Append(",CustomerOrderLineSequence");
        s.Append(",ActionCodeRequirement");
        s.Append(",QuantityUpperTolerance");
        s.Append(",CatchMeasureLowerTolerance");
        s.Append(",CatchMeasureUpperTolerance");
        s.Append(",ProductionLotIdentity");
        s.Append(",ProductionSubLotIdentity");
        s.Append(",Measure");
        s.Append(",MeasureQualifier");
        s.Append(",ReserveForAssembly");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:CustomerReturnOrderNumber");
        s.Append(",:CustomerReturnOrderSequence");
        s.Append(",:CustomerReturnOrderLinePos");
        s.Append(",:CustomerReturnOrderLineKitPos");
        s.Append(",:CustomerReturnOrderLineSeq");
        s.Append(",:OwnerIdentity");
        s.Append(",:ProductNumber");
        s.Append(",:ProductDescription");
        s.Append(",:VendorProductNumber");
        s.Append(",:ScheduledArrivalDateTime");
        s.Append(",:PackageIdentity");
        s.Append(",:CustomerReturnQuantity");
        s.Append(",:MarketingLotIdentity");
        s.Append(",:CustomerReturnPrice");
        s.Append(",:InventoryStatusCode");
        s.Append(",:InventoryStatusDays");
        s.Append(",:Instructions");
        s.Append(",:OriginalOrderIdentity");
        s.Append(",:OriginalOrderLinePosition");
        s.Append(",:OriginalCustomerReference");
        s.Append(",:ShipToCustomerQualifier");
        s.Append(",:ShipToCustomerIdentity");
        s.Append(",:SellToCustomerQualifier");
        s.Append(",:SellToCustomerIdentity");
        s.Append(",:ActionCode");
        s.Append(",:ReasonCode");
        s.Append(",:FromPartyId");
        s.Append(",:FromPartyQualifier");
        s.Append(",:ShipToVendorIdentity");
        s.Append(",:ShipToVendorQualifier");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderLinePosition");
        s.Append(",:CustomerOrderLineSequence");
        s.Append(",:ActionCodeRequirement");
        s.Append(",:QuantityUpperTolerance");
        s.Append(",:CatchMeasureLowerTolerance");
        s.Append(",:CatchMeasureUpperTolerance");
        s.Append(",:ProductionLotIdentity");
        s.Append(",:ProductionSubLotIdentity");
        s.Append(",:Measure");
        s.Append(",:MeasureQualifier");
        s.Append(",:ReserveForAssembly");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("CustomerReturnOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLinePos", 5, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineKitPos", 2, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineSeq", 3, 0));
        fStmt.Parameters.Add(StringParam("OwnerIdentity", 35));
        fStmt.Parameters.Add(StringParam("ProductNumber", 35));
        fStmt.Parameters.Add(StringParam("ProductDescription", 256));
        fStmt.Parameters.Add(StringParam("VendorProductNumber", 35));
        fStmt.Parameters.Add(DateParam("ScheduledArrivalDateTime"));
        fStmt.Parameters.Add(StringParam("PackageIdentity", 17));
        fStmt.Parameters.Add(NumberParam("CustomerReturnQuantity", 20, 6));
        fStmt.Parameters.Add(StringParam("MarketingLotIdentity", 20));
        fStmt.Parameters.Add(NumberParam("CustomerReturnPrice", 22, 7));
        fStmt.Parameters.Add(StringParam("InventoryStatusCode", 8));
        fStmt.Parameters.Add(NumberParam("InventoryStatusDays", 5, 0));
        fStmt.Parameters.Add(StringParam("Instructions", 400));
        fStmt.Parameters.Add(StringParam("OriginalOrderIdentity", 35));
        fStmt.Parameters.Add(NumberParam("OriginalOrderLinePosition", 16, 0));
        fStmt.Parameters.Add(StringParam("OriginalCustomerReference", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomerQualifier", 3));
        fStmt.Parameters.Add(StringParam("ShipToCustomerIdentity", 35));
        fStmt.Parameters.Add(StringParam("SellToCustomerQualifier", 3));
        fStmt.Parameters.Add(StringParam("SellToCustomerIdentity", 35));
        fStmt.Parameters.Add(StringParam("ActionCode", 2));
        fStmt.Parameters.Add(StringParam("ReasonCode", 2));
        fStmt.Parameters.Add(StringParam("FromPartyId", 35));
        fStmt.Parameters.Add(StringParam("FromPartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("ShipToVendorIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToVendorQualifier", 3));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLinePosition", 5, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("ActionCodeRequirement", 1));
        fStmt.Parameters.Add(NumberParam("QuantityUpperTolerance", 20, 6));
        fStmt.Parameters.Add(NumberParam("CatchMeasureLowerTolerance", 20, 6));
        fStmt.Parameters.Add(NumberParam("CatchMeasureUpperTolerance", 20, 6));
        fStmt.Parameters.Add(StringParam("ProductionLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("ProductionSubLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("Measure", 1));
        fStmt.Parameters.Add(StringParam("MeasureQualifier", 4));
        fStmt.Parameters.Add(StringParam("ReserveForAssembly", 1));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, CustomerReturnOrderLineDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "2");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.CustomerReturnOrderNumber != null)
        {
            if (p.CustomerReturnOrderNumber.Length > 35)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.CustomerReturnOrderNumber too long, max 35 chars");

            if (p.CustomerReturnOrderNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerReturnOrderLineDoc.CustomerReturnOrderNumber not allowed");

            (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = p.CustomerReturnOrderNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerReturnOrderLineDoc.CustomerReturnOrderNumber not allowed");


        if (p.CustomerReturnOrderSequence != null)
        {
            (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = p.CustomerReturnOrderSequence;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerReturnOrderLineDoc.CustomerReturnOrderSequence not allowed");


        if (p.CustomerReturnOrderLinePos != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = p.CustomerReturnOrderLinePos;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerReturnOrderLineDoc.CustomerReturnOrderLinePos not allowed");


        if (p.CustomerReturnOrderLineKitPos != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = p.CustomerReturnOrderLineKitPos;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerReturnOrderLineDoc.CustomerReturnOrderLineKitPos not allowed");


        if (p.CustomerReturnOrderLineSeq != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = p.CustomerReturnOrderLineSeq;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerReturnOrderLineDoc.CustomerReturnOrderLineSeq not allowed");


        if (p.OwnerIdentity != null)
        {
            if (p.OwnerIdentity.Length > 35)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.OwnerIdentity too long, max 35 chars");

            if (p.OwnerIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerReturnOrderLineDoc.OwnerIdentity not allowed");

            (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = p.OwnerIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerReturnOrderLineDoc.OwnerIdentity not allowed");


        if (p.ProductNumber != null)
        {
            if (p.ProductNumber.Length > 35)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.ProductNumber too long, max 35 chars");

            if (p.ProductNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerReturnOrderLineDoc.ProductNumber not allowed");

            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerReturnOrderLineDoc.ProductNumber not allowed");


        if (p.ProductDescription != null)
        {
            if (p.ProductDescription.Length > 256)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.ProductDescription too long, max 256 chars");

            (fStmt.Parameters["ProductDescription"] as IDbDataParameter).Value = p.ProductDescription;
        }
        else
            (fStmt.Parameters["ProductDescription"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VendorProductNumber != null)
        {
            if (p.VendorProductNumber.Length > 35)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.VendorProductNumber too long, max 35 chars");

            (fStmt.Parameters["VendorProductNumber"] as IDbDataParameter).Value = p.VendorProductNumber;
        }
        else
            (fStmt.Parameters["VendorProductNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ScheduledArrivalDateTime != null)
        {
            (fStmt.Parameters["ScheduledArrivalDateTime"] as IDbDataParameter).Value = p.ScheduledArrivalDateTime;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerReturnOrderLineDoc.ScheduledArrivalDateTime not allowed");


        if (p.PackageIdentity != null)
        {
            if (p.PackageIdentity.Length > 17)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.PackageIdentity too long, max 17 chars");

            if (p.PackageIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerReturnOrderLineDoc.PackageIdentity not allowed");

            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerReturnOrderLineDoc.PackageIdentity not allowed");


        if (p.CustomerReturnQuantity != null)
        {
            (fStmt.Parameters["CustomerReturnQuantity"] as IDbDataParameter).Value = p.CustomerReturnQuantity;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerReturnOrderLineDoc.CustomerReturnQuantity not allowed");


        if (p.MarketingLotIdentity != null)
        {
            if (p.MarketingLotIdentity.Length > 20)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.MarketingLotIdentity too long, max 20 chars");

            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = p.MarketingLotIdentity;
        }
        else
            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnPrice != null)
        {
            (fStmt.Parameters["CustomerReturnPrice"] as IDbDataParameter).Value = p.CustomerReturnPrice;
        }
        else
            (fStmt.Parameters["CustomerReturnPrice"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventoryStatusCode != null)
        {
            if (p.InventoryStatusCode.Length > 8)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.InventoryStatusCode too long, max 8 chars");

            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = p.InventoryStatusCode;
        }
        else
            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventoryStatusDays != null)
        {
            (fStmt.Parameters["InventoryStatusDays"] as IDbDataParameter).Value = p.InventoryStatusDays;
        }
        else
            (fStmt.Parameters["InventoryStatusDays"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Instructions != null)
        {
            if (p.Instructions.Length > 400)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.Instructions too long, max 400 chars");

            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = p.Instructions;
        }
        else
            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OriginalOrderIdentity != null)
        {
            if (p.OriginalOrderIdentity.Length > 35)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.OriginalOrderIdentity too long, max 35 chars");

            (fStmt.Parameters["OriginalOrderIdentity"] as IDbDataParameter).Value = p.OriginalOrderIdentity;
        }
        else
            (fStmt.Parameters["OriginalOrderIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OriginalOrderLinePosition != null)
        {
            (fStmt.Parameters["OriginalOrderLinePosition"] as IDbDataParameter).Value = p.OriginalOrderLinePosition;
        }
        else
            (fStmt.Parameters["OriginalOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OriginalCustomerReference != null)
        {
            if (p.OriginalCustomerReference.Length > 35)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.OriginalCustomerReference too long, max 35 chars");

            (fStmt.Parameters["OriginalCustomerReference"] as IDbDataParameter).Value = p.OriginalCustomerReference;
        }
        else
            (fStmt.Parameters["OriginalCustomerReference"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomerQualifier != null)
        {
            if (p.ShipToCustomerQualifier.Length > 3)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.ShipToCustomerQualifier too long, max 3 chars");

            (fStmt.Parameters["ShipToCustomerQualifier"] as IDbDataParameter).Value = p.ShipToCustomerQualifier;
        }
        else
            (fStmt.Parameters["ShipToCustomerQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomerIdentity != null)
        {
            if (p.ShipToCustomerIdentity.Length > 35)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.ShipToCustomerIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToCustomerIdentity"] as IDbDataParameter).Value = p.ShipToCustomerIdentity;
        }
        else
            (fStmt.Parameters["ShipToCustomerIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SellToCustomerQualifier != null)
        {
            if (p.SellToCustomerQualifier.Length > 3)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.SellToCustomerQualifier too long, max 3 chars");

            (fStmt.Parameters["SellToCustomerQualifier"] as IDbDataParameter).Value = p.SellToCustomerQualifier;
        }
        else
            (fStmt.Parameters["SellToCustomerQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SellToCustomerIdentity != null)
        {
            if (p.SellToCustomerIdentity.Length > 35)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.SellToCustomerIdentity too long, max 35 chars");

            (fStmt.Parameters["SellToCustomerIdentity"] as IDbDataParameter).Value = p.SellToCustomerIdentity;
        }
        else
            (fStmt.Parameters["SellToCustomerIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ActionCode != null)
        {
            if (p.ActionCode.Length > 2)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.ActionCode too long, max 2 chars");

            (fStmt.Parameters["ActionCode"] as IDbDataParameter).Value = p.ActionCode;
        }
        else
            (fStmt.Parameters["ActionCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReasonCode != null)
        {
            if (p.ReasonCode.Length > 2)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.ReasonCode too long, max 2 chars");

            (fStmt.Parameters["ReasonCode"] as IDbDataParameter).Value = p.ReasonCode;
        }
        else
            (fStmt.Parameters["ReasonCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FromPartyId != null)
        {
            if (p.FromPartyId.Length > 35)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.FromPartyId too long, max 35 chars");

            (fStmt.Parameters["FromPartyId"] as IDbDataParameter).Value = p.FromPartyId;
        }
        else
            (fStmt.Parameters["FromPartyId"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FromPartyQualifier != null)
        {
            if (p.FromPartyQualifier.Length > 3)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.FromPartyQualifier too long, max 3 chars");

            (fStmt.Parameters["FromPartyQualifier"] as IDbDataParameter).Value = p.FromPartyQualifier;
        }
        else
            (fStmt.Parameters["FromPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToVendorIdentity != null)
        {
            if (p.ShipToVendorIdentity.Length > 35)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.ShipToVendorIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToVendorIdentity"] as IDbDataParameter).Value = p.ShipToVendorIdentity;
        }
        else
            (fStmt.Parameters["ShipToVendorIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToVendorQualifier != null)
        {
            if (p.ShipToVendorQualifier.Length > 3)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.ShipToVendorQualifier too long, max 3 chars");

            (fStmt.Parameters["ShipToVendorQualifier"] as IDbDataParameter).Value = p.ShipToVendorQualifier;
        }
        else
            (fStmt.Parameters["ShipToVendorQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.CustomerOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLinePosition != null)
        {
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = p.CustomerOrderLinePosition;
        }
        else
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLineSequence != null)
        {
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = p.CustomerOrderLineSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ActionCodeRequirement != null)
        {
            if (p.ActionCodeRequirement.Length > 1)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.ActionCodeRequirement too long, max 1 chars");

            (fStmt.Parameters["ActionCodeRequirement"] as IDbDataParameter).Value = p.ActionCodeRequirement;
        }
        else
            (fStmt.Parameters["ActionCodeRequirement"] as IDbDataParameter).Value = DBNull.Value;

        if (p.QuantityUpperTolerance != null)
        {
            (fStmt.Parameters["QuantityUpperTolerance"] as IDbDataParameter).Value = p.QuantityUpperTolerance;
        }
        else
            (fStmt.Parameters["QuantityUpperTolerance"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CatchMeasureLowerTolerance != null)
        {
            (fStmt.Parameters["CatchMeasureLowerTolerance"] as IDbDataParameter).Value = p.CatchMeasureLowerTolerance;
        }
        else
            (fStmt.Parameters["CatchMeasureLowerTolerance"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CatchMeasureUpperTolerance != null)
        {
            (fStmt.Parameters["CatchMeasureUpperTolerance"] as IDbDataParameter).Value = p.CatchMeasureUpperTolerance;
        }
        else
            (fStmt.Parameters["CatchMeasureUpperTolerance"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionLotIdentity != null)
        {
            if (p.ProductionLotIdentity.Length > 40)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.ProductionLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = p.ProductionLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionSubLotIdentity != null)
        {
            if (p.ProductionSubLotIdentity.Length > 40)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.ProductionSubLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = p.ProductionSubLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Measure != null)
        {
            if (p.Measure.Length > 1)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.Measure too long, max 1 chars");

            (fStmt.Parameters["Measure"] as IDbDataParameter).Value = p.Measure;
        }
        else
            (fStmt.Parameters["Measure"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MeasureQualifier != null)
        {
            if (p.MeasureQualifier.Length > 4)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.MeasureQualifier too long, max 4 chars");

            (fStmt.Parameters["MeasureQualifier"] as IDbDataParameter).Value = p.MeasureQualifier;
        }
        else
            (fStmt.Parameters["MeasureQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReserveForAssembly != null)
        {
            if (p.ReserveForAssembly.Length > 1)
                error.AppendLine("Value for CustomerReturnOrderLineDoc.ReserveForAssembly too long, max 1 chars");

            (fStmt.Parameters["ReserveForAssembly"] as IDbDataParameter).Value = p.ReserveForAssembly;
        }
        else
            (fStmt.Parameters["ReserveForAssembly"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class StocktakingOrderInsert : SegmentImpl
  {

    public StocktakingOrderInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_STOCKTAKING_ORDER ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",WarehouseIdentity");
        s.Append(",ClientIdentity");
        s.Append(",ProductNumber");
        s.Append(",ChangeDate");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:WarehouseIdentity");
        s.Append(",:ClientIdentity");
        s.Append(",:ProductNumber");
        s.Append(",:ChangeDate");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("WarehouseIdentity", 4));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("ProductNumber", 35));
        fStmt.Parameters.Add(DateParam("ChangeDate"));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, StocktakingOrderDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for StocktakingOrderDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        if (p.WarehouseIdentity != null)
        {
            if (p.WarehouseIdentity.Length > 4)
                error.AppendLine("Value for StocktakingOrderDoc.WarehouseIdentity too long, max 4 chars");

            if (p.WarehouseIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter StocktakingOrderDoc.WarehouseIdentity not allowed");

            (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = p.WarehouseIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter StocktakingOrderDoc.WarehouseIdentity not allowed");


        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.ProductNumber != null)
        {
            if (p.ProductNumber.Length > 35)
                error.AppendLine("Value for StocktakingOrderDoc.ProductNumber too long, max 35 chars");

            if (p.ProductNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter StocktakingOrderDoc.ProductNumber not allowed");

            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter StocktakingOrderDoc.ProductNumber not allowed");


        if (p.ChangeDate != null)
        {
            (fStmt.Parameters["ChangeDate"] as IDbDataParameter).Value = p.ChangeDate;
        }
        else
            (fStmt.Parameters["ChangeDate"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class PurchaseOrderHeadInsert : SegmentImpl
  {
    private PurchaseOrderHeadTextInsert aPurchaseOrderHeadTextInsert;
    private PurchaseOrderLineInsert aPurchaseOrderLineInsert;

    public PurchaseOrderHeadInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_PURCHASE_ORD_HEAD ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",PurchaseOrderNumber");
        s.Append(",PurchaseOrderSequence");
        s.Append(",PurchaseOrderType");
        s.Append(",ScheduledArrivalDateTime");
        s.Append(",TransportMethod");
        s.Append(",HostStatus");
        s.Append(",VendorNumber");
        s.Append(",WarehouseIdentity");
        s.Append(",Instructions");
        s.Append(",Division");
        s.Append(",DeliveryWindowFirst");
        s.Append(",DeliveryWindowLast");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:PurchaseOrderNumber");
        s.Append(",:PurchaseOrderSequence");
        s.Append(",:PurchaseOrderType");
        s.Append(",:ScheduledArrivalDateTime");
        s.Append(",:TransportMethod");
        s.Append(",:HostStatus");
        s.Append(",:VendorNumber");
        s.Append(",:WarehouseIdentity");
        s.Append(",:Instructions");
        s.Append(",:Division");
        s.Append(",:DeliveryWindowFirst");
        s.Append(",:DeliveryWindowLast");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("PurchaseOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("PurchaseOrderType", 2));
        fStmt.Parameters.Add(DateParam("ScheduledArrivalDateTime"));
        fStmt.Parameters.Add(StringParam("TransportMethod", 17));
        fStmt.Parameters.Add(StringParam("HostStatus", 15));
        fStmt.Parameters.Add(StringParam("VendorNumber", 35));
        fStmt.Parameters.Add(StringParam("WarehouseIdentity", 4));
        fStmt.Parameters.Add(StringParam("Instructions", 400));
        fStmt.Parameters.Add(StringParam("Division", 17));
        fStmt.Parameters.Add(DateParam("DeliveryWindowFirst"));
        fStmt.Parameters.Add(DateParam("DeliveryWindowLast"));

        fStmt.Prepare();

        aPurchaseOrderHeadTextInsert = new PurchaseOrderHeadTextInsert(owner);
        aPurchaseOrderLineInsert = new PurchaseOrderLineInsert(owner);
    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, PurchaseOrderHeadDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "2");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for PurchaseOrderHeadDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.PurchaseOrderNumber != null)
        {
            if (p.PurchaseOrderNumber.Length > 35)
                error.AppendLine("Value for PurchaseOrderHeadDoc.PurchaseOrderNumber too long, max 35 chars");

            if (p.PurchaseOrderNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter PurchaseOrderHeadDoc.PurchaseOrderNumber not allowed");

            (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = p.PurchaseOrderNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter PurchaseOrderHeadDoc.PurchaseOrderNumber not allowed");


        if (p.PurchaseOrderSequence != null)
        {
            (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = p.PurchaseOrderSequence;
        }
        else
            error.AppendLine("Null value for mandatory parameter PurchaseOrderHeadDoc.PurchaseOrderSequence not allowed");


        if (p.PurchaseOrderType != null)
        {
            if (p.PurchaseOrderType.Length > 2)
                error.AppendLine("Value for PurchaseOrderHeadDoc.PurchaseOrderType too long, max 2 chars");

            if (p.PurchaseOrderType.Length == 0)
                error.AppendLine("Zero length for mandatory parameter PurchaseOrderHeadDoc.PurchaseOrderType not allowed");

            (fStmt.Parameters["PurchaseOrderType"] as IDbDataParameter).Value = p.PurchaseOrderType;
        }
        else
            error.AppendLine("Null value for mandatory parameter PurchaseOrderHeadDoc.PurchaseOrderType not allowed");


        if (p.ScheduledArrivalDateTime != null)
        {
            (fStmt.Parameters["ScheduledArrivalDateTime"] as IDbDataParameter).Value = p.ScheduledArrivalDateTime;
        }
        else
            (fStmt.Parameters["ScheduledArrivalDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TransportMethod != null)
        {
            if (p.TransportMethod.Length > 17)
                error.AppendLine("Value for PurchaseOrderHeadDoc.TransportMethod too long, max 17 chars");

            (fStmt.Parameters["TransportMethod"] as IDbDataParameter).Value = p.TransportMethod;
        }
        else
            (fStmt.Parameters["TransportMethod"] as IDbDataParameter).Value = DBNull.Value;

        if (p.HostStatus != null)
        {
            if (p.HostStatus.Length > 15)
                error.AppendLine("Value for PurchaseOrderHeadDoc.HostStatus too long, max 15 chars");

            (fStmt.Parameters["HostStatus"] as IDbDataParameter).Value = p.HostStatus;
        }
        else
            (fStmt.Parameters["HostStatus"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VendorNumber != null)
        {
            if (p.VendorNumber.Length > 35)
                error.AppendLine("Value for PurchaseOrderHeadDoc.VendorNumber too long, max 35 chars");

            if (p.VendorNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter PurchaseOrderHeadDoc.VendorNumber not allowed");

            (fStmt.Parameters["VendorNumber"] as IDbDataParameter).Value = p.VendorNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter PurchaseOrderHeadDoc.VendorNumber not allowed");


        if (p.WarehouseIdentity != null)
        {
            if (p.WarehouseIdentity.Length > 4)
                error.AppendLine("Value for PurchaseOrderHeadDoc.WarehouseIdentity too long, max 4 chars");

            if (p.WarehouseIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter PurchaseOrderHeadDoc.WarehouseIdentity not allowed");

            (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = p.WarehouseIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter PurchaseOrderHeadDoc.WarehouseIdentity not allowed");


        if (p.Instructions != null)
        {
            if (p.Instructions.Length > 400)
                error.AppendLine("Value for PurchaseOrderHeadDoc.Instructions too long, max 400 chars");

            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = p.Instructions;
        }
        else
            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Division != null)
        {
            if (p.Division.Length > 17)
                error.AppendLine("Value for PurchaseOrderHeadDoc.Division too long, max 17 chars");

            (fStmt.Parameters["Division"] as IDbDataParameter).Value = p.Division;
        }
        else
            (fStmt.Parameters["Division"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveryWindowFirst != null)
        {
            (fStmt.Parameters["DeliveryWindowFirst"] as IDbDataParameter).Value = p.DeliveryWindowFirst;
        }
        else
            (fStmt.Parameters["DeliveryWindowFirst"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveryWindowLast != null)
        {
            (fStmt.Parameters["DeliveryWindowLast"] as IDbDataParameter).Value = p.DeliveryWindowLast;
        }
        else
            (fStmt.Parameters["DeliveryWindowLast"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

        if (p.aPurchaseOrderHeadTextDocs != null)
            foreach (PurchaseOrderHeadTextDoc c in p.aPurchaseOrderHeadTextDocs)
                aPurchaseOrderHeadTextInsert.Process(ref trans, this, c);
        if (p.aPurchaseOrderLineDocs != null)
            foreach (PurchaseOrderLineDoc d in p.aPurchaseOrderLineDocs)
                aPurchaseOrderLineInsert.Process(ref trans, this, d);
      }
  }

  public class PurchaseOrderHeadTextInsert : SegmentImpl
  {

    public PurchaseOrderHeadTextInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_PURCHASE_ORD_HEAD_TEXT ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",PurchaseOrderNumber");
        s.Append(",PurchaseOrderSequence");
        s.Append(",TextFunction");
        s.Append(",Text");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:PurchaseOrderNumber");
        s.Append(",:PurchaseOrderSequence");
        s.Append(",:TextFunction");
        s.Append(",:Text");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("PurchaseOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("TextFunction", 3));
        fStmt.Parameters.Add(StringParam("Text", 400));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, PurchaseOrderHeadTextDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for PurchaseOrderHeadTextDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.PurchaseOrderNumber != null)
        {
            if (p.PurchaseOrderNumber.Length > 35)
                error.AppendLine("Value for PurchaseOrderHeadTextDoc.PurchaseOrderNumber too long, max 35 chars");

            if (p.PurchaseOrderNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter PurchaseOrderHeadTextDoc.PurchaseOrderNumber not allowed");

            (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = p.PurchaseOrderNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter PurchaseOrderHeadTextDoc.PurchaseOrderNumber not allowed");


        if (p.PurchaseOrderSequence != null)
        {
            (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = p.PurchaseOrderSequence;
        }
        else
            error.AppendLine("Null value for mandatory parameter PurchaseOrderHeadTextDoc.PurchaseOrderSequence not allowed");


        if (p.TextFunction != null)
        {
            if (p.TextFunction.Length > 3)
                error.AppendLine("Value for PurchaseOrderHeadTextDoc.TextFunction too long, max 3 chars");

            (fStmt.Parameters["TextFunction"] as IDbDataParameter).Value = p.TextFunction;
        }
        else
            (fStmt.Parameters["TextFunction"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Text != null)
        {
            if (p.Text.Length > 400)
                error.AppendLine("Value for PurchaseOrderHeadTextDoc.Text too long, max 400 chars");

            (fStmt.Parameters["Text"] as IDbDataParameter).Value = p.Text;
        }
        else
            (fStmt.Parameters["Text"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class PurchaseOrderLineInsert : SegmentImpl
  {
    private PurchaseOrderLineTextInsert aPurchaseOrderLineTextInsert;

    public PurchaseOrderLineInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_PURCHASE_ORD_LINE ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",PurchaseOrderNumber");
        s.Append(",PurchaseOrderSequence");
        s.Append(",PurchaseOrderLinePosition");
        s.Append(",PurchaseOrderLineSequence");
        s.Append(",OwnerIdentity");
        s.Append(",ProductNumber");
        s.Append(",ProductDescription");
        s.Append(",VendorProductNumber");
        s.Append(",ScheduledArrivalDateTime");
        s.Append(",PackageIdentity");
        s.Append(",PurchaseQuantity");
        s.Append(",ProductionLotIdentity");
        s.Append(",ProductionSubLotIdentity");
        s.Append(",MarketingLotIdentity");
        s.Append(",PurchasePrice");
        s.Append(",ShipToCustomerQualifier");
        s.Append(",ShipToCustomerIdentity");
        s.Append(",ShipToPartyQualifier");
        s.Append(",ShipToPartyIdentity");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderSequence");
        s.Append(",CustomerOrderLinePosition");
        s.Append(",CustomerOrderLineKitPosition");
        s.Append(",CustomerOrderLineSequence");
        s.Append(",InventoryStatusCode");
        s.Append(",InventoryStatusDays");
        s.Append(",Instructions");
        s.Append(",DeliveryWindowFirst");
        s.Append(",DeliveryWindowLast");
        s.Append(",OriginalOrderIdentity");
        s.Append(",OriginalOrderLinePosition");
        s.Append(",OriginalCustomerReference");
        s.Append(",SellToCustomerQualifier");
        s.Append(",SellToCustomerIdentity");
        s.Append(",StorageLotIdentity");
        s.Append(",QuantityUpperTolerance");
        s.Append(",CatchMeasureLowerTolerance");
        s.Append(",CatchMeasureUpperTolerance");
        s.Append(",Measure");
        s.Append(",MeasureQualifier");
        s.Append(",CustomerOrderType");
        s.Append(",ReserveForAssembly");
        s.Append(",CustomsRequirement");
        s.Append(",OriginalCountry");
        s.Append(",ExportingCountry");
        s.Append(",DestinationCountry");
        s.Append(",CarrierTypeContainer");
        s.Append(",GoodsMarking");
        s.Append(",MainModeofTransport");
        s.Append(",CountryMainFreightIdentity");
        s.Append(",FinalModeofTransport");
        s.Append(",CountryFinalFreightIdentity");
        s.Append(",IncomingGoodsNumber");
        s.Append(",TypeofGoods");
        s.Append(",MainFreightIdentity");
        s.Append(",FinalFreightIdentity");
        s.Append(",ProductDate");
        s.Append(",ManufacturingDate");
        s.Append(",ExpiryDate");
        s.Append(",Delta_PurchaseQuantity");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:PurchaseOrderNumber");
        s.Append(",:PurchaseOrderSequence");
        s.Append(",:PurchaseOrderLinePosition");
        s.Append(",:PurchaseOrderLineSequence");
        s.Append(",:OwnerIdentity");
        s.Append(",:ProductNumber");
        s.Append(",:ProductDescription");
        s.Append(",:VendorProductNumber");
        s.Append(",:ScheduledArrivalDateTime");
        s.Append(",:PackageIdentity");
        s.Append(",:PurchaseQuantity");
        s.Append(",:ProductionLotIdentity");
        s.Append(",:ProductionSubLotIdentity");
        s.Append(",:MarketingLotIdentity");
        s.Append(",:PurchasePrice");
        s.Append(",:ShipToCustomerQualifier");
        s.Append(",:ShipToCustomerIdentity");
        s.Append(",:ShipToPartyQualifier");
        s.Append(",:ShipToPartyIdentity");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderSequence");
        s.Append(",:CustomerOrderLinePosition");
        s.Append(",:CustomerOrderLineKitPosition");
        s.Append(",:CustomerOrderLineSequence");
        s.Append(",:InventoryStatusCode");
        s.Append(",:InventoryStatusDays");
        s.Append(",:Instructions");
        s.Append(",:DeliveryWindowFirst");
        s.Append(",:DeliveryWindowLast");
        s.Append(",:OriginalOrderIdentity");
        s.Append(",:OriginalOrderLinePosition");
        s.Append(",:OriginalCustomerReference");
        s.Append(",:SellToCustomerQualifier");
        s.Append(",:SellToCustomerIdentity");
        s.Append(",:StorageLotIdentity");
        s.Append(",:QuantityUpperTolerance");
        s.Append(",:CatchMeasureLowerTolerance");
        s.Append(",:CatchMeasureUpperTolerance");
        s.Append(",:Measure");
        s.Append(",:MeasureQualifier");
        s.Append(",:CustomerOrderType");
        s.Append(",:ReserveForAssembly");
        s.Append(",:CustomsRequirement");
        s.Append(",:OriginalCountry");
        s.Append(",:ExportingCountry");
        s.Append(",:DestinationCountry");
        s.Append(",:CarrierTypeContainer");
        s.Append(",:GoodsMarking");
        s.Append(",:MainModeofTransport");
        s.Append(",:CountryMainFreightIdentity");
        s.Append(",:FinalModeofTransport");
        s.Append(",:CountryFinalFreightIdentity");
        s.Append(",:IncomingGoodsNumber");
        s.Append(",:TypeofGoods");
        s.Append(",:MainFreightIdentity");
        s.Append(",:FinalFreightIdentity");
        s.Append(",:ProductDate");
        s.Append(",:ManufacturingDate");
        s.Append(",:ExpiryDate");
        s.Append(",:Delta_PurchaseQuantity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("PurchaseOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderLinePosition", 4, 0));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderLineSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("OwnerIdentity", 35));
        fStmt.Parameters.Add(StringParam("ProductNumber", 35));
        fStmt.Parameters.Add(StringParam("ProductDescription", 256));
        fStmt.Parameters.Add(StringParam("VendorProductNumber", 35));
        fStmt.Parameters.Add(DateParam("ScheduledArrivalDateTime"));
        fStmt.Parameters.Add(StringParam("PackageIdentity", 17));
        fStmt.Parameters.Add(NumberParam("PurchaseQuantity", 20, 6));
        fStmt.Parameters.Add(StringParam("ProductionLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("ProductionSubLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("MarketingLotIdentity", 20));
        fStmt.Parameters.Add(NumberParam("PurchasePrice", 22, 7));
        fStmt.Parameters.Add(StringParam("ShipToCustomerQualifier", 3));
        fStmt.Parameters.Add(StringParam("ShipToCustomerIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToPartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("ShipToPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLinePosition", 5, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineKitPosition", 2, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("InventoryStatusCode", 8));
        fStmt.Parameters.Add(NumberParam("InventoryStatusDays", 5, 0));
        fStmt.Parameters.Add(StringParam("Instructions", 400));
        fStmt.Parameters.Add(DateParam("DeliveryWindowFirst"));
        fStmt.Parameters.Add(DateParam("DeliveryWindowLast"));
        fStmt.Parameters.Add(StringParam("OriginalOrderIdentity", 35));
        fStmt.Parameters.Add(NumberParam("OriginalOrderLinePosition", 16, 0));
        fStmt.Parameters.Add(StringParam("OriginalCustomerReference", 35));
        fStmt.Parameters.Add(StringParam("SellToCustomerQualifier", 3));
        fStmt.Parameters.Add(StringParam("SellToCustomerIdentity", 35));
        fStmt.Parameters.Add(StringParam("StorageLotIdentity", 20));
        fStmt.Parameters.Add(NumberParam("QuantityUpperTolerance", 20, 6));
        fStmt.Parameters.Add(NumberParam("CatchMeasureLowerTolerance", 20, 6));
        fStmt.Parameters.Add(NumberParam("CatchMeasureUpperTolerance", 20, 6));
        fStmt.Parameters.Add(StringParam("Measure", 1));
        fStmt.Parameters.Add(StringParam("MeasureQualifier", 4));
        fStmt.Parameters.Add(StringParam("CustomerOrderType", 2));
        fStmt.Parameters.Add(StringParam("ReserveForAssembly", 1));
        fStmt.Parameters.Add(StringParam("CustomsRequirement", 1));
        fStmt.Parameters.Add(StringParam("OriginalCountry", 6));
        fStmt.Parameters.Add(StringParam("ExportingCountry", 6));
        fStmt.Parameters.Add(StringParam("DestinationCountry", 6));
        fStmt.Parameters.Add(StringParam("CarrierTypeContainer", 1));
        fStmt.Parameters.Add(StringParam("GoodsMarking", 35));
        fStmt.Parameters.Add(StringParam("MainModeofTransport", 17));
        fStmt.Parameters.Add(StringParam("CountryMainFreightIdentity", 6));
        fStmt.Parameters.Add(StringParam("FinalModeofTransport", 17));
        fStmt.Parameters.Add(StringParam("CountryFinalFreightIdentity", 6));
        fStmt.Parameters.Add(StringParam("IncomingGoodsNumber", 35));
        fStmt.Parameters.Add(StringParam("TypeofGoods", 35));
        fStmt.Parameters.Add(StringParam("MainFreightIdentity", 35));
        fStmt.Parameters.Add(StringParam("FinalFreightIdentity", 35));
        fStmt.Parameters.Add(DateParam("ProductDate"));
        fStmt.Parameters.Add(DateParam("ManufacturingDate"));
        fStmt.Parameters.Add(DateParam("ExpiryDate"));
        fStmt.Parameters.Add(NumberParam("Delta_PurchaseQuantity", 20, 6));

        fStmt.Prepare();

        aPurchaseOrderLineTextInsert = new PurchaseOrderLineTextInsert(owner);
    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, PurchaseOrderLineDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "2");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for PurchaseOrderLineDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.PurchaseOrderNumber != null)
        {
            if (p.PurchaseOrderNumber.Length > 35)
                error.AppendLine("Value for PurchaseOrderLineDoc.PurchaseOrderNumber too long, max 35 chars");

            if (p.PurchaseOrderNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter PurchaseOrderLineDoc.PurchaseOrderNumber not allowed");

            (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = p.PurchaseOrderNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter PurchaseOrderLineDoc.PurchaseOrderNumber not allowed");


        if (p.PurchaseOrderSequence != null)
        {
            (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = p.PurchaseOrderSequence;
        }
        else
            error.AppendLine("Null value for mandatory parameter PurchaseOrderLineDoc.PurchaseOrderSequence not allowed");


        if (p.PurchaseOrderLinePosition != null)
        {
            (fStmt.Parameters["PurchaseOrderLinePosition"] as IDbDataParameter).Value = p.PurchaseOrderLinePosition;
        }
        else
            error.AppendLine("Null value for mandatory parameter PurchaseOrderLineDoc.PurchaseOrderLinePosition not allowed");


        if (p.PurchaseOrderLineSequence != null)
        {
            (fStmt.Parameters["PurchaseOrderLineSequence"] as IDbDataParameter).Value = p.PurchaseOrderLineSequence;
        }
        else
            error.AppendLine("Null value for mandatory parameter PurchaseOrderLineDoc.PurchaseOrderLineSequence not allowed");


        if (p.OwnerIdentity != null)
        {
            if (p.OwnerIdentity.Length > 35)
                error.AppendLine("Value for PurchaseOrderLineDoc.OwnerIdentity too long, max 35 chars");

            if (p.OwnerIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter PurchaseOrderLineDoc.OwnerIdentity not allowed");

            (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = p.OwnerIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter PurchaseOrderLineDoc.OwnerIdentity not allowed");


        if (p.ProductNumber != null)
        {
            if (p.ProductNumber.Length > 35)
                error.AppendLine("Value for PurchaseOrderLineDoc.ProductNumber too long, max 35 chars");

            if (p.ProductNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter PurchaseOrderLineDoc.ProductNumber not allowed");

            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter PurchaseOrderLineDoc.ProductNumber not allowed");


        if (p.ProductDescription != null)
        {
            if (p.ProductDescription.Length > 256)
                error.AppendLine("Value for PurchaseOrderLineDoc.ProductDescription too long, max 256 chars");

            (fStmt.Parameters["ProductDescription"] as IDbDataParameter).Value = p.ProductDescription;
        }
        else
            (fStmt.Parameters["ProductDescription"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VendorProductNumber != null)
        {
            if (p.VendorProductNumber.Length > 35)
                error.AppendLine("Value for PurchaseOrderLineDoc.VendorProductNumber too long, max 35 chars");

            (fStmt.Parameters["VendorProductNumber"] as IDbDataParameter).Value = p.VendorProductNumber;
        }
        else
            (fStmt.Parameters["VendorProductNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ScheduledArrivalDateTime != null)
        {
            (fStmt.Parameters["ScheduledArrivalDateTime"] as IDbDataParameter).Value = p.ScheduledArrivalDateTime;
        }
        else
            error.AppendLine("Null value for mandatory parameter PurchaseOrderLineDoc.ScheduledArrivalDateTime not allowed");


        if (p.PackageIdentity != null)
        {
            if (p.PackageIdentity.Length > 17)
                error.AppendLine("Value for PurchaseOrderLineDoc.PackageIdentity too long, max 17 chars");

            if (p.PackageIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter PurchaseOrderLineDoc.PackageIdentity not allowed");

            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter PurchaseOrderLineDoc.PackageIdentity not allowed");


        if (p.PurchaseQuantity != null)
        {
            (fStmt.Parameters["PurchaseQuantity"] as IDbDataParameter).Value = p.PurchaseQuantity;
        }
        else
            error.AppendLine("Null value for mandatory parameter PurchaseOrderLineDoc.PurchaseQuantity not allowed");


        if (p.ProductionLotIdentity != null)
        {
            if (p.ProductionLotIdentity.Length > 40)
                error.AppendLine("Value for PurchaseOrderLineDoc.ProductionLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = p.ProductionLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionSubLotIdentity != null)
        {
            if (p.ProductionSubLotIdentity.Length > 40)
                error.AppendLine("Value for PurchaseOrderLineDoc.ProductionSubLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = p.ProductionSubLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MarketingLotIdentity != null)
        {
            if (p.MarketingLotIdentity.Length > 20)
                error.AppendLine("Value for PurchaseOrderLineDoc.MarketingLotIdentity too long, max 20 chars");

            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = p.MarketingLotIdentity;
        }
        else
            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchasePrice != null)
        {
            (fStmt.Parameters["PurchasePrice"] as IDbDataParameter).Value = p.PurchasePrice;
        }
        else
            (fStmt.Parameters["PurchasePrice"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomerQualifier != null)
        {
            if (p.ShipToCustomerQualifier.Length > 3)
                error.AppendLine("Value for PurchaseOrderLineDoc.ShipToCustomerQualifier too long, max 3 chars");

            (fStmt.Parameters["ShipToCustomerQualifier"] as IDbDataParameter).Value = p.ShipToCustomerQualifier;
        }
        else
            (fStmt.Parameters["ShipToCustomerQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomerIdentity != null)
        {
            if (p.ShipToCustomerIdentity.Length > 35)
                error.AppendLine("Value for PurchaseOrderLineDoc.ShipToCustomerIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToCustomerIdentity"] as IDbDataParameter).Value = p.ShipToCustomerIdentity;
        }
        else
            (fStmt.Parameters["ShipToCustomerIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyQualifier != null)
        {
            if (p.ShipToPartyQualifier.Length > 3)
                error.AppendLine("Value for PurchaseOrderLineDoc.ShipToPartyQualifier too long, max 3 chars");

            (fStmt.Parameters["ShipToPartyQualifier"] as IDbDataParameter).Value = p.ShipToPartyQualifier;
        }
        else
            (fStmt.Parameters["ShipToPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyIdentity != null)
        {
            if (p.ShipToPartyIdentity.Length > 35)
                error.AppendLine("Value for PurchaseOrderLineDoc.ShipToPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = p.ShipToPartyIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for PurchaseOrderLineDoc.CustomerOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLinePosition != null)
        {
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = p.CustomerOrderLinePosition;
        }
        else
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLineKitPosition != null)
        {
            (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = p.CustomerOrderLineKitPosition;
        }
        else
            (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLineSequence != null)
        {
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = p.CustomerOrderLineSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventoryStatusCode != null)
        {
            if (p.InventoryStatusCode.Length > 8)
                error.AppendLine("Value for PurchaseOrderLineDoc.InventoryStatusCode too long, max 8 chars");

            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = p.InventoryStatusCode;
        }
        else
            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventoryStatusDays != null)
        {
            (fStmt.Parameters["InventoryStatusDays"] as IDbDataParameter).Value = p.InventoryStatusDays;
        }
        else
            (fStmt.Parameters["InventoryStatusDays"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Instructions != null)
        {
            if (p.Instructions.Length > 400)
                error.AppendLine("Value for PurchaseOrderLineDoc.Instructions too long, max 400 chars");

            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = p.Instructions;
        }
        else
            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveryWindowFirst != null)
        {
            (fStmt.Parameters["DeliveryWindowFirst"] as IDbDataParameter).Value = p.DeliveryWindowFirst;
        }
        else
            (fStmt.Parameters["DeliveryWindowFirst"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveryWindowLast != null)
        {
            (fStmt.Parameters["DeliveryWindowLast"] as IDbDataParameter).Value = p.DeliveryWindowLast;
        }
        else
            (fStmt.Parameters["DeliveryWindowLast"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OriginalOrderIdentity != null)
        {
            if (p.OriginalOrderIdentity.Length > 35)
                error.AppendLine("Value for PurchaseOrderLineDoc.OriginalOrderIdentity too long, max 35 chars");

            (fStmt.Parameters["OriginalOrderIdentity"] as IDbDataParameter).Value = p.OriginalOrderIdentity;
        }
        else
            (fStmt.Parameters["OriginalOrderIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OriginalOrderLinePosition != null)
        {
            (fStmt.Parameters["OriginalOrderLinePosition"] as IDbDataParameter).Value = p.OriginalOrderLinePosition;
        }
        else
            (fStmt.Parameters["OriginalOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OriginalCustomerReference != null)
        {
            if (p.OriginalCustomerReference.Length > 35)
                error.AppendLine("Value for PurchaseOrderLineDoc.OriginalCustomerReference too long, max 35 chars");

            (fStmt.Parameters["OriginalCustomerReference"] as IDbDataParameter).Value = p.OriginalCustomerReference;
        }
        else
            (fStmt.Parameters["OriginalCustomerReference"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SellToCustomerQualifier != null)
        {
            if (p.SellToCustomerQualifier.Length > 3)
                error.AppendLine("Value for PurchaseOrderLineDoc.SellToCustomerQualifier too long, max 3 chars");

            (fStmt.Parameters["SellToCustomerQualifier"] as IDbDataParameter).Value = p.SellToCustomerQualifier;
        }
        else
            (fStmt.Parameters["SellToCustomerQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SellToCustomerIdentity != null)
        {
            if (p.SellToCustomerIdentity.Length > 35)
                error.AppendLine("Value for PurchaseOrderLineDoc.SellToCustomerIdentity too long, max 35 chars");

            (fStmt.Parameters["SellToCustomerIdentity"] as IDbDataParameter).Value = p.SellToCustomerIdentity;
        }
        else
            (fStmt.Parameters["SellToCustomerIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.StorageLotIdentity != null)
        {
            if (p.StorageLotIdentity.Length > 20)
                error.AppendLine("Value for PurchaseOrderLineDoc.StorageLotIdentity too long, max 20 chars");

            (fStmt.Parameters["StorageLotIdentity"] as IDbDataParameter).Value = p.StorageLotIdentity;
        }
        else
            (fStmt.Parameters["StorageLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.QuantityUpperTolerance != null)
        {
            (fStmt.Parameters["QuantityUpperTolerance"] as IDbDataParameter).Value = p.QuantityUpperTolerance;
        }
        else
            (fStmt.Parameters["QuantityUpperTolerance"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CatchMeasureLowerTolerance != null)
        {
            (fStmt.Parameters["CatchMeasureLowerTolerance"] as IDbDataParameter).Value = p.CatchMeasureLowerTolerance;
        }
        else
            (fStmt.Parameters["CatchMeasureLowerTolerance"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CatchMeasureUpperTolerance != null)
        {
            (fStmt.Parameters["CatchMeasureUpperTolerance"] as IDbDataParameter).Value = p.CatchMeasureUpperTolerance;
        }
        else
            (fStmt.Parameters["CatchMeasureUpperTolerance"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Measure != null)
        {
            if (p.Measure.Length > 1)
                error.AppendLine("Value for PurchaseOrderLineDoc.Measure too long, max 1 chars");

            (fStmt.Parameters["Measure"] as IDbDataParameter).Value = p.Measure;
        }
        else
            (fStmt.Parameters["Measure"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MeasureQualifier != null)
        {
            if (p.MeasureQualifier.Length > 4)
                error.AppendLine("Value for PurchaseOrderLineDoc.MeasureQualifier too long, max 4 chars");

            (fStmt.Parameters["MeasureQualifier"] as IDbDataParameter).Value = p.MeasureQualifier;
        }
        else
            (fStmt.Parameters["MeasureQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderType != null)
        {
            if (p.CustomerOrderType.Length > 2)
                error.AppendLine("Value for PurchaseOrderLineDoc.CustomerOrderType too long, max 2 chars");

            (fStmt.Parameters["CustomerOrderType"] as IDbDataParameter).Value = p.CustomerOrderType;
        }
        else
            (fStmt.Parameters["CustomerOrderType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReserveForAssembly != null)
        {
            if (p.ReserveForAssembly.Length > 1)
                error.AppendLine("Value for PurchaseOrderLineDoc.ReserveForAssembly too long, max 1 chars");

            (fStmt.Parameters["ReserveForAssembly"] as IDbDataParameter).Value = p.ReserveForAssembly;
        }
        else
            (fStmt.Parameters["ReserveForAssembly"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomsRequirement != null)
        {
            if (p.CustomsRequirement.Length > 1)
                error.AppendLine("Value for PurchaseOrderLineDoc.CustomsRequirement too long, max 1 chars");

            (fStmt.Parameters["CustomsRequirement"] as IDbDataParameter).Value = p.CustomsRequirement;
        }
        else
            (fStmt.Parameters["CustomsRequirement"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OriginalCountry != null)
        {
            if (p.OriginalCountry.Length > 6)
                error.AppendLine("Value for PurchaseOrderLineDoc.OriginalCountry too long, max 6 chars");

            (fStmt.Parameters["OriginalCountry"] as IDbDataParameter).Value = p.OriginalCountry;
        }
        else
            (fStmt.Parameters["OriginalCountry"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ExportingCountry != null)
        {
            if (p.ExportingCountry.Length > 6)
                error.AppendLine("Value for PurchaseOrderLineDoc.ExportingCountry too long, max 6 chars");

            (fStmt.Parameters["ExportingCountry"] as IDbDataParameter).Value = p.ExportingCountry;
        }
        else
            (fStmt.Parameters["ExportingCountry"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DestinationCountry != null)
        {
            if (p.DestinationCountry.Length > 6)
                error.AppendLine("Value for PurchaseOrderLineDoc.DestinationCountry too long, max 6 chars");

            (fStmt.Parameters["DestinationCountry"] as IDbDataParameter).Value = p.DestinationCountry;
        }
        else
            (fStmt.Parameters["DestinationCountry"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CarrierTypeContainer != null)
        {
            if (p.CarrierTypeContainer.Length > 1)
                error.AppendLine("Value for PurchaseOrderLineDoc.CarrierTypeContainer too long, max 1 chars");

            (fStmt.Parameters["CarrierTypeContainer"] as IDbDataParameter).Value = p.CarrierTypeContainer;
        }
        else
            (fStmt.Parameters["CarrierTypeContainer"] as IDbDataParameter).Value = DBNull.Value;

        if (p.GoodsMarking != null)
        {
            if (p.GoodsMarking.Length > 35)
                error.AppendLine("Value for PurchaseOrderLineDoc.GoodsMarking too long, max 35 chars");

            (fStmt.Parameters["GoodsMarking"] as IDbDataParameter).Value = p.GoodsMarking;
        }
        else
            (fStmt.Parameters["GoodsMarking"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MainModeofTransport != null)
        {
            if (p.MainModeofTransport.Length > 17)
                error.AppendLine("Value for PurchaseOrderLineDoc.MainModeofTransport too long, max 17 chars");

            (fStmt.Parameters["MainModeofTransport"] as IDbDataParameter).Value = p.MainModeofTransport;
        }
        else
            (fStmt.Parameters["MainModeofTransport"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CountryMainFreightIdentity != null)
        {
            if (p.CountryMainFreightIdentity.Length > 6)
                error.AppendLine("Value for PurchaseOrderLineDoc.CountryMainFreightIdentity too long, max 6 chars");

            (fStmt.Parameters["CountryMainFreightIdentity"] as IDbDataParameter).Value = p.CountryMainFreightIdentity;
        }
        else
            (fStmt.Parameters["CountryMainFreightIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FinalModeofTransport != null)
        {
            if (p.FinalModeofTransport.Length > 17)
                error.AppendLine("Value for PurchaseOrderLineDoc.FinalModeofTransport too long, max 17 chars");

            (fStmt.Parameters["FinalModeofTransport"] as IDbDataParameter).Value = p.FinalModeofTransport;
        }
        else
            (fStmt.Parameters["FinalModeofTransport"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CountryFinalFreightIdentity != null)
        {
            if (p.CountryFinalFreightIdentity.Length > 6)
                error.AppendLine("Value for PurchaseOrderLineDoc.CountryFinalFreightIdentity too long, max 6 chars");

            (fStmt.Parameters["CountryFinalFreightIdentity"] as IDbDataParameter).Value = p.CountryFinalFreightIdentity;
        }
        else
            (fStmt.Parameters["CountryFinalFreightIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.IncomingGoodsNumber != null)
        {
            if (p.IncomingGoodsNumber.Length > 35)
                error.AppendLine("Value for PurchaseOrderLineDoc.IncomingGoodsNumber too long, max 35 chars");

            (fStmt.Parameters["IncomingGoodsNumber"] as IDbDataParameter).Value = p.IncomingGoodsNumber;
        }
        else
            (fStmt.Parameters["IncomingGoodsNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TypeofGoods != null)
        {
            if (p.TypeofGoods.Length > 35)
                error.AppendLine("Value for PurchaseOrderLineDoc.TypeofGoods too long, max 35 chars");

            (fStmt.Parameters["TypeofGoods"] as IDbDataParameter).Value = p.TypeofGoods;
        }
        else
            (fStmt.Parameters["TypeofGoods"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MainFreightIdentity != null)
        {
            if (p.MainFreightIdentity.Length > 35)
                error.AppendLine("Value for PurchaseOrderLineDoc.MainFreightIdentity too long, max 35 chars");

            (fStmt.Parameters["MainFreightIdentity"] as IDbDataParameter).Value = p.MainFreightIdentity;
        }
        else
            (fStmt.Parameters["MainFreightIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FinalFreightIdentity != null)
        {
            if (p.FinalFreightIdentity.Length > 35)
                error.AppendLine("Value for PurchaseOrderLineDoc.FinalFreightIdentity too long, max 35 chars");

            (fStmt.Parameters["FinalFreightIdentity"] as IDbDataParameter).Value = p.FinalFreightIdentity;
        }
        else
            (fStmt.Parameters["FinalFreightIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductDate != null)
        {
            (fStmt.Parameters["ProductDate"] as IDbDataParameter).Value = p.ProductDate;
        }
        else
            (fStmt.Parameters["ProductDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ManufacturingDate != null)
        {
            (fStmt.Parameters["ManufacturingDate"] as IDbDataParameter).Value = p.ManufacturingDate;
        }
        else
            (fStmt.Parameters["ManufacturingDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ExpiryDate != null)
        {
            (fStmt.Parameters["ExpiryDate"] as IDbDataParameter).Value = p.ExpiryDate;
        }
        else
            (fStmt.Parameters["ExpiryDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Delta_PurchaseQuantity != null)
        {
            (fStmt.Parameters["Delta_PurchaseQuantity"] as IDbDataParameter).Value = p.Delta_PurchaseQuantity;
        }
        else
            (fStmt.Parameters["Delta_PurchaseQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

        if (p.aPurchaseOrderLineTextDocs != null)
            foreach (PurchaseOrderLineTextDoc c in p.aPurchaseOrderLineTextDocs)
                aPurchaseOrderLineTextInsert.Process(ref trans, this, c);
      }
  }

  public class PurchaseOrderLineTextInsert : SegmentImpl
  {

    public PurchaseOrderLineTextInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_PURCHASE_ORD_LINE_TEXT ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",PurchaseOrderNumber");
        s.Append(",PurchaseOrderSequence");
        s.Append(",PurchaseOrderLinePosition");
        s.Append(",PurchaseOrderLineSequence");
        s.Append(",TextFunction");
        s.Append(",Text");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:PurchaseOrderNumber");
        s.Append(",:PurchaseOrderSequence");
        s.Append(",:PurchaseOrderLinePosition");
        s.Append(",:PurchaseOrderLineSequence");
        s.Append(",:TextFunction");
        s.Append(",:Text");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("PurchaseOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderLinePosition", 4, 0));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderLineSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("TextFunction", 3));
        fStmt.Parameters.Add(StringParam("Text", 400));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, PurchaseOrderLineTextDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for PurchaseOrderLineTextDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.PurchaseOrderNumber != null)
        {
            if (p.PurchaseOrderNumber.Length > 35)
                error.AppendLine("Value for PurchaseOrderLineTextDoc.PurchaseOrderNumber too long, max 35 chars");

            if (p.PurchaseOrderNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter PurchaseOrderLineTextDoc.PurchaseOrderNumber not allowed");

            (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = p.PurchaseOrderNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter PurchaseOrderLineTextDoc.PurchaseOrderNumber not allowed");


        if (p.PurchaseOrderSequence != null)
        {
            (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = p.PurchaseOrderSequence;
        }
        else
            error.AppendLine("Null value for mandatory parameter PurchaseOrderLineTextDoc.PurchaseOrderSequence not allowed");


        if (p.PurchaseOrderLinePosition != null)
        {
            (fStmt.Parameters["PurchaseOrderLinePosition"] as IDbDataParameter).Value = p.PurchaseOrderLinePosition;
        }
        else
            error.AppendLine("Null value for mandatory parameter PurchaseOrderLineTextDoc.PurchaseOrderLinePosition not allowed");


        if (p.PurchaseOrderLineSequence != null)
        {
            (fStmt.Parameters["PurchaseOrderLineSequence"] as IDbDataParameter).Value = p.PurchaseOrderLineSequence;
        }
        else
            error.AppendLine("Null value for mandatory parameter PurchaseOrderLineTextDoc.PurchaseOrderLineSequence not allowed");


        if (p.TextFunction != null)
        {
            if (p.TextFunction.Length > 3)
                error.AppendLine("Value for PurchaseOrderLineTextDoc.TextFunction too long, max 3 chars");

            (fStmt.Parameters["TextFunction"] as IDbDataParameter).Value = p.TextFunction;
        }
        else
            (fStmt.Parameters["TextFunction"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Text != null)
        {
            if (p.Text.Length > 400)
                error.AppendLine("Value for PurchaseOrderLineTextDoc.Text too long, max 400 chars");

            (fStmt.Parameters["Text"] as IDbDataParameter).Value = p.Text;
        }
        else
            (fStmt.Parameters["Text"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class CustomerOrderHeadInsert : SegmentImpl
  {
    private CustomerOrderTextInsert aCustomerOrderTextInsert;
    private CustomerOrderLineInsert aCustomerOrderLineInsert;

    public CustomerOrderHeadInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_CUS_ORD_HEAD ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderSequence");
        s.Append(",CustomerOrderType");
        s.Append(",CustomerOrderClass");
        s.Append(",CustomerOrderReference");
        s.Append(",BillToCustomerIdentity");
        s.Append(",SellToCustomerIdentity");
        s.Append(",ShipToCustomerIdentity");
        s.Append(",PickPriority");
        s.Append(",DispatchFee");
        s.Append(",CODFee");
        s.Append(",FreightCost");
        s.Append(",FreightPartyQualifier");
        s.Append(",FreightPartyIdentity");
        s.Append(",Division");
        s.Append(",TermsOfDelivery");
        s.Append(",TermsOfDeliveryLocation");
        s.Append(",CODReference");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderSequence");
        s.Append(",:CustomerOrderType");
        s.Append(",:CustomerOrderClass");
        s.Append(",:CustomerOrderReference");
        s.Append(",:BillToCustomerIdentity");
        s.Append(",:SellToCustomerIdentity");
        s.Append(",:ShipToCustomerIdentity");
        s.Append(",:PickPriority");
        s.Append(",:DispatchFee");
        s.Append(",:CODFee");
        s.Append(",:FreightCost");
        s.Append(",:FreightPartyQualifier");
        s.Append(",:FreightPartyIdentity");
        s.Append(",:Division");
        s.Append(",:TermsOfDelivery");
        s.Append(",:TermsOfDeliveryLocation");
        s.Append(",:CODReference");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("CustomerOrderType", 2));
        fStmt.Parameters.Add(StringParam("CustomerOrderClass", 2));
        fStmt.Parameters.Add(StringParam("CustomerOrderReference", 35));
        fStmt.Parameters.Add(StringParam("BillToCustomerIdentity", 35));
        fStmt.Parameters.Add(StringParam("SellToCustomerIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomerIdentity", 35));
        fStmt.Parameters.Add(NumberParam("PickPriority", 2, 0));
        fStmt.Parameters.Add(NumberParam("DispatchFee", 17, 7));
        fStmt.Parameters.Add(NumberParam("CODFee", 17, 7));
        fStmt.Parameters.Add(NumberParam("FreightCost", 17, 7));
        fStmt.Parameters.Add(StringParam("FreightPartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("FreightPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("Division", 17));
        fStmt.Parameters.Add(StringParam("TermsOfDelivery", 6));
        fStmt.Parameters.Add(StringParam("TermsOfDeliveryLocation", 35));
        fStmt.Parameters.Add(StringParam("CODReference", 35));

        fStmt.Prepare();

        aCustomerOrderTextInsert = new CustomerOrderTextInsert(owner);
        aCustomerOrderLineInsert = new CustomerOrderLineInsert(owner);
    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, CustomerOrderHeadDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for CustomerOrderHeadDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for CustomerOrderHeadDoc.CustomerOrderNumber too long, max 35 chars");

            if (p.CustomerOrderNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerOrderHeadDoc.CustomerOrderNumber not allowed");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderHeadDoc.CustomerOrderNumber not allowed");


        if (p.CustomerOrderSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderHeadDoc.CustomerOrderSequence not allowed");


        if (p.CustomerOrderType != null)
        {
            if (p.CustomerOrderType.Length > 2)
                error.AppendLine("Value for CustomerOrderHeadDoc.CustomerOrderType too long, max 2 chars");

            if (p.CustomerOrderType.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerOrderHeadDoc.CustomerOrderType not allowed");

            (fStmt.Parameters["CustomerOrderType"] as IDbDataParameter).Value = p.CustomerOrderType;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderHeadDoc.CustomerOrderType not allowed");


        if (p.CustomerOrderClass != null)
        {
            if (p.CustomerOrderClass.Length > 2)
                error.AppendLine("Value for CustomerOrderHeadDoc.CustomerOrderClass too long, max 2 chars");

            if (p.CustomerOrderClass.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerOrderHeadDoc.CustomerOrderClass not allowed");

            (fStmt.Parameters["CustomerOrderClass"] as IDbDataParameter).Value = p.CustomerOrderClass;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderHeadDoc.CustomerOrderClass not allowed");


        if (p.CustomerOrderReference != null)
        {
            if (p.CustomerOrderReference.Length > 35)
                error.AppendLine("Value for CustomerOrderHeadDoc.CustomerOrderReference too long, max 35 chars");

            (fStmt.Parameters["CustomerOrderReference"] as IDbDataParameter).Value = p.CustomerOrderReference;
        }
        else
            (fStmt.Parameters["CustomerOrderReference"] as IDbDataParameter).Value = DBNull.Value;

        if (p.BillToCustomerIdentity != null)
        {
            if (p.BillToCustomerIdentity.Length > 35)
                error.AppendLine("Value for CustomerOrderHeadDoc.BillToCustomerIdentity too long, max 35 chars");

            (fStmt.Parameters["BillToCustomerIdentity"] as IDbDataParameter).Value = p.BillToCustomerIdentity;
        }
        else
            (fStmt.Parameters["BillToCustomerIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SellToCustomerIdentity != null)
        {
            if (p.SellToCustomerIdentity.Length > 35)
                error.AppendLine("Value for CustomerOrderHeadDoc.SellToCustomerIdentity too long, max 35 chars");

            if (p.SellToCustomerIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerOrderHeadDoc.SellToCustomerIdentity not allowed");

            (fStmt.Parameters["SellToCustomerIdentity"] as IDbDataParameter).Value = p.SellToCustomerIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderHeadDoc.SellToCustomerIdentity not allowed");


        if (p.ShipToCustomerIdentity != null)
        {
            if (p.ShipToCustomerIdentity.Length > 35)
                error.AppendLine("Value for CustomerOrderHeadDoc.ShipToCustomerIdentity too long, max 35 chars");

            if (p.ShipToCustomerIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerOrderHeadDoc.ShipToCustomerIdentity not allowed");

            (fStmt.Parameters["ShipToCustomerIdentity"] as IDbDataParameter).Value = p.ShipToCustomerIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderHeadDoc.ShipToCustomerIdentity not allowed");


        if (p.PickPriority != null)
        {
            (fStmt.Parameters["PickPriority"] as IDbDataParameter).Value = p.PickPriority;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderHeadDoc.PickPriority not allowed");


        if (p.DispatchFee != null)
        {
            (fStmt.Parameters["DispatchFee"] as IDbDataParameter).Value = p.DispatchFee;
        }
        else
            (fStmt.Parameters["DispatchFee"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CODFee != null)
        {
            (fStmt.Parameters["CODFee"] as IDbDataParameter).Value = p.CODFee;
        }
        else
            (fStmt.Parameters["CODFee"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FreightCost != null)
        {
            (fStmt.Parameters["FreightCost"] as IDbDataParameter).Value = p.FreightCost;
        }
        else
            (fStmt.Parameters["FreightCost"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FreightPartyQualifier != null)
        {
            if (p.FreightPartyQualifier.Length > 3)
                error.AppendLine("Value for CustomerOrderHeadDoc.FreightPartyQualifier too long, max 3 chars");

            (fStmt.Parameters["FreightPartyQualifier"] as IDbDataParameter).Value = p.FreightPartyQualifier;
        }
        else
            (fStmt.Parameters["FreightPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FreightPartyIdentity != null)
        {
            if (p.FreightPartyIdentity.Length > 35)
                error.AppendLine("Value for CustomerOrderHeadDoc.FreightPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["FreightPartyIdentity"] as IDbDataParameter).Value = p.FreightPartyIdentity;
        }
        else
            (fStmt.Parameters["FreightPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Division != null)
        {
            if (p.Division.Length > 17)
                error.AppendLine("Value for CustomerOrderHeadDoc.Division too long, max 17 chars");

            (fStmt.Parameters["Division"] as IDbDataParameter).Value = p.Division;
        }
        else
            (fStmt.Parameters["Division"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TermsOfDelivery != null)
        {
            if (p.TermsOfDelivery.Length > 6)
                error.AppendLine("Value for CustomerOrderHeadDoc.TermsOfDelivery too long, max 6 chars");

            (fStmt.Parameters["TermsOfDelivery"] as IDbDataParameter).Value = p.TermsOfDelivery;
        }
        else
            (fStmt.Parameters["TermsOfDelivery"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TermsOfDeliveryLocation != null)
        {
            if (p.TermsOfDeliveryLocation.Length > 35)
                error.AppendLine("Value for CustomerOrderHeadDoc.TermsOfDeliveryLocation too long, max 35 chars");

            (fStmt.Parameters["TermsOfDeliveryLocation"] as IDbDataParameter).Value = p.TermsOfDeliveryLocation;
        }
        else
            (fStmt.Parameters["TermsOfDeliveryLocation"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CODReference != null)
        {
            if (p.CODReference.Length > 35)
                error.AppendLine("Value for CustomerOrderHeadDoc.CODReference too long, max 35 chars");

            (fStmt.Parameters["CODReference"] as IDbDataParameter).Value = p.CODReference;
        }
        else
            (fStmt.Parameters["CODReference"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

        if (p.aCustomerOrderTextDocs != null)
            foreach (CustomerOrderTextDoc c in p.aCustomerOrderTextDocs)
                aCustomerOrderTextInsert.Process(ref trans, this, c);
        if (p.aCustomerOrderLineDocs != null)
            foreach (CustomerOrderLineDoc d in p.aCustomerOrderLineDocs)
                aCustomerOrderLineInsert.Process(ref trans, this, d);
      }
  }

  public class CustomerOrderTextInsert : SegmentImpl
  {

    public CustomerOrderTextInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_CUS_ORD_HEAD_TEXT ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderSequence");
        s.Append(",TextFunction");
        s.Append(",Text");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderSequence");
        s.Append(",:TextFunction");
        s.Append(",:Text");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("TextFunction", 3));
        fStmt.Parameters.Add(StringParam("Text", 400));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, CustomerOrderTextDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for CustomerOrderTextDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for CustomerOrderTextDoc.CustomerOrderNumber too long, max 35 chars");

            if (p.CustomerOrderNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerOrderTextDoc.CustomerOrderNumber not allowed");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderTextDoc.CustomerOrderNumber not allowed");


        if (p.CustomerOrderSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderTextDoc.CustomerOrderSequence not allowed");


        if (p.TextFunction != null)
        {
            if (p.TextFunction.Length > 3)
                error.AppendLine("Value for CustomerOrderTextDoc.TextFunction too long, max 3 chars");

            (fStmt.Parameters["TextFunction"] as IDbDataParameter).Value = p.TextFunction;
        }
        else
            (fStmt.Parameters["TextFunction"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Text != null)
        {
            if (p.Text.Length > 400)
                error.AppendLine("Value for CustomerOrderTextDoc.Text too long, max 400 chars");

            (fStmt.Parameters["Text"] as IDbDataParameter).Value = p.Text;
        }
        else
            (fStmt.Parameters["Text"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class CustomerOrderLineInsert : SegmentImpl
  {
    private CustomerOrderLineTextInsert aCustomerOrderLineTextInsert;

    public CustomerOrderLineInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_CUS_ORD_LINE ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderSequence");
        s.Append(",CustomerOrderLinePosition");
        s.Append(",CustomerOrderLineKitPosition");
        s.Append(",CustomerOrderLineSequence");
        s.Append(",CustomerOrderLineType");
        s.Append(",Kitproduct");
        s.Append(",ShipToPartyQualifier");
        s.Append(",ShipToPartyIdentity");
        s.Append(",ShipToCustomerSubAddress");
        s.Append(",RequestedShipDate");
        s.Append(",AcknowledgedShipdate");
        s.Append(",RequestedDeliveryDate");
        s.Append(",AcknowledgedDeliveryDate");
        s.Append(",WarehouseIdentity");
        s.Append(",ProductNumber");
        s.Append(",OwnerIdentity");
        s.Append(",ProductionLotRequireMent");
        s.Append(",MarketingLotIdentity");
        s.Append(",StorageLotIdentity");
        s.Append(",PackageIdentity");
        s.Append(",OrderedQuantity");
        s.Append(",OrderedQuantityTolerancePlus");
        s.Append(",OrderedQuantityToleranceMinus");
        s.Append(",KitDetailQuantity");
        s.Append(",RequestedShelfLife");
        s.Append(",ForcePackage");
        s.Append(",SerialNumberHandling");
        s.Append(",SerialNumber");
        s.Append(",VATPercent");
        s.Append(",DeliveryMethod");
        s.Append(",Measure");
        s.Append(",MeasureQualifier");
        s.Append(",SalesPrice");
        s.Append(",LineTotal");
        s.Append(",ShipToCustomerProductNumber");
        s.Append(",PurchaseOrderNumber");
        s.Append(",PurchaseOrderSequence");
        s.Append(",PurchaseOrderLinePosition");
        s.Append(",PurchaseOrderLineSequence");
        s.Append(",OriginalOrderIdentity");
        s.Append(",OriginalOrderLinePosition");
        s.Append(",DepartureLoadIdentity");
        s.Append(",PlanLoad");
        s.Append(",DateSelectionType");
        s.Append(",FirstPlannedDeliveryDtm");
        s.Append(",LastPlannedDeliveryDtm");
        s.Append(",FirstPlannedShipDtm");
        s.Append(",LastPlannedShipDtm");
        s.Append(",OwnerIdentityAtShipToCustomer");
        s.Append(",InventoryStatusCode");
        s.Append(",OrderedQuantityLowerTolerance");
        s.Append(",OrderedQuantityUpperTolerance");
        s.Append(",CatchMeasureLowerTolerance");
        s.Append(",CatchMeasureUpperTolerance");
        s.Append(",ProductionLotIdentity");
        s.Append(",ProductionSubLotIdentity");
        s.Append(",AssembleToStock");
        s.Append(",ReserveForAssembly");
        s.Append(",AllowTransit");
        s.Append(",AllowPartDelivery");
        s.Append(",AdditionalInfo");
        s.Append(",CustomsRequirement");
        s.Append(",ItemLoadIdentity");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderSequence");
        s.Append(",:CustomerOrderLinePosition");
        s.Append(",:CustomerOrderLineKitPosition");
        s.Append(",:CustomerOrderLineSequence");
        s.Append(",:CustomerOrderLineType");
        s.Append(",:Kitproduct");
        s.Append(",:ShipToPartyQualifier");
        s.Append(",:ShipToPartyIdentity");
        s.Append(",:ShipToCustomerSubAddress");
        s.Append(",:RequestedShipDate");
        s.Append(",:AcknowledgedShipdate");
        s.Append(",:RequestedDeliveryDate");
        s.Append(",:AcknowledgedDeliveryDate");
        s.Append(",:WarehouseIdentity");
        s.Append(",:ProductNumber");
        s.Append(",:OwnerIdentity");
        s.Append(",:ProductionLotRequireMent");
        s.Append(",:MarketingLotIdentity");
        s.Append(",:StorageLotIdentity");
        s.Append(",:PackageIdentity");
        s.Append(",:OrderedQuantity");
        s.Append(",:OrderedQuantityTolerancePlus");
        s.Append(",:OrderedQuantityToleranceMinus");
        s.Append(",:KitDetailQuantity");
        s.Append(",:RequestedShelfLife");
        s.Append(",:ForcePackage");
        s.Append(",:SerialNumberHandling");
        s.Append(",:SerialNumber");
        s.Append(",:VATPercent");
        s.Append(",:DeliveryMethod");
        s.Append(",:Measure");
        s.Append(",:MeasureQualifier");
        s.Append(",:SalesPrice");
        s.Append(",:LineTotal");
        s.Append(",:ShipToCustomerProductNumber");
        s.Append(",:PurchaseOrderNumber");
        s.Append(",:PurchaseOrderSequence");
        s.Append(",:PurchaseOrderLinePosition");
        s.Append(",:PurchaseOrderLineSequence");
        s.Append(",:OriginalOrderIdentity");
        s.Append(",:OriginalOrderLinePosition");
        s.Append(",:DepartureLoadIdentity");
        s.Append(",:PlanLoad");
        s.Append(",:DateSelectionType");
        s.Append(",:FirstPlannedDeliveryDtm");
        s.Append(",:LastPlannedDeliveryDtm");
        s.Append(",:FirstPlannedShipDtm");
        s.Append(",:LastPlannedShipDtm");
        s.Append(",:OwnerIdentityAtShipToCustomer");
        s.Append(",:InventoryStatusCode");
        s.Append(",:OrderedQuantityLowerTolerance");
        s.Append(",:OrderedQuantityUpperTolerance");
        s.Append(",:CatchMeasureLowerTolerance");
        s.Append(",:CatchMeasureUpperTolerance");
        s.Append(",:ProductionLotIdentity");
        s.Append(",:ProductionSubLotIdentity");
        s.Append(",:AssembleToStock");
        s.Append(",:ReserveForAssembly");
        s.Append(",:AllowTransit");
        s.Append(",:AllowPartDelivery");
        s.Append(",:AdditionalInfo");
        s.Append(",:CustomsRequirement");
        s.Append(",:ItemLoadIdentity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLinePosition", 5, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineKitPosition", 2, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("CustomerOrderLineType", 1));
        fStmt.Parameters.Add(StringParam("Kitproduct", 1));
        fStmt.Parameters.Add(StringParam("ShipToPartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("ShipToPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomerSubAddress", 17));
        fStmt.Parameters.Add(DateParam("RequestedShipDate"));
        fStmt.Parameters.Add(DateParam("AcknowledgedShipdate"));
        fStmt.Parameters.Add(DateParam("RequestedDeliveryDate"));
        fStmt.Parameters.Add(DateParam("AcknowledgedDeliveryDate"));
        fStmt.Parameters.Add(StringParam("WarehouseIdentity", 4));
        fStmt.Parameters.Add(StringParam("ProductNumber", 35));
        fStmt.Parameters.Add(StringParam("OwnerIdentity", 35));
        fStmt.Parameters.Add(StringParam("ProductionLotRequireMent", 1));
        fStmt.Parameters.Add(StringParam("MarketingLotIdentity", 20));
        fStmt.Parameters.Add(StringParam("StorageLotIdentity", 20));
        fStmt.Parameters.Add(StringParam("PackageIdentity", 17));
        fStmt.Parameters.Add(NumberParam("OrderedQuantity", 20, 6));
        fStmt.Parameters.Add(NumberParam("OrderedQuantityTolerancePlus", 20, 6));
        fStmt.Parameters.Add(NumberParam("OrderedQuantityToleranceMinus", 20, 6));
        fStmt.Parameters.Add(NumberParam("KitDetailQuantity", 20, 6));
        fStmt.Parameters.Add(NumberParam("RequestedShelfLife", 4, 0));
        fStmt.Parameters.Add(StringParam("ForcePackage", 1));
        fStmt.Parameters.Add(StringParam("SerialNumberHandling", 1));
        fStmt.Parameters.Add(StringParam("SerialNumber", 21));
        fStmt.Parameters.Add(NumberParam("VATPercent", 6, 4));
        fStmt.Parameters.Add(StringParam("DeliveryMethod", 17));
        fStmt.Parameters.Add(StringParam("Measure", 1));
        fStmt.Parameters.Add(StringParam("MeasureQualifier", 4));
        fStmt.Parameters.Add(NumberParam("SalesPrice", 17, 7));
        fStmt.Parameters.Add(NumberParam("LineTotal", 17, 7));
        fStmt.Parameters.Add(StringParam("ShipToCustomerProductNumber", 35));
        fStmt.Parameters.Add(StringParam("PurchaseOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderLinePosition", 4, 0));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderLineSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("OriginalOrderIdentity", 35));
        fStmt.Parameters.Add(NumberParam("OriginalOrderLinePosition", 16, 0));
        fStmt.Parameters.Add(StringParam("DepartureLoadIdentity", 35));
        fStmt.Parameters.Add(StringParam("PlanLoad", 1));
        fStmt.Parameters.Add(StringParam("DateSelectionType", 1));
        fStmt.Parameters.Add(DateParam("FirstPlannedDeliveryDtm"));
        fStmt.Parameters.Add(DateParam("LastPlannedDeliveryDtm"));
        fStmt.Parameters.Add(DateParam("FirstPlannedShipDtm"));
        fStmt.Parameters.Add(DateParam("LastPlannedShipDtm"));
        fStmt.Parameters.Add(StringParam("OwnerIdentityAtShipToCustomer", 35));
        fStmt.Parameters.Add(StringParam("InventoryStatusCode", 8));
        fStmt.Parameters.Add(NumberParam("OrderedQuantityLowerTolerance", 20, 6));
        fStmt.Parameters.Add(NumberParam("OrderedQuantityUpperTolerance", 20, 6));
        fStmt.Parameters.Add(NumberParam("CatchMeasureLowerTolerance", 20, 6));
        fStmt.Parameters.Add(NumberParam("CatchMeasureUpperTolerance", 20, 6));
        fStmt.Parameters.Add(StringParam("ProductionLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("ProductionSubLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("AssembleToStock", 1));
        fStmt.Parameters.Add(StringParam("ReserveForAssembly", 1));
        fStmt.Parameters.Add(StringParam("AllowTransit", 1));
        fStmt.Parameters.Add(StringParam("AllowPartDelivery", 1));
        fStmt.Parameters.Add(StringParam("AdditionalInfo", 200));
        fStmt.Parameters.Add(StringParam("CustomsRequirement", 1));
        fStmt.Parameters.Add(StringParam("ItemLoadIdentity", 35));

        fStmt.Prepare();

        aCustomerOrderLineTextInsert = new CustomerOrderLineTextInsert(owner);
    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, CustomerOrderLineDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for CustomerOrderLineDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for CustomerOrderLineDoc.CustomerOrderNumber too long, max 35 chars");

            if (p.CustomerOrderNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerOrderLineDoc.CustomerOrderNumber not allowed");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderLineDoc.CustomerOrderNumber not allowed");


        if (p.CustomerOrderSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderLineDoc.CustomerOrderSequence not allowed");


        if (p.CustomerOrderLinePosition != null)
        {
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = p.CustomerOrderLinePosition;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderLineDoc.CustomerOrderLinePosition not allowed");


        if (p.CustomerOrderLineKitPosition != null)
        {
            (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = p.CustomerOrderLineKitPosition;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderLineDoc.CustomerOrderLineKitPosition not allowed");


        if (p.CustomerOrderLineSequence != null)
        {
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = p.CustomerOrderLineSequence;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderLineDoc.CustomerOrderLineSequence not allowed");


        if (p.CustomerOrderLineType != null)
        {
            if (p.CustomerOrderLineType.Length > 1)
                error.AppendLine("Value for CustomerOrderLineDoc.CustomerOrderLineType too long, max 1 chars");

            if (p.CustomerOrderLineType.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerOrderLineDoc.CustomerOrderLineType not allowed");

            (fStmt.Parameters["CustomerOrderLineType"] as IDbDataParameter).Value = p.CustomerOrderLineType;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderLineDoc.CustomerOrderLineType not allowed");


        if (p.Kitproduct != null)
        {
            if (p.Kitproduct.Length > 1)
                error.AppendLine("Value for CustomerOrderLineDoc.Kitproduct too long, max 1 chars");

            if (p.Kitproduct.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerOrderLineDoc.Kitproduct not allowed");

            (fStmt.Parameters["Kitproduct"] as IDbDataParameter).Value = p.Kitproduct;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderLineDoc.Kitproduct not allowed");


        if (p.ShipToPartyQualifier != null)
        {
            if (p.ShipToPartyQualifier.Length > 3)
                error.AppendLine("Value for CustomerOrderLineDoc.ShipToPartyQualifier too long, max 3 chars");

            if (p.ShipToPartyQualifier.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerOrderLineDoc.ShipToPartyQualifier not allowed");

            (fStmt.Parameters["ShipToPartyQualifier"] as IDbDataParameter).Value = p.ShipToPartyQualifier;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderLineDoc.ShipToPartyQualifier not allowed");


        if (p.ShipToPartyIdentity != null)
        {
            if (p.ShipToPartyIdentity.Length > 35)
                error.AppendLine("Value for CustomerOrderLineDoc.ShipToPartyIdentity too long, max 35 chars");

            if (p.ShipToPartyIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerOrderLineDoc.ShipToPartyIdentity not allowed");

            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = p.ShipToPartyIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderLineDoc.ShipToPartyIdentity not allowed");


        if (p.ShipToCustomerSubAddress != null)
        {
            if (p.ShipToCustomerSubAddress.Length > 17)
                error.AppendLine("Value for CustomerOrderLineDoc.ShipToCustomerSubAddress too long, max 17 chars");

            (fStmt.Parameters["ShipToCustomerSubAddress"] as IDbDataParameter).Value = p.ShipToCustomerSubAddress;
        }
        else
            (fStmt.Parameters["ShipToCustomerSubAddress"] as IDbDataParameter).Value = DBNull.Value;

        if (p.RequestedShipDate != null)
        {
            (fStmt.Parameters["RequestedShipDate"] as IDbDataParameter).Value = p.RequestedShipDate;
        }
        else
            (fStmt.Parameters["RequestedShipDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.AcknowledgedShipdate != null)
        {
            (fStmt.Parameters["AcknowledgedShipdate"] as IDbDataParameter).Value = p.AcknowledgedShipdate;
        }
        else
            (fStmt.Parameters["AcknowledgedShipdate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.RequestedDeliveryDate != null)
        {
            (fStmt.Parameters["RequestedDeliveryDate"] as IDbDataParameter).Value = p.RequestedDeliveryDate;
        }
        else
            (fStmt.Parameters["RequestedDeliveryDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.AcknowledgedDeliveryDate != null)
        {
            (fStmt.Parameters["AcknowledgedDeliveryDate"] as IDbDataParameter).Value = p.AcknowledgedDeliveryDate;
        }
        else
            (fStmt.Parameters["AcknowledgedDeliveryDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.WarehouseIdentity != null)
        {
            if (p.WarehouseIdentity.Length > 4)
                error.AppendLine("Value for CustomerOrderLineDoc.WarehouseIdentity too long, max 4 chars");

            if (p.WarehouseIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerOrderLineDoc.WarehouseIdentity not allowed");

            (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = p.WarehouseIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderLineDoc.WarehouseIdentity not allowed");


        if (p.ProductNumber != null)
        {
            if (p.ProductNumber.Length > 35)
                error.AppendLine("Value for CustomerOrderLineDoc.ProductNumber too long, max 35 chars");

            if (p.ProductNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerOrderLineDoc.ProductNumber not allowed");

            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderLineDoc.ProductNumber not allowed");


        if (p.OwnerIdentity != null)
        {
            if (p.OwnerIdentity.Length > 35)
                error.AppendLine("Value for CustomerOrderLineDoc.OwnerIdentity too long, max 35 chars");

            if (p.OwnerIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerOrderLineDoc.OwnerIdentity not allowed");

            (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = p.OwnerIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderLineDoc.OwnerIdentity not allowed");


        if (p.ProductionLotRequireMent != null)
        {
            if (p.ProductionLotRequireMent.Length > 1)
                error.AppendLine("Value for CustomerOrderLineDoc.ProductionLotRequireMent too long, max 1 chars");

            (fStmt.Parameters["ProductionLotRequireMent"] as IDbDataParameter).Value = p.ProductionLotRequireMent;
        }
        else
            (fStmt.Parameters["ProductionLotRequireMent"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MarketingLotIdentity != null)
        {
            if (p.MarketingLotIdentity.Length > 20)
                error.AppendLine("Value for CustomerOrderLineDoc.MarketingLotIdentity too long, max 20 chars");

            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = p.MarketingLotIdentity;
        }
        else
            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.StorageLotIdentity != null)
        {
            if (p.StorageLotIdentity.Length > 20)
                error.AppendLine("Value for CustomerOrderLineDoc.StorageLotIdentity too long, max 20 chars");

            (fStmt.Parameters["StorageLotIdentity"] as IDbDataParameter).Value = p.StorageLotIdentity;
        }
        else
            (fStmt.Parameters["StorageLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackageIdentity != null)
        {
            if (p.PackageIdentity.Length > 17)
                error.AppendLine("Value for CustomerOrderLineDoc.PackageIdentity too long, max 17 chars");

            if (p.PackageIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerOrderLineDoc.PackageIdentity not allowed");

            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderLineDoc.PackageIdentity not allowed");


        if (p.OrderedQuantity != null)
        {
            (fStmt.Parameters["OrderedQuantity"] as IDbDataParameter).Value = p.OrderedQuantity;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderLineDoc.OrderedQuantity not allowed");


        if (p.OrderedQuantityTolerancePlus != null)
        {
            (fStmt.Parameters["OrderedQuantityTolerancePlus"] as IDbDataParameter).Value = p.OrderedQuantityTolerancePlus;
        }
        else
            (fStmt.Parameters["OrderedQuantityTolerancePlus"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OrderedQuantityToleranceMinus != null)
        {
            (fStmt.Parameters["OrderedQuantityToleranceMinus"] as IDbDataParameter).Value = p.OrderedQuantityToleranceMinus;
        }
        else
            (fStmt.Parameters["OrderedQuantityToleranceMinus"] as IDbDataParameter).Value = DBNull.Value;

        if (p.KitDetailQuantity != null)
        {
            (fStmt.Parameters["KitDetailQuantity"] as IDbDataParameter).Value = p.KitDetailQuantity;
        }
        else
            (fStmt.Parameters["KitDetailQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.RequestedShelfLife != null)
        {
            (fStmt.Parameters["RequestedShelfLife"] as IDbDataParameter).Value = p.RequestedShelfLife;
        }
        else
            (fStmt.Parameters["RequestedShelfLife"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ForcePackage != null)
        {
            if (p.ForcePackage.Length > 1)
                error.AppendLine("Value for CustomerOrderLineDoc.ForcePackage too long, max 1 chars");

            (fStmt.Parameters["ForcePackage"] as IDbDataParameter).Value = p.ForcePackage;
        }
        else
            (fStmt.Parameters["ForcePackage"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SerialNumberHandling != null)
        {
            if (p.SerialNumberHandling.Length > 1)
                error.AppendLine("Value for CustomerOrderLineDoc.SerialNumberHandling too long, max 1 chars");

            (fStmt.Parameters["SerialNumberHandling"] as IDbDataParameter).Value = p.SerialNumberHandling;
        }
        else
            (fStmt.Parameters["SerialNumberHandling"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SerialNumber != null)
        {
            if (p.SerialNumber.Length > 21)
                error.AppendLine("Value for CustomerOrderLineDoc.SerialNumber too long, max 21 chars");

            (fStmt.Parameters["SerialNumber"] as IDbDataParameter).Value = p.SerialNumber;
        }
        else
            (fStmt.Parameters["SerialNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VATPercent != null)
        {
            (fStmt.Parameters["VATPercent"] as IDbDataParameter).Value = p.VATPercent;
        }
        else
            (fStmt.Parameters["VATPercent"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveryMethod != null)
        {
            if (p.DeliveryMethod.Length > 17)
                error.AppendLine("Value for CustomerOrderLineDoc.DeliveryMethod too long, max 17 chars");

            (fStmt.Parameters["DeliveryMethod"] as IDbDataParameter).Value = p.DeliveryMethod;
        }
        else
            (fStmt.Parameters["DeliveryMethod"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Measure != null)
        {
            if (p.Measure.Length > 1)
                error.AppendLine("Value for CustomerOrderLineDoc.Measure too long, max 1 chars");

            (fStmt.Parameters["Measure"] as IDbDataParameter).Value = p.Measure;
        }
        else
            (fStmt.Parameters["Measure"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MeasureQualifier != null)
        {
            if (p.MeasureQualifier.Length > 4)
                error.AppendLine("Value for CustomerOrderLineDoc.MeasureQualifier too long, max 4 chars");

            (fStmt.Parameters["MeasureQualifier"] as IDbDataParameter).Value = p.MeasureQualifier;
        }
        else
            (fStmt.Parameters["MeasureQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SalesPrice != null)
        {
            (fStmt.Parameters["SalesPrice"] as IDbDataParameter).Value = p.SalesPrice;
        }
        else
            (fStmt.Parameters["SalesPrice"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LineTotal != null)
        {
            (fStmt.Parameters["LineTotal"] as IDbDataParameter).Value = p.LineTotal;
        }
        else
            (fStmt.Parameters["LineTotal"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomerProductNumber != null)
        {
            if (p.ShipToCustomerProductNumber.Length > 35)
                error.AppendLine("Value for CustomerOrderLineDoc.ShipToCustomerProductNumber too long, max 35 chars");

            (fStmt.Parameters["ShipToCustomerProductNumber"] as IDbDataParameter).Value = p.ShipToCustomerProductNumber;
        }
        else
            (fStmt.Parameters["ShipToCustomerProductNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderNumber != null)
        {
            if (p.PurchaseOrderNumber.Length > 35)
                error.AppendLine("Value for CustomerOrderLineDoc.PurchaseOrderNumber too long, max 35 chars");

            (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = p.PurchaseOrderNumber;
        }
        else
            (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderSequence != null)
        {
            (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = p.PurchaseOrderSequence;
        }
        else
            (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderLinePosition != null)
        {
            (fStmt.Parameters["PurchaseOrderLinePosition"] as IDbDataParameter).Value = p.PurchaseOrderLinePosition;
        }
        else
            (fStmt.Parameters["PurchaseOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderLineSequence != null)
        {
            (fStmt.Parameters["PurchaseOrderLineSequence"] as IDbDataParameter).Value = p.PurchaseOrderLineSequence;
        }
        else
            (fStmt.Parameters["PurchaseOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OriginalOrderIdentity != null)
        {
            if (p.OriginalOrderIdentity.Length > 35)
                error.AppendLine("Value for CustomerOrderLineDoc.OriginalOrderIdentity too long, max 35 chars");

            (fStmt.Parameters["OriginalOrderIdentity"] as IDbDataParameter).Value = p.OriginalOrderIdentity;
        }
        else
            (fStmt.Parameters["OriginalOrderIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OriginalOrderLinePosition != null)
        {
            (fStmt.Parameters["OriginalOrderLinePosition"] as IDbDataParameter).Value = p.OriginalOrderLinePosition;
        }
        else
            (fStmt.Parameters["OriginalOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DepartureLoadIdentity != null)
        {
            if (p.DepartureLoadIdentity.Length > 35)
                error.AppendLine("Value for CustomerOrderLineDoc.DepartureLoadIdentity too long, max 35 chars");

            (fStmt.Parameters["DepartureLoadIdentity"] as IDbDataParameter).Value = p.DepartureLoadIdentity;
        }
        else
            (fStmt.Parameters["DepartureLoadIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PlanLoad != null)
        {
            if (p.PlanLoad.Length > 1)
                error.AppendLine("Value for CustomerOrderLineDoc.PlanLoad too long, max 1 chars");

            (fStmt.Parameters["PlanLoad"] as IDbDataParameter).Value = p.PlanLoad;
        }
        else
            (fStmt.Parameters["PlanLoad"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DateSelectionType != null)
        {
            if (p.DateSelectionType.Length > 1)
                error.AppendLine("Value for CustomerOrderLineDoc.DateSelectionType too long, max 1 chars");

            (fStmt.Parameters["DateSelectionType"] as IDbDataParameter).Value = p.DateSelectionType;
        }
        else
            (fStmt.Parameters["DateSelectionType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FirstPlannedDeliveryDtm != null)
        {
            (fStmt.Parameters["FirstPlannedDeliveryDtm"] as IDbDataParameter).Value = p.FirstPlannedDeliveryDtm;
        }
        else
            (fStmt.Parameters["FirstPlannedDeliveryDtm"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LastPlannedDeliveryDtm != null)
        {
            (fStmt.Parameters["LastPlannedDeliveryDtm"] as IDbDataParameter).Value = p.LastPlannedDeliveryDtm;
        }
        else
            (fStmt.Parameters["LastPlannedDeliveryDtm"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FirstPlannedShipDtm != null)
        {
            (fStmt.Parameters["FirstPlannedShipDtm"] as IDbDataParameter).Value = p.FirstPlannedShipDtm;
        }
        else
            (fStmt.Parameters["FirstPlannedShipDtm"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LastPlannedShipDtm != null)
        {
            (fStmt.Parameters["LastPlannedShipDtm"] as IDbDataParameter).Value = p.LastPlannedShipDtm;
        }
        else
            (fStmt.Parameters["LastPlannedShipDtm"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OwnerIdentityAtShipToCustomer != null)
        {
            if (p.OwnerIdentityAtShipToCustomer.Length > 35)
                error.AppendLine("Value for CustomerOrderLineDoc.OwnerIdentityAtShipToCustomer too long, max 35 chars");

            (fStmt.Parameters["OwnerIdentityAtShipToCustomer"] as IDbDataParameter).Value = p.OwnerIdentityAtShipToCustomer;
        }
        else
            (fStmt.Parameters["OwnerIdentityAtShipToCustomer"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventoryStatusCode != null)
        {
            if (p.InventoryStatusCode.Length > 8)
                error.AppendLine("Value for CustomerOrderLineDoc.InventoryStatusCode too long, max 8 chars");

            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = p.InventoryStatusCode;
        }
        else
            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OrderedQuantityLowerTolerance != null)
        {
            (fStmt.Parameters["OrderedQuantityLowerTolerance"] as IDbDataParameter).Value = p.OrderedQuantityLowerTolerance;
        }
        else
            (fStmt.Parameters["OrderedQuantityLowerTolerance"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OrderedQuantityUpperTolerance != null)
        {
            (fStmt.Parameters["OrderedQuantityUpperTolerance"] as IDbDataParameter).Value = p.OrderedQuantityUpperTolerance;
        }
        else
            (fStmt.Parameters["OrderedQuantityUpperTolerance"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CatchMeasureLowerTolerance != null)
        {
            (fStmt.Parameters["CatchMeasureLowerTolerance"] as IDbDataParameter).Value = p.CatchMeasureLowerTolerance;
        }
        else
            (fStmt.Parameters["CatchMeasureLowerTolerance"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CatchMeasureUpperTolerance != null)
        {
            (fStmt.Parameters["CatchMeasureUpperTolerance"] as IDbDataParameter).Value = p.CatchMeasureUpperTolerance;
        }
        else
            (fStmt.Parameters["CatchMeasureUpperTolerance"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionLotIdentity != null)
        {
            if (p.ProductionLotIdentity.Length > 40)
                error.AppendLine("Value for CustomerOrderLineDoc.ProductionLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = p.ProductionLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionSubLotIdentity != null)
        {
            if (p.ProductionSubLotIdentity.Length > 40)
                error.AppendLine("Value for CustomerOrderLineDoc.ProductionSubLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = p.ProductionSubLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.AssembleToStock != null)
        {
            if (p.AssembleToStock.Length > 1)
                error.AppendLine("Value for CustomerOrderLineDoc.AssembleToStock too long, max 1 chars");

            (fStmt.Parameters["AssembleToStock"] as IDbDataParameter).Value = p.AssembleToStock;
        }
        else
            (fStmt.Parameters["AssembleToStock"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReserveForAssembly != null)
        {
            if (p.ReserveForAssembly.Length > 1)
                error.AppendLine("Value for CustomerOrderLineDoc.ReserveForAssembly too long, max 1 chars");

            (fStmt.Parameters["ReserveForAssembly"] as IDbDataParameter).Value = p.ReserveForAssembly;
        }
        else
            (fStmt.Parameters["ReserveForAssembly"] as IDbDataParameter).Value = DBNull.Value;

        if (p.AllowTransit != null)
        {
            if (p.AllowTransit.Length > 1)
                error.AppendLine("Value for CustomerOrderLineDoc.AllowTransit too long, max 1 chars");

            (fStmt.Parameters["AllowTransit"] as IDbDataParameter).Value = p.AllowTransit;
        }
        else
            (fStmt.Parameters["AllowTransit"] as IDbDataParameter).Value = DBNull.Value;

        if (p.AllowPartDelivery != null)
        {
            if (p.AllowPartDelivery.Length > 1)
                error.AppendLine("Value for CustomerOrderLineDoc.AllowPartDelivery too long, max 1 chars");

            (fStmt.Parameters["AllowPartDelivery"] as IDbDataParameter).Value = p.AllowPartDelivery;
        }
        else
            (fStmt.Parameters["AllowPartDelivery"] as IDbDataParameter).Value = DBNull.Value;

        if (p.AdditionalInfo != null)
        {
            if (p.AdditionalInfo.Length > 200)
                error.AppendLine("Value for CustomerOrderLineDoc.AdditionalInfo too long, max 200 chars");

            (fStmt.Parameters["AdditionalInfo"] as IDbDataParameter).Value = p.AdditionalInfo;
        }
        else
            (fStmt.Parameters["AdditionalInfo"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomsRequirement != null)
        {
            if (p.CustomsRequirement.Length > 1)
                error.AppendLine("Value for CustomerOrderLineDoc.CustomsRequirement too long, max 1 chars");

            (fStmt.Parameters["CustomsRequirement"] as IDbDataParameter).Value = p.CustomsRequirement;
        }
        else
            (fStmt.Parameters["CustomsRequirement"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ItemLoadIdentity != null)
        {
            if (p.ItemLoadIdentity.Length > 35)
                error.AppendLine("Value for CustomerOrderLineDoc.ItemLoadIdentity too long, max 35 chars");

            (fStmt.Parameters["ItemLoadIdentity"] as IDbDataParameter).Value = p.ItemLoadIdentity;
        }
        else
            (fStmt.Parameters["ItemLoadIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

        if (p.aCustomerOrderLineTextDocs != null)
            foreach (CustomerOrderLineTextDoc c in p.aCustomerOrderLineTextDocs)
                aCustomerOrderLineTextInsert.Process(ref trans, this, c);
      }
  }

  public class CustomerOrderLineTextInsert : SegmentImpl
  {

    public CustomerOrderLineTextInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_CUS_ORD_LINE_TEXT ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderSequence");
        s.Append(",CustomerOrderLinePosition");
        s.Append(",CustomerOrderLineKitPosition");
        s.Append(",CustomerOrderLineSequence");
        s.Append(",TextFunction");
        s.Append(",Text");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderSequence");
        s.Append(",:CustomerOrderLinePosition");
        s.Append(",:CustomerOrderLineKitPosition");
        s.Append(",:CustomerOrderLineSequence");
        s.Append(",:TextFunction");
        s.Append(",:Text");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLinePosition", 5, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineKitPosition", 2, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("TextFunction", 3));
        fStmt.Parameters.Add(StringParam("Text", 400));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, CustomerOrderLineTextDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for CustomerOrderLineTextDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for CustomerOrderLineTextDoc.CustomerOrderNumber too long, max 35 chars");

            if (p.CustomerOrderNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerOrderLineTextDoc.CustomerOrderNumber not allowed");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderLineTextDoc.CustomerOrderNumber not allowed");


        if (p.CustomerOrderSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderLineTextDoc.CustomerOrderSequence not allowed");


        if (p.CustomerOrderLinePosition != null)
        {
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = p.CustomerOrderLinePosition;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderLineTextDoc.CustomerOrderLinePosition not allowed");


        if (p.CustomerOrderLineKitPosition != null)
        {
            (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = p.CustomerOrderLineKitPosition;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderLineTextDoc.CustomerOrderLineKitPosition not allowed");


        if (p.CustomerOrderLineSequence != null)
        {
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = p.CustomerOrderLineSequence;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderLineTextDoc.CustomerOrderLineSequence not allowed");


        if (p.TextFunction != null)
        {
            if (p.TextFunction.Length > 3)
                error.AppendLine("Value for CustomerOrderLineTextDoc.TextFunction too long, max 3 chars");

            if (p.TextFunction.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerOrderLineTextDoc.TextFunction not allowed");

            (fStmt.Parameters["TextFunction"] as IDbDataParameter).Value = p.TextFunction;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerOrderLineTextDoc.TextFunction not allowed");


        if (p.Text != null)
        {
            if (p.Text.Length > 400)
                error.AppendLine("Value for CustomerOrderLineTextDoc.Text too long, max 400 chars");

            (fStmt.Parameters["Text"] as IDbDataParameter).Value = p.Text;
        }
        else
            (fStmt.Parameters["Text"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class PartyInsert : SegmentImpl
  {
    private VendorInsert aVendorInsert;
    private CustomerInsert aCustomerInsert;
    private PartyAddressInsert aPartyAddressInsert;

    public PartyInsert(WSBase owner)
        : base(owner)
    {
        aVendorInsert = new VendorInsert(owner);
        aCustomerInsert = new CustomerInsert(owner);
        aPartyAddressInsert = new PartyAddressInsert(owner);
    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, PartyDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.aVendorDocs != null)
            foreach (VendorDoc c in p.aVendorDocs)
                aVendorInsert.Process(ref trans, this, c);
        if (p.aCustomerDocs != null)
            foreach (CustomerDoc d in p.aCustomerDocs)
                aCustomerInsert.Process(ref trans, this, d);
        if (p.aPartyAddressDocs != null)
            foreach (PartyAddressDoc e in p.aPartyAddressDocs)
                aPartyAddressInsert.Process(ref trans, this, e);
      }
  }

  public class VendorInsert : SegmentImpl
  {

    public VendorInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_VENDOR ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",VendorNumber");
        s.Append(",VendorName");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:VendorNumber");
        s.Append(",:VendorName");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("VendorNumber", 35));
        fStmt.Parameters.Add(StringParam("VendorName", 35));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, VendorDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "2");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for VendorDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.VendorNumber != null)
        {
            if (p.VendorNumber.Length > 35)
                error.AppendLine("Value for VendorDoc.VendorNumber too long, max 35 chars");

            if (p.VendorNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter VendorDoc.VendorNumber not allowed");

            (fStmt.Parameters["VendorNumber"] as IDbDataParameter).Value = p.VendorNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter VendorDoc.VendorNumber not allowed");


        if (p.VendorName != null)
        {
            if (p.VendorName.Length > 35)
                error.AppendLine("Value for VendorDoc.VendorName too long, max 35 chars");

            if (p.VendorName.Length == 0)
                error.AppendLine("Zero length for mandatory parameter VendorDoc.VendorName not allowed");

            (fStmt.Parameters["VendorName"] as IDbDataParameter).Value = p.VendorName;
        }
        else
            error.AppendLine("Null value for mandatory parameter VendorDoc.VendorName not allowed");


        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class CustomerInsert : SegmentImpl
  {

    public CustomerInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_CUSTOMER ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",CustomerNumber");
        s.Append(",CustomerName1");
        s.Append(",CustomerName2");
        s.Append(",CustomerTypeIdentity");
        s.Append(",LoadCarrierGroupIdentity");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:CustomerNumber");
        s.Append(",:CustomerName1");
        s.Append(",:CustomerName2");
        s.Append(",:CustomerTypeIdentity");
        s.Append(",:LoadCarrierGroupIdentity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("CustomerNumber", 35));
        fStmt.Parameters.Add(StringParam("CustomerName1", 35));
        fStmt.Parameters.Add(StringParam("CustomerName2", 35));
        fStmt.Parameters.Add(StringParam("CustomerTypeIdentity", 8));
        fStmt.Parameters.Add(StringParam("LoadCarrierGroupIdentity", 3));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, CustomerDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "2");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for CustomerDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.CustomerNumber != null)
        {
            if (p.CustomerNumber.Length > 35)
                error.AppendLine("Value for CustomerDoc.CustomerNumber too long, max 35 chars");

            if (p.CustomerNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerDoc.CustomerNumber not allowed");

            (fStmt.Parameters["CustomerNumber"] as IDbDataParameter).Value = p.CustomerNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerDoc.CustomerNumber not allowed");


        if (p.CustomerName1 != null)
        {
            if (p.CustomerName1.Length > 35)
                error.AppendLine("Value for CustomerDoc.CustomerName1 too long, max 35 chars");

            if (p.CustomerName1.Length == 0)
                error.AppendLine("Zero length for mandatory parameter CustomerDoc.CustomerName1 not allowed");

            (fStmt.Parameters["CustomerName1"] as IDbDataParameter).Value = p.CustomerName1;
        }
        else
            error.AppendLine("Null value for mandatory parameter CustomerDoc.CustomerName1 not allowed");


        if (p.CustomerName2 != null)
        {
            if (p.CustomerName2.Length > 35)
                error.AppendLine("Value for CustomerDoc.CustomerName2 too long, max 35 chars");

            (fStmt.Parameters["CustomerName2"] as IDbDataParameter).Value = p.CustomerName2;
        }
        else
            (fStmt.Parameters["CustomerName2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerTypeIdentity != null)
        {
            if (p.CustomerTypeIdentity.Length > 8)
                error.AppendLine("Value for CustomerDoc.CustomerTypeIdentity too long, max 8 chars");

            (fStmt.Parameters["CustomerTypeIdentity"] as IDbDataParameter).Value = p.CustomerTypeIdentity;
        }
        else
            (fStmt.Parameters["CustomerTypeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LoadCarrierGroupIdentity != null)
        {
            if (p.LoadCarrierGroupIdentity.Length > 3)
                error.AppendLine("Value for CustomerDoc.LoadCarrierGroupIdentity too long, max 3 chars");

            (fStmt.Parameters["LoadCarrierGroupIdentity"] as IDbDataParameter).Value = p.LoadCarrierGroupIdentity;
        }
        else
            (fStmt.Parameters["LoadCarrierGroupIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class PartyAddressInsert : SegmentImpl
  {

    public PartyAddressInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_PARTY_ADDRESS ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",PartyQualifier");
        s.Append(",PartyIdentity");
        s.Append(",PartyProfile");
        s.Append(",PartyStatus");
        s.Append(",PartyName1");
        s.Append(",PartyName2");
        s.Append(",PartyName3");
        s.Append(",PartyName4");
        s.Append(",PartyName5");
        s.Append(",PartyAddress1");
        s.Append(",PartyAddress2");
        s.Append(",PartyAddress3");
        s.Append(",PartyAddress4");
        s.Append(",ZipCode");
        s.Append(",City");
        s.Append(",Region");
        s.Append(",CountryCode");
        s.Append(",Country");
        s.Append(",GeographicalCode");
        s.Append(",Phone");
        s.Append(",Fax");
        s.Append(",Telex");
        s.Append(",Email");
        s.Append(",PostalGiroAccount");
        s.Append(",BankGiroAccount");
        s.Append(",VATNumber");
        s.Append(",OrganizationNumber");
        s.Append(",Language");
        s.Append(",Division");
        s.Append(",SendASN");
        s.Append(",RcvCheckType");
        s.Append(",FreCustomerId");
        s.Append(",FreCustomerIdEUR");
        s.Append(",CustomsDeclarant");
        s.Append(",CustomsDeclType");
        s.Append(",CustomsClearanceType");
        s.Append(",ExecuteCustomsDecl");
        s.Append(",PayCustomsDecl");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:PartyQualifier");
        s.Append(",:PartyIdentity");
        s.Append(",:PartyProfile");
        s.Append(",:PartyStatus");
        s.Append(",:PartyName1");
        s.Append(",:PartyName2");
        s.Append(",:PartyName3");
        s.Append(",:PartyName4");
        s.Append(",:PartyName5");
        s.Append(",:PartyAddress1");
        s.Append(",:PartyAddress2");
        s.Append(",:PartyAddress3");
        s.Append(",:PartyAddress4");
        s.Append(",:ZipCode");
        s.Append(",:City");
        s.Append(",:Region");
        s.Append(",:CountryCode");
        s.Append(",:Country");
        s.Append(",:GeographicalCode");
        s.Append(",:Phone");
        s.Append(",:Fax");
        s.Append(",:Telex");
        s.Append(",:Email");
        s.Append(",:PostalGiroAccount");
        s.Append(",:BankGiroAccount");
        s.Append(",:VATNumber");
        s.Append(",:OrganizationNumber");
        s.Append(",:Language");
        s.Append(",:Division");
        s.Append(",:SendASN");
        s.Append(",:RcvCheckType");
        s.Append(",:FreCustomerId");
        s.Append(",:FreCustomerIdEUR");
        s.Append(",:CustomsDeclarant");
        s.Append(",:CustomsDeclType");
        s.Append(",:CustomsClearanceType");
        s.Append(",:ExecuteCustomsDecl");
        s.Append(",:PayCustomsDecl");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("PartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("PartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("PartyProfile", 35));
        fStmt.Parameters.Add(StringParam("PartyStatus", 1));
        fStmt.Parameters.Add(StringParam("PartyName1", 35));
        fStmt.Parameters.Add(StringParam("PartyName2", 35));
        fStmt.Parameters.Add(StringParam("PartyName3", 35));
        fStmt.Parameters.Add(StringParam("PartyName4", 35));
        fStmt.Parameters.Add(StringParam("PartyName5", 35));
        fStmt.Parameters.Add(StringParam("PartyAddress1", 35));
        fStmt.Parameters.Add(StringParam("PartyAddress2", 35));
        fStmt.Parameters.Add(StringParam("PartyAddress3", 35));
        fStmt.Parameters.Add(StringParam("PartyAddress4", 35));
        fStmt.Parameters.Add(StringParam("ZipCode", 12));
        fStmt.Parameters.Add(StringParam("City", 35));
        fStmt.Parameters.Add(StringParam("Region", 2));
        fStmt.Parameters.Add(StringParam("CountryCode", 6));
        fStmt.Parameters.Add(StringParam("Country", 35));
        fStmt.Parameters.Add(StringParam("GeographicalCode", 35));
        fStmt.Parameters.Add(StringParam("Phone", 35));
        fStmt.Parameters.Add(StringParam("Fax", 35));
        fStmt.Parameters.Add(StringParam("Telex", 35));
        fStmt.Parameters.Add(StringParam("Email", 50));
        fStmt.Parameters.Add(StringParam("PostalGiroAccount", 17));
        fStmt.Parameters.Add(StringParam("BankGiroAccount", 17));
        fStmt.Parameters.Add(StringParam("VATNumber", 35));
        fStmt.Parameters.Add(StringParam("OrganizationNumber", 35));
        fStmt.Parameters.Add(StringParam("Language", 3));
        fStmt.Parameters.Add(StringParam("Division", 17));
        fStmt.Parameters.Add(StringParam("SendASN", 1));
        fStmt.Parameters.Add(StringParam("RcvCheckType", 3));
        fStmt.Parameters.Add(StringParam("FreCustomerId", 35));
        fStmt.Parameters.Add(StringParam("FreCustomerIdEUR", 35));
        fStmt.Parameters.Add(StringParam("CustomsDeclarant", 35));
        fStmt.Parameters.Add(StringParam("CustomsDeclType", 1));
        fStmt.Parameters.Add(StringParam("CustomsClearanceType", 1));
        fStmt.Parameters.Add(StringParam("ExecuteCustomsDecl", 1));
        fStmt.Parameters.Add(StringParam("PayCustomsDecl", 1));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, PartyAddressDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "2");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for PartyAddressDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.PartyQualifier != null)
        {
            if (p.PartyQualifier.Length > 3)
                error.AppendLine("Value for PartyAddressDoc.PartyQualifier too long, max 3 chars");

            if (p.PartyQualifier.Length == 0)
                error.AppendLine("Zero length for mandatory parameter PartyAddressDoc.PartyQualifier not allowed");

            (fStmt.Parameters["PartyQualifier"] as IDbDataParameter).Value = p.PartyQualifier;
        }
        else
            error.AppendLine("Null value for mandatory parameter PartyAddressDoc.PartyQualifier not allowed");


        if (p.PartyIdentity != null)
        {
            if (p.PartyIdentity.Length > 35)
                error.AppendLine("Value for PartyAddressDoc.PartyIdentity too long, max 35 chars");

            if (p.PartyIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter PartyAddressDoc.PartyIdentity not allowed");

            (fStmt.Parameters["PartyIdentity"] as IDbDataParameter).Value = p.PartyIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter PartyAddressDoc.PartyIdentity not allowed");


        if (p.PartyProfile != null)
        {
            if (p.PartyProfile.Length > 35)
                error.AppendLine("Value for PartyAddressDoc.PartyProfile too long, max 35 chars");

            (fStmt.Parameters["PartyProfile"] as IDbDataParameter).Value = p.PartyProfile;
        }
        else
            (fStmt.Parameters["PartyProfile"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PartyStatus != null)
        {
            if (p.PartyStatus.Length > 1)
                error.AppendLine("Value for PartyAddressDoc.PartyStatus too long, max 1 chars");

            (fStmt.Parameters["PartyStatus"] as IDbDataParameter).Value = p.PartyStatus;
        }
        else
            (fStmt.Parameters["PartyStatus"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PartyName1 != null)
        {
            if (p.PartyName1.Length > 35)
                error.AppendLine("Value for PartyAddressDoc.PartyName1 too long, max 35 chars");

            if (p.PartyName1.Length == 0)
                error.AppendLine("Zero length for mandatory parameter PartyAddressDoc.PartyName1 not allowed");

            (fStmt.Parameters["PartyName1"] as IDbDataParameter).Value = p.PartyName1;
        }
        else
            error.AppendLine("Null value for mandatory parameter PartyAddressDoc.PartyName1 not allowed");


        if (p.PartyName2 != null)
        {
            if (p.PartyName2.Length > 35)
                error.AppendLine("Value for PartyAddressDoc.PartyName2 too long, max 35 chars");

            (fStmt.Parameters["PartyName2"] as IDbDataParameter).Value = p.PartyName2;
        }
        else
            (fStmt.Parameters["PartyName2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PartyName3 != null)
        {
            if (p.PartyName3.Length > 35)
                error.AppendLine("Value for PartyAddressDoc.PartyName3 too long, max 35 chars");

            (fStmt.Parameters["PartyName3"] as IDbDataParameter).Value = p.PartyName3;
        }
        else
            (fStmt.Parameters["PartyName3"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PartyName4 != null)
        {
            if (p.PartyName4.Length > 35)
                error.AppendLine("Value for PartyAddressDoc.PartyName4 too long, max 35 chars");

            (fStmt.Parameters["PartyName4"] as IDbDataParameter).Value = p.PartyName4;
        }
        else
            (fStmt.Parameters["PartyName4"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PartyName5 != null)
        {
            if (p.PartyName5.Length > 35)
                error.AppendLine("Value for PartyAddressDoc.PartyName5 too long, max 35 chars");

            (fStmt.Parameters["PartyName5"] as IDbDataParameter).Value = p.PartyName5;
        }
        else
            (fStmt.Parameters["PartyName5"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PartyAddress1 != null)
        {
            if (p.PartyAddress1.Length > 35)
                error.AppendLine("Value for PartyAddressDoc.PartyAddress1 too long, max 35 chars");

            (fStmt.Parameters["PartyAddress1"] as IDbDataParameter).Value = p.PartyAddress1;
        }
        else
            (fStmt.Parameters["PartyAddress1"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PartyAddress2 != null)
        {
            if (p.PartyAddress2.Length > 35)
                error.AppendLine("Value for PartyAddressDoc.PartyAddress2 too long, max 35 chars");

            (fStmt.Parameters["PartyAddress2"] as IDbDataParameter).Value = p.PartyAddress2;
        }
        else
            (fStmt.Parameters["PartyAddress2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PartyAddress3 != null)
        {
            if (p.PartyAddress3.Length > 35)
                error.AppendLine("Value for PartyAddressDoc.PartyAddress3 too long, max 35 chars");

            (fStmt.Parameters["PartyAddress3"] as IDbDataParameter).Value = p.PartyAddress3;
        }
        else
            (fStmt.Parameters["PartyAddress3"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PartyAddress4 != null)
        {
            if (p.PartyAddress4.Length > 35)
                error.AppendLine("Value for PartyAddressDoc.PartyAddress4 too long, max 35 chars");

            (fStmt.Parameters["PartyAddress4"] as IDbDataParameter).Value = p.PartyAddress4;
        }
        else
            (fStmt.Parameters["PartyAddress4"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ZipCode != null)
        {
            if (p.ZipCode.Length > 12)
                error.AppendLine("Value for PartyAddressDoc.ZipCode too long, max 12 chars");

            (fStmt.Parameters["ZipCode"] as IDbDataParameter).Value = p.ZipCode;
        }
        else
            (fStmt.Parameters["ZipCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.City != null)
        {
            if (p.City.Length > 35)
                error.AppendLine("Value for PartyAddressDoc.City too long, max 35 chars");

            (fStmt.Parameters["City"] as IDbDataParameter).Value = p.City;
        }
        else
            (fStmt.Parameters["City"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Region != null)
        {
            if (p.Region.Length > 2)
                error.AppendLine("Value for PartyAddressDoc.Region too long, max 2 chars");

            (fStmt.Parameters["Region"] as IDbDataParameter).Value = p.Region;
        }
        else
            (fStmt.Parameters["Region"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CountryCode != null)
        {
            if (p.CountryCode.Length > 6)
                error.AppendLine("Value for PartyAddressDoc.CountryCode too long, max 6 chars");

            (fStmt.Parameters["CountryCode"] as IDbDataParameter).Value = p.CountryCode;
        }
        else
            (fStmt.Parameters["CountryCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Country != null)
        {
            if (p.Country.Length > 35)
                error.AppendLine("Value for PartyAddressDoc.Country too long, max 35 chars");

            (fStmt.Parameters["Country"] as IDbDataParameter).Value = p.Country;
        }
        else
            (fStmt.Parameters["Country"] as IDbDataParameter).Value = DBNull.Value;

        if (p.GeographicalCode != null)
        {
            if (p.GeographicalCode.Length > 35)
                error.AppendLine("Value for PartyAddressDoc.GeographicalCode too long, max 35 chars");

            (fStmt.Parameters["GeographicalCode"] as IDbDataParameter).Value = p.GeographicalCode;
        }
        else
            (fStmt.Parameters["GeographicalCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Phone != null)
        {
            if (p.Phone.Length > 35)
                error.AppendLine("Value for PartyAddressDoc.Phone too long, max 35 chars");

            (fStmt.Parameters["Phone"] as IDbDataParameter).Value = p.Phone;
        }
        else
            (fStmt.Parameters["Phone"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fax != null)
        {
            if (p.Fax.Length > 35)
                error.AppendLine("Value for PartyAddressDoc.Fax too long, max 35 chars");

            (fStmt.Parameters["Fax"] as IDbDataParameter).Value = p.Fax;
        }
        else
            (fStmt.Parameters["Fax"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Telex != null)
        {
            if (p.Telex.Length > 35)
                error.AppendLine("Value for PartyAddressDoc.Telex too long, max 35 chars");

            (fStmt.Parameters["Telex"] as IDbDataParameter).Value = p.Telex;
        }
        else
            (fStmt.Parameters["Telex"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Email != null)
        {
            if (p.Email.Length > 50)
                error.AppendLine("Value for PartyAddressDoc.Email too long, max 50 chars");

            (fStmt.Parameters["Email"] as IDbDataParameter).Value = p.Email;
        }
        else
            (fStmt.Parameters["Email"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PostalGiroAccount != null)
        {
            if (p.PostalGiroAccount.Length > 17)
                error.AppendLine("Value for PartyAddressDoc.PostalGiroAccount too long, max 17 chars");

            (fStmt.Parameters["PostalGiroAccount"] as IDbDataParameter).Value = p.PostalGiroAccount;
        }
        else
            (fStmt.Parameters["PostalGiroAccount"] as IDbDataParameter).Value = DBNull.Value;

        if (p.BankGiroAccount != null)
        {
            if (p.BankGiroAccount.Length > 17)
                error.AppendLine("Value for PartyAddressDoc.BankGiroAccount too long, max 17 chars");

            (fStmt.Parameters["BankGiroAccount"] as IDbDataParameter).Value = p.BankGiroAccount;
        }
        else
            (fStmt.Parameters["BankGiroAccount"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VATNumber != null)
        {
            if (p.VATNumber.Length > 35)
                error.AppendLine("Value for PartyAddressDoc.VATNumber too long, max 35 chars");

            (fStmt.Parameters["VATNumber"] as IDbDataParameter).Value = p.VATNumber;
        }
        else
            (fStmt.Parameters["VATNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OrganizationNumber != null)
        {
            if (p.OrganizationNumber.Length > 35)
                error.AppendLine("Value for PartyAddressDoc.OrganizationNumber too long, max 35 chars");

            (fStmt.Parameters["OrganizationNumber"] as IDbDataParameter).Value = p.OrganizationNumber;
        }
        else
            (fStmt.Parameters["OrganizationNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Language != null)
        {
            if (p.Language.Length > 3)
                error.AppendLine("Value for PartyAddressDoc.Language too long, max 3 chars");

            (fStmt.Parameters["Language"] as IDbDataParameter).Value = p.Language;
        }
        else
            (fStmt.Parameters["Language"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Division != null)
        {
            if (p.Division.Length > 17)
                error.AppendLine("Value for PartyAddressDoc.Division too long, max 17 chars");

            (fStmt.Parameters["Division"] as IDbDataParameter).Value = p.Division;
        }
        else
            (fStmt.Parameters["Division"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SendASN != null)
        {
            if (p.SendASN.Length > 1)
                error.AppendLine("Value for PartyAddressDoc.SendASN too long, max 1 chars");

            (fStmt.Parameters["SendASN"] as IDbDataParameter).Value = p.SendASN;
        }
        else
            (fStmt.Parameters["SendASN"] as IDbDataParameter).Value = DBNull.Value;

        if (p.RcvCheckType != null)
        {
            if (p.RcvCheckType.Length > 3)
                error.AppendLine("Value for PartyAddressDoc.RcvCheckType too long, max 3 chars");

            (fStmt.Parameters["RcvCheckType"] as IDbDataParameter).Value = p.RcvCheckType;
        }
        else
            (fStmt.Parameters["RcvCheckType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FreCustomerId != null)
        {
            if (p.FreCustomerId.Length > 35)
                error.AppendLine("Value for PartyAddressDoc.FreCustomerId too long, max 35 chars");

            (fStmt.Parameters["FreCustomerId"] as IDbDataParameter).Value = p.FreCustomerId;
        }
        else
            (fStmt.Parameters["FreCustomerId"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FreCustomerIdEUR != null)
        {
            if (p.FreCustomerIdEUR.Length > 35)
                error.AppendLine("Value for PartyAddressDoc.FreCustomerIdEUR too long, max 35 chars");

            (fStmt.Parameters["FreCustomerIdEUR"] as IDbDataParameter).Value = p.FreCustomerIdEUR;
        }
        else
            (fStmt.Parameters["FreCustomerIdEUR"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomsDeclarant != null)
        {
            if (p.CustomsDeclarant.Length > 35)
                error.AppendLine("Value for PartyAddressDoc.CustomsDeclarant too long, max 35 chars");

            (fStmt.Parameters["CustomsDeclarant"] as IDbDataParameter).Value = p.CustomsDeclarant;
        }
        else
            (fStmt.Parameters["CustomsDeclarant"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomsDeclType != null)
        {
            if (p.CustomsDeclType.Length > 1)
                error.AppendLine("Value for PartyAddressDoc.CustomsDeclType too long, max 1 chars");

            (fStmt.Parameters["CustomsDeclType"] as IDbDataParameter).Value = p.CustomsDeclType;
        }
        else
            (fStmt.Parameters["CustomsDeclType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomsClearanceType != null)
        {
            if (p.CustomsClearanceType.Length > 1)
                error.AppendLine("Value for PartyAddressDoc.CustomsClearanceType too long, max 1 chars");

            (fStmt.Parameters["CustomsClearanceType"] as IDbDataParameter).Value = p.CustomsClearanceType;
        }
        else
            (fStmt.Parameters["CustomsClearanceType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ExecuteCustomsDecl != null)
        {
            if (p.ExecuteCustomsDecl.Length > 1)
                error.AppendLine("Value for PartyAddressDoc.ExecuteCustomsDecl too long, max 1 chars");

            (fStmt.Parameters["ExecuteCustomsDecl"] as IDbDataParameter).Value = p.ExecuteCustomsDecl;
        }
        else
            (fStmt.Parameters["ExecuteCustomsDecl"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PayCustomsDecl != null)
        {
            if (p.PayCustomsDecl.Length > 1)
                error.AppendLine("Value for PartyAddressDoc.PayCustomsDecl too long, max 1 chars");

            (fStmt.Parameters["PayCustomsDecl"] as IDbDataParameter).Value = p.PayCustomsDecl;
        }
        else
            (fStmt.Parameters["PayCustomsDecl"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class InventoryStatusInsert : SegmentImpl
  {

    public InventoryStatusInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_INVENTORY_STATUS ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",InventoryStatusCode");
        s.Append(",InventoryStatusName");
        s.Append(",InventoryStatusAutoReset");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:InventoryStatusCode");
        s.Append(",:InventoryStatusName");
        s.Append(",:InventoryStatusAutoReset");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("InventoryStatusCode", 8));
        fStmt.Parameters.Add(StringParam("InventoryStatusName", 35));
        fStmt.Parameters.Add(StringParam("InventoryStatusAutoReset", 1));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, InventoryStatusDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "2");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for InventoryStatusDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventoryStatusCode != null)
        {
            if (p.InventoryStatusCode.Length > 8)
                error.AppendLine("Value for InventoryStatusDoc.InventoryStatusCode too long, max 8 chars");

            if (p.InventoryStatusCode.Length == 0)
                error.AppendLine("Zero length for mandatory parameter InventoryStatusDoc.InventoryStatusCode not allowed");

            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = p.InventoryStatusCode;
        }
        else
            error.AppendLine("Null value for mandatory parameter InventoryStatusDoc.InventoryStatusCode not allowed");


        if (p.InventoryStatusName != null)
        {
            if (p.InventoryStatusName.Length > 35)
                error.AppendLine("Value for InventoryStatusDoc.InventoryStatusName too long, max 35 chars");

            if (p.InventoryStatusName.Length == 0)
                error.AppendLine("Zero length for mandatory parameter InventoryStatusDoc.InventoryStatusName not allowed");

            (fStmt.Parameters["InventoryStatusName"] as IDbDataParameter).Value = p.InventoryStatusName;
        }
        else
            error.AppendLine("Null value for mandatory parameter InventoryStatusDoc.InventoryStatusName not allowed");


        if (p.InventoryStatusAutoReset != null)
        {
            if (p.InventoryStatusAutoReset.Length > 1)
                error.AppendLine("Value for InventoryStatusDoc.InventoryStatusAutoReset too long, max 1 chars");

            if (p.InventoryStatusAutoReset.Length == 0)
                error.AppendLine("Zero length for mandatory parameter InventoryStatusDoc.InventoryStatusAutoReset not allowed");

            (fStmt.Parameters["InventoryStatusAutoReset"] as IDbDataParameter).Value = p.InventoryStatusAutoReset;
        }
        else
            error.AppendLine("Null value for mandatory parameter InventoryStatusDoc.InventoryStatusAutoReset not allowed");


        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class VendorReturnOrderHeadInsert : SegmentImpl
  {
    private VendorReturnOrderLineInsert aVendorReturnOrderLineInsert;

    public VendorReturnOrderHeadInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_VENDOR_RET_ORD_HEAD ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",VendorReturnOrderNumber");
        s.Append(",VendorReturnOrderSequence");
        s.Append(",WarehouseId");
        s.Append(",VendorId");
        s.Append(",RequestedShipDate");
        s.Append(",Instructions");
        s.Append(",DeliveryMethod");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:VendorReturnOrderNumber");
        s.Append(",:VendorReturnOrderSequence");
        s.Append(",:WarehouseId");
        s.Append(",:VendorId");
        s.Append(",:RequestedShipDate");
        s.Append(",:Instructions");
        s.Append(",:DeliveryMethod");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("VendorReturnOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("VendorReturnOrderSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("WarehouseId", 4));
        fStmt.Parameters.Add(StringParam("VendorId", 35));
        fStmt.Parameters.Add(DateParam("RequestedShipDate"));
        fStmt.Parameters.Add(StringParam("Instructions", 400));
        fStmt.Parameters.Add(StringParam("DeliveryMethod", 17));

        fStmt.Prepare();

        aVendorReturnOrderLineInsert = new VendorReturnOrderLineInsert(owner);
    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, VendorReturnOrderHeadDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for VendorReturnOrderHeadDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.VendorReturnOrderNumber != null)
        {
            if (p.VendorReturnOrderNumber.Length > 35)
                error.AppendLine("Value for VendorReturnOrderHeadDoc.VendorReturnOrderNumber too long, max 35 chars");

            if (p.VendorReturnOrderNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter VendorReturnOrderHeadDoc.VendorReturnOrderNumber not allowed");

            (fStmt.Parameters["VendorReturnOrderNumber"] as IDbDataParameter).Value = p.VendorReturnOrderNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter VendorReturnOrderHeadDoc.VendorReturnOrderNumber not allowed");


        if (p.VendorReturnOrderSequence != null)
        {
            (fStmt.Parameters["VendorReturnOrderSequence"] as IDbDataParameter).Value = p.VendorReturnOrderSequence;
        }
        else
            error.AppendLine("Null value for mandatory parameter VendorReturnOrderHeadDoc.VendorReturnOrderSequence not allowed");


        if (p.WarehouseId != null)
        {
            if (p.WarehouseId.Length > 4)
                error.AppendLine("Value for VendorReturnOrderHeadDoc.WarehouseId too long, max 4 chars");

            if (p.WarehouseId.Length == 0)
                error.AppendLine("Zero length for mandatory parameter VendorReturnOrderHeadDoc.WarehouseId not allowed");

            (fStmt.Parameters["WarehouseId"] as IDbDataParameter).Value = p.WarehouseId;
        }
        else
            error.AppendLine("Null value for mandatory parameter VendorReturnOrderHeadDoc.WarehouseId not allowed");


        if (p.VendorId != null)
        {
            if (p.VendorId.Length > 35)
                error.AppendLine("Value for VendorReturnOrderHeadDoc.VendorId too long, max 35 chars");

            if (p.VendorId.Length == 0)
                error.AppendLine("Zero length for mandatory parameter VendorReturnOrderHeadDoc.VendorId not allowed");

            (fStmt.Parameters["VendorId"] as IDbDataParameter).Value = p.VendorId;
        }
        else
            error.AppendLine("Null value for mandatory parameter VendorReturnOrderHeadDoc.VendorId not allowed");


        if (p.RequestedShipDate != null)
        {
            (fStmt.Parameters["RequestedShipDate"] as IDbDataParameter).Value = p.RequestedShipDate;
        }
        else
            error.AppendLine("Null value for mandatory parameter VendorReturnOrderHeadDoc.RequestedShipDate not allowed");


        if (p.Instructions != null)
        {
            if (p.Instructions.Length > 400)
                error.AppendLine("Value for VendorReturnOrderHeadDoc.Instructions too long, max 400 chars");

            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = p.Instructions;
        }
        else
            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveryMethod != null)
        {
            if (p.DeliveryMethod.Length > 17)
                error.AppendLine("Value for VendorReturnOrderHeadDoc.DeliveryMethod too long, max 17 chars");

            (fStmt.Parameters["DeliveryMethod"] as IDbDataParameter).Value = p.DeliveryMethod;
        }
        else
            (fStmt.Parameters["DeliveryMethod"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

        if (p.aVendorReturnOrderLineDocs != null)
            foreach (VendorReturnOrderLineDoc c in p.aVendorReturnOrderLineDocs)
                aVendorReturnOrderLineInsert.Process(ref trans, this, c);
      }
  }

  public class VendorReturnOrderLineInsert : SegmentImpl
  {

    public VendorReturnOrderLineInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_VENDOR_RET_ORD_LINE ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",VendorReturnOrderNumber");
        s.Append(",VendorReturnOrderSequence");
        s.Append(",VendorReturnOrderLine");
        s.Append(",VendorReturnOrderLineSeq");
        s.Append(",ProductNumber");
        s.Append(",PackageIdentity");
        s.Append(",ProductionLotIdentity");
        s.Append(",ProductionSubLotIdentity");
        s.Append(",MarketingLotIdentity");
        s.Append(",OwnerIdentity");
        s.Append(",ReturnQuantity");
        s.Append(",ClaimCause");
        s.Append(",ClaimCauseText");
        s.Append(",ClaimCauseCode");
        s.Append(",Instructions");
        s.Append(",CustomerReturnOrderNumber");
        s.Append(",CustomerReturnOrderSequence");
        s.Append(",CustomerReturnOrderLinePos");
        s.Append(",CustomerReturnOrderLineKitPos");
        s.Append(",CustomerReturnOrderLineSeq");
        s.Append(",InventoryStatusCode");
        s.Append(",Measure");
        s.Append(",MeasureQualifier");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:VendorReturnOrderNumber");
        s.Append(",:VendorReturnOrderSequence");
        s.Append(",:VendorReturnOrderLine");
        s.Append(",:VendorReturnOrderLineSeq");
        s.Append(",:ProductNumber");
        s.Append(",:PackageIdentity");
        s.Append(",:ProductionLotIdentity");
        s.Append(",:ProductionSubLotIdentity");
        s.Append(",:MarketingLotIdentity");
        s.Append(",:OwnerIdentity");
        s.Append(",:ReturnQuantity");
        s.Append(",:ClaimCause");
        s.Append(",:ClaimCauseText");
        s.Append(",:ClaimCauseCode");
        s.Append(",:Instructions");
        s.Append(",:CustomerReturnOrderNumber");
        s.Append(",:CustomerReturnOrderSequence");
        s.Append(",:CustomerReturnOrderLinePos");
        s.Append(",:CustomerReturnOrderLineKitPos");
        s.Append(",:CustomerReturnOrderLineSeq");
        s.Append(",:InventoryStatusCode");
        s.Append(",:Measure");
        s.Append(",:MeasureQualifier");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("VendorReturnOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("VendorReturnOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("VendorReturnOrderLine", 5, 0));
        fStmt.Parameters.Add(NumberParam("VendorReturnOrderLineSeq", 5, 0));
        fStmt.Parameters.Add(StringParam("ProductNumber", 35));
        fStmt.Parameters.Add(StringParam("PackageIdentity", 35));
        fStmt.Parameters.Add(StringParam("ProductionLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("ProductionSubLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("MarketingLotIdentity", 20));
        fStmt.Parameters.Add(StringParam("OwnerIdentity", 35));
        fStmt.Parameters.Add(NumberParam("ReturnQuantity", 20, 6));
        fStmt.Parameters.Add(StringParam("ClaimCause", 2));
        fStmt.Parameters.Add(StringParam("ClaimCauseText", 30));
        fStmt.Parameters.Add(StringParam("ClaimCauseCode", 2));
        fStmt.Parameters.Add(StringParam("Instructions", 400));
        fStmt.Parameters.Add(StringParam("CustomerReturnOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLinePos", 5, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineKitPos", 2, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineSeq", 3, 0));
        fStmt.Parameters.Add(StringParam("InventoryStatusCode", 8));
        fStmt.Parameters.Add(StringParam("Measure", 1));
        fStmt.Parameters.Add(StringParam("MeasureQualifier", 4));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, VendorReturnOrderLineDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for VendorReturnOrderLineDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.VendorReturnOrderNumber != null)
        {
            if (p.VendorReturnOrderNumber.Length > 35)
                error.AppendLine("Value for VendorReturnOrderLineDoc.VendorReturnOrderNumber too long, max 35 chars");

            if (p.VendorReturnOrderNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter VendorReturnOrderLineDoc.VendorReturnOrderNumber not allowed");

            (fStmt.Parameters["VendorReturnOrderNumber"] as IDbDataParameter).Value = p.VendorReturnOrderNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter VendorReturnOrderLineDoc.VendorReturnOrderNumber not allowed");


        if (p.VendorReturnOrderSequence != null)
        {
            (fStmt.Parameters["VendorReturnOrderSequence"] as IDbDataParameter).Value = p.VendorReturnOrderSequence;
        }
        else
            error.AppendLine("Null value for mandatory parameter VendorReturnOrderLineDoc.VendorReturnOrderSequence not allowed");


        if (p.VendorReturnOrderLine != null)
        {
            (fStmt.Parameters["VendorReturnOrderLine"] as IDbDataParameter).Value = p.VendorReturnOrderLine;
        }
        else
            error.AppendLine("Null value for mandatory parameter VendorReturnOrderLineDoc.VendorReturnOrderLine not allowed");


        if (p.VendorReturnOrderLineSeq != null)
        {
            (fStmt.Parameters["VendorReturnOrderLineSeq"] as IDbDataParameter).Value = p.VendorReturnOrderLineSeq;
        }
        else
            error.AppendLine("Null value for mandatory parameter VendorReturnOrderLineDoc.VendorReturnOrderLineSeq not allowed");


        if (p.ProductNumber != null)
        {
            if (p.ProductNumber.Length > 35)
                error.AppendLine("Value for VendorReturnOrderLineDoc.ProductNumber too long, max 35 chars");

            if (p.ProductNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter VendorReturnOrderLineDoc.ProductNumber not allowed");

            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter VendorReturnOrderLineDoc.ProductNumber not allowed");


        if (p.PackageIdentity != null)
        {
            if (p.PackageIdentity.Length > 35)
                error.AppendLine("Value for VendorReturnOrderLineDoc.PackageIdentity too long, max 35 chars");

            if (p.PackageIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter VendorReturnOrderLineDoc.PackageIdentity not allowed");

            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter VendorReturnOrderLineDoc.PackageIdentity not allowed");


        if (p.ProductionLotIdentity != null)
        {
            if (p.ProductionLotIdentity.Length > 40)
                error.AppendLine("Value for VendorReturnOrderLineDoc.ProductionLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = p.ProductionLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionSubLotIdentity != null)
        {
            if (p.ProductionSubLotIdentity.Length > 40)
                error.AppendLine("Value for VendorReturnOrderLineDoc.ProductionSubLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = p.ProductionSubLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MarketingLotIdentity != null)
        {
            if (p.MarketingLotIdentity.Length > 20)
                error.AppendLine("Value for VendorReturnOrderLineDoc.MarketingLotIdentity too long, max 20 chars");

            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = p.MarketingLotIdentity;
        }
        else
            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OwnerIdentity != null)
        {
            if (p.OwnerIdentity.Length > 35)
                error.AppendLine("Value for VendorReturnOrderLineDoc.OwnerIdentity too long, max 35 chars");

            if (p.OwnerIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter VendorReturnOrderLineDoc.OwnerIdentity not allowed");

            (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = p.OwnerIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter VendorReturnOrderLineDoc.OwnerIdentity not allowed");


        if (p.ReturnQuantity != null)
        {
            (fStmt.Parameters["ReturnQuantity"] as IDbDataParameter).Value = p.ReturnQuantity;
        }
        else
            error.AppendLine("Null value for mandatory parameter VendorReturnOrderLineDoc.ReturnQuantity not allowed");


        if (p.ClaimCause != null)
        {
            if (p.ClaimCause.Length > 2)
                error.AppendLine("Value for VendorReturnOrderLineDoc.ClaimCause too long, max 2 chars");

            (fStmt.Parameters["ClaimCause"] as IDbDataParameter).Value = p.ClaimCause;
        }
        else
            (fStmt.Parameters["ClaimCause"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ClaimCauseText != null)
        {
            if (p.ClaimCauseText.Length > 30)
                error.AppendLine("Value for VendorReturnOrderLineDoc.ClaimCauseText too long, max 30 chars");

            (fStmt.Parameters["ClaimCauseText"] as IDbDataParameter).Value = p.ClaimCauseText;
        }
        else
            (fStmt.Parameters["ClaimCauseText"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ClaimCauseCode != null)
        {
            if (p.ClaimCauseCode.Length > 2)
                error.AppendLine("Value for VendorReturnOrderLineDoc.ClaimCauseCode too long, max 2 chars");

            (fStmt.Parameters["ClaimCauseCode"] as IDbDataParameter).Value = p.ClaimCauseCode;
        }
        else
            (fStmt.Parameters["ClaimCauseCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Instructions != null)
        {
            if (p.Instructions.Length > 400)
                error.AppendLine("Value for VendorReturnOrderLineDoc.Instructions too long, max 400 chars");

            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = p.Instructions;
        }
        else
            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderNumber != null)
        {
            if (p.CustomerReturnOrderNumber.Length > 35)
                error.AppendLine("Value for VendorReturnOrderLineDoc.CustomerReturnOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = p.CustomerReturnOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderSequence != null)
        {
            (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = p.CustomerReturnOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLinePos != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = p.CustomerReturnOrderLinePos;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLineKitPos != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = p.CustomerReturnOrderLineKitPos;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLineSeq != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = p.CustomerReturnOrderLineSeq;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventoryStatusCode != null)
        {
            if (p.InventoryStatusCode.Length > 8)
                error.AppendLine("Value for VendorReturnOrderLineDoc.InventoryStatusCode too long, max 8 chars");

            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = p.InventoryStatusCode;
        }
        else
            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Measure != null)
        {
            if (p.Measure.Length > 1)
                error.AppendLine("Value for VendorReturnOrderLineDoc.Measure too long, max 1 chars");

            (fStmt.Parameters["Measure"] as IDbDataParameter).Value = p.Measure;
        }
        else
            (fStmt.Parameters["Measure"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MeasureQualifier != null)
        {
            if (p.MeasureQualifier.Length > 4)
                error.AppendLine("Value for VendorReturnOrderLineDoc.MeasureQualifier too long, max 4 chars");

            (fStmt.Parameters["MeasureQualifier"] as IDbDataParameter).Value = p.MeasureQualifier;
        }
        else
            (fStmt.Parameters["MeasureQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class TransportPlanOrderHeadInsert : SegmentImpl
  {
    private TransportPlanOrderLineInsert aTransportPlanOrderLineInsert;

    public TransportPlanOrderHeadInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_TRP_PLAN_ORD_HEAD ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderSequence");
        s.Append(",CustomerOrderType");
        s.Append(",CustomerOrderClass");
        s.Append(",CustomerOrderReference");
        s.Append(",BillToCustomerIdentity");
        s.Append(",SellToCustomerIdentity");
        s.Append(",ShipToCustomerIdentity");
        s.Append(",PickPriority");
        s.Append(",DispatchFee");
        s.Append(",CODFee");
        s.Append(",Currency");
        s.Append(",FreightCost");
        s.Append(",FreightPartyQualifier");
        s.Append(",FreightPartyIdentity");
        s.Append(",CustomerOrderValue");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderSequence");
        s.Append(",:CustomerOrderType");
        s.Append(",:CustomerOrderClass");
        s.Append(",:CustomerOrderReference");
        s.Append(",:BillToCustomerIdentity");
        s.Append(",:SellToCustomerIdentity");
        s.Append(",:ShipToCustomerIdentity");
        s.Append(",:PickPriority");
        s.Append(",:DispatchFee");
        s.Append(",:CODFee");
        s.Append(",:Currency");
        s.Append(",:FreightCost");
        s.Append(",:FreightPartyQualifier");
        s.Append(",:FreightPartyIdentity");
        s.Append(",:CustomerOrderValue");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("CustomerOrderType", 2));
        fStmt.Parameters.Add(StringParam("CustomerOrderClass", 2));
        fStmt.Parameters.Add(StringParam("CustomerOrderReference", 35));
        fStmt.Parameters.Add(StringParam("BillToCustomerIdentity", 35));
        fStmt.Parameters.Add(StringParam("SellToCustomerIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomerIdentity", 35));
        fStmt.Parameters.Add(NumberParam("PickPriority", 2, 0));
        fStmt.Parameters.Add(NumberParam("DispatchFee", 17, 7));
        fStmt.Parameters.Add(NumberParam("CODFee", 17, 7));
        fStmt.Parameters.Add(StringParam("Currency", 3));
        fStmt.Parameters.Add(NumberParam("FreightCost", 17, 7));
        fStmt.Parameters.Add(StringParam("FreightPartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("FreightPartyIdentity", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderValue", 21, 4));

        fStmt.Prepare();

        aTransportPlanOrderLineInsert = new TransportPlanOrderLineInsert(owner);
    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, TransportPlanOrderHeadDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for TransportPlanOrderHeadDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for TransportPlanOrderHeadDoc.CustomerOrderNumber too long, max 35 chars");

            if (p.CustomerOrderNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter TransportPlanOrderHeadDoc.CustomerOrderNumber not allowed");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter TransportPlanOrderHeadDoc.CustomerOrderNumber not allowed");


        if (p.CustomerOrderSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            error.AppendLine("Null value for mandatory parameter TransportPlanOrderHeadDoc.CustomerOrderSequence not allowed");


        if (p.CustomerOrderType != null)
        {
            if (p.CustomerOrderType.Length > 2)
                error.AppendLine("Value for TransportPlanOrderHeadDoc.CustomerOrderType too long, max 2 chars");

            if (p.CustomerOrderType.Length == 0)
                error.AppendLine("Zero length for mandatory parameter TransportPlanOrderHeadDoc.CustomerOrderType not allowed");

            (fStmt.Parameters["CustomerOrderType"] as IDbDataParameter).Value = p.CustomerOrderType;
        }
        else
            error.AppendLine("Null value for mandatory parameter TransportPlanOrderHeadDoc.CustomerOrderType not allowed");


        if (p.CustomerOrderClass != null)
        {
            if (p.CustomerOrderClass.Length > 2)
                error.AppendLine("Value for TransportPlanOrderHeadDoc.CustomerOrderClass too long, max 2 chars");

            if (p.CustomerOrderClass.Length == 0)
                error.AppendLine("Zero length for mandatory parameter TransportPlanOrderHeadDoc.CustomerOrderClass not allowed");

            (fStmt.Parameters["CustomerOrderClass"] as IDbDataParameter).Value = p.CustomerOrderClass;
        }
        else
            error.AppendLine("Null value for mandatory parameter TransportPlanOrderHeadDoc.CustomerOrderClass not allowed");


        if (p.CustomerOrderReference != null)
        {
            if (p.CustomerOrderReference.Length > 35)
                error.AppendLine("Value for TransportPlanOrderHeadDoc.CustomerOrderReference too long, max 35 chars");

            (fStmt.Parameters["CustomerOrderReference"] as IDbDataParameter).Value = p.CustomerOrderReference;
        }
        else
            (fStmt.Parameters["CustomerOrderReference"] as IDbDataParameter).Value = DBNull.Value;

        if (p.BillToCustomerIdentity != null)
        {
            if (p.BillToCustomerIdentity.Length > 35)
                error.AppendLine("Value for TransportPlanOrderHeadDoc.BillToCustomerIdentity too long, max 35 chars");

            (fStmt.Parameters["BillToCustomerIdentity"] as IDbDataParameter).Value = p.BillToCustomerIdentity;
        }
        else
            (fStmt.Parameters["BillToCustomerIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SellToCustomerIdentity != null)
        {
            if (p.SellToCustomerIdentity.Length > 35)
                error.AppendLine("Value for TransportPlanOrderHeadDoc.SellToCustomerIdentity too long, max 35 chars");

            if (p.SellToCustomerIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter TransportPlanOrderHeadDoc.SellToCustomerIdentity not allowed");

            (fStmt.Parameters["SellToCustomerIdentity"] as IDbDataParameter).Value = p.SellToCustomerIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter TransportPlanOrderHeadDoc.SellToCustomerIdentity not allowed");


        if (p.ShipToCustomerIdentity != null)
        {
            if (p.ShipToCustomerIdentity.Length > 35)
                error.AppendLine("Value for TransportPlanOrderHeadDoc.ShipToCustomerIdentity too long, max 35 chars");

            if (p.ShipToCustomerIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter TransportPlanOrderHeadDoc.ShipToCustomerIdentity not allowed");

            (fStmt.Parameters["ShipToCustomerIdentity"] as IDbDataParameter).Value = p.ShipToCustomerIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter TransportPlanOrderHeadDoc.ShipToCustomerIdentity not allowed");


        if (p.PickPriority != null)
        {
            (fStmt.Parameters["PickPriority"] as IDbDataParameter).Value = p.PickPriority;
        }
        else
            error.AppendLine("Null value for mandatory parameter TransportPlanOrderHeadDoc.PickPriority not allowed");


        if (p.DispatchFee != null)
        {
            (fStmt.Parameters["DispatchFee"] as IDbDataParameter).Value = p.DispatchFee;
        }
        else
            (fStmt.Parameters["DispatchFee"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CODFee != null)
        {
            (fStmt.Parameters["CODFee"] as IDbDataParameter).Value = p.CODFee;
        }
        else
            (fStmt.Parameters["CODFee"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Currency != null)
        {
            if (p.Currency.Length > 3)
                error.AppendLine("Value for TransportPlanOrderHeadDoc.Currency too long, max 3 chars");

            (fStmt.Parameters["Currency"] as IDbDataParameter).Value = p.Currency;
        }
        else
            (fStmt.Parameters["Currency"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FreightCost != null)
        {
            (fStmt.Parameters["FreightCost"] as IDbDataParameter).Value = p.FreightCost;
        }
        else
            (fStmt.Parameters["FreightCost"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FreightPartyQualifier != null)
        {
            if (p.FreightPartyQualifier.Length > 3)
                error.AppendLine("Value for TransportPlanOrderHeadDoc.FreightPartyQualifier too long, max 3 chars");

            (fStmt.Parameters["FreightPartyQualifier"] as IDbDataParameter).Value = p.FreightPartyQualifier;
        }
        else
            (fStmt.Parameters["FreightPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FreightPartyIdentity != null)
        {
            if (p.FreightPartyIdentity.Length > 35)
                error.AppendLine("Value for TransportPlanOrderHeadDoc.FreightPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["FreightPartyIdentity"] as IDbDataParameter).Value = p.FreightPartyIdentity;
        }
        else
            (fStmt.Parameters["FreightPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderValue != null)
        {
            (fStmt.Parameters["CustomerOrderValue"] as IDbDataParameter).Value = p.CustomerOrderValue;
        }
        else
            (fStmt.Parameters["CustomerOrderValue"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

        if (p.aTransportPlanOrderLineDocs != null)
            foreach (TransportPlanOrderLineDoc c in p.aTransportPlanOrderLineDocs)
                aTransportPlanOrderLineInsert.Process(ref trans, this, c);
      }
  }

  public class TransportPlanOrderLineInsert : SegmentImpl
  {

    public TransportPlanOrderLineInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_TRP_PLAN_ORD_LINE ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderSequence");
        s.Append(",CustomerOrderLinePosition");
        s.Append(",CustomerOrderLineKitPosition");
        s.Append(",CustomerOrderLineSequence");
        s.Append(",CustomerOrderLineType");
        s.Append(",Kitproduct");
        s.Append(",ShipToPartyQualifier");
        s.Append(",ShipToPartyIdentity");
        s.Append(",ShipToCustomerSubAddress");
        s.Append(",RequestedShipDate");
        s.Append(",AcknowledgedShipdate");
        s.Append(",RequestedDeliveryDate");
        s.Append(",AcknowledgedDeliveryDate");
        s.Append(",WarehouseIdentity");
        s.Append(",ProductNumber");
        s.Append(",OwnerIdentity");
        s.Append(",ProductionLotRequireMent");
        s.Append(",MarketingLotIdentity");
        s.Append(",QualityLotIdentity");
        s.Append(",PackageIdentity");
        s.Append(",OrderedQuantity");
        s.Append(",OrderedQuantityTolerancePlus");
        s.Append(",OrderedQuantityToleranceMinus");
        s.Append(",KitDetailQuantity");
        s.Append(",RequestedShelfLife");
        s.Append(",ForcePackage");
        s.Append(",SerialNumberHandling");
        s.Append(",SerialNumber");
        s.Append(",VATPercent");
        s.Append(",DeliveryMethod");
        s.Append(",Measure");
        s.Append(",MeasureQualifier");
        s.Append(",TransportOrderNumber");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderSequence");
        s.Append(",:CustomerOrderLinePosition");
        s.Append(",:CustomerOrderLineKitPosition");
        s.Append(",:CustomerOrderLineSequence");
        s.Append(",:CustomerOrderLineType");
        s.Append(",:Kitproduct");
        s.Append(",:ShipToPartyQualifier");
        s.Append(",:ShipToPartyIdentity");
        s.Append(",:ShipToCustomerSubAddress");
        s.Append(",:RequestedShipDate");
        s.Append(",:AcknowledgedShipdate");
        s.Append(",:RequestedDeliveryDate");
        s.Append(",:AcknowledgedDeliveryDate");
        s.Append(",:WarehouseIdentity");
        s.Append(",:ProductNumber");
        s.Append(",:OwnerIdentity");
        s.Append(",:ProductionLotRequireMent");
        s.Append(",:MarketingLotIdentity");
        s.Append(",:QualityLotIdentity");
        s.Append(",:PackageIdentity");
        s.Append(",:OrderedQuantity");
        s.Append(",:OrderedQuantityTolerancePlus");
        s.Append(",:OrderedQuantityToleranceMinus");
        s.Append(",:KitDetailQuantity");
        s.Append(",:RequestedShelfLife");
        s.Append(",:ForcePackage");
        s.Append(",:SerialNumberHandling");
        s.Append(",:SerialNumber");
        s.Append(",:VATPercent");
        s.Append(",:DeliveryMethod");
        s.Append(",:Measure");
        s.Append(",:MeasureQualifier");
        s.Append(",:TransportOrderNumber");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLinePosition", 5, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineKitPosition", 2, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("CustomerOrderLineType", 1));
        fStmt.Parameters.Add(StringParam("Kitproduct", 1));
        fStmt.Parameters.Add(StringParam("ShipToPartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("ShipToPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomerSubAddress", 17));
        fStmt.Parameters.Add(DateParam("RequestedShipDate"));
        fStmt.Parameters.Add(DateParam("AcknowledgedShipdate"));
        fStmt.Parameters.Add(DateParam("RequestedDeliveryDate"));
        fStmt.Parameters.Add(DateParam("AcknowledgedDeliveryDate"));
        fStmt.Parameters.Add(StringParam("WarehouseIdentity", 4));
        fStmt.Parameters.Add(StringParam("ProductNumber", 35));
        fStmt.Parameters.Add(StringParam("OwnerIdentity", 35));
        fStmt.Parameters.Add(StringParam("ProductionLotRequireMent", 1));
        fStmt.Parameters.Add(StringParam("MarketingLotIdentity", 20));
        fStmt.Parameters.Add(StringParam("QualityLotIdentity", 20));
        fStmt.Parameters.Add(StringParam("PackageIdentity", 17));
        fStmt.Parameters.Add(NumberParam("OrderedQuantity", 20, 6));
        fStmt.Parameters.Add(NumberParam("OrderedQuantityTolerancePlus", 20, 6));
        fStmt.Parameters.Add(NumberParam("OrderedQuantityToleranceMinus", 20, 6));
        fStmt.Parameters.Add(NumberParam("KitDetailQuantity", 20, 6));
        fStmt.Parameters.Add(NumberParam("RequestedShelfLife", 4, 0));
        fStmt.Parameters.Add(StringParam("ForcePackage", 1));
        fStmt.Parameters.Add(StringParam("SerialNumberHandling", 1));
        fStmt.Parameters.Add(StringParam("SerialNumber", 21));
        fStmt.Parameters.Add(NumberParam("VATPercent", 6, 4));
        fStmt.Parameters.Add(StringParam("DeliveryMethod", 17));
        fStmt.Parameters.Add(StringParam("Measure", 1));
        fStmt.Parameters.Add(StringParam("MeasureQualifier", 4));
        fStmt.Parameters.Add(StringParam("TransportOrderNumber", 35));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, TransportPlanOrderLineDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for TransportPlanOrderLineDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for TransportPlanOrderLineDoc.CustomerOrderNumber too long, max 35 chars");

            if (p.CustomerOrderNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter TransportPlanOrderLineDoc.CustomerOrderNumber not allowed");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter TransportPlanOrderLineDoc.CustomerOrderNumber not allowed");


        if (p.CustomerOrderSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            error.AppendLine("Null value for mandatory parameter TransportPlanOrderLineDoc.CustomerOrderSequence not allowed");


        if (p.CustomerOrderLinePosition != null)
        {
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = p.CustomerOrderLinePosition;
        }
        else
            error.AppendLine("Null value for mandatory parameter TransportPlanOrderLineDoc.CustomerOrderLinePosition not allowed");


        if (p.CustomerOrderLineKitPosition != null)
        {
            (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = p.CustomerOrderLineKitPosition;
        }
        else
            error.AppendLine("Null value for mandatory parameter TransportPlanOrderLineDoc.CustomerOrderLineKitPosition not allowed");


        if (p.CustomerOrderLineSequence != null)
        {
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = p.CustomerOrderLineSequence;
        }
        else
            error.AppendLine("Null value for mandatory parameter TransportPlanOrderLineDoc.CustomerOrderLineSequence not allowed");


        if (p.CustomerOrderLineType != null)
        {
            if (p.CustomerOrderLineType.Length > 1)
                error.AppendLine("Value for TransportPlanOrderLineDoc.CustomerOrderLineType too long, max 1 chars");

            if (p.CustomerOrderLineType.Length == 0)
                error.AppendLine("Zero length for mandatory parameter TransportPlanOrderLineDoc.CustomerOrderLineType not allowed");

            (fStmt.Parameters["CustomerOrderLineType"] as IDbDataParameter).Value = p.CustomerOrderLineType;
        }
        else
            error.AppendLine("Null value for mandatory parameter TransportPlanOrderLineDoc.CustomerOrderLineType not allowed");


        if (p.Kitproduct != null)
        {
            if (p.Kitproduct.Length > 1)
                error.AppendLine("Value for TransportPlanOrderLineDoc.Kitproduct too long, max 1 chars");

            if (p.Kitproduct.Length == 0)
                error.AppendLine("Zero length for mandatory parameter TransportPlanOrderLineDoc.Kitproduct not allowed");

            (fStmt.Parameters["Kitproduct"] as IDbDataParameter).Value = p.Kitproduct;
        }
        else
            error.AppendLine("Null value for mandatory parameter TransportPlanOrderLineDoc.Kitproduct not allowed");


        if (p.ShipToPartyQualifier != null)
        {
            if (p.ShipToPartyQualifier.Length > 3)
                error.AppendLine("Value for TransportPlanOrderLineDoc.ShipToPartyQualifier too long, max 3 chars");

            if (p.ShipToPartyQualifier.Length == 0)
                error.AppendLine("Zero length for mandatory parameter TransportPlanOrderLineDoc.ShipToPartyQualifier not allowed");

            (fStmt.Parameters["ShipToPartyQualifier"] as IDbDataParameter).Value = p.ShipToPartyQualifier;
        }
        else
            error.AppendLine("Null value for mandatory parameter TransportPlanOrderLineDoc.ShipToPartyQualifier not allowed");


        if (p.ShipToPartyIdentity != null)
        {
            if (p.ShipToPartyIdentity.Length > 35)
                error.AppendLine("Value for TransportPlanOrderLineDoc.ShipToPartyIdentity too long, max 35 chars");

            if (p.ShipToPartyIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter TransportPlanOrderLineDoc.ShipToPartyIdentity not allowed");

            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = p.ShipToPartyIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter TransportPlanOrderLineDoc.ShipToPartyIdentity not allowed");


        if (p.ShipToCustomerSubAddress != null)
        {
            if (p.ShipToCustomerSubAddress.Length > 17)
                error.AppendLine("Value for TransportPlanOrderLineDoc.ShipToCustomerSubAddress too long, max 17 chars");

            (fStmt.Parameters["ShipToCustomerSubAddress"] as IDbDataParameter).Value = p.ShipToCustomerSubAddress;
        }
        else
            (fStmt.Parameters["ShipToCustomerSubAddress"] as IDbDataParameter).Value = DBNull.Value;

        if (p.RequestedShipDate != null)
        {
            (fStmt.Parameters["RequestedShipDate"] as IDbDataParameter).Value = p.RequestedShipDate;
        }
        else
            (fStmt.Parameters["RequestedShipDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.AcknowledgedShipdate != null)
        {
            (fStmt.Parameters["AcknowledgedShipdate"] as IDbDataParameter).Value = p.AcknowledgedShipdate;
        }
        else
            (fStmt.Parameters["AcknowledgedShipdate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.RequestedDeliveryDate != null)
        {
            (fStmt.Parameters["RequestedDeliveryDate"] as IDbDataParameter).Value = p.RequestedDeliveryDate;
        }
        else
            (fStmt.Parameters["RequestedDeliveryDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.AcknowledgedDeliveryDate != null)
        {
            (fStmt.Parameters["AcknowledgedDeliveryDate"] as IDbDataParameter).Value = p.AcknowledgedDeliveryDate;
        }
        else
            (fStmt.Parameters["AcknowledgedDeliveryDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.WarehouseIdentity != null)
        {
            if (p.WarehouseIdentity.Length > 4)
                error.AppendLine("Value for TransportPlanOrderLineDoc.WarehouseIdentity too long, max 4 chars");

            if (p.WarehouseIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter TransportPlanOrderLineDoc.WarehouseIdentity not allowed");

            (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = p.WarehouseIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter TransportPlanOrderLineDoc.WarehouseIdentity not allowed");


        if (p.ProductNumber != null)
        {
            if (p.ProductNumber.Length > 35)
                error.AppendLine("Value for TransportPlanOrderLineDoc.ProductNumber too long, max 35 chars");

            if (p.ProductNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter TransportPlanOrderLineDoc.ProductNumber not allowed");

            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter TransportPlanOrderLineDoc.ProductNumber not allowed");


        if (p.OwnerIdentity != null)
        {
            if (p.OwnerIdentity.Length > 35)
                error.AppendLine("Value for TransportPlanOrderLineDoc.OwnerIdentity too long, max 35 chars");

            if (p.OwnerIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter TransportPlanOrderLineDoc.OwnerIdentity not allowed");

            (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = p.OwnerIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter TransportPlanOrderLineDoc.OwnerIdentity not allowed");


        if (p.ProductionLotRequireMent != null)
        {
            if (p.ProductionLotRequireMent.Length > 1)
                error.AppendLine("Value for TransportPlanOrderLineDoc.ProductionLotRequireMent too long, max 1 chars");

            (fStmt.Parameters["ProductionLotRequireMent"] as IDbDataParameter).Value = p.ProductionLotRequireMent;
        }
        else
            (fStmt.Parameters["ProductionLotRequireMent"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MarketingLotIdentity != null)
        {
            if (p.MarketingLotIdentity.Length > 20)
                error.AppendLine("Value for TransportPlanOrderLineDoc.MarketingLotIdentity too long, max 20 chars");

            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = p.MarketingLotIdentity;
        }
        else
            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.QualityLotIdentity != null)
        {
            if (p.QualityLotIdentity.Length > 20)
                error.AppendLine("Value for TransportPlanOrderLineDoc.QualityLotIdentity too long, max 20 chars");

            (fStmt.Parameters["QualityLotIdentity"] as IDbDataParameter).Value = p.QualityLotIdentity;
        }
        else
            (fStmt.Parameters["QualityLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackageIdentity != null)
        {
            if (p.PackageIdentity.Length > 17)
                error.AppendLine("Value for TransportPlanOrderLineDoc.PackageIdentity too long, max 17 chars");

            if (p.PackageIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter TransportPlanOrderLineDoc.PackageIdentity not allowed");

            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter TransportPlanOrderLineDoc.PackageIdentity not allowed");


        if (p.OrderedQuantity != null)
        {
            (fStmt.Parameters["OrderedQuantity"] as IDbDataParameter).Value = p.OrderedQuantity;
        }
        else
            error.AppendLine("Null value for mandatory parameter TransportPlanOrderLineDoc.OrderedQuantity not allowed");


        if (p.OrderedQuantityTolerancePlus != null)
        {
            (fStmt.Parameters["OrderedQuantityTolerancePlus"] as IDbDataParameter).Value = p.OrderedQuantityTolerancePlus;
        }
        else
            (fStmt.Parameters["OrderedQuantityTolerancePlus"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OrderedQuantityToleranceMinus != null)
        {
            (fStmt.Parameters["OrderedQuantityToleranceMinus"] as IDbDataParameter).Value = p.OrderedQuantityToleranceMinus;
        }
        else
            (fStmt.Parameters["OrderedQuantityToleranceMinus"] as IDbDataParameter).Value = DBNull.Value;

        if (p.KitDetailQuantity != null)
        {
            (fStmt.Parameters["KitDetailQuantity"] as IDbDataParameter).Value = p.KitDetailQuantity;
        }
        else
            (fStmt.Parameters["KitDetailQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.RequestedShelfLife != null)
        {
            (fStmt.Parameters["RequestedShelfLife"] as IDbDataParameter).Value = p.RequestedShelfLife;
        }
        else
            (fStmt.Parameters["RequestedShelfLife"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ForcePackage != null)
        {
            if (p.ForcePackage.Length > 1)
                error.AppendLine("Value for TransportPlanOrderLineDoc.ForcePackage too long, max 1 chars");

            (fStmt.Parameters["ForcePackage"] as IDbDataParameter).Value = p.ForcePackage;
        }
        else
            (fStmt.Parameters["ForcePackage"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SerialNumberHandling != null)
        {
            if (p.SerialNumberHandling.Length > 1)
                error.AppendLine("Value for TransportPlanOrderLineDoc.SerialNumberHandling too long, max 1 chars");

            (fStmt.Parameters["SerialNumberHandling"] as IDbDataParameter).Value = p.SerialNumberHandling;
        }
        else
            (fStmt.Parameters["SerialNumberHandling"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SerialNumber != null)
        {
            if (p.SerialNumber.Length > 21)
                error.AppendLine("Value for TransportPlanOrderLineDoc.SerialNumber too long, max 21 chars");

            (fStmt.Parameters["SerialNumber"] as IDbDataParameter).Value = p.SerialNumber;
        }
        else
            (fStmt.Parameters["SerialNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VATPercent != null)
        {
            (fStmt.Parameters["VATPercent"] as IDbDataParameter).Value = p.VATPercent;
        }
        else
            (fStmt.Parameters["VATPercent"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveryMethod != null)
        {
            if (p.DeliveryMethod.Length > 17)
                error.AppendLine("Value for TransportPlanOrderLineDoc.DeliveryMethod too long, max 17 chars");

            (fStmt.Parameters["DeliveryMethod"] as IDbDataParameter).Value = p.DeliveryMethod;
        }
        else
            (fStmt.Parameters["DeliveryMethod"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Measure != null)
        {
            if (p.Measure.Length > 1)
                error.AppendLine("Value for TransportPlanOrderLineDoc.Measure too long, max 1 chars");

            (fStmt.Parameters["Measure"] as IDbDataParameter).Value = p.Measure;
        }
        else
            (fStmt.Parameters["Measure"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MeasureQualifier != null)
        {
            if (p.MeasureQualifier.Length > 4)
                error.AppendLine("Value for TransportPlanOrderLineDoc.MeasureQualifier too long, max 4 chars");

            (fStmt.Parameters["MeasureQualifier"] as IDbDataParameter).Value = p.MeasureQualifier;
        }
        else
            (fStmt.Parameters["MeasureQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TransportOrderNumber != null)
        {
            if (p.TransportOrderNumber.Length > 35)
                error.AppendLine("Value for TransportPlanOrderLineDoc.TransportOrderNumber too long, max 35 chars");

            (fStmt.Parameters["TransportOrderNumber"] as IDbDataParameter).Value = p.TransportOrderNumber;
        }
        else
            (fStmt.Parameters["TransportOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class ASNHeadInsert : SegmentImpl
  {
    private ASNLoadCarrierInsert aASNLoadCarrierInsert;
    private ASNLineInsert aASNLineInsert;

    public ASNHeadInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_ASNIN_HEAD ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ASNIdentity");
        s.Append(",ASNSequenceNumber");
        s.Append(",ShipFromPartyNodeIdentity");
        s.Append(",ClientIdentity");
        s.Append(",ASNLevel");
        s.Append(",ShipDateTime");
        s.Append(",DocumentDateTime");
        s.Append(",DeliveryWindowFirst");
        s.Append(",DeliveryWindowLast");
        s.Append(",RequestedArrivalDateTime");
        s.Append(",ScheduledArrivalDateTime");
        s.Append(",ForwarderIdentity");
        s.Append(",NumberOfLoadCarriers");
        s.Append(",EstimatedVolume");
        s.Append(",VolumeUOMIdentity");
        s.Append(",Instructions");
        s.Append(",VehicleIdentity");
        s.Append(",BillOfLadingNumber");
        s.Append(",PackingSlipNumber");
        s.Append(",ShipFromPartyIdentity");
        s.Append(",ShipFromPartyQualifier");
        s.Append(",ShipToPartyIdentity");
        s.Append(",ShipToPartyQualifier");
        s.Append(",ShipToPartyNodeIdentity");
        s.Append(",ShippedFromWarehouseIdentity");
        s.Append(",ShippedOnDepartureIdentity");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ASNIdentity");
        s.Append(",:ASNSequenceNumber");
        s.Append(",:ShipFromPartyNodeIdentity");
        s.Append(",:ClientIdentity");
        s.Append(",:ASNLevel");
        s.Append(",:ShipDateTime");
        s.Append(",:DocumentDateTime");
        s.Append(",:DeliveryWindowFirst");
        s.Append(",:DeliveryWindowLast");
        s.Append(",:RequestedArrivalDateTime");
        s.Append(",:ScheduledArrivalDateTime");
        s.Append(",:ForwarderIdentity");
        s.Append(",:NumberOfLoadCarriers");
        s.Append(",:EstimatedVolume");
        s.Append(",:VolumeUOMIdentity");
        s.Append(",:Instructions");
        s.Append(",:VehicleIdentity");
        s.Append(",:BillOfLadingNumber");
        s.Append(",:PackingSlipNumber");
        s.Append(",:ShipFromPartyIdentity");
        s.Append(",:ShipFromPartyQualifier");
        s.Append(",:ShipToPartyIdentity");
        s.Append(",:ShipToPartyQualifier");
        s.Append(",:ShipToPartyNodeIdentity");
        s.Append(",:ShippedFromWarehouseIdentity");
        s.Append(",:ShippedOnDepartureIdentity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ASNIdentity", 35));
        fStmt.Parameters.Add(NumberParam("ASNSequenceNumber", 3, 0));
        fStmt.Parameters.Add(StringParam("ShipFromPartyNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("ASNLevel", 1));
        fStmt.Parameters.Add(DateParam("ShipDateTime"));
        fStmt.Parameters.Add(DateParam("DocumentDateTime"));
        fStmt.Parameters.Add(DateParam("DeliveryWindowFirst"));
        fStmt.Parameters.Add(DateParam("DeliveryWindowLast"));
        fStmt.Parameters.Add(DateParam("RequestedArrivalDateTime"));
        fStmt.Parameters.Add(DateParam("ScheduledArrivalDateTime"));
        fStmt.Parameters.Add(StringParam("ForwarderIdentity", 35));
        fStmt.Parameters.Add(NumberParam("NumberOfLoadCarriers", 8, 0));
        fStmt.Parameters.Add(NumberParam("EstimatedVolume", 19, 9));
        fStmt.Parameters.Add(StringParam("VolumeUOMIdentity", 17));
        fStmt.Parameters.Add(StringParam("Instructions", 400));
        fStmt.Parameters.Add(StringParam("VehicleIdentity", 17));
        fStmt.Parameters.Add(StringParam("BillOfLadingNumber", 35));
        fStmt.Parameters.Add(StringParam("PackingSlipNumber", 35));
        fStmt.Parameters.Add(StringParam("ShipFromPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipFromPartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("ShipToPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToPartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("ShipToPartyNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShippedFromWarehouseIdentity", 4));
        fStmt.Parameters.Add(StringParam("ShippedOnDepartureIdentity", 35));

        fStmt.Prepare();

        aASNLoadCarrierInsert = new ASNLoadCarrierInsert(owner);
        aASNLineInsert = new ASNLineInsert(owner);
    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ASNHeadDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ASNHeadDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ASNIdentity != null)
        {
            if (p.ASNIdentity.Length > 35)
                error.AppendLine("Value for ASNHeadDoc.ASNIdentity too long, max 35 chars");

            if (p.ASNIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ASNHeadDoc.ASNIdentity not allowed");

            (fStmt.Parameters["ASNIdentity"] as IDbDataParameter).Value = p.ASNIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter ASNHeadDoc.ASNIdentity not allowed");


        if (p.ASNSequenceNumber != null)
        {
            (fStmt.Parameters["ASNSequenceNumber"] as IDbDataParameter).Value = p.ASNSequenceNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter ASNHeadDoc.ASNSequenceNumber not allowed");


        if (p.ShipFromPartyNodeIdentity != null)
        {
            if (p.ShipFromPartyNodeIdentity.Length > 35)
                error.AppendLine("Value for ASNHeadDoc.ShipFromPartyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipFromPartyNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.ASNLevel != null)
        {
            if (p.ASNLevel.Length > 1)
                error.AppendLine("Value for ASNHeadDoc.ASNLevel too long, max 1 chars");

            (fStmt.Parameters["ASNLevel"] as IDbDataParameter).Value = p.ASNLevel;
        }
        else
            (fStmt.Parameters["ASNLevel"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipDateTime != null)
        {
            (fStmt.Parameters["ShipDateTime"] as IDbDataParameter).Value = p.ShipDateTime;
        }
        else
            (fStmt.Parameters["ShipDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DocumentDateTime != null)
        {
            (fStmt.Parameters["DocumentDateTime"] as IDbDataParameter).Value = p.DocumentDateTime;
        }
        else
            (fStmt.Parameters["DocumentDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveryWindowFirst != null)
        {
            (fStmt.Parameters["DeliveryWindowFirst"] as IDbDataParameter).Value = p.DeliveryWindowFirst;
        }
        else
            (fStmt.Parameters["DeliveryWindowFirst"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveryWindowLast != null)
        {
            (fStmt.Parameters["DeliveryWindowLast"] as IDbDataParameter).Value = p.DeliveryWindowLast;
        }
        else
            (fStmt.Parameters["DeliveryWindowLast"] as IDbDataParameter).Value = DBNull.Value;

        if (p.RequestedArrivalDateTime != null)
        {
            (fStmt.Parameters["RequestedArrivalDateTime"] as IDbDataParameter).Value = p.RequestedArrivalDateTime;
        }
        else
            (fStmt.Parameters["RequestedArrivalDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ScheduledArrivalDateTime != null)
        {
            (fStmt.Parameters["ScheduledArrivalDateTime"] as IDbDataParameter).Value = p.ScheduledArrivalDateTime;
        }
        else
            error.AppendLine("Null value for mandatory parameter ASNHeadDoc.ScheduledArrivalDateTime not allowed");


        if (p.ForwarderIdentity != null)
        {
            if (p.ForwarderIdentity.Length > 35)
                error.AppendLine("Value for ASNHeadDoc.ForwarderIdentity too long, max 35 chars");

            (fStmt.Parameters["ForwarderIdentity"] as IDbDataParameter).Value = p.ForwarderIdentity;
        }
        else
            (fStmt.Parameters["ForwarderIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.NumberOfLoadCarriers != null)
        {
            (fStmt.Parameters["NumberOfLoadCarriers"] as IDbDataParameter).Value = p.NumberOfLoadCarriers;
        }
        else
            (fStmt.Parameters["NumberOfLoadCarriers"] as IDbDataParameter).Value = DBNull.Value;

        if (p.EstimatedVolume != null)
        {
            (fStmt.Parameters["EstimatedVolume"] as IDbDataParameter).Value = p.EstimatedVolume;
        }
        else
            (fStmt.Parameters["EstimatedVolume"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VolumeUOMIdentity != null)
        {
            if (p.VolumeUOMIdentity.Length > 17)
                error.AppendLine("Value for ASNHeadDoc.VolumeUOMIdentity too long, max 17 chars");

            (fStmt.Parameters["VolumeUOMIdentity"] as IDbDataParameter).Value = p.VolumeUOMIdentity;
        }
        else
            (fStmt.Parameters["VolumeUOMIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Instructions != null)
        {
            if (p.Instructions.Length > 400)
                error.AppendLine("Value for ASNHeadDoc.Instructions too long, max 400 chars");

            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = p.Instructions;
        }
        else
            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VehicleIdentity != null)
        {
            if (p.VehicleIdentity.Length > 17)
                error.AppendLine("Value for ASNHeadDoc.VehicleIdentity too long, max 17 chars");

            (fStmt.Parameters["VehicleIdentity"] as IDbDataParameter).Value = p.VehicleIdentity;
        }
        else
            (fStmt.Parameters["VehicleIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.BillOfLadingNumber != null)
        {
            if (p.BillOfLadingNumber.Length > 35)
                error.AppendLine("Value for ASNHeadDoc.BillOfLadingNumber too long, max 35 chars");

            (fStmt.Parameters["BillOfLadingNumber"] as IDbDataParameter).Value = p.BillOfLadingNumber;
        }
        else
            (fStmt.Parameters["BillOfLadingNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackingSlipNumber != null)
        {
            if (p.PackingSlipNumber.Length > 35)
                error.AppendLine("Value for ASNHeadDoc.PackingSlipNumber too long, max 35 chars");

            (fStmt.Parameters["PackingSlipNumber"] as IDbDataParameter).Value = p.PackingSlipNumber;
        }
        else
            (fStmt.Parameters["PackingSlipNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromPartyIdentity != null)
        {
            if (p.ShipFromPartyIdentity.Length > 35)
                error.AppendLine("Value for ASNHeadDoc.ShipFromPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = p.ShipFromPartyIdentity;
        }
        else
            (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromPartyQualifier != null)
        {
            if (p.ShipFromPartyQualifier.Length > 3)
                error.AppendLine("Value for ASNHeadDoc.ShipFromPartyQualifier too long, max 3 chars");

            (fStmt.Parameters["ShipFromPartyQualifier"] as IDbDataParameter).Value = p.ShipFromPartyQualifier;
        }
        else
            (fStmt.Parameters["ShipFromPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyIdentity != null)
        {
            if (p.ShipToPartyIdentity.Length > 35)
                error.AppendLine("Value for ASNHeadDoc.ShipToPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = p.ShipToPartyIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyQualifier != null)
        {
            if (p.ShipToPartyQualifier.Length > 3)
                error.AppendLine("Value for ASNHeadDoc.ShipToPartyQualifier too long, max 3 chars");

            (fStmt.Parameters["ShipToPartyQualifier"] as IDbDataParameter).Value = p.ShipToPartyQualifier;
        }
        else
            (fStmt.Parameters["ShipToPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyNodeIdentity != null)
        {
            if (p.ShipToPartyNodeIdentity.Length > 35)
                error.AppendLine("Value for ASNHeadDoc.ShipToPartyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipToPartyNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShippedFromWarehouseIdentity != null)
        {
            if (p.ShippedFromWarehouseIdentity.Length > 4)
                error.AppendLine("Value for ASNHeadDoc.ShippedFromWarehouseIdentity too long, max 4 chars");

            (fStmt.Parameters["ShippedFromWarehouseIdentity"] as IDbDataParameter).Value = p.ShippedFromWarehouseIdentity;
        }
        else
            (fStmt.Parameters["ShippedFromWarehouseIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShippedOnDepartureIdentity != null)
        {
            if (p.ShippedOnDepartureIdentity.Length > 35)
                error.AppendLine("Value for ASNHeadDoc.ShippedOnDepartureIdentity too long, max 35 chars");

            (fStmt.Parameters["ShippedOnDepartureIdentity"] as IDbDataParameter).Value = p.ShippedOnDepartureIdentity;
        }
        else
            (fStmt.Parameters["ShippedOnDepartureIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

        if (p.aASNLoadCarrierDocs != null)
            foreach (ASNLoadCarrierDoc c in p.aASNLoadCarrierDocs)
                aASNLoadCarrierInsert.Process(ref trans, this, c);
        if (p.aASNLineDocs != null)
            foreach (ASNLineDoc d in p.aASNLineDocs)
                aASNLineInsert.Process(ref trans, this, d);
      }
  }

  public class ASNLoadCarrierInsert : SegmentImpl
  {

    public ASNLoadCarrierInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_ASNIN_CARRIER ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ASNIdentity");
        s.Append(",ASNSequenceNumber");
        s.Append(",ShipFromPartyNodeIdentity");
        s.Append(",LoadCarrierIdentity");
        s.Append(",ClientIdentity");
        s.Append(",LoadCarrierQualifier");
        s.Append(",LoadCarrierType");
        s.Append(",ExternalLoadCarrierType");
        s.Append(",ParentLoadCarrierIdentity");
        s.Append(",ShipToCustomerNodeIdentity");
        s.Append(",ShipToCustomerIdentity");
        s.Append(",ShipToCustomerQualifier");
        s.Append(",Instructions");
        s.Append(",TotalWeight");
        s.Append(",WeightUOMIdentity");
        s.Append(",TotalVolume");
        s.Append(",VolumeUOMIdentity");
        s.Append(",TotalHeight");
        s.Append(",HeightUOMIdentity");
        s.Append(",ProductTransportIdentity");
        s.Append(",ShipFromPartyIdentity");
        s.Append(",ShipToPartyIdentity");
        s.Append(",ShipToPartyNodeIdentity");
        s.Append(",ShipToPartyQualifier");
        s.Append(",PreBookedTransitOrderRef");
        s.Append(",FirstPlannedDeliveryDtm");
        s.Append(",LastPlannedDeliveryDtm");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ASNIdentity");
        s.Append(",:ASNSequenceNumber");
        s.Append(",:ShipFromPartyNodeIdentity");
        s.Append(",:LoadCarrierIdentity");
        s.Append(",:ClientIdentity");
        s.Append(",:LoadCarrierQualifier");
        s.Append(",:LoadCarrierType");
        s.Append(",:ExternalLoadCarrierType");
        s.Append(",:ParentLoadCarrierIdentity");
        s.Append(",:ShipToCustomerNodeIdentity");
        s.Append(",:ShipToCustomerIdentity");
        s.Append(",:ShipToCustomerQualifier");
        s.Append(",:Instructions");
        s.Append(",:TotalWeight");
        s.Append(",:WeightUOMIdentity");
        s.Append(",:TotalVolume");
        s.Append(",:VolumeUOMIdentity");
        s.Append(",:TotalHeight");
        s.Append(",:HeightUOMIdentity");
        s.Append(",:ProductTransportIdentity");
        s.Append(",:ShipFromPartyIdentity");
        s.Append(",:ShipToPartyIdentity");
        s.Append(",:ShipToPartyNodeIdentity");
        s.Append(",:ShipToPartyQualifier");
        s.Append(",:PreBookedTransitOrderRef");
        s.Append(",:FirstPlannedDeliveryDtm");
        s.Append(",:LastPlannedDeliveryDtm");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ASNIdentity", 35));
        fStmt.Parameters.Add(NumberParam("ASNSequenceNumber", 3, 0));
        fStmt.Parameters.Add(StringParam("ShipFromPartyNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("LoadCarrierIdentity", 35));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("LoadCarrierQualifier", 4));
        fStmt.Parameters.Add(StringParam("LoadCarrierType", 3));
        fStmt.Parameters.Add(StringParam("ExternalLoadCarrierType", 20));
        fStmt.Parameters.Add(StringParam("ParentLoadCarrierIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomerNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomerIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomerQualifier", 3));
        fStmt.Parameters.Add(StringParam("Instructions", 400));
        fStmt.Parameters.Add(NumberParam("TotalWeight", 16, 6));
        fStmt.Parameters.Add(StringParam("WeightUOMIdentity", 17));
        fStmt.Parameters.Add(NumberParam("TotalVolume", 19, 9));
        fStmt.Parameters.Add(StringParam("VolumeUOMIdentity", 17));
        fStmt.Parameters.Add(NumberParam("TotalHeight", 9, 4));
        fStmt.Parameters.Add(StringParam("HeightUOMIdentity", 17));
        fStmt.Parameters.Add(StringParam("ProductTransportIdentity", 5));
        fStmt.Parameters.Add(StringParam("ShipFromPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToPartyNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToPartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("PreBookedTransitOrderRef", 100));
        fStmt.Parameters.Add(DateParam("FirstPlannedDeliveryDtm"));
        fStmt.Parameters.Add(DateParam("LastPlannedDeliveryDtm"));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ASNLoadCarrierDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ASNLoadCarrierDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ASNIdentity != null)
        {
            if (p.ASNIdentity.Length > 35)
                error.AppendLine("Value for ASNLoadCarrierDoc.ASNIdentity too long, max 35 chars");

            if (p.ASNIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ASNLoadCarrierDoc.ASNIdentity not allowed");

            (fStmt.Parameters["ASNIdentity"] as IDbDataParameter).Value = p.ASNIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter ASNLoadCarrierDoc.ASNIdentity not allowed");


        if (p.ASNSequenceNumber != null)
        {
            (fStmt.Parameters["ASNSequenceNumber"] as IDbDataParameter).Value = p.ASNSequenceNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter ASNLoadCarrierDoc.ASNSequenceNumber not allowed");


        if (p.ShipFromPartyNodeIdentity != null)
        {
            if (p.ShipFromPartyNodeIdentity.Length > 35)
                error.AppendLine("Value for ASNLoadCarrierDoc.ShipFromPartyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipFromPartyNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LoadCarrierIdentity != null)
        {
            if (p.LoadCarrierIdentity.Length > 35)
                error.AppendLine("Value for ASNLoadCarrierDoc.LoadCarrierIdentity too long, max 35 chars");

            if (p.LoadCarrierIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ASNLoadCarrierDoc.LoadCarrierIdentity not allowed");

            (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = p.LoadCarrierIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter ASNLoadCarrierDoc.LoadCarrierIdentity not allowed");


        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.LoadCarrierQualifier != null)
        {
            if (p.LoadCarrierQualifier.Length > 4)
                error.AppendLine("Value for ASNLoadCarrierDoc.LoadCarrierQualifier too long, max 4 chars");

            (fStmt.Parameters["LoadCarrierQualifier"] as IDbDataParameter).Value = p.LoadCarrierQualifier;
        }
        else
            (fStmt.Parameters["LoadCarrierQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LoadCarrierType != null)
        {
            if (p.LoadCarrierType.Length > 3)
                error.AppendLine("Value for ASNLoadCarrierDoc.LoadCarrierType too long, max 3 chars");

            (fStmt.Parameters["LoadCarrierType"] as IDbDataParameter).Value = p.LoadCarrierType;
        }
        else
            (fStmt.Parameters["LoadCarrierType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ExternalLoadCarrierType != null)
        {
            if (p.ExternalLoadCarrierType.Length > 20)
                error.AppendLine("Value for ASNLoadCarrierDoc.ExternalLoadCarrierType too long, max 20 chars");

            (fStmt.Parameters["ExternalLoadCarrierType"] as IDbDataParameter).Value = p.ExternalLoadCarrierType;
        }
        else
            (fStmt.Parameters["ExternalLoadCarrierType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ParentLoadCarrierIdentity != null)
        {
            if (p.ParentLoadCarrierIdentity.Length > 35)
                error.AppendLine("Value for ASNLoadCarrierDoc.ParentLoadCarrierIdentity too long, max 35 chars");

            (fStmt.Parameters["ParentLoadCarrierIdentity"] as IDbDataParameter).Value = p.ParentLoadCarrierIdentity;
        }
        else
            (fStmt.Parameters["ParentLoadCarrierIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomerNodeIdentity != null)
        {
            if (p.ShipToCustomerNodeIdentity.Length > 35)
                error.AppendLine("Value for ASNLoadCarrierDoc.ShipToCustomerNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToCustomerNodeIdentity"] as IDbDataParameter).Value = p.ShipToCustomerNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipToCustomerNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomerIdentity != null)
        {
            if (p.ShipToCustomerIdentity.Length > 35)
                error.AppendLine("Value for ASNLoadCarrierDoc.ShipToCustomerIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToCustomerIdentity"] as IDbDataParameter).Value = p.ShipToCustomerIdentity;
        }
        else
            (fStmt.Parameters["ShipToCustomerIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomerQualifier != null)
        {
            if (p.ShipToCustomerQualifier.Length > 3)
                error.AppendLine("Value for ASNLoadCarrierDoc.ShipToCustomerQualifier too long, max 3 chars");

            (fStmt.Parameters["ShipToCustomerQualifier"] as IDbDataParameter).Value = p.ShipToCustomerQualifier;
        }
        else
            (fStmt.Parameters["ShipToCustomerQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Instructions != null)
        {
            if (p.Instructions.Length > 400)
                error.AppendLine("Value for ASNLoadCarrierDoc.Instructions too long, max 400 chars");

            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = p.Instructions;
        }
        else
            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TotalWeight != null)
        {
            (fStmt.Parameters["TotalWeight"] as IDbDataParameter).Value = p.TotalWeight;
        }
        else
            (fStmt.Parameters["TotalWeight"] as IDbDataParameter).Value = DBNull.Value;

        if (p.WeightUOMIdentity != null)
        {
            if (p.WeightUOMIdentity.Length > 17)
                error.AppendLine("Value for ASNLoadCarrierDoc.WeightUOMIdentity too long, max 17 chars");

            (fStmt.Parameters["WeightUOMIdentity"] as IDbDataParameter).Value = p.WeightUOMIdentity;
        }
        else
            (fStmt.Parameters["WeightUOMIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TotalVolume != null)
        {
            (fStmt.Parameters["TotalVolume"] as IDbDataParameter).Value = p.TotalVolume;
        }
        else
            (fStmt.Parameters["TotalVolume"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VolumeUOMIdentity != null)
        {
            if (p.VolumeUOMIdentity.Length > 17)
                error.AppendLine("Value for ASNLoadCarrierDoc.VolumeUOMIdentity too long, max 17 chars");

            (fStmt.Parameters["VolumeUOMIdentity"] as IDbDataParameter).Value = p.VolumeUOMIdentity;
        }
        else
            (fStmt.Parameters["VolumeUOMIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TotalHeight != null)
        {
            (fStmt.Parameters["TotalHeight"] as IDbDataParameter).Value = p.TotalHeight;
        }
        else
            (fStmt.Parameters["TotalHeight"] as IDbDataParameter).Value = DBNull.Value;

        if (p.HeightUOMIdentity != null)
        {
            if (p.HeightUOMIdentity.Length > 17)
                error.AppendLine("Value for ASNLoadCarrierDoc.HeightUOMIdentity too long, max 17 chars");

            (fStmt.Parameters["HeightUOMIdentity"] as IDbDataParameter).Value = p.HeightUOMIdentity;
        }
        else
            (fStmt.Parameters["HeightUOMIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductTransportIdentity != null)
        {
            if (p.ProductTransportIdentity.Length > 5)
                error.AppendLine("Value for ASNLoadCarrierDoc.ProductTransportIdentity too long, max 5 chars");

            (fStmt.Parameters["ProductTransportIdentity"] as IDbDataParameter).Value = p.ProductTransportIdentity;
        }
        else
            (fStmt.Parameters["ProductTransportIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromPartyIdentity != null)
        {
            if (p.ShipFromPartyIdentity.Length > 35)
                error.AppendLine("Value for ASNLoadCarrierDoc.ShipFromPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = p.ShipFromPartyIdentity;
        }
        else
            (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyIdentity != null)
        {
            if (p.ShipToPartyIdentity.Length > 35)
                error.AppendLine("Value for ASNLoadCarrierDoc.ShipToPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = p.ShipToPartyIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyNodeIdentity != null)
        {
            if (p.ShipToPartyNodeIdentity.Length > 35)
                error.AppendLine("Value for ASNLoadCarrierDoc.ShipToPartyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipToPartyNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyQualifier != null)
        {
            if (p.ShipToPartyQualifier.Length > 3)
                error.AppendLine("Value for ASNLoadCarrierDoc.ShipToPartyQualifier too long, max 3 chars");

            (fStmt.Parameters["ShipToPartyQualifier"] as IDbDataParameter).Value = p.ShipToPartyQualifier;
        }
        else
            (fStmt.Parameters["ShipToPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PreBookedTransitOrderRef != null)
        {
            if (p.PreBookedTransitOrderRef.Length > 100)
                error.AppendLine("Value for ASNLoadCarrierDoc.PreBookedTransitOrderRef too long, max 100 chars");

            (fStmt.Parameters["PreBookedTransitOrderRef"] as IDbDataParameter).Value = p.PreBookedTransitOrderRef;
        }
        else
            (fStmt.Parameters["PreBookedTransitOrderRef"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FirstPlannedDeliveryDtm != null)
        {
            (fStmt.Parameters["FirstPlannedDeliveryDtm"] as IDbDataParameter).Value = p.FirstPlannedDeliveryDtm;
        }
        else
            (fStmt.Parameters["FirstPlannedDeliveryDtm"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LastPlannedDeliveryDtm != null)
        {
            (fStmt.Parameters["LastPlannedDeliveryDtm"] as IDbDataParameter).Value = p.LastPlannedDeliveryDtm;
        }
        else
            (fStmt.Parameters["LastPlannedDeliveryDtm"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class ASNLineInsert : SegmentImpl
  {

    public ASNLineInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_ASNIN_LINE ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ASNIdentity");
        s.Append(",ASNSequenceNumber");
        s.Append(",ShipFromPartyNodeIdentity");
        s.Append(",ASNLineNumber");
        s.Append(",ASNLineSequenceNumber");
        s.Append(",LoadCarrierIdentity");
        s.Append(",ClientIdentity");
        s.Append(",OwnerIdentity");
        s.Append(",ProductNumberShipFromPartner");
        s.Append(",ProductNumberShipToPartner");
        s.Append(",GlobalProductNumber");
        s.Append(",ExpiryDate");
        s.Append(",ManufacturingDate");
        s.Append(",ProductionLotIdentity");
        s.Append(",ProductionSubLotIdentity");
        s.Append(",MarketingLotIdentity");
        s.Append(",StorageLot");
        s.Append(",SerialNumber");
        s.Append(",ShippedQuantity");
        s.Append(",Volume");
        s.Append(",VolumeUOMIdentity");
        s.Append(",Weight");
        s.Append(",WeightUOMIdentity");
        s.Append(",PurchaseOrderNumber");
        s.Append(",PurchaseOrderSequence");
        s.Append(",PurchaseOrderLinePos");
        s.Append(",PurchaseOrderLineSeq");
        s.Append(",Instructions");
        s.Append(",VendorIdentity");
        s.Append(",VendorPartyNodeIdentity");
        s.Append(",PredefinedItemLoadIdentity");
        s.Append(",MeasuredQuantity");
        s.Append(",MeasureQualifier");
        s.Append(",PackingMaterial");
        s.Append(",ShipFromPartyIdentity");
        s.Append(",ShipToPartyIdentity");
        s.Append(",ShipToPartyNodeIdentity");
        s.Append(",ShipToPartyQualifier");
        s.Append(",CustomerOrderType");
        s.Append(",StockedProductNumber");
        s.Append(",GlobalStockedProductNumber");
        s.Append(",ActionCode");
        s.Append(",ReasonCode");
        s.Append(",ReasonText");
        s.Append(",FromPartyIdentity");
        s.Append(",FromPartyQualifier");
        s.Append(",CustomerReturnOrderNumber");
        s.Append(",CustomerReturnOrderSequence");
        s.Append(",CustomerReturnOrderLinePos");
        s.Append(",CustomerReturnOrderLineKitPos");
        s.Append(",CustomerReturnOrderLineSeq");
        s.Append(",ShipToVendorIdentity");
        s.Append(",ShipToVendorQualifier");
        s.Append(",ActionCodeRequirement");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderSequence");
        s.Append(",CustomerOrderLinePosition");
        s.Append(",CustomerOrderLineSequence");
        s.Append(",CustomerOrderLineKitPosition");
        s.Append(",OwnerIdentityAtShipToCustomer");
        s.Append(",OriginalPurchaseOrderNumber");
        s.Append(",OriginalPurchaseOrderSequence");
        s.Append(",OriginalPurchaseOrderLinePos");
        s.Append(",OriginalPurchaseOrderLineSeq");
        s.Append(",OriginalCustomerReference");
        s.Append(",InventoryStatusCode");
        s.Append(",InventoryStatusDays");
        s.Append(",InventorystatusKey");
        s.Append(",InventorystatusText");
        s.Append(",InventorystatusAlarmDate");
        s.Append(",DiscrepancyQuantity");
        s.Append(",DiscrepancyCode");
        s.Append(",DiscrepancyText");
        s.Append(",ShipToCustomerNodeIdentity");
        s.Append(",ShipToCustomerIdentity");
        s.Append(",ShipToCustomerQualifier");
        s.Append(",SellToCustomerIdentity");
        s.Append(",SellToCustomerQualifier");
        s.Append(",ProductNumber");
        s.Append(",ProductDescription");
        s.Append(",ProductNumberType");
        s.Append(",AlternativeProductNumber");
        s.Append(",AlternativeProductDescription");
        s.Append(",ProductDate");
        s.Append(",VendorProductNumber");
        s.Append(",PurchasePrice");
        s.Append(",PackageIdentity");
        s.Append(",QuantityUpperTolerance");
        s.Append(",CatchMeasureLowerTolerance");
        s.Append(",CatchMeasureUpperTolerance");
        s.Append(",ManufacturingUnit");
        s.Append(",ReserveForAssembly");
        s.Append(",CustomsRequirement");
        s.Append(",OriginalCountry");
        s.Append(",ExportingCountry");
        s.Append(",DestinationCountry");
        s.Append(",CarrierTypeContainer");
        s.Append(",GoodsMarking");
        s.Append(",MainModeofTransport");
        s.Append(",CountryMainFreightIdentity");
        s.Append(",FinalModeofTransport");
        s.Append(",CountryFinalFreightIdentity");
        s.Append(",IncomingGoodsNumber");
        s.Append(",TypeofGoods");
        s.Append(",MainFreightIdentity");
        s.Append(",FinalFreightIdentity");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ASNIdentity");
        s.Append(",:ASNSequenceNumber");
        s.Append(",:ShipFromPartyNodeIdentity");
        s.Append(",:ASNLineNumber");
        s.Append(",:ASNLineSequenceNumber");
        s.Append(",:LoadCarrierIdentity");
        s.Append(",:ClientIdentity");
        s.Append(",:OwnerIdentity");
        s.Append(",:ProductNumberShipFromPartner");
        s.Append(",:ProductNumberShipToPartner");
        s.Append(",:GlobalProductNumber");
        s.Append(",:ExpiryDate");
        s.Append(",:ManufacturingDate");
        s.Append(",:ProductionLotIdentity");
        s.Append(",:ProductionSubLotIdentity");
        s.Append(",:MarketingLotIdentity");
        s.Append(",:StorageLot");
        s.Append(",:SerialNumber");
        s.Append(",:ShippedQuantity");
        s.Append(",:Volume");
        s.Append(",:VolumeUOMIdentity");
        s.Append(",:Weight");
        s.Append(",:WeightUOMIdentity");
        s.Append(",:PurchaseOrderNumber");
        s.Append(",:PurchaseOrderSequence");
        s.Append(",:PurchaseOrderLinePos");
        s.Append(",:PurchaseOrderLineSeq");
        s.Append(",:Instructions");
        s.Append(",:VendorIdentity");
        s.Append(",:VendorPartyNodeIdentity");
        s.Append(",:PredefinedItemLoadIdentity");
        s.Append(",:MeasuredQuantity");
        s.Append(",:MeasureQualifier");
        s.Append(",:PackingMaterial");
        s.Append(",:ShipFromPartyIdentity");
        s.Append(",:ShipToPartyIdentity");
        s.Append(",:ShipToPartyNodeIdentity");
        s.Append(",:ShipToPartyQualifier");
        s.Append(",:CustomerOrderType");
        s.Append(",:StockedProductNumber");
        s.Append(",:GlobalStockedProductNumber");
        s.Append(",:ActionCode");
        s.Append(",:ReasonCode");
        s.Append(",:ReasonText");
        s.Append(",:FromPartyIdentity");
        s.Append(",:FromPartyQualifier");
        s.Append(",:CustomerReturnOrderNumber");
        s.Append(",:CustomerReturnOrderSequence");
        s.Append(",:CustomerReturnOrderLinePos");
        s.Append(",:CustomerReturnOrderLineKitPos");
        s.Append(",:CustomerReturnOrderLineSeq");
        s.Append(",:ShipToVendorIdentity");
        s.Append(",:ShipToVendorQualifier");
        s.Append(",:ActionCodeRequirement");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderSequence");
        s.Append(",:CustomerOrderLinePosition");
        s.Append(",:CustomerOrderLineSequence");
        s.Append(",:CustomerOrderLineKitPosition");
        s.Append(",:OwnerIdentityAtShipToCustomer");
        s.Append(",:OriginalPurchaseOrderNumber");
        s.Append(",:OriginalPurchaseOrderSequence");
        s.Append(",:OriginalPurchaseOrderLinePos");
        s.Append(",:OriginalPurchaseOrderLineSeq");
        s.Append(",:OriginalCustomerReference");
        s.Append(",:InventoryStatusCode");
        s.Append(",:InventoryStatusDays");
        s.Append(",:InventorystatusKey");
        s.Append(",:InventorystatusText");
        s.Append(",:InventorystatusAlarmDate");
        s.Append(",:DiscrepancyQuantity");
        s.Append(",:DiscrepancyCode");
        s.Append(",:DiscrepancyText");
        s.Append(",:ShipToCustomerNodeIdentity");
        s.Append(",:ShipToCustomerIdentity");
        s.Append(",:ShipToCustomerQualifier");
        s.Append(",:SellToCustomerIdentity");
        s.Append(",:SellToCustomerQualifier");
        s.Append(",:ProductNumber");
        s.Append(",:ProductDescription");
        s.Append(",:ProductNumberType");
        s.Append(",:AlternativeProductNumber");
        s.Append(",:AlternativeProductDescription");
        s.Append(",:ProductDate");
        s.Append(",:VendorProductNumber");
        s.Append(",:PurchasePrice");
        s.Append(",:PackageIdentity");
        s.Append(",:QuantityUpperTolerance");
        s.Append(",:CatchMeasureLowerTolerance");
        s.Append(",:CatchMeasureUpperTolerance");
        s.Append(",:ManufacturingUnit");
        s.Append(",:ReserveForAssembly");
        s.Append(",:CustomsRequirement");
        s.Append(",:OriginalCountry");
        s.Append(",:ExportingCountry");
        s.Append(",:DestinationCountry");
        s.Append(",:CarrierTypeContainer");
        s.Append(",:GoodsMarking");
        s.Append(",:MainModeofTransport");
        s.Append(",:CountryMainFreightIdentity");
        s.Append(",:FinalModeofTransport");
        s.Append(",:CountryFinalFreightIdentity");
        s.Append(",:IncomingGoodsNumber");
        s.Append(",:TypeofGoods");
        s.Append(",:MainFreightIdentity");
        s.Append(",:FinalFreightIdentity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ASNIdentity", 35));
        fStmt.Parameters.Add(NumberParam("ASNSequenceNumber", 3, 0));
        fStmt.Parameters.Add(StringParam("ShipFromPartyNodeIdentity", 35));
        fStmt.Parameters.Add(NumberParam("ASNLineNumber", 5, 0));
        fStmt.Parameters.Add(NumberParam("ASNLineSequenceNumber", 3, 0));
        fStmt.Parameters.Add(StringParam("LoadCarrierIdentity", 35));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("OwnerIdentity", 35));
        fStmt.Parameters.Add(StringParam("ProductNumberShipFromPartner", 35));
        fStmt.Parameters.Add(StringParam("ProductNumberShipToPartner", 35));
        fStmt.Parameters.Add(StringParam("GlobalProductNumber", 35));
        fStmt.Parameters.Add(DateParam("ExpiryDate"));
        fStmt.Parameters.Add(DateParam("ManufacturingDate"));
        fStmt.Parameters.Add(StringParam("ProductionLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("ProductionSubLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("MarketingLotIdentity", 20));
        fStmt.Parameters.Add(StringParam("StorageLot", 20));
        fStmt.Parameters.Add(StringParam("SerialNumber", 21));
        fStmt.Parameters.Add(NumberParam("ShippedQuantity", 20, 6));
        fStmt.Parameters.Add(NumberParam("Volume", 19, 9));
        fStmt.Parameters.Add(StringParam("VolumeUOMIdentity", 17));
        fStmt.Parameters.Add(NumberParam("Weight", 16, 6));
        fStmt.Parameters.Add(StringParam("WeightUOMIdentity", 17));
        fStmt.Parameters.Add(StringParam("PurchaseOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderLinePos", 4, 0));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderLineSeq", 3, 0));
        fStmt.Parameters.Add(StringParam("Instructions", 400));
        fStmt.Parameters.Add(StringParam("VendorIdentity", 35));
        fStmt.Parameters.Add(StringParam("VendorPartyNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("PredefinedItemLoadIdentity", 35));
        fStmt.Parameters.Add(NumberParam("MeasuredQuantity", 20, 6));
        fStmt.Parameters.Add(StringParam("MeasureQualifier", 4));
        fStmt.Parameters.Add(StringParam("PackingMaterial", 1));
        fStmt.Parameters.Add(StringParam("ShipFromPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToPartyNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToPartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("CustomerOrderType", 2));
        fStmt.Parameters.Add(StringParam("StockedProductNumber", 35));
        fStmt.Parameters.Add(StringParam("GlobalStockedProductNumber", 20));
        fStmt.Parameters.Add(StringParam("ActionCode", 2));
        fStmt.Parameters.Add(StringParam("ReasonCode", 2));
        fStmt.Parameters.Add(StringParam("ReasonText", 400));
        fStmt.Parameters.Add(StringParam("FromPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("FromPartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("CustomerReturnOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLinePos", 5, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineKitPos", 2, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineSeq", 3, 0));
        fStmt.Parameters.Add(StringParam("ShipToVendorIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToVendorQualifier", 3));
        fStmt.Parameters.Add(StringParam("ActionCodeRequirement", 1));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLinePosition", 5, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineKitPosition", 2, 0));
        fStmt.Parameters.Add(StringParam("OwnerIdentityAtShipToCustomer", 35));
        fStmt.Parameters.Add(StringParam("OriginalPurchaseOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("OriginalPurchaseOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("OriginalPurchaseOrderLinePos", 16, 0));
        fStmt.Parameters.Add(NumberParam("OriginalPurchaseOrderLineSeq", 3, 0));
        fStmt.Parameters.Add(StringParam("OriginalCustomerReference", 35));
        fStmt.Parameters.Add(StringParam("InventoryStatusCode", 8));
        fStmt.Parameters.Add(NumberParam("InventoryStatusDays", 5, 0));
        fStmt.Parameters.Add(StringParam("InventorystatusKey", 12));
        fStmt.Parameters.Add(StringParam("InventorystatusText", 200));
        fStmt.Parameters.Add(DateParam("InventorystatusAlarmDate"));
        fStmt.Parameters.Add(NumberParam("DiscrepancyQuantity", 20, 6));
        fStmt.Parameters.Add(StringParam("DiscrepancyCode", 3));
        fStmt.Parameters.Add(StringParam("DiscrepancyText", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomerNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomerIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomerQualifier", 3));
        fStmt.Parameters.Add(StringParam("SellToCustomerIdentity", 35));
        fStmt.Parameters.Add(StringParam("SellToCustomerQualifier", 3));
        fStmt.Parameters.Add(StringParam("ProductNumber", 35));
        fStmt.Parameters.Add(StringParam("ProductDescription", 256));
        fStmt.Parameters.Add(StringParam("ProductNumberType", 1));
        fStmt.Parameters.Add(StringParam("AlternativeProductNumber", 35));
        fStmt.Parameters.Add(StringParam("AlternativeProductDescription", 256));
        fStmt.Parameters.Add(DateParam("ProductDate"));
        fStmt.Parameters.Add(StringParam("VendorProductNumber", 35));
        fStmt.Parameters.Add(NumberParam("PurchasePrice", 22, 7));
        fStmt.Parameters.Add(StringParam("PackageIdentity", 17));
        fStmt.Parameters.Add(NumberParam("QuantityUpperTolerance", 20, 6));
        fStmt.Parameters.Add(NumberParam("CatchMeasureLowerTolerance", 20, 6));
        fStmt.Parameters.Add(NumberParam("CatchMeasureUpperTolerance", 20, 6));
        fStmt.Parameters.Add(StringParam("ManufacturingUnit", 20));
        fStmt.Parameters.Add(StringParam("ReserveForAssembly", 1));
        fStmt.Parameters.Add(StringParam("CustomsRequirement", 1));
        fStmt.Parameters.Add(StringParam("OriginalCountry", 6));
        fStmt.Parameters.Add(StringParam("ExportingCountry", 6));
        fStmt.Parameters.Add(StringParam("DestinationCountry", 6));
        fStmt.Parameters.Add(StringParam("CarrierTypeContainer", 1));
        fStmt.Parameters.Add(StringParam("GoodsMarking", 35));
        fStmt.Parameters.Add(StringParam("MainModeofTransport", 17));
        fStmt.Parameters.Add(StringParam("CountryMainFreightIdentity", 6));
        fStmt.Parameters.Add(StringParam("FinalModeofTransport", 17));
        fStmt.Parameters.Add(StringParam("CountryFinalFreightIdentity", 6));
        fStmt.Parameters.Add(StringParam("IncomingGoodsNumber", 35));
        fStmt.Parameters.Add(StringParam("TypeofGoods", 35));
        fStmt.Parameters.Add(StringParam("MainFreightIdentity", 35));
        fStmt.Parameters.Add(StringParam("FinalFreightIdentity", 35));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ASNLineDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ASNLineDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ASNIdentity != null)
        {
            if (p.ASNIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.ASNIdentity too long, max 35 chars");

            if (p.ASNIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ASNLineDoc.ASNIdentity not allowed");

            (fStmt.Parameters["ASNIdentity"] as IDbDataParameter).Value = p.ASNIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter ASNLineDoc.ASNIdentity not allowed");


        if (p.ASNSequenceNumber != null)
        {
            (fStmt.Parameters["ASNSequenceNumber"] as IDbDataParameter).Value = p.ASNSequenceNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter ASNLineDoc.ASNSequenceNumber not allowed");


        if (p.ShipFromPartyNodeIdentity != null)
        {
            if (p.ShipFromPartyNodeIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.ShipFromPartyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipFromPartyNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ASNLineNumber != null)
        {
            (fStmt.Parameters["ASNLineNumber"] as IDbDataParameter).Value = p.ASNLineNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter ASNLineDoc.ASNLineNumber not allowed");


        if (p.ASNLineSequenceNumber != null)
        {
            (fStmt.Parameters["ASNLineSequenceNumber"] as IDbDataParameter).Value = p.ASNLineSequenceNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter ASNLineDoc.ASNLineSequenceNumber not allowed");


        if (p.LoadCarrierIdentity != null)
        {
            if (p.LoadCarrierIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.LoadCarrierIdentity too long, max 35 chars");

            (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = p.LoadCarrierIdentity;
        }
        else
            (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.OwnerIdentity != null)
        {
            if (p.OwnerIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.OwnerIdentity too long, max 35 chars");

            (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = p.OwnerIdentity;
        }
        else
            (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductNumberShipFromPartner != null)
        {
            if (p.ProductNumberShipFromPartner.Length > 35)
                error.AppendLine("Value for ASNLineDoc.ProductNumberShipFromPartner too long, max 35 chars");

            (fStmt.Parameters["ProductNumberShipFromPartner"] as IDbDataParameter).Value = p.ProductNumberShipFromPartner;
        }
        else
            (fStmt.Parameters["ProductNumberShipFromPartner"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductNumberShipToPartner != null)
        {
            if (p.ProductNumberShipToPartner.Length > 35)
                error.AppendLine("Value for ASNLineDoc.ProductNumberShipToPartner too long, max 35 chars");

            (fStmt.Parameters["ProductNumberShipToPartner"] as IDbDataParameter).Value = p.ProductNumberShipToPartner;
        }
        else
            (fStmt.Parameters["ProductNumberShipToPartner"] as IDbDataParameter).Value = DBNull.Value;

        if (p.GlobalProductNumber != null)
        {
            if (p.GlobalProductNumber.Length > 35)
                error.AppendLine("Value for ASNLineDoc.GlobalProductNumber too long, max 35 chars");

            (fStmt.Parameters["GlobalProductNumber"] as IDbDataParameter).Value = p.GlobalProductNumber;
        }
        else
            (fStmt.Parameters["GlobalProductNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ExpiryDate != null)
        {
            (fStmt.Parameters["ExpiryDate"] as IDbDataParameter).Value = p.ExpiryDate;
        }
        else
            (fStmt.Parameters["ExpiryDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ManufacturingDate != null)
        {
            (fStmt.Parameters["ManufacturingDate"] as IDbDataParameter).Value = p.ManufacturingDate;
        }
        else
            (fStmt.Parameters["ManufacturingDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionLotIdentity != null)
        {
            if (p.ProductionLotIdentity.Length > 40)
                error.AppendLine("Value for ASNLineDoc.ProductionLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = p.ProductionLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionSubLotIdentity != null)
        {
            if (p.ProductionSubLotIdentity.Length > 40)
                error.AppendLine("Value for ASNLineDoc.ProductionSubLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = p.ProductionSubLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MarketingLotIdentity != null)
        {
            if (p.MarketingLotIdentity.Length > 20)
                error.AppendLine("Value for ASNLineDoc.MarketingLotIdentity too long, max 20 chars");

            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = p.MarketingLotIdentity;
        }
        else
            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.StorageLot != null)
        {
            if (p.StorageLot.Length > 20)
                error.AppendLine("Value for ASNLineDoc.StorageLot too long, max 20 chars");

            (fStmt.Parameters["StorageLot"] as IDbDataParameter).Value = p.StorageLot;
        }
        else
            (fStmt.Parameters["StorageLot"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SerialNumber != null)
        {
            if (p.SerialNumber.Length > 21)
                error.AppendLine("Value for ASNLineDoc.SerialNumber too long, max 21 chars");

            (fStmt.Parameters["SerialNumber"] as IDbDataParameter).Value = p.SerialNumber;
        }
        else
            (fStmt.Parameters["SerialNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShippedQuantity != null)
        {
            (fStmt.Parameters["ShippedQuantity"] as IDbDataParameter).Value = p.ShippedQuantity;
        }
        else
            error.AppendLine("Null value for mandatory parameter ASNLineDoc.ShippedQuantity not allowed");


        if (p.Volume != null)
        {
            (fStmt.Parameters["Volume"] as IDbDataParameter).Value = p.Volume;
        }
        else
            (fStmt.Parameters["Volume"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VolumeUOMIdentity != null)
        {
            if (p.VolumeUOMIdentity.Length > 17)
                error.AppendLine("Value for ASNLineDoc.VolumeUOMIdentity too long, max 17 chars");

            (fStmt.Parameters["VolumeUOMIdentity"] as IDbDataParameter).Value = p.VolumeUOMIdentity;
        }
        else
            (fStmt.Parameters["VolumeUOMIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Weight != null)
        {
            (fStmt.Parameters["Weight"] as IDbDataParameter).Value = p.Weight;
        }
        else
            (fStmt.Parameters["Weight"] as IDbDataParameter).Value = DBNull.Value;

        if (p.WeightUOMIdentity != null)
        {
            if (p.WeightUOMIdentity.Length > 17)
                error.AppendLine("Value for ASNLineDoc.WeightUOMIdentity too long, max 17 chars");

            (fStmt.Parameters["WeightUOMIdentity"] as IDbDataParameter).Value = p.WeightUOMIdentity;
        }
        else
            (fStmt.Parameters["WeightUOMIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderNumber != null)
        {
            if (p.PurchaseOrderNumber.Length > 35)
                error.AppendLine("Value for ASNLineDoc.PurchaseOrderNumber too long, max 35 chars");

            (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = p.PurchaseOrderNumber;
        }
        else
            (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderSequence != null)
        {
            (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = p.PurchaseOrderSequence;
        }
        else
            (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderLinePos != null)
        {
            (fStmt.Parameters["PurchaseOrderLinePos"] as IDbDataParameter).Value = p.PurchaseOrderLinePos;
        }
        else
            (fStmt.Parameters["PurchaseOrderLinePos"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderLineSeq != null)
        {
            (fStmt.Parameters["PurchaseOrderLineSeq"] as IDbDataParameter).Value = p.PurchaseOrderLineSeq;
        }
        else
            (fStmt.Parameters["PurchaseOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Instructions != null)
        {
            if (p.Instructions.Length > 400)
                error.AppendLine("Value for ASNLineDoc.Instructions too long, max 400 chars");

            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = p.Instructions;
        }
        else
            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VendorIdentity != null)
        {
            if (p.VendorIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.VendorIdentity too long, max 35 chars");

            (fStmt.Parameters["VendorIdentity"] as IDbDataParameter).Value = p.VendorIdentity;
        }
        else
            (fStmt.Parameters["VendorIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VendorPartyNodeIdentity != null)
        {
            if (p.VendorPartyNodeIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.VendorPartyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["VendorPartyNodeIdentity"] as IDbDataParameter).Value = p.VendorPartyNodeIdentity;
        }
        else
            (fStmt.Parameters["VendorPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PredefinedItemLoadIdentity != null)
        {
            if (p.PredefinedItemLoadIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.PredefinedItemLoadIdentity too long, max 35 chars");

            (fStmt.Parameters["PredefinedItemLoadIdentity"] as IDbDataParameter).Value = p.PredefinedItemLoadIdentity;
        }
        else
            (fStmt.Parameters["PredefinedItemLoadIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MeasuredQuantity != null)
        {
            (fStmt.Parameters["MeasuredQuantity"] as IDbDataParameter).Value = p.MeasuredQuantity;
        }
        else
            (fStmt.Parameters["MeasuredQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MeasureQualifier != null)
        {
            if (p.MeasureQualifier.Length > 4)
                error.AppendLine("Value for ASNLineDoc.MeasureQualifier too long, max 4 chars");

            (fStmt.Parameters["MeasureQualifier"] as IDbDataParameter).Value = p.MeasureQualifier;
        }
        else
            (fStmt.Parameters["MeasureQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackingMaterial != null)
        {
            if (p.PackingMaterial.Length > 1)
                error.AppendLine("Value for ASNLineDoc.PackingMaterial too long, max 1 chars");

            (fStmt.Parameters["PackingMaterial"] as IDbDataParameter).Value = p.PackingMaterial;
        }
        else
            (fStmt.Parameters["PackingMaterial"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromPartyIdentity != null)
        {
            if (p.ShipFromPartyIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.ShipFromPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = p.ShipFromPartyIdentity;
        }
        else
            (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyIdentity != null)
        {
            if (p.ShipToPartyIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.ShipToPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = p.ShipToPartyIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyNodeIdentity != null)
        {
            if (p.ShipToPartyNodeIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.ShipToPartyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipToPartyNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyQualifier != null)
        {
            if (p.ShipToPartyQualifier.Length > 3)
                error.AppendLine("Value for ASNLineDoc.ShipToPartyQualifier too long, max 3 chars");

            (fStmt.Parameters["ShipToPartyQualifier"] as IDbDataParameter).Value = p.ShipToPartyQualifier;
        }
        else
            (fStmt.Parameters["ShipToPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderType != null)
        {
            if (p.CustomerOrderType.Length > 2)
                error.AppendLine("Value for ASNLineDoc.CustomerOrderType too long, max 2 chars");

            (fStmt.Parameters["CustomerOrderType"] as IDbDataParameter).Value = p.CustomerOrderType;
        }
        else
            (fStmt.Parameters["CustomerOrderType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.StockedProductNumber != null)
        {
            if (p.StockedProductNumber.Length > 35)
                error.AppendLine("Value for ASNLineDoc.StockedProductNumber too long, max 35 chars");

            (fStmt.Parameters["StockedProductNumber"] as IDbDataParameter).Value = p.StockedProductNumber;
        }
        else
            (fStmt.Parameters["StockedProductNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.GlobalStockedProductNumber != null)
        {
            if (p.GlobalStockedProductNumber.Length > 20)
                error.AppendLine("Value for ASNLineDoc.GlobalStockedProductNumber too long, max 20 chars");

            (fStmt.Parameters["GlobalStockedProductNumber"] as IDbDataParameter).Value = p.GlobalStockedProductNumber;
        }
        else
            (fStmt.Parameters["GlobalStockedProductNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ActionCode != null)
        {
            if (p.ActionCode.Length > 2)
                error.AppendLine("Value for ASNLineDoc.ActionCode too long, max 2 chars");

            (fStmt.Parameters["ActionCode"] as IDbDataParameter).Value = p.ActionCode;
        }
        else
            (fStmt.Parameters["ActionCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReasonCode != null)
        {
            if (p.ReasonCode.Length > 2)
                error.AppendLine("Value for ASNLineDoc.ReasonCode too long, max 2 chars");

            (fStmt.Parameters["ReasonCode"] as IDbDataParameter).Value = p.ReasonCode;
        }
        else
            (fStmt.Parameters["ReasonCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReasonText != null)
        {
            if (p.ReasonText.Length > 400)
                error.AppendLine("Value for ASNLineDoc.ReasonText too long, max 400 chars");

            (fStmt.Parameters["ReasonText"] as IDbDataParameter).Value = p.ReasonText;
        }
        else
            (fStmt.Parameters["ReasonText"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FromPartyIdentity != null)
        {
            if (p.FromPartyIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.FromPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["FromPartyIdentity"] as IDbDataParameter).Value = p.FromPartyIdentity;
        }
        else
            (fStmt.Parameters["FromPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FromPartyQualifier != null)
        {
            if (p.FromPartyQualifier.Length > 3)
                error.AppendLine("Value for ASNLineDoc.FromPartyQualifier too long, max 3 chars");

            (fStmt.Parameters["FromPartyQualifier"] as IDbDataParameter).Value = p.FromPartyQualifier;
        }
        else
            (fStmt.Parameters["FromPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderNumber != null)
        {
            if (p.CustomerReturnOrderNumber.Length > 35)
                error.AppendLine("Value for ASNLineDoc.CustomerReturnOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = p.CustomerReturnOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderSequence != null)
        {
            (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = p.CustomerReturnOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLinePos != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = p.CustomerReturnOrderLinePos;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLineKitPos != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = p.CustomerReturnOrderLineKitPos;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLineSeq != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = p.CustomerReturnOrderLineSeq;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToVendorIdentity != null)
        {
            if (p.ShipToVendorIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.ShipToVendorIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToVendorIdentity"] as IDbDataParameter).Value = p.ShipToVendorIdentity;
        }
        else
            (fStmt.Parameters["ShipToVendorIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToVendorQualifier != null)
        {
            if (p.ShipToVendorQualifier.Length > 3)
                error.AppendLine("Value for ASNLineDoc.ShipToVendorQualifier too long, max 3 chars");

            (fStmt.Parameters["ShipToVendorQualifier"] as IDbDataParameter).Value = p.ShipToVendorQualifier;
        }
        else
            (fStmt.Parameters["ShipToVendorQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ActionCodeRequirement != null)
        {
            if (p.ActionCodeRequirement.Length > 1)
                error.AppendLine("Value for ASNLineDoc.ActionCodeRequirement too long, max 1 chars");

            (fStmt.Parameters["ActionCodeRequirement"] as IDbDataParameter).Value = p.ActionCodeRequirement;
        }
        else
            (fStmt.Parameters["ActionCodeRequirement"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for ASNLineDoc.CustomerOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLinePosition != null)
        {
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = p.CustomerOrderLinePosition;
        }
        else
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLineSequence != null)
        {
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = p.CustomerOrderLineSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLineKitPosition != null)
        {
            (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = p.CustomerOrderLineKitPosition;
        }
        else
            (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OwnerIdentityAtShipToCustomer != null)
        {
            if (p.OwnerIdentityAtShipToCustomer.Length > 35)
                error.AppendLine("Value for ASNLineDoc.OwnerIdentityAtShipToCustomer too long, max 35 chars");

            (fStmt.Parameters["OwnerIdentityAtShipToCustomer"] as IDbDataParameter).Value = p.OwnerIdentityAtShipToCustomer;
        }
        else
            (fStmt.Parameters["OwnerIdentityAtShipToCustomer"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OriginalPurchaseOrderNumber != null)
        {
            if (p.OriginalPurchaseOrderNumber.Length > 35)
                error.AppendLine("Value for ASNLineDoc.OriginalPurchaseOrderNumber too long, max 35 chars");

            (fStmt.Parameters["OriginalPurchaseOrderNumber"] as IDbDataParameter).Value = p.OriginalPurchaseOrderNumber;
        }
        else
            (fStmt.Parameters["OriginalPurchaseOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OriginalPurchaseOrderSequence != null)
        {
            (fStmt.Parameters["OriginalPurchaseOrderSequence"] as IDbDataParameter).Value = p.OriginalPurchaseOrderSequence;
        }
        else
            (fStmt.Parameters["OriginalPurchaseOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OriginalPurchaseOrderLinePos != null)
        {
            (fStmt.Parameters["OriginalPurchaseOrderLinePos"] as IDbDataParameter).Value = p.OriginalPurchaseOrderLinePos;
        }
        else
            (fStmt.Parameters["OriginalPurchaseOrderLinePos"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OriginalPurchaseOrderLineSeq != null)
        {
            (fStmt.Parameters["OriginalPurchaseOrderLineSeq"] as IDbDataParameter).Value = p.OriginalPurchaseOrderLineSeq;
        }
        else
            (fStmt.Parameters["OriginalPurchaseOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OriginalCustomerReference != null)
        {
            if (p.OriginalCustomerReference.Length > 35)
                error.AppendLine("Value for ASNLineDoc.OriginalCustomerReference too long, max 35 chars");

            (fStmt.Parameters["OriginalCustomerReference"] as IDbDataParameter).Value = p.OriginalCustomerReference;
        }
        else
            (fStmt.Parameters["OriginalCustomerReference"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventoryStatusCode != null)
        {
            if (p.InventoryStatusCode.Length > 8)
                error.AppendLine("Value for ASNLineDoc.InventoryStatusCode too long, max 8 chars");

            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = p.InventoryStatusCode;
        }
        else
            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventoryStatusDays != null)
        {
            (fStmt.Parameters["InventoryStatusDays"] as IDbDataParameter).Value = p.InventoryStatusDays;
        }
        else
            (fStmt.Parameters["InventoryStatusDays"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventorystatusKey != null)
        {
            if (p.InventorystatusKey.Length > 12)
                error.AppendLine("Value for ASNLineDoc.InventorystatusKey too long, max 12 chars");

            (fStmt.Parameters["InventorystatusKey"] as IDbDataParameter).Value = p.InventorystatusKey;
        }
        else
            (fStmt.Parameters["InventorystatusKey"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventorystatusText != null)
        {
            if (p.InventorystatusText.Length > 200)
                error.AppendLine("Value for ASNLineDoc.InventorystatusText too long, max 200 chars");

            (fStmt.Parameters["InventorystatusText"] as IDbDataParameter).Value = p.InventorystatusText;
        }
        else
            (fStmt.Parameters["InventorystatusText"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventorystatusAlarmDate != null)
        {
            (fStmt.Parameters["InventorystatusAlarmDate"] as IDbDataParameter).Value = p.InventorystatusAlarmDate;
        }
        else
            (fStmt.Parameters["InventorystatusAlarmDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DiscrepancyQuantity != null)
        {
            (fStmt.Parameters["DiscrepancyQuantity"] as IDbDataParameter).Value = p.DiscrepancyQuantity;
        }
        else
            (fStmt.Parameters["DiscrepancyQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DiscrepancyCode != null)
        {
            if (p.DiscrepancyCode.Length > 3)
                error.AppendLine("Value for ASNLineDoc.DiscrepancyCode too long, max 3 chars");

            (fStmt.Parameters["DiscrepancyCode"] as IDbDataParameter).Value = p.DiscrepancyCode;
        }
        else
            (fStmt.Parameters["DiscrepancyCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DiscrepancyText != null)
        {
            if (p.DiscrepancyText.Length > 35)
                error.AppendLine("Value for ASNLineDoc.DiscrepancyText too long, max 35 chars");

            (fStmt.Parameters["DiscrepancyText"] as IDbDataParameter).Value = p.DiscrepancyText;
        }
        else
            (fStmt.Parameters["DiscrepancyText"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomerNodeIdentity != null)
        {
            if (p.ShipToCustomerNodeIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.ShipToCustomerNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToCustomerNodeIdentity"] as IDbDataParameter).Value = p.ShipToCustomerNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipToCustomerNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomerIdentity != null)
        {
            if (p.ShipToCustomerIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.ShipToCustomerIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToCustomerIdentity"] as IDbDataParameter).Value = p.ShipToCustomerIdentity;
        }
        else
            (fStmt.Parameters["ShipToCustomerIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomerQualifier != null)
        {
            if (p.ShipToCustomerQualifier.Length > 3)
                error.AppendLine("Value for ASNLineDoc.ShipToCustomerQualifier too long, max 3 chars");

            (fStmt.Parameters["ShipToCustomerQualifier"] as IDbDataParameter).Value = p.ShipToCustomerQualifier;
        }
        else
            (fStmt.Parameters["ShipToCustomerQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SellToCustomerIdentity != null)
        {
            if (p.SellToCustomerIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.SellToCustomerIdentity too long, max 35 chars");

            (fStmt.Parameters["SellToCustomerIdentity"] as IDbDataParameter).Value = p.SellToCustomerIdentity;
        }
        else
            (fStmt.Parameters["SellToCustomerIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SellToCustomerQualifier != null)
        {
            if (p.SellToCustomerQualifier.Length > 3)
                error.AppendLine("Value for ASNLineDoc.SellToCustomerQualifier too long, max 3 chars");

            (fStmt.Parameters["SellToCustomerQualifier"] as IDbDataParameter).Value = p.SellToCustomerQualifier;
        }
        else
            (fStmt.Parameters["SellToCustomerQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductNumber != null)
        {
            if (p.ProductNumber.Length > 35)
                error.AppendLine("Value for ASNLineDoc.ProductNumber too long, max 35 chars");

            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
        }
        else
            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductDescription != null)
        {
            if (p.ProductDescription.Length > 256)
                error.AppendLine("Value for ASNLineDoc.ProductDescription too long, max 256 chars");

            (fStmt.Parameters["ProductDescription"] as IDbDataParameter).Value = p.ProductDescription;
        }
        else
            (fStmt.Parameters["ProductDescription"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductNumberType != null)
        {
            if (p.ProductNumberType.Length > 1)
                error.AppendLine("Value for ASNLineDoc.ProductNumberType too long, max 1 chars");

            (fStmt.Parameters["ProductNumberType"] as IDbDataParameter).Value = p.ProductNumberType;
        }
        else
            (fStmt.Parameters["ProductNumberType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.AlternativeProductNumber != null)
        {
            if (p.AlternativeProductNumber.Length > 35)
                error.AppendLine("Value for ASNLineDoc.AlternativeProductNumber too long, max 35 chars");

            (fStmt.Parameters["AlternativeProductNumber"] as IDbDataParameter).Value = p.AlternativeProductNumber;
        }
        else
            (fStmt.Parameters["AlternativeProductNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.AlternativeProductDescription != null)
        {
            if (p.AlternativeProductDescription.Length > 256)
                error.AppendLine("Value for ASNLineDoc.AlternativeProductDescription too long, max 256 chars");

            (fStmt.Parameters["AlternativeProductDescription"] as IDbDataParameter).Value = p.AlternativeProductDescription;
        }
        else
            (fStmt.Parameters["AlternativeProductDescription"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductDate != null)
        {
            (fStmt.Parameters["ProductDate"] as IDbDataParameter).Value = p.ProductDate;
        }
        else
            (fStmt.Parameters["ProductDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VendorProductNumber != null)
        {
            if (p.VendorProductNumber.Length > 35)
                error.AppendLine("Value for ASNLineDoc.VendorProductNumber too long, max 35 chars");

            (fStmt.Parameters["VendorProductNumber"] as IDbDataParameter).Value = p.VendorProductNumber;
        }
        else
            (fStmt.Parameters["VendorProductNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchasePrice != null)
        {
            (fStmt.Parameters["PurchasePrice"] as IDbDataParameter).Value = p.PurchasePrice;
        }
        else
            (fStmt.Parameters["PurchasePrice"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackageIdentity != null)
        {
            if (p.PackageIdentity.Length > 17)
                error.AppendLine("Value for ASNLineDoc.PackageIdentity too long, max 17 chars");

            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
        }
        else
            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.QuantityUpperTolerance != null)
        {
            (fStmt.Parameters["QuantityUpperTolerance"] as IDbDataParameter).Value = p.QuantityUpperTolerance;
        }
        else
            (fStmt.Parameters["QuantityUpperTolerance"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CatchMeasureLowerTolerance != null)
        {
            (fStmt.Parameters["CatchMeasureLowerTolerance"] as IDbDataParameter).Value = p.CatchMeasureLowerTolerance;
        }
        else
            (fStmt.Parameters["CatchMeasureLowerTolerance"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CatchMeasureUpperTolerance != null)
        {
            (fStmt.Parameters["CatchMeasureUpperTolerance"] as IDbDataParameter).Value = p.CatchMeasureUpperTolerance;
        }
        else
            (fStmt.Parameters["CatchMeasureUpperTolerance"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ManufacturingUnit != null)
        {
            if (p.ManufacturingUnit.Length > 20)
                error.AppendLine("Value for ASNLineDoc.ManufacturingUnit too long, max 20 chars");

            (fStmt.Parameters["ManufacturingUnit"] as IDbDataParameter).Value = p.ManufacturingUnit;
        }
        else
            (fStmt.Parameters["ManufacturingUnit"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReserveForAssembly != null)
        {
            if (p.ReserveForAssembly.Length > 1)
                error.AppendLine("Value for ASNLineDoc.ReserveForAssembly too long, max 1 chars");

            (fStmt.Parameters["ReserveForAssembly"] as IDbDataParameter).Value = p.ReserveForAssembly;
        }
        else
            (fStmt.Parameters["ReserveForAssembly"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomsRequirement != null)
        {
            if (p.CustomsRequirement.Length > 1)
                error.AppendLine("Value for ASNLineDoc.CustomsRequirement too long, max 1 chars");

            (fStmt.Parameters["CustomsRequirement"] as IDbDataParameter).Value = p.CustomsRequirement;
        }
        else
            (fStmt.Parameters["CustomsRequirement"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OriginalCountry != null)
        {
            if (p.OriginalCountry.Length > 6)
                error.AppendLine("Value for ASNLineDoc.OriginalCountry too long, max 6 chars");

            (fStmt.Parameters["OriginalCountry"] as IDbDataParameter).Value = p.OriginalCountry;
        }
        else
            (fStmt.Parameters["OriginalCountry"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ExportingCountry != null)
        {
            if (p.ExportingCountry.Length > 6)
                error.AppendLine("Value for ASNLineDoc.ExportingCountry too long, max 6 chars");

            (fStmt.Parameters["ExportingCountry"] as IDbDataParameter).Value = p.ExportingCountry;
        }
        else
            (fStmt.Parameters["ExportingCountry"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DestinationCountry != null)
        {
            if (p.DestinationCountry.Length > 6)
                error.AppendLine("Value for ASNLineDoc.DestinationCountry too long, max 6 chars");

            (fStmt.Parameters["DestinationCountry"] as IDbDataParameter).Value = p.DestinationCountry;
        }
        else
            (fStmt.Parameters["DestinationCountry"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CarrierTypeContainer != null)
        {
            if (p.CarrierTypeContainer.Length > 1)
                error.AppendLine("Value for ASNLineDoc.CarrierTypeContainer too long, max 1 chars");

            (fStmt.Parameters["CarrierTypeContainer"] as IDbDataParameter).Value = p.CarrierTypeContainer;
        }
        else
            (fStmt.Parameters["CarrierTypeContainer"] as IDbDataParameter).Value = DBNull.Value;

        if (p.GoodsMarking != null)
        {
            if (p.GoodsMarking.Length > 35)
                error.AppendLine("Value for ASNLineDoc.GoodsMarking too long, max 35 chars");

            (fStmt.Parameters["GoodsMarking"] as IDbDataParameter).Value = p.GoodsMarking;
        }
        else
            (fStmt.Parameters["GoodsMarking"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MainModeofTransport != null)
        {
            if (p.MainModeofTransport.Length > 17)
                error.AppendLine("Value for ASNLineDoc.MainModeofTransport too long, max 17 chars");

            (fStmt.Parameters["MainModeofTransport"] as IDbDataParameter).Value = p.MainModeofTransport;
        }
        else
            (fStmt.Parameters["MainModeofTransport"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CountryMainFreightIdentity != null)
        {
            if (p.CountryMainFreightIdentity.Length > 6)
                error.AppendLine("Value for ASNLineDoc.CountryMainFreightIdentity too long, max 6 chars");

            (fStmt.Parameters["CountryMainFreightIdentity"] as IDbDataParameter).Value = p.CountryMainFreightIdentity;
        }
        else
            (fStmt.Parameters["CountryMainFreightIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FinalModeofTransport != null)
        {
            if (p.FinalModeofTransport.Length > 17)
                error.AppendLine("Value for ASNLineDoc.FinalModeofTransport too long, max 17 chars");

            (fStmt.Parameters["FinalModeofTransport"] as IDbDataParameter).Value = p.FinalModeofTransport;
        }
        else
            (fStmt.Parameters["FinalModeofTransport"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CountryFinalFreightIdentity != null)
        {
            if (p.CountryFinalFreightIdentity.Length > 6)
                error.AppendLine("Value for ASNLineDoc.CountryFinalFreightIdentity too long, max 6 chars");

            (fStmt.Parameters["CountryFinalFreightIdentity"] as IDbDataParameter).Value = p.CountryFinalFreightIdentity;
        }
        else
            (fStmt.Parameters["CountryFinalFreightIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.IncomingGoodsNumber != null)
        {
            if (p.IncomingGoodsNumber.Length > 35)
                error.AppendLine("Value for ASNLineDoc.IncomingGoodsNumber too long, max 35 chars");

            (fStmt.Parameters["IncomingGoodsNumber"] as IDbDataParameter).Value = p.IncomingGoodsNumber;
        }
        else
            (fStmt.Parameters["IncomingGoodsNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TypeofGoods != null)
        {
            if (p.TypeofGoods.Length > 35)
                error.AppendLine("Value for ASNLineDoc.TypeofGoods too long, max 35 chars");

            (fStmt.Parameters["TypeofGoods"] as IDbDataParameter).Value = p.TypeofGoods;
        }
        else
            (fStmt.Parameters["TypeofGoods"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MainFreightIdentity != null)
        {
            if (p.MainFreightIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.MainFreightIdentity too long, max 35 chars");

            (fStmt.Parameters["MainFreightIdentity"] as IDbDataParameter).Value = p.MainFreightIdentity;
        }
        else
            (fStmt.Parameters["MainFreightIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FinalFreightIdentity != null)
        {
            if (p.FinalFreightIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.FinalFreightIdentity too long, max 35 chars");

            (fStmt.Parameters["FinalFreightIdentity"] as IDbDataParameter).Value = p.FinalFreightIdentity;
        }
        else
            (fStmt.Parameters["FinalFreightIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class BalanceQueryInsert : SegmentImpl
  {

    public BalanceQueryInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_BALANCE_QUERY ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",WarehouseIdentity");
        s.Append(",OwnerIdentity");
        s.Append(",ClientIdentity");
        s.Append(",ProductNumber");
        s.Append(",MessageNumber");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:WarehouseIdentity");
        s.Append(",:OwnerIdentity");
        s.Append(",:ClientIdentity");
        s.Append(",:ProductNumber");
        s.Append(",:MessageNumber");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("WarehouseIdentity", 4));
        fStmt.Parameters.Add(StringParam("OwnerIdentity", 35));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("ProductNumber", 35));
        fStmt.Parameters.Add(NumberParam("MessageNumber", 14, 0));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, BalanceQueryDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for BalanceQueryDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        if (p.WarehouseIdentity != null)
        {
            if (p.WarehouseIdentity.Length > 4)
                error.AppendLine("Value for BalanceQueryDoc.WarehouseIdentity too long, max 4 chars");

            if (p.WarehouseIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter BalanceQueryDoc.WarehouseIdentity not allowed");

            (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = p.WarehouseIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter BalanceQueryDoc.WarehouseIdentity not allowed");


        if (p.OwnerIdentity != null)
        {
            if (p.OwnerIdentity.Length > 35)
                error.AppendLine("Value for BalanceQueryDoc.OwnerIdentity too long, max 35 chars");

            (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = p.OwnerIdentity;
        }
        else
            (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.ProductNumber != null)
        {
            if (p.ProductNumber.Length > 35)
                error.AppendLine("Value for BalanceQueryDoc.ProductNumber too long, max 35 chars");

            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
        }
        else
            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MessageNumber != null)
        {
            (fStmt.Parameters["MessageNumber"] as IDbDataParameter).Value = p.MessageNumber;
        }
        else
            (fStmt.Parameters["MessageNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class ProductInsert : SegmentImpl
  {
    private ProductGlobalInsert aProductGlobalInsert;
    private ProductNumberInsert aProductNumberInsert;
    private ProductDescriptionInsert aProductDescriptionInsert;
    private ProductInWarehouseInsert aProductInWarehouseInsert;
    private ProductPackageInsert aProductPackageInsert;
    private ProductBarcodeInsert aProductBarcodeInsert;
    private ProductVendorInsert aProductVendorInsert;
    private ProductCodeInsert aProductCodeInsert;

    public ProductInsert(WSBase owner)
        : base(owner)
    {
        aProductGlobalInsert = new ProductGlobalInsert(owner);
        aProductNumberInsert = new ProductNumberInsert(owner);
        aProductDescriptionInsert = new ProductDescriptionInsert(owner);
        aProductInWarehouseInsert = new ProductInWarehouseInsert(owner);
        aProductPackageInsert = new ProductPackageInsert(owner);
        aProductBarcodeInsert = new ProductBarcodeInsert(owner);
        aProductVendorInsert = new ProductVendorInsert(owner);
        aProductCodeInsert = new ProductCodeInsert(owner);
    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ProductDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.aProductGlobalDocs != null)
            foreach (ProductGlobalDoc c in p.aProductGlobalDocs)
                aProductGlobalInsert.Process(ref trans, this, c);
        if (p.aProductNumberDocs != null)
            foreach (ProductNumberDoc d in p.aProductNumberDocs)
                aProductNumberInsert.Process(ref trans, this, d);
        if (p.aProductDescriptionDocs != null)
            foreach (ProductDescriptionDoc e in p.aProductDescriptionDocs)
                aProductDescriptionInsert.Process(ref trans, this, e);
        if (p.aProductInWarehouseDocs != null)
            foreach (ProductInWarehouseDoc f in p.aProductInWarehouseDocs)
                aProductInWarehouseInsert.Process(ref trans, this, f);
        if (p.aProductPackageDocs != null)
            foreach (ProductPackageDoc g in p.aProductPackageDocs)
                aProductPackageInsert.Process(ref trans, this, g);
        if (p.aProductBarcodeDocs != null)
            foreach (ProductBarcodeDoc h in p.aProductBarcodeDocs)
                aProductBarcodeInsert.Process(ref trans, this, h);
        if (p.aProductVendorDocs != null)
            foreach (ProductVendorDoc i in p.aProductVendorDocs)
                aProductVendorInsert.Process(ref trans, this, i);
        if (p.aProductCodeDocs != null)
            foreach (ProductCodeDoc j in p.aProductCodeDocs)
                aProductCodeInsert.Process(ref trans, this, j);
      }
  }

  public class ProductGlobalInsert : SegmentImpl
  {

    public ProductGlobalInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_PRODUCT_GLOBAL ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",ProductNumber");
        s.Append(",ProductDescription1");
        s.Append(",ProductDescription2");
        s.Append(",ProductStockGroupIdentity");
        s.Append(",ProductType");
        s.Append(",ProductDateType");
        s.Append(",ProductShipDateLeadTime");
        s.Append(",ProductDeliveryDateLeadTime");
        s.Append(",ProductManufacturDateLeadTime");
        s.Append(",ProductionLotHandling");
        s.Append(",StorageLotHandling");
        s.Append(",SerialNumberHandling");
        s.Append(",FIFOAllowedDiscrepancy");
        s.Append(",Instructions");
        s.Append(",ProductSaleable");
        s.Append(",ProductionLotHandling_In");
        s.Append(",MarketingLotHandling_In");
        s.Append(",StorageLotHandling_In");
        s.Append(",ProductionLotVerify");
        s.Append(",ProductTransportIdentity");
        s.Append(",CatchMeasure");
        s.Append(",CatchMeasureQualifier");
        s.Append(",CatchMeasureRcv");
        s.Append(",CatchMeasureQualifierRcv");
        s.Append(",HazardousGoods");
        s.Append(",Instructions_In");
        s.Append(",Instructions_Out");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:ProductNumber");
        s.Append(",:ProductDescription1");
        s.Append(",:ProductDescription2");
        s.Append(",:ProductStockGroupIdentity");
        s.Append(",:ProductType");
        s.Append(",:ProductDateType");
        s.Append(",:ProductShipDateLeadTime");
        s.Append(",:ProductDeliveryDateLeadTime");
        s.Append(",:ProductManufacturDateLeadTime");
        s.Append(",:ProductionLotHandling");
        s.Append(",:StorageLotHandling");
        s.Append(",:SerialNumberHandling");
        s.Append(",:FIFOAllowedDiscrepancy");
        s.Append(",:Instructions");
        s.Append(",:ProductSaleable");
        s.Append(",:ProductionLotHandling_In");
        s.Append(",:MarketingLotHandling_In");
        s.Append(",:StorageLotHandling_In");
        s.Append(",:ProductionLotVerify");
        s.Append(",:ProductTransportIdentity");
        s.Append(",:CatchMeasure");
        s.Append(",:CatchMeasureQualifier");
        s.Append(",:CatchMeasureRcv");
        s.Append(",:CatchMeasureQualifierRcv");
        s.Append(",:HazardousGoods");
        s.Append(",:Instructions_In");
        s.Append(",:Instructions_Out");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("ProductNumber", 35));
        fStmt.Parameters.Add(StringParam("ProductDescription1", 256));
        fStmt.Parameters.Add(StringParam("ProductDescription2", 256));
        fStmt.Parameters.Add(StringParam("ProductStockGroupIdentity", 12));
        fStmt.Parameters.Add(StringParam("ProductType", 2));
        fStmt.Parameters.Add(StringParam("ProductDateType", 1));
        fStmt.Parameters.Add(NumberParam("ProductShipDateLeadTime", 4, 0));
        fStmt.Parameters.Add(NumberParam("ProductDeliveryDateLeadTime", 4, 0));
        fStmt.Parameters.Add(NumberParam("ProductManufacturDateLeadTime", 4, 0));
        fStmt.Parameters.Add(StringParam("ProductionLotHandling", 1));
        fStmt.Parameters.Add(StringParam("StorageLotHandling", 1));
        fStmt.Parameters.Add(StringParam("SerialNumberHandling", 1));
        fStmt.Parameters.Add(NumberParam("FIFOAllowedDiscrepancy", 4, 0));
        fStmt.Parameters.Add(StringParam("Instructions", 800));
        fStmt.Parameters.Add(StringParam("ProductSaleable", 35));
        fStmt.Parameters.Add(StringParam("ProductionLotHandling_In", 1));
        fStmt.Parameters.Add(StringParam("MarketingLotHandling_In", 1));
        fStmt.Parameters.Add(StringParam("StorageLotHandling_In", 1));
        fStmt.Parameters.Add(StringParam("ProductionLotVerify", 1));
        fStmt.Parameters.Add(StringParam("ProductTransportIdentity", 5));
        fStmt.Parameters.Add(StringParam("CatchMeasure", 1));
        fStmt.Parameters.Add(StringParam("CatchMeasureQualifier", 4));
        fStmt.Parameters.Add(StringParam("CatchMeasureRcv", 1));
        fStmt.Parameters.Add(StringParam("CatchMeasureQualifierRcv", 4));
        fStmt.Parameters.Add(StringParam("HazardousGoods", 1));
        fStmt.Parameters.Add(StringParam("Instructions_In", 800));
        fStmt.Parameters.Add(StringParam("Instructions_Out", 800));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ProductGlobalDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "2");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ProductGlobalDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.ProductNumber != null)
        {
            if (p.ProductNumber.Length > 35)
                error.AppendLine("Value for ProductGlobalDoc.ProductNumber too long, max 35 chars");

            if (p.ProductNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ProductGlobalDoc.ProductNumber not allowed");

            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter ProductGlobalDoc.ProductNumber not allowed");


        if (p.ProductDescription1 != null)
        {
            if (p.ProductDescription1.Length > 256)
                error.AppendLine("Value for ProductGlobalDoc.ProductDescription1 too long, max 256 chars");

            if (p.ProductDescription1.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ProductGlobalDoc.ProductDescription1 not allowed");

            (fStmt.Parameters["ProductDescription1"] as IDbDataParameter).Value = p.ProductDescription1;
        }
        else
            error.AppendLine("Null value for mandatory parameter ProductGlobalDoc.ProductDescription1 not allowed");


        if (p.ProductDescription2 != null)
        {
            if (p.ProductDescription2.Length > 256)
                error.AppendLine("Value for ProductGlobalDoc.ProductDescription2 too long, max 256 chars");

            (fStmt.Parameters["ProductDescription2"] as IDbDataParameter).Value = p.ProductDescription2;
        }
        else
            (fStmt.Parameters["ProductDescription2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductStockGroupIdentity != null)
        {
            if (p.ProductStockGroupIdentity.Length > 12)
                error.AppendLine("Value for ProductGlobalDoc.ProductStockGroupIdentity too long, max 12 chars");

            (fStmt.Parameters["ProductStockGroupIdentity"] as IDbDataParameter).Value = p.ProductStockGroupIdentity;
        }
        else
            (fStmt.Parameters["ProductStockGroupIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductType != null)
        {
            if (p.ProductType.Length > 2)
                error.AppendLine("Value for ProductGlobalDoc.ProductType too long, max 2 chars");

            (fStmt.Parameters["ProductType"] as IDbDataParameter).Value = p.ProductType;
        }
        else
            (fStmt.Parameters["ProductType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductDateType != null)
        {
            if (p.ProductDateType.Length > 1)
                error.AppendLine("Value for ProductGlobalDoc.ProductDateType too long, max 1 chars");

            (fStmt.Parameters["ProductDateType"] as IDbDataParameter).Value = p.ProductDateType;
        }
        else
            (fStmt.Parameters["ProductDateType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductShipDateLeadTime != null)
        {
            (fStmt.Parameters["ProductShipDateLeadTime"] as IDbDataParameter).Value = p.ProductShipDateLeadTime;
        }
        else
            (fStmt.Parameters["ProductShipDateLeadTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductDeliveryDateLeadTime != null)
        {
            (fStmt.Parameters["ProductDeliveryDateLeadTime"] as IDbDataParameter).Value = p.ProductDeliveryDateLeadTime;
        }
        else
            (fStmt.Parameters["ProductDeliveryDateLeadTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductManufacturDateLeadTime != null)
        {
            (fStmt.Parameters["ProductManufacturDateLeadTime"] as IDbDataParameter).Value = p.ProductManufacturDateLeadTime;
        }
        else
            (fStmt.Parameters["ProductManufacturDateLeadTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionLotHandling != null)
        {
            if (p.ProductionLotHandling.Length > 1)
                error.AppendLine("Value for ProductGlobalDoc.ProductionLotHandling too long, max 1 chars");

            (fStmt.Parameters["ProductionLotHandling"] as IDbDataParameter).Value = p.ProductionLotHandling;
        }
        else
            (fStmt.Parameters["ProductionLotHandling"] as IDbDataParameter).Value = DBNull.Value;

        if (p.StorageLotHandling != null)
        {
            if (p.StorageLotHandling.Length > 1)
                error.AppendLine("Value for ProductGlobalDoc.StorageLotHandling too long, max 1 chars");

            (fStmt.Parameters["StorageLotHandling"] as IDbDataParameter).Value = p.StorageLotHandling;
        }
        else
            (fStmt.Parameters["StorageLotHandling"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SerialNumberHandling != null)
        {
            if (p.SerialNumberHandling.Length > 1)
                error.AppendLine("Value for ProductGlobalDoc.SerialNumberHandling too long, max 1 chars");

            (fStmt.Parameters["SerialNumberHandling"] as IDbDataParameter).Value = p.SerialNumberHandling;
        }
        else
            (fStmt.Parameters["SerialNumberHandling"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FIFOAllowedDiscrepancy != null)
        {
            (fStmt.Parameters["FIFOAllowedDiscrepancy"] as IDbDataParameter).Value = p.FIFOAllowedDiscrepancy;
        }
        else
            (fStmt.Parameters["FIFOAllowedDiscrepancy"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Instructions != null)
        {
            if (p.Instructions.Length > 800)
                error.AppendLine("Value for ProductGlobalDoc.Instructions too long, max 800 chars");

            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = p.Instructions;
        }
        else
            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductSaleable != null)
        {
            if (p.ProductSaleable.Length > 35)
                error.AppendLine("Value for ProductGlobalDoc.ProductSaleable too long, max 35 chars");

            (fStmt.Parameters["ProductSaleable"] as IDbDataParameter).Value = p.ProductSaleable;
        }
        else
            (fStmt.Parameters["ProductSaleable"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionLotHandling_In != null)
        {
            if (p.ProductionLotHandling_In.Length > 1)
                error.AppendLine("Value for ProductGlobalDoc.ProductionLotHandling_In too long, max 1 chars");

            (fStmt.Parameters["ProductionLotHandling_In"] as IDbDataParameter).Value = p.ProductionLotHandling_In;
        }
        else
            (fStmt.Parameters["ProductionLotHandling_In"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MarketingLotHandling_In != null)
        {
            if (p.MarketingLotHandling_In.Length > 1)
                error.AppendLine("Value for ProductGlobalDoc.MarketingLotHandling_In too long, max 1 chars");

            (fStmt.Parameters["MarketingLotHandling_In"] as IDbDataParameter).Value = p.MarketingLotHandling_In;
        }
        else
            (fStmt.Parameters["MarketingLotHandling_In"] as IDbDataParameter).Value = DBNull.Value;

        if (p.StorageLotHandling_In != null)
        {
            if (p.StorageLotHandling_In.Length > 1)
                error.AppendLine("Value for ProductGlobalDoc.StorageLotHandling_In too long, max 1 chars");

            (fStmt.Parameters["StorageLotHandling_In"] as IDbDataParameter).Value = p.StorageLotHandling_In;
        }
        else
            (fStmt.Parameters["StorageLotHandling_In"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionLotVerify != null)
        {
            if (p.ProductionLotVerify.Length > 1)
                error.AppendLine("Value for ProductGlobalDoc.ProductionLotVerify too long, max 1 chars");

            (fStmt.Parameters["ProductionLotVerify"] as IDbDataParameter).Value = p.ProductionLotVerify;
        }
        else
            (fStmt.Parameters["ProductionLotVerify"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductTransportIdentity != null)
        {
            if (p.ProductTransportIdentity.Length > 5)
                error.AppendLine("Value for ProductGlobalDoc.ProductTransportIdentity too long, max 5 chars");

            (fStmt.Parameters["ProductTransportIdentity"] as IDbDataParameter).Value = p.ProductTransportIdentity;
        }
        else
            (fStmt.Parameters["ProductTransportIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CatchMeasure != null)
        {
            if (p.CatchMeasure.Length > 1)
                error.AppendLine("Value for ProductGlobalDoc.CatchMeasure too long, max 1 chars");

            (fStmt.Parameters["CatchMeasure"] as IDbDataParameter).Value = p.CatchMeasure;
        }
        else
            (fStmt.Parameters["CatchMeasure"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CatchMeasureQualifier != null)
        {
            if (p.CatchMeasureQualifier.Length > 4)
                error.AppendLine("Value for ProductGlobalDoc.CatchMeasureQualifier too long, max 4 chars");

            (fStmt.Parameters["CatchMeasureQualifier"] as IDbDataParameter).Value = p.CatchMeasureQualifier;
        }
        else
            (fStmt.Parameters["CatchMeasureQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CatchMeasureRcv != null)
        {
            if (p.CatchMeasureRcv.Length > 1)
                error.AppendLine("Value for ProductGlobalDoc.CatchMeasureRcv too long, max 1 chars");

            (fStmt.Parameters["CatchMeasureRcv"] as IDbDataParameter).Value = p.CatchMeasureRcv;
        }
        else
            (fStmt.Parameters["CatchMeasureRcv"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CatchMeasureQualifierRcv != null)
        {
            if (p.CatchMeasureQualifierRcv.Length > 4)
                error.AppendLine("Value for ProductGlobalDoc.CatchMeasureQualifierRcv too long, max 4 chars");

            (fStmt.Parameters["CatchMeasureQualifierRcv"] as IDbDataParameter).Value = p.CatchMeasureQualifierRcv;
        }
        else
            (fStmt.Parameters["CatchMeasureQualifierRcv"] as IDbDataParameter).Value = DBNull.Value;

        if (p.HazardousGoods != null)
        {
            if (p.HazardousGoods.Length > 1)
                error.AppendLine("Value for ProductGlobalDoc.HazardousGoods too long, max 1 chars");

            (fStmt.Parameters["HazardousGoods"] as IDbDataParameter).Value = p.HazardousGoods;
        }
        else
            (fStmt.Parameters["HazardousGoods"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Instructions_In != null)
        {
            if (p.Instructions_In.Length > 800)
                error.AppendLine("Value for ProductGlobalDoc.Instructions_In too long, max 800 chars");

            (fStmt.Parameters["Instructions_In"] as IDbDataParameter).Value = p.Instructions_In;
        }
        else
            (fStmt.Parameters["Instructions_In"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Instructions_Out != null)
        {
            if (p.Instructions_Out.Length > 800)
                error.AppendLine("Value for ProductGlobalDoc.Instructions_Out too long, max 800 chars");

            (fStmt.Parameters["Instructions_Out"] as IDbDataParameter).Value = p.Instructions_Out;
        }
        else
            (fStmt.Parameters["Instructions_Out"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class ProductNumberInsert : SegmentImpl
  {

    public ProductNumberInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_PRODUCT_NUMBER ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",AdditionalNumberType");
        s.Append(",AdditionalProductNumber");
        s.Append(",ProductNumber");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:AdditionalNumberType");
        s.Append(",:AdditionalProductNumber");
        s.Append(",:ProductNumber");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("AdditionalNumberType", 3));
        fStmt.Parameters.Add(StringParam("AdditionalProductNumber", 35));
        fStmt.Parameters.Add(StringParam("ProductNumber", 35));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ProductNumberDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "2");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ProductNumberDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.AdditionalNumberType != null)
        {
            if (p.AdditionalNumberType.Length > 3)
                error.AppendLine("Value for ProductNumberDoc.AdditionalNumberType too long, max 3 chars");

            if (p.AdditionalNumberType.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ProductNumberDoc.AdditionalNumberType not allowed");

            (fStmt.Parameters["AdditionalNumberType"] as IDbDataParameter).Value = p.AdditionalNumberType;
        }
        else
            error.AppendLine("Null value for mandatory parameter ProductNumberDoc.AdditionalNumberType not allowed");


        if (p.AdditionalProductNumber != null)
        {
            if (p.AdditionalProductNumber.Length > 35)
                error.AppendLine("Value for ProductNumberDoc.AdditionalProductNumber too long, max 35 chars");

            if (p.AdditionalProductNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ProductNumberDoc.AdditionalProductNumber not allowed");

            (fStmt.Parameters["AdditionalProductNumber"] as IDbDataParameter).Value = p.AdditionalProductNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter ProductNumberDoc.AdditionalProductNumber not allowed");


        if (p.ProductNumber != null)
        {
            if (p.ProductNumber.Length > 35)
                error.AppendLine("Value for ProductNumberDoc.ProductNumber too long, max 35 chars");

            if (p.ProductNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ProductNumberDoc.ProductNumber not allowed");

            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter ProductNumberDoc.ProductNumber not allowed");


        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class ProductDescriptionInsert : SegmentImpl
  {

    public ProductDescriptionInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_PRODUCT_DESCRIPTION ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",ProductNumber");
        s.Append(",Language");
        s.Append(",Description1");
        s.Append(",Description2");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:ProductNumber");
        s.Append(",:Language");
        s.Append(",:Description1");
        s.Append(",:Description2");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("ProductNumber", 35));
        fStmt.Parameters.Add(StringParam("Language", 3));
        fStmt.Parameters.Add(StringParam("Description1", 256));
        fStmt.Parameters.Add(StringParam("Description2", 256));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ProductDescriptionDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "2");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ProductDescriptionDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.ProductNumber != null)
        {
            if (p.ProductNumber.Length > 35)
                error.AppendLine("Value for ProductDescriptionDoc.ProductNumber too long, max 35 chars");

            if (p.ProductNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ProductDescriptionDoc.ProductNumber not allowed");

            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter ProductDescriptionDoc.ProductNumber not allowed");


        if (p.Language != null)
        {
            if (p.Language.Length > 3)
                error.AppendLine("Value for ProductDescriptionDoc.Language too long, max 3 chars");

            if (p.Language.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ProductDescriptionDoc.Language not allowed");

            (fStmt.Parameters["Language"] as IDbDataParameter).Value = p.Language;
        }
        else
            error.AppendLine("Null value for mandatory parameter ProductDescriptionDoc.Language not allowed");


        if (p.Description1 != null)
        {
            if (p.Description1.Length > 256)
                error.AppendLine("Value for ProductDescriptionDoc.Description1 too long, max 256 chars");

            if (p.Description1.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ProductDescriptionDoc.Description1 not allowed");

            (fStmt.Parameters["Description1"] as IDbDataParameter).Value = p.Description1;
        }
        else
            error.AppendLine("Null value for mandatory parameter ProductDescriptionDoc.Description1 not allowed");


        if (p.Description2 != null)
        {
            if (p.Description2.Length > 256)
                error.AppendLine("Value for ProductDescriptionDoc.Description2 too long, max 256 chars");

            (fStmt.Parameters["Description2"] as IDbDataParameter).Value = p.Description2;
        }
        else
            (fStmt.Parameters["Description2"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class ProductInWarehouseInsert : SegmentImpl
  {

    public ProductInWarehouseInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_PRODUCT_IN_WAREHOUSE ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",ProductNumber");
        s.Append(",WarehouseIdentity");
        s.Append(",InventoryAuditFrequency");
        s.Append(",Stocked");
        s.Append(",OwnerIdentity");
        s.Append(",StorageTemperatureMin");
        s.Append(",StorageTemperatureMax");
        s.Append(",StorageTemperatureQualifier");
        s.Append(",Frequency");
        s.Append(",Instructions");
        s.Append(",HygieneCheck");
        s.Append(",TemperatureCheck");
        s.Append(",RefuseTempHigh");
        s.Append(",RefuseTempLow");
        s.Append(",WarnTempHigh");
        s.Append(",WarnTempLow");
        s.Append(",PackageChange");
        s.Append(",ProductionLotHandling");
        s.Append(",StorageLotHandling");
        s.Append(",ProductionLotHandling_In");
        s.Append(",MarketingLotHandling_In");
        s.Append(",StorageLotHandling_In");
        s.Append(",ProductionLotVerify");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:ProductNumber");
        s.Append(",:WarehouseIdentity");
        s.Append(",:InventoryAuditFrequency");
        s.Append(",:Stocked");
        s.Append(",:OwnerIdentity");
        s.Append(",:StorageTemperatureMin");
        s.Append(",:StorageTemperatureMax");
        s.Append(",:StorageTemperatureQualifier");
        s.Append(",:Frequency");
        s.Append(",:Instructions");
        s.Append(",:HygieneCheck");
        s.Append(",:TemperatureCheck");
        s.Append(",:RefuseTempHigh");
        s.Append(",:RefuseTempLow");
        s.Append(",:WarnTempHigh");
        s.Append(",:WarnTempLow");
        s.Append(",:PackageChange");
        s.Append(",:ProductionLotHandling");
        s.Append(",:StorageLotHandling");
        s.Append(",:ProductionLotHandling_In");
        s.Append(",:MarketingLotHandling_In");
        s.Append(",:StorageLotHandling_In");
        s.Append(",:ProductionLotVerify");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("ProductNumber", 35));
        fStmt.Parameters.Add(StringParam("WarehouseIdentity", 4));
        fStmt.Parameters.Add(NumberParam("InventoryAuditFrequency", 4, 0));
        fStmt.Parameters.Add(StringParam("Stocked", 1));
        fStmt.Parameters.Add(StringParam("OwnerIdentity", 35));
        fStmt.Parameters.Add(NumberParam("StorageTemperatureMin", 4, 0));
        fStmt.Parameters.Add(NumberParam("StorageTemperatureMax", 4, 0));
        fStmt.Parameters.Add(StringParam("StorageTemperatureQualifier", 1));
        fStmt.Parameters.Add(NumberParam("Frequency", 8, 0));
        fStmt.Parameters.Add(StringParam("Instructions", 800));
        fStmt.Parameters.Add(StringParam("HygieneCheck", 1));
        fStmt.Parameters.Add(StringParam("TemperatureCheck", 1));
        fStmt.Parameters.Add(NumberParam("RefuseTempHigh", 7, 2));
        fStmt.Parameters.Add(NumberParam("RefuseTempLow", 7, 2));
        fStmt.Parameters.Add(NumberParam("WarnTempHigh", 7, 2));
        fStmt.Parameters.Add(NumberParam("WarnTempLow", 7, 2));
        fStmt.Parameters.Add(StringParam("PackageChange", 1));
        fStmt.Parameters.Add(StringParam("ProductionLotHandling", 1));
        fStmt.Parameters.Add(StringParam("StorageLotHandling", 1));
        fStmt.Parameters.Add(StringParam("ProductionLotHandling_In", 1));
        fStmt.Parameters.Add(StringParam("MarketingLotHandling_In", 1));
        fStmt.Parameters.Add(StringParam("StorageLotHandling_In", 1));
        fStmt.Parameters.Add(StringParam("ProductionLotVerify", 1));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ProductInWarehouseDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "2");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ProductInWarehouseDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.ProductNumber != null)
        {
            if (p.ProductNumber.Length > 35)
                error.AppendLine("Value for ProductInWarehouseDoc.ProductNumber too long, max 35 chars");

            if (p.ProductNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ProductInWarehouseDoc.ProductNumber not allowed");

            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter ProductInWarehouseDoc.ProductNumber not allowed");


        if (p.WarehouseIdentity != null)
        {
            if (p.WarehouseIdentity.Length > 4)
                error.AppendLine("Value for ProductInWarehouseDoc.WarehouseIdentity too long, max 4 chars");

            if (p.WarehouseIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ProductInWarehouseDoc.WarehouseIdentity not allowed");

            (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = p.WarehouseIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter ProductInWarehouseDoc.WarehouseIdentity not allowed");


        if (p.InventoryAuditFrequency != null)
        {
            (fStmt.Parameters["InventoryAuditFrequency"] as IDbDataParameter).Value = p.InventoryAuditFrequency;
        }
        else
            (fStmt.Parameters["InventoryAuditFrequency"] as IDbDataParameter).Value = DBNull.Value;

        if (p.StockedProduct != null)
        {
            if (p.StockedProduct.Length > 1)
                error.AppendLine("Value for ProductInWarehouseDoc.StockedProduct too long, max 1 chars");

            (fStmt.Parameters["Stocked"] as IDbDataParameter).Value = p.StockedProduct;
        }
        else
            (fStmt.Parameters["Stocked"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OwnerIdentity != null)
        {
            if (p.OwnerIdentity.Length > 35)
                error.AppendLine("Value for ProductInWarehouseDoc.OwnerIdentity too long, max 35 chars");

            (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = p.OwnerIdentity;
        }
        else
            (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.StorageTemperatureMin != null)
        {
            (fStmt.Parameters["StorageTemperatureMin"] as IDbDataParameter).Value = p.StorageTemperatureMin;
        }
        else
            (fStmt.Parameters["StorageTemperatureMin"] as IDbDataParameter).Value = DBNull.Value;

        if (p.StorageTemperatureMax != null)
        {
            (fStmt.Parameters["StorageTemperatureMax"] as IDbDataParameter).Value = p.StorageTemperatureMax;
        }
        else
            (fStmt.Parameters["StorageTemperatureMax"] as IDbDataParameter).Value = DBNull.Value;

        if (p.StorageTemperatureQualifier != null)
        {
            if (p.StorageTemperatureQualifier.Length > 1)
                error.AppendLine("Value for ProductInWarehouseDoc.StorageTemperatureQualifier too long, max 1 chars");

            (fStmt.Parameters["StorageTemperatureQualifier"] as IDbDataParameter).Value = p.StorageTemperatureQualifier;
        }
        else
            (fStmt.Parameters["StorageTemperatureQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Frequency != null)
        {
            (fStmt.Parameters["Frequency"] as IDbDataParameter).Value = p.Frequency;
        }
        else
            (fStmt.Parameters["Frequency"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Instructions != null)
        {
            if (p.Instructions.Length > 800)
                error.AppendLine("Value for ProductInWarehouseDoc.Instructions too long, max 800 chars");

            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = p.Instructions;
        }
        else
            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = DBNull.Value;

        if (p.HygieneCheck != null)
        {
            if (p.HygieneCheck.Length > 1)
                error.AppendLine("Value for ProductInWarehouseDoc.HygieneCheck too long, max 1 chars");

            (fStmt.Parameters["HygieneCheck"] as IDbDataParameter).Value = p.HygieneCheck;
        }
        else
            (fStmt.Parameters["HygieneCheck"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TemperatureCheck != null)
        {
            if (p.TemperatureCheck.Length > 1)
                error.AppendLine("Value for ProductInWarehouseDoc.TemperatureCheck too long, max 1 chars");

            (fStmt.Parameters["TemperatureCheck"] as IDbDataParameter).Value = p.TemperatureCheck;
        }
        else
            (fStmt.Parameters["TemperatureCheck"] as IDbDataParameter).Value = DBNull.Value;

        if (p.RefuseTempHigh != null)
        {
            (fStmt.Parameters["RefuseTempHigh"] as IDbDataParameter).Value = p.RefuseTempHigh;
        }
        else
            (fStmt.Parameters["RefuseTempHigh"] as IDbDataParameter).Value = DBNull.Value;

        if (p.RefuseTempLow != null)
        {
            (fStmt.Parameters["RefuseTempLow"] as IDbDataParameter).Value = p.RefuseTempLow;
        }
        else
            (fStmt.Parameters["RefuseTempLow"] as IDbDataParameter).Value = DBNull.Value;

        if (p.WarnTempHigh != null)
        {
            (fStmt.Parameters["WarnTempHigh"] as IDbDataParameter).Value = p.WarnTempHigh;
        }
        else
            (fStmt.Parameters["WarnTempHigh"] as IDbDataParameter).Value = DBNull.Value;

        if (p.WarnTempLow != null)
        {
            (fStmt.Parameters["WarnTempLow"] as IDbDataParameter).Value = p.WarnTempLow;
        }
        else
            (fStmt.Parameters["WarnTempLow"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackageChange != null)
        {
            if (p.PackageChange.Length > 1)
                error.AppendLine("Value for ProductInWarehouseDoc.PackageChange too long, max 1 chars");

            (fStmt.Parameters["PackageChange"] as IDbDataParameter).Value = p.PackageChange;
        }
        else
            (fStmt.Parameters["PackageChange"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionLotHandling != null)
        {
            if (p.ProductionLotHandling.Length > 1)
                error.AppendLine("Value for ProductInWarehouseDoc.ProductionLotHandling too long, max 1 chars");

            (fStmt.Parameters["ProductionLotHandling"] as IDbDataParameter).Value = p.ProductionLotHandling;
        }
        else
            (fStmt.Parameters["ProductionLotHandling"] as IDbDataParameter).Value = DBNull.Value;

        if (p.StorageLotHandling != null)
        {
            if (p.StorageLotHandling.Length > 1)
                error.AppendLine("Value for ProductInWarehouseDoc.StorageLotHandling too long, max 1 chars");

            (fStmt.Parameters["StorageLotHandling"] as IDbDataParameter).Value = p.StorageLotHandling;
        }
        else
            (fStmt.Parameters["StorageLotHandling"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionLotHandling_In != null)
        {
            if (p.ProductionLotHandling_In.Length > 1)
                error.AppendLine("Value for ProductInWarehouseDoc.ProductionLotHandling_In too long, max 1 chars");

            (fStmt.Parameters["ProductionLotHandling_In"] as IDbDataParameter).Value = p.ProductionLotHandling_In;
        }
        else
            (fStmt.Parameters["ProductionLotHandling_In"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MarketingLotHandling_In != null)
        {
            if (p.MarketingLotHandling_In.Length > 1)
                error.AppendLine("Value for ProductInWarehouseDoc.MarketingLotHandling_In too long, max 1 chars");

            (fStmt.Parameters["MarketingLotHandling_In"] as IDbDataParameter).Value = p.MarketingLotHandling_In;
        }
        else
            (fStmt.Parameters["MarketingLotHandling_In"] as IDbDataParameter).Value = DBNull.Value;

        if (p.StorageLotHandling_In != null)
        {
            if (p.StorageLotHandling_In.Length > 1)
                error.AppendLine("Value for ProductInWarehouseDoc.StorageLotHandling_In too long, max 1 chars");

            (fStmt.Parameters["StorageLotHandling_In"] as IDbDataParameter).Value = p.StorageLotHandling_In;
        }
        else
            (fStmt.Parameters["StorageLotHandling_In"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionLotVerify != null)
        {
            if (p.ProductionLotVerify.Length > 1)
                error.AppendLine("Value for ProductInWarehouseDoc.ProductionLotVerify too long, max 1 chars");

            (fStmt.Parameters["ProductionLotVerify"] as IDbDataParameter).Value = p.ProductionLotVerify;
        }
        else
            (fStmt.Parameters["ProductionLotVerify"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class ProductPackageInsert : SegmentImpl
  {

    public ProductPackageInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_PRODUCT_PACKAGE ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",ProductNumber");
        s.Append(",PackageIdentity");
        s.Append(",PackageName");
        s.Append(",BasePackageIdentity");
        s.Append(",NumberofBasePackages");
        s.Append(",NumberofConsumerPackages");
        s.Append(",Weight");
        s.Append(",Height");
        s.Append(",Length");
        s.Append(",Width");
        s.Append(",Volume");
        s.Append(",PMTYPID_IN");
        s.Append(",PMTYPID_OUT");
        s.Append(",LayerPackage");
        s.Append(",VolumeFillPercent");
        s.Append(",BarCode");
        s.Append(",BarCodeType");
        s.Append(",PalPak");
        s.Append(",PalPick");
        s.Append(",Cartypid");
        s.Append(",CarCartypid");
        s.Append(",NoPaksCarCar");
        s.Append(",NetWeight");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:ProductNumber");
        s.Append(",:PackageIdentity");
        s.Append(",:PackageName");
        s.Append(",:BasePackageIdentity");
        s.Append(",:NumberofBasePackages");
        s.Append(",:NumberofConsumerPackages");
        s.Append(",:Weight");
        s.Append(",:Height");
        s.Append(",:Length");
        s.Append(",:Width");
        s.Append(",:Volume");
        s.Append(",:PMTYPID_IN");
        s.Append(",:PMTYPID_OUT");
        s.Append(",:LayerPackage");
        s.Append(",:VolumeFillPercent");
        s.Append(",:BarCode");
        s.Append(",:BarCodeType");
        s.Append(",:PalPak");
        s.Append(",:PalPick");
        s.Append(",:Cartypid");
        s.Append(",:CarCartypid");
        s.Append(",:NoPaksCarCar");
        s.Append(",:NetWeight");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("ProductNumber", 35));
        fStmt.Parameters.Add(StringParam("PackageIdentity", 17));
        fStmt.Parameters.Add(StringParam("PackageName", 35));
        fStmt.Parameters.Add(StringParam("BasePackageIdentity", 17));
        fStmt.Parameters.Add(NumberParam("NumberofBasePackages", 20, 6));
        fStmt.Parameters.Add(NumberParam("NumberofConsumerPackages", 20, 6));
        fStmt.Parameters.Add(NumberParam("Weight", 16, 6));
        fStmt.Parameters.Add(NumberParam("Height", 9, 4));
        fStmt.Parameters.Add(NumberParam("Length", 9, 4));
        fStmt.Parameters.Add(NumberParam("Width", 9, 4));
        fStmt.Parameters.Add(NumberParam("Volume", 19, 9));
        fStmt.Parameters.Add(StringParam("PMTYPID_IN", 35));
        fStmt.Parameters.Add(StringParam("PMTYPID_OUT", 35));
        fStmt.Parameters.Add(StringParam("LayerPackage", 1));
        fStmt.Parameters.Add(NumberParam("VolumeFillPercent", 3, 0));
        fStmt.Parameters.Add(StringParam("BarCode", 20));
        fStmt.Parameters.Add(StringParam("BarCodeType", 7));
        fStmt.Parameters.Add(StringParam("PalPak", 1));
        fStmt.Parameters.Add(StringParam("PalPick", 1));
        fStmt.Parameters.Add(StringParam("Cartypid", 3));
        fStmt.Parameters.Add(StringParam("CarCartypid", 3));
        fStmt.Parameters.Add(NumberParam("NoPaksCarCar", 3, 0));
        fStmt.Parameters.Add(NumberParam("NetWeight", 16, 6));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ProductPackageDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "2");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ProductPackageDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.ProductNumber != null)
        {
            if (p.ProductNumber.Length > 35)
                error.AppendLine("Value for ProductPackageDoc.ProductNumber too long, max 35 chars");

            if (p.ProductNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ProductPackageDoc.ProductNumber not allowed");

            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter ProductPackageDoc.ProductNumber not allowed");


        if (p.PackageIdentity != null)
        {
            if (p.PackageIdentity.Length > 17)
                error.AppendLine("Value for ProductPackageDoc.PackageIdentity too long, max 17 chars");

            if (p.PackageIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ProductPackageDoc.PackageIdentity not allowed");

            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter ProductPackageDoc.PackageIdentity not allowed");


        if (p.PackageName != null)
        {
            if (p.PackageName.Length > 35)
                error.AppendLine("Value for ProductPackageDoc.PackageName too long, max 35 chars");

            (fStmt.Parameters["PackageName"] as IDbDataParameter).Value = p.PackageName;
        }
        else
            (fStmt.Parameters["PackageName"] as IDbDataParameter).Value = DBNull.Value;

        if (p.BasePackageIdentity != null)
        {
            if (p.BasePackageIdentity.Length > 17)
                error.AppendLine("Value for ProductPackageDoc.BasePackageIdentity too long, max 17 chars");

            if (p.BasePackageIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ProductPackageDoc.BasePackageIdentity not allowed");

            (fStmt.Parameters["BasePackageIdentity"] as IDbDataParameter).Value = p.BasePackageIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter ProductPackageDoc.BasePackageIdentity not allowed");


        if (p.NumberofBasePackages != null)
        {
            (fStmt.Parameters["NumberofBasePackages"] as IDbDataParameter).Value = p.NumberofBasePackages;
        }
        else
            error.AppendLine("Null value for mandatory parameter ProductPackageDoc.NumberofBasePackages not allowed");


        if (p.NumberofConsumerPackages != null)
        {
            (fStmt.Parameters["NumberofConsumerPackages"] as IDbDataParameter).Value = p.NumberofConsumerPackages;
        }
        else
            (fStmt.Parameters["NumberofConsumerPackages"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Weight != null)
        {
            (fStmt.Parameters["Weight"] as IDbDataParameter).Value = p.Weight;
        }
        else
            (fStmt.Parameters["Weight"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Height != null)
        {
            (fStmt.Parameters["Height"] as IDbDataParameter).Value = p.Height;
        }
        else
            (fStmt.Parameters["Height"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Length != null)
        {
            (fStmt.Parameters["Length"] as IDbDataParameter).Value = p.Length;
        }
        else
            (fStmt.Parameters["Length"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Width != null)
        {
            (fStmt.Parameters["Width"] as IDbDataParameter).Value = p.Width;
        }
        else
            (fStmt.Parameters["Width"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Volume != null)
        {
            (fStmt.Parameters["Volume"] as IDbDataParameter).Value = p.Volume;
        }
        else
            (fStmt.Parameters["Volume"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PMTYPID_IN != null)
        {
            if (p.PMTYPID_IN.Length > 35)
                error.AppendLine("Value for ProductPackageDoc.PMTYPID_IN too long, max 35 chars");

            (fStmt.Parameters["PMTYPID_IN"] as IDbDataParameter).Value = p.PMTYPID_IN;
        }
        else
            (fStmt.Parameters["PMTYPID_IN"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PMTYPID_OUT != null)
        {
            if (p.PMTYPID_OUT.Length > 35)
                error.AppendLine("Value for ProductPackageDoc.PMTYPID_OUT too long, max 35 chars");

            (fStmt.Parameters["PMTYPID_OUT"] as IDbDataParameter).Value = p.PMTYPID_OUT;
        }
        else
            (fStmt.Parameters["PMTYPID_OUT"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LayerPackage != null)
        {
            if (p.LayerPackage.Length > 1)
                error.AppendLine("Value for ProductPackageDoc.LayerPackage too long, max 1 chars");

            (fStmt.Parameters["LayerPackage"] as IDbDataParameter).Value = p.LayerPackage;
        }
        else
            (fStmt.Parameters["LayerPackage"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VolumeFillPercent != null)
        {
            (fStmt.Parameters["VolumeFillPercent"] as IDbDataParameter).Value = p.VolumeFillPercent;
        }
        else
            (fStmt.Parameters["VolumeFillPercent"] as IDbDataParameter).Value = DBNull.Value;

        if (p.BarCode != null)
        {
            if (p.BarCode.Length > 20)
                error.AppendLine("Value for ProductPackageDoc.BarCode too long, max 20 chars");

            (fStmt.Parameters["BarCode"] as IDbDataParameter).Value = p.BarCode;
        }
        else
            (fStmt.Parameters["BarCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.BarCodeType != null)
        {
            if (p.BarCodeType.Length > 7)
                error.AppendLine("Value for ProductPackageDoc.BarCodeType too long, max 7 chars");

            (fStmt.Parameters["BarCodeType"] as IDbDataParameter).Value = p.BarCodeType;
        }
        else
            (fStmt.Parameters["BarCodeType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PalPak != null)
        {
            if (p.PalPak.Length > 1)
                error.AppendLine("Value for ProductPackageDoc.PalPak too long, max 1 chars");

            (fStmt.Parameters["PalPak"] as IDbDataParameter).Value = p.PalPak;
        }
        else
            (fStmt.Parameters["PalPak"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PalPick != null)
        {
            if (p.PalPick.Length > 1)
                error.AppendLine("Value for ProductPackageDoc.PalPick too long, max 1 chars");

            (fStmt.Parameters["PalPick"] as IDbDataParameter).Value = p.PalPick;
        }
        else
            (fStmt.Parameters["PalPick"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Cartypid != null)
        {
            if (p.Cartypid.Length > 3)
                error.AppendLine("Value for ProductPackageDoc.Cartypid too long, max 3 chars");

            (fStmt.Parameters["Cartypid"] as IDbDataParameter).Value = p.Cartypid;
        }
        else
            (fStmt.Parameters["Cartypid"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CarCartypid != null)
        {
            if (p.CarCartypid.Length > 3)
                error.AppendLine("Value for ProductPackageDoc.CarCartypid too long, max 3 chars");

            (fStmt.Parameters["CarCartypid"] as IDbDataParameter).Value = p.CarCartypid;
        }
        else
            (fStmt.Parameters["CarCartypid"] as IDbDataParameter).Value = DBNull.Value;

        if (p.NoPaksCarCar != null)
        {
            (fStmt.Parameters["NoPaksCarCar"] as IDbDataParameter).Value = p.NoPaksCarCar;
        }
        else
            (fStmt.Parameters["NoPaksCarCar"] as IDbDataParameter).Value = DBNull.Value;

        if (p.NetWeight != null)
        {
            (fStmt.Parameters["NetWeight"] as IDbDataParameter).Value = p.NetWeight;
        }
        else
            (fStmt.Parameters["NetWeight"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class ProductBarcodeInsert : SegmentImpl
  {

    public ProductBarcodeInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_PRODUCT_BARCODE ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",BarCode");
        s.Append(",ProductNumber");
        s.Append(",BarCodeType");
        s.Append(",PackageIdentity");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:BarCode");
        s.Append(",:ProductNumber");
        s.Append(",:BarCodeType");
        s.Append(",:PackageIdentity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("BarCode", 20));
        fStmt.Parameters.Add(StringParam("ProductNumber", 35));
        fStmt.Parameters.Add(StringParam("BarCodeType", 7));
        fStmt.Parameters.Add(StringParam("PackageIdentity", 17));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ProductBarcodeDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "2");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ProductBarcodeDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.BarCode != null)
        {
            if (p.BarCode.Length > 20)
                error.AppendLine("Value for ProductBarcodeDoc.BarCode too long, max 20 chars");

            if (p.BarCode.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ProductBarcodeDoc.BarCode not allowed");

            (fStmt.Parameters["BarCode"] as IDbDataParameter).Value = p.BarCode;
        }
        else
            error.AppendLine("Null value for mandatory parameter ProductBarcodeDoc.BarCode not allowed");


        if (p.ProductNumber != null)
        {
            if (p.ProductNumber.Length > 35)
                error.AppendLine("Value for ProductBarcodeDoc.ProductNumber too long, max 35 chars");

            if (p.ProductNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ProductBarcodeDoc.ProductNumber not allowed");

            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter ProductBarcodeDoc.ProductNumber not allowed");


        if (p.BarCodeType != null)
        {
            if (p.BarCodeType.Length > 7)
                error.AppendLine("Value for ProductBarcodeDoc.BarCodeType too long, max 7 chars");

            if (p.BarCodeType.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ProductBarcodeDoc.BarCodeType not allowed");

            (fStmt.Parameters["BarCodeType"] as IDbDataParameter).Value = p.BarCodeType;
        }
        else
            error.AppendLine("Null value for mandatory parameter ProductBarcodeDoc.BarCodeType not allowed");


        if (p.PackageIdentity != null)
        {
            if (p.PackageIdentity.Length > 17)
                error.AppendLine("Value for ProductBarcodeDoc.PackageIdentity too long, max 17 chars");

            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
        }
        else
            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class ProductVendorInsert : SegmentImpl
  {

    public ProductVendorInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_PRODUCT_VENDOR ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",VendorIdentity");
        s.Append(",ProductNumber");
        s.Append(",VendorProductNumber");
        s.Append(",PackageIdentity");
        s.Append(",CountryOfOrigin");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:VendorIdentity");
        s.Append(",:ProductNumber");
        s.Append(",:VendorProductNumber");
        s.Append(",:PackageIdentity");
        s.Append(",:CountryOfOrigin");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("VendorIdentity", 35));
        fStmt.Parameters.Add(StringParam("ProductNumber", 35));
        fStmt.Parameters.Add(StringParam("VendorProductNumber", 35));
        fStmt.Parameters.Add(StringParam("PackageIdentity", 17));
        fStmt.Parameters.Add(StringParam("CountryOfOrigin", 6));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ProductVendorDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "2");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ProductVendorDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.VendorIdentity != null)
        {
            if (p.VendorIdentity.Length > 35)
                error.AppendLine("Value for ProductVendorDoc.VendorIdentity too long, max 35 chars");

            if (p.VendorIdentity.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ProductVendorDoc.VendorIdentity not allowed");

            (fStmt.Parameters["VendorIdentity"] as IDbDataParameter).Value = p.VendorIdentity;
        }
        else
            error.AppendLine("Null value for mandatory parameter ProductVendorDoc.VendorIdentity not allowed");


        if (p.ProductNumber != null)
        {
            if (p.ProductNumber.Length > 35)
                error.AppendLine("Value for ProductVendorDoc.ProductNumber too long, max 35 chars");

            if (p.ProductNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ProductVendorDoc.ProductNumber not allowed");

            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter ProductVendorDoc.ProductNumber not allowed");


        if (p.VendorProductNumber != null)
        {
            if (p.VendorProductNumber.Length > 35)
                error.AppendLine("Value for ProductVendorDoc.VendorProductNumber too long, max 35 chars");

            if (p.VendorProductNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ProductVendorDoc.VendorProductNumber not allowed");

            (fStmt.Parameters["VendorProductNumber"] as IDbDataParameter).Value = p.VendorProductNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter ProductVendorDoc.VendorProductNumber not allowed");


        if (p.PackageIdentity != null)
        {
            if (p.PackageIdentity.Length > 17)
                error.AppendLine("Value for ProductVendorDoc.PackageIdentity too long, max 17 chars");

            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
        }
        else
            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CountryOfOrigin != null)
        {
            if (p.CountryOfOrigin.Length > 6)
                error.AppendLine("Value for ProductVendorDoc.CountryOfOrigin too long, max 6 chars");

            (fStmt.Parameters["CountryOfOrigin"] as IDbDataParameter).Value = p.CountryOfOrigin;
        }
        else
            (fStmt.Parameters["CountryOfOrigin"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class ProductCodeInsert : SegmentImpl
  {

    public ProductCodeInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into HAPI_PRODUCT_CODE ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",SEQNUM");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",ProductNumber");
        s.Append(",ProductCodeType");
        s.Append(",ProductCode");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:SEQNUM");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:ProductNumber");
        s.Append(",:ProductCodeType");
        s.Append(",:ProductCode");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 9, 0));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("ProductNumber", 35));
        fStmt.Parameters.Add(StringParam("ProductCodeType", 17));
        fStmt.Parameters.Add(StringParam("ProductCode", 35));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ProductCodeDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        if (p.OPCODE == null)
        {
            error.AppendLine("Invalid Opcode (null) in " + p.GetType());
        }
        else
        {
            bool OpcodeValid = false;
            OpcodeValid |= (p.OPCODE == "0");
            OpcodeValid |= (p.OPCODE == "1");
            OpcodeValid |= (p.OPCODE == "2");
            OpcodeValid |= (p.OPCODE == "3");

            if (!OpcodeValid)
            {
                error.AppendLine("Opcode not supported/invalid (" + p.OPCODE + ") in " + p.GetType());
            }
        }

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ProductCodeDoc.OPCODE too long, max 1 chars");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.ProductNumber != null)
        {
            if (p.ProductNumber.Length > 35)
                error.AppendLine("Value for ProductCodeDoc.ProductNumber too long, max 35 chars");

            if (p.ProductNumber.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ProductCodeDoc.ProductNumber not allowed");

            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
        }
        else
            error.AppendLine("Null value for mandatory parameter ProductCodeDoc.ProductNumber not allowed");


        if (p.ProductCodeType != null)
        {
            if (p.ProductCodeType.Length > 17)
                error.AppendLine("Value for ProductCodeDoc.ProductCodeType too long, max 17 chars");

            if (p.ProductCodeType.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ProductCodeDoc.ProductCodeType not allowed");

            (fStmt.Parameters["ProductCodeType"] as IDbDataParameter).Value = p.ProductCodeType;
        }
        else
            error.AppendLine("Null value for mandatory parameter ProductCodeDoc.ProductCodeType not allowed");


        if (p.ProductCode != null)
        {
            if (p.ProductCode.Length > 35)
                error.AppendLine("Value for ProductCodeDoc.ProductCode too long, max 35 chars");

            if (p.ProductCode.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ProductCodeDoc.ProductCode not allowed");

            (fStmt.Parameters["ProductCode"] as IDbDataParameter).Value = p.ProductCode;
        }
        else
            error.AppendLine("Null value for mandatory parameter ProductCodeDoc.ProductCode not allowed");


        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

}
