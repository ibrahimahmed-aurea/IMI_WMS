using System;
using System.Collections.Specialized;
using System.Collections;
using System.Security.Principal;
using System.Windows.Forms;
using System.Data;
using Imi.CodeGenerators.WebServices.Framework;

// ----------------------------------------------------------------------------

namespace Imi.CodeGenerators.PackageGenerator
{

    // ----------------------------------------------------------------------------

    enum TProcedureStatusType { ps_OK, ps_DoesNotExist, ps_IllegalVariables };

    class TPackageReader
    {
        private const string NewLine = "\r\n";

        public string FPackageName;
        public ArrayList FProcedures;

        // ----------------------------------------------------------------------------

        public TPackageReader(IDbConnection conn, string PackageName)
        {
            FPackageName = PackageName;

            StringCollection ProcedureList = GetProcedures(conn, PackageName);

            FProcedures = new ArrayList();

            foreach (string ProcedureName in ProcedureList)
            {
                FProcedures.Add(new TStoredProcReader(conn, FPackageName, ProcedureName));
            }
        }

        // ----------------------------------------------------------------------------

        private StringCollection GetProcedures(IDbConnection conn, string Package)
        {
            IDbCommand aQuery;
            IDataReader r;
            string name;
            StringCollection ProcedureList = new StringCollection();

            aQuery = conn.CreateCommand();
            r = null;

            aQuery.CommandText =
              "select  distinct(OBJECT_NAME || decode(OVERLOAD,null,'','(' || OVERLOAD || ')')) OBJECT_NAME" +
              "   from USER_ARGUMENTS" +
              "  where PACKAGE_NAME = '" + Package + "'" +
              "  order by OBJECT_NAME";

            aQuery.Prepare();

            r = aQuery.ExecuteReader();

            while (r.Read())
            {
                name = r["OBJECT_NAME"].ToString();
                ProcedureList.Add(name);
            }

            r.Close();

            if (r != null)
            {
                r.Close();
            }

            return ProcedureList;
        }

        // ----------------------------------------------------------------------------

        public string GetFullPackage(string CommandLine, string aNameSpace)
        {
            string code_txt = "";

            code_txt += "/*";
            code_txt += NewLine + "  File           : " + StringUtils.CapitalizeRemoveUnderscore(FPackageName) + ".cs";
            code_txt += NewLine + "";
            code_txt += NewLine + "  Description    : Wrapper class for Oracle package " + FPackageName + ".";
            code_txt += NewLine + "                   This code was generated by the PackageGenerator, do not edit.";
            code_txt += NewLine + "";
            code_txt += NewLine + "  Generated with Commandline: " + CommandLine;
            code_txt += NewLine + "";

            foreach (TStoredProcReader sp in FProcedures)
                if (TProcedureStatusType.ps_OK != sp.GetStatus())
                    code_txt += NewLine + sp.GetStatusMessage();

            code_txt += NewLine + "*/";
            code_txt += NewLine + "#define ODP_NET";
            code_txt += NewLine + "using System;";
            code_txt += NewLine + "using System.Data;";
            code_txt += NewLine + "#if ODP_NET";
            code_txt += NewLine + "using Oracle.DataAccess.Client;";
            code_txt += NewLine + "using Oracle.DataAccess.Types;";
            code_txt += NewLine + "#else";
            code_txt += NewLine + "using System.Data.OracleClient;";
            code_txt += NewLine + "#endif";
            code_txt += NewLine + "using Imi.Framework.Job.Data;";
            code_txt += NewLine + "";
            code_txt += NewLine + "namespace " + aNameSpace;
            code_txt += NewLine + "{";
            code_txt += NewLine + "  public partial class " + StringUtils.CapitalizeRemoveUnderscore(FPackageName);
            code_txt += NewLine + "  {";
            code_txt += NewLine + "    private IDbConnectionProvider connectionProvider;";
            code_txt += NewLine;
            code_txt += NewLine + "    public string _Debug()";
            code_txt += NewLine + "    {";
            code_txt += NewLine + "      return  \"Package        : " + FPackageName + "\\r\\n\" +";
            code_txt += NewLine + "              \"Generated on   : " + DateTime.Now.ToShortDateString().Replace("\\", "\\\\") + " " + DateTime.Now.ToLongTimeString().Replace("\\", "\\\\") + "\\r\\n\" +";
            code_txt += NewLine + "              \"Generated by   : " + WindowsIdentity.GetCurrent().Name.Replace("\\", "\\\\") + "@" + SystemInformation.ComputerName + "\\r\\n\" +";
            code_txt += NewLine + "              \"Generated in   : " + Environment.CurrentDirectory.Replace("\\", "\\\\") + "\\r\\n\";";
            code_txt += NewLine + "    }";
            code_txt += NewLine;
            code_txt += NewLine + "    public " + StringUtils.CapitalizeRemoveUnderscore(FPackageName) + "(IDbConnectionProvider connectionProvider)";
            code_txt += NewLine + "    {";
            code_txt += NewLine + "      this.connectionProvider = connectionProvider;";
            code_txt += NewLine + "    }";
            code_txt += NewLine;

            foreach (TStoredProcReader sp in FProcedures)
                if (TProcedureStatusType.ps_OK == sp.GetStatus())
                    code_txt += NewLine + sp.GetPrivateVariableDecl();

            code_txt += GetLockObjectDecl();

            code_txt += NewLine + NewLine + "    // ----------------------------------------------------------------------------";

            foreach (TStoredProcReader sp in FProcedures)
                if (TProcedureStatusType.ps_OK == sp.GetStatus())
                    code_txt += NewLine + sp.GetProcedureCreate(FPackageName);

            code_txt += NewLine + NewLine + "    // ----------------------------------------------------------------------------";

            foreach (TStoredProcReader sp in FProcedures)
                if (TProcedureStatusType.ps_OK == sp.GetStatus())
                    code_txt += NewLine + sp.GetProcedureImplementation();

            if (AnyRefCursorProcedures())
            {
                code_txt += NewLine;
                code_txt += NewLine + "    public void Cancel()";
                code_txt += NewLine + "    {";
                code_txt += NewLine + "      lock (syncLock)";
                code_txt += NewLine + "      {";
                code_txt += NewLine + "        if (currentCommand != null)";
                code_txt += NewLine + "        {";
                code_txt += NewLine + "          if (currentCommand.Connection != null)";
                code_txt += NewLine + "          {";
                code_txt += NewLine + "            if (currentCommand.Connection.State != ConnectionState.Closed)";
                code_txt += NewLine + "            {";
                code_txt += NewLine + "              currentCommand.Cancel();";
                code_txt += NewLine + "            }";
                code_txt += NewLine + "          }";
                code_txt += NewLine + "        }";
                code_txt += NewLine + "      }";
                code_txt += NewLine + "    }";
            }

            code_txt += NewLine + "  }";

            code_txt += NewLine + "}";

            return code_txt;
        }

        // ----------------------------------------------------------------------------

        private string GetLockObjectDecl()
        {
            string code_txt = "";

            if (AnyRefCursorProcedures())
            {
                code_txt += NewLine + "    private IDbCommand currentCommand;";
                code_txt += NewLine + "    private object syncLock = new object();";
            }

            return code_txt;
        }

        // ----------------------------------------------------------------------------

        public bool AnyRefCursorProcedures()
        {
            bool bAnyRefCursors = false;

            foreach (TStoredProcReader sp in FProcedures)
            {
                if (sp.GetHasRefCursorParam())
                {
                    bAnyRefCursors = true;
                    break;
                }
            }

            return bAnyRefCursors;
        }

        // ----------------------------------------------------------------------------

    }

    // ----------------------------------------------------------------------------

    class TStoredProcReader
    {
        private const string NewLine = "\r\n";

        protected IDbConnection FConnection;
        protected bool FIsFunction;
        protected string FOverload;
        protected string FPackageName;
        protected ArrayList FParameters;
        protected string FProcedureName;
        protected string FProcedureNameCapitalized;
        protected TProcedureStatusType FStatus;
        protected string FStatusMessage;
        protected bool FHasRefCursorParams;
        protected bool FHasClobParams;
        protected bool FHasNormalParams;

        // ----------------------------------------------------------------------------

        public TStoredProcReader(IDbConnection conn, string PackageName, string ProcedureName)
        {
            int oPos;

            FConnection = conn;
            oPos = ProcedureName.IndexOf("(");

            if (oPos > 0)
            {
                FOverload = ProcedureName.Substring(oPos + 1, ProcedureName.Length - oPos - 2);
                ProcedureName = ProcedureName.Substring(0, oPos);
            }
            else
                FOverload = "";

            FPackageName = PackageName;
            FProcedureName = ProcedureName;
            FHasRefCursorParams = false;
            FHasClobParams = false;
            FHasNormalParams = false;

            FProcedureNameCapitalized = StringUtils.CapitalizeRemoveUnderscore(ProcedureName);

            FParameters = new ArrayList();

            CreateParameters();
        }

        // ----------------------------------------------------------------------------

        protected void CreateParameters()
        {
            IDbCommand aQuery;
            IDataReader r;
            string name;
            string data_type;
            string inout;
            string pls_type;
            string data_length;
            string data_precision;
            string data_scale;
            string badstring;

            aQuery = FConnection.CreateCommand();
            r = null;

            aQuery.CommandText =
              "select  ARGUMENT_NAME, DATA_TYPE" +
              "   from user_arguments" +
              "  where package_name = upper('" + FPackageName + "')" +
              "   and  object_name  = upper('" + FProcedureName + "')" +
              "   and  data_type not in ('VARCHAR', 'VARCHAR2','CHAR','DATE','TIMESTAMP','NUMBER','REF CURSOR','CLOB','PL/SQL BOOLEAN','BINARY_INTEGER','ROWID')";

            if (FOverload != "")
            {
                aQuery.CommandText = aQuery.CommandText +
                  " and overload = '" + FOverload + "'";
            }

            aQuery.Prepare();

            badstring = "";
            r = aQuery.ExecuteReader();

            while (r.Read())
            {
                if (badstring != "")
                    badstring = badstring + "\r\n";

                name = r["ARGUMENT_NAME"].ToString();
                data_type = r["DATA_TYPE"].ToString();
                badstring = "  " + name + " " + data_type;
            }

            r.Close();

            if (badstring != "")
            {
                FStatusMessage = FPackageName + "." + FProcedureName + " cannot be generated since the following" + "\r\n" +
                  "parameter types are not currently supported:" + "\r\n" + "  " + badstring + "\r\n";

                FStatus = TProcedureStatusType.ps_IllegalVariables;
                return;
            }
            else
            {
                FStatus = TProcedureStatusType.ps_OK;

                // Get Arguments for procedure

                aQuery.CommandText =
                  "select  ARGUMENT_NAME" +
                  "       ,DATA_TYPE" +
                  "       ,IN_OUT" +
                  "       ,PLS_TYPE" +
                  "       ,decode(DATA_TYPE, 'VARCHAR2', CHAR_LENGTH, 'CHAR', CHAR_LENGTH, DATA_LENGTH) DATA_LENGTH" +
                  "       ,DATA_PRECISION" +
                  "       ,DATA_SCALE" +
                  "   from user_arguments" +
                  "  where package_name = upper('" + FPackageName + "')" +
                  "   and  object_name  = upper('" + FProcedureName + "')";

                if (FOverload != "")
                {
                    aQuery.CommandText = aQuery.CommandText + "\r\n" + " and overload = '" + FOverload + "'";
                }

                aQuery.CommandText = aQuery.CommandText + "  order by sequence, position";

                aQuery.Prepare();

                r = aQuery.ExecuteReader();

                while (r.Read())
                {

                    name = r["ARGUMENT_NAME"].ToString();
                    data_type = r["DATA_TYPE"].ToString();
                    inout = r["IN_OUT"].ToString();
                    pls_type = r["PLS_TYPE"].ToString();
                    data_length = r["DATA_LENGTH"].ToString();
                    data_precision = r["DATA_PRECISION"].ToString();
                    data_scale = r["DATA_SCALE"].ToString();

                    if (data_type != "")
                    {
                        switch (data_type)
                        {
                            case "VARCHAR":
                            case "VARCHAR2":
                            case "CHAR":
                            case "DATE":
                            case "TIMESTAMP":
                            case "NUMBER":
                            case "PL/SQL BOOLEAN":
                            case "BINARY_INTEGER":
                            case "ROWID":
                                FHasNormalParams = true;
                                break;
                        }

                        if (data_type == "REF CURSOR")
                        {
                            FHasRefCursorParams = true;
                        }

                        if (data_type == "CLOB")
                        {
                            FHasClobParams = true;
                        }


                        if (name == "")
                        {
                            inout = "RETURN";
                            FIsFunction = true;
                        }

                        FParameters.Add(new TStoredProcParamReader(name, data_type, inout, pls_type,
                          data_length, data_precision, data_scale, GetIName()));

                    }
                }
            }

            if (r != null)
            {
                r.Close();
            }
        }

        // ----------------------------------------------------------------------------

        public string GetIName()
        {
            return FProcedureNameCapitalized + FOverload;
        }

        // ----------------------------------------------------------------------------

        public string GetName()
        {
            return FProcedureName;
        }

        // ----------------------------------------------------------------------------

        public bool GetHasRefCursorParam()
        {
            return FHasRefCursorParams;
        }

        // ----------------------------------------------------------------------------

        public bool GetHasClobParam()
        {
            return FHasClobParams;
        }

        // ----------------------------------------------------------------------------

        public bool GetHasNormalParams()
        {
            return FHasNormalParams;
        }

        // ----------------------------------------------------------------------------

        protected TStoredProcParamReader GetReturnParam()
        {
            return (TStoredProcParamReader)FParameters[0];
        }

        // ----------------------------------------------------------------------------

        public TProcedureStatusType GetStatus()
        {
            return FStatus;
        }

        // ----------------------------------------------------------------------------

        public string GetStatusMessage()
        {
            return FStatusMessage;
        }

        // ----------------------------------------------------------------------------

        public bool IsFunction()
        {
            return FIsFunction;
        }

        // ----------------------------------------------------------------------------

        public string GetVariablesNeeded()
        {
            string code_txt = "";

            // Write variables that was needed.
            if (FHasNormalParams)
            {
                code_txt += NewLine + "      IDbDataParameter p;";
            }

            if ((FHasRefCursorParams) || (FHasClobParams))
            {
                code_txt += NewLine + "      OracleParameter  oP;";
            }

            code_txt += NewLine;

            return code_txt;
        }

        // ----------------------------------------------------------------------------

        public string GetCreateParameterList()
        {
            string code_txt = "";

            foreach (TStoredProcParamReader Param in FParameters)
                code_txt += NewLine + NewLine + Param.CreateParameter();

            return code_txt;
        }

        // ----------------------------------------------------------------------------

        protected string GetParams(string indent, int MaxLen)
        {
            string code_txt = "";
            bool first = true;

            foreach (TStoredProcParamReader Param in FParameters)
            {
                if ((Param.Direction != "RETURN"))
                {
                    if (!first)
                        code_txt += Param.GetParameterSeparator() + " " + NewLine + indent;
                    else
                        first = false;

                    code_txt += Param.GetParameterDeclaration(MaxLen);
                }
            }
            return code_txt;
        }


        // ----------------------------------------------------------------------------

        public string GetSetInParameterList()
        {
            string code_txt = "";
            int MaxLen;

            MaxLen = 0;

            foreach (TStoredProcParamReader Param in FParameters)
            {
                if ((Param.Direction != "OUT") && (Param.Direction != "RETURN"))
                {
                    if (Param.Name.Length > MaxLen)
                        MaxLen = Param.Name.Length;
                }
            }

            foreach (TStoredProcParamReader Param in FParameters)
            {
                if ((Param.Direction != "OUT") && (Param.Direction != "RETURN"))
                    code_txt += NewLine + NewLine + Param.GetSetInParams(MaxLen);
            }

            return code_txt;
        }

        // ----------------------------------------------------------------------------

        public string GetSetOutParameterList()
        {
            string code_txt = "";
            int MaxLen;
            string lName;
            string aLine;

            MaxLen = 0;

            foreach (TStoredProcParamReader Param in FParameters)
            {
                if ((Param.Direction != "IN") && (Param.Direction != "RETURN"))
                {
                    if (Param.Name.Length > MaxLen)
                        MaxLen = Param.Name.Length;
                }
            }

            foreach (TStoredProcParamReader Param in FParameters)
            {
                if ((Param.Direction == "RETURN"))
                {
                    lName = "ret";

                    code_txt += NewLine + NewLine;
                    code_txt += string.Format("         {0} {1};", Param.GetNativeDataType(), lName);

                    aLine = Param.GetSetOutParam(lName);

                    code_txt += NewLine + NewLine + aLine;
                    code_txt += NewLine + NewLine + "       return ret;";
                }
                else if ((Param.Direction != "IN"))
                {
                    lName = Param.Name;
                    aLine = Param.GetSetOutParam(lName);
                    code_txt += NewLine + NewLine + aLine;
                }
            }

            return code_txt;
        }

        // ----------------------------------------------------------------------------

        public string GetDestructorCode()
        {
            string code_txt = "";
            return code_txt;
        }

        // ----------------------------------------------------------------------------

        public string GetMethodType()
        {
            string code_txt = "public ";

            if (FOverload != "")
                code_txt += "overload ";

            if (IsFunction())
                code_txt += ((TStoredProcParamReader)GetReturnParam()).GetNativeDataType();
            else
                code_txt += "void";

            return code_txt;
        }

        // ----------------------------------------------------------------------------

        public string GetPrivateProcedureDecl()
        {
            return "";
        }

        // ----------------------------------------------------------------------------

        public string GetPrivateVariableDecl()
        {
            return "    private IDbCommand sp_" + GetIName() + ";";
        }

        // ----------------------------------------------------------------------------

        public string GetProcedureCreate(string PackageName)
        {
            string code_txt = "";

            code_txt += NewLine + "    private void CreateSP_" + GetIName() + "()";
            code_txt += NewLine + "    {";
            code_txt += GetVariablesNeeded();
            code_txt += NewLine + "      sp_" + GetIName() + " = connectionProvider.GetConnection().CreateCommand();";
            code_txt += NewLine + "      sp_" + GetIName() + ".CommandText = \"" + PackageName.ToUpper() + "." + GetName().ToUpper() + "\";";
            code_txt += NewLine + "      sp_" + GetIName() + ".CommandType = System.Data.CommandType.StoredProcedure;";
            code_txt += NewLine + "#if ODP_NET";
            code_txt += NewLine + "      ((OracleCommand)sp_" + GetIName() + ").BindByName = true;";
            code_txt += NewLine + "#endif";
            code_txt += GetCreateParameterList();
            code_txt += NewLine + "    }";

            return code_txt;
        }

        // ----------------------------------------------------------------------------

        public string GetProcedureImplementation()
        {
            string code_txt = "";

            code_txt += NewLine + GetSignature(false);
            code_txt += NewLine + "    {";
            code_txt += NewLine + "      if ( sp_" + GetIName() + " == null )";
            code_txt += NewLine + "        CreateSP_" + GetIName() + "();";
            code_txt += NewLine;
            code_txt += NewLine + "      sp_" + GetIName() + ".Transaction = connectionProvider.CurrentTransaction;";
            code_txt += NewLine;
            code_txt += GetLockIfRefCursor();
            code_txt += NewLine + "      // Set In Parameters";
            code_txt += GetSetInParameterList();
            code_txt += NewLine;
            code_txt += NewLine + "      // Execute stored procedure";
            code_txt += NewLine;
            code_txt += NewLine + "      sp_" + GetIName() + ".Prepare();";
            code_txt += NewLine + "      sp_" + GetIName() + ".ExecuteNonQuery();";
            code_txt += NewLine;
            code_txt += NewLine + "      // Set Out Parameters";
            code_txt += GetSetOutParameterList();
            code_txt += NewLine + "    }";

            return code_txt;
        }

        private string GetLockIfRefCursor()
        {
            string code_txt = "";

            if (FHasRefCursorParams)
            {
                code_txt += NewLine + "      lock (syncLock)";
                code_txt += NewLine + "      {";
                code_txt += NewLine + "          currentCommand = sp_" + GetIName() + ";";
                code_txt += NewLine + "      }";
            }

            return code_txt;
        }

        // ----------------------------------------------------------------------------

        public string GetSignature(bool preDeclare)
        {
            string ol;
            string ind;
            string pName;

            pName = "    " + GetMethodType() + " " + StringUtils.CapitalizeRemoveUnderscore(GetName());

            ind = new String(' ', pName.Length + 1);

            ol = pName + "(";

            int MaxLen = 0;
            int currLen;

            foreach (TStoredProcParamReader Param in FParameters)
            {
                currLen = Param.Name.Length;

                if ((Param.Direction != "IN") && (Param.Direction != "RETURN"))
                    currLen += 4;

                if (currLen > MaxLen)
                    MaxLen = currLen;
            }

            ol += GetParams(ind, MaxLen);

            ol += ")";

            return ol + "";

        }

    }

    // ----------------------------------------------------------------------------

    class TStoredProcParamReader
    {
        private const string NewLine = "\r\n";

        public string DataLength;
        public string DataType;
        public string DataPrecision;
        public string DataScale;
        public string Direction;
        public string Name;
        public string PLSType;
        public string InternalProcedureName;

        // ----------------------------------------------------------------------------

        public TStoredProcParamReader(string aName, string aDataType, string aDirection,
          string aPLSType, string aDataLength, string aDataPrecision, string aDataScale,
          string aInternalProcedureName)
        {
            Name = aName;
            DataType = aDataType;
            Direction = aDirection;
            PLSType = aPLSType;
            DataLength = aDataLength;
            DataPrecision = aDataPrecision;
            DataScale = aDataScale;
            InternalProcedureName = aInternalProcedureName;

            if ((DataLength == "") && (DataType == "CHAR"))
                DataLength = "1";

            if (DataLength == "")
                DataLength = "255";

            if (DataPrecision == "")
                DataPrecision = "0";

            if (DataScale == "")
                DataScale = "0";
        }

        // ----------------------------------------------------------------------------

        private string DirectionTranslationText(string Direction)
        {
            string code_txt = "";

            switch (Direction)
            {
                case "IN":
                    code_txt += "Input";
                    break;
                case "OUT":
                    code_txt += "Output";
                    break;
                case "RETURN":
                    code_txt += "ReturnValue";
                    break;
                default:
                    code_txt += "InputOutput";
                    break;
            }

            return code_txt;
        }

        // ----------------------------------------------------------------------------

        private string DataTypeTranslationText(string DataType, string DataPrecision)
        {
            string code_txt = "";

            switch (DataType)
            {
                case "VARCHAR":
                case "VARCHAR2":
                case "CHAR":
                case "ROWID":
                    code_txt += "DbType.String";
                    break;
                case "NUMBER":
                    if (DataPrecision != "0")
                    {
                        code_txt += "DbType.Decimal";
                    }
                    else
                    {
                        code_txt += "DbType.Double";
                    }
                    break;
                case "DATE":
                case "TIMESTAMP":
                    code_txt += "DbType.DateTime";
                    break;
                case "PL/SQL BOOLEAN":
                    code_txt += "DbType.Boolean";
                    break;
                case "BINARY_INTEGER":
                    code_txt += "DbType.Int32";
                    break;
            }

            return code_txt;
        }

        // ----------------------------------------------------------------------------

        public string CreateParameter()
        {
            string code_txt = "";

            if (DataType == "REF CURSOR")
            {
                // Special treatment of Ref Cursors.
                code_txt += "      oP = sp_" + InternalProcedureName + ".CreateParameter() as OracleParameter;" + NewLine;
                code_txt += "      oP.ParameterName = \"" + Name + "\";" + NewLine;
                code_txt += "#if ODP_NET" + NewLine;
                code_txt += "      oP.OracleDbType = OracleDbType.RefCursor;" + NewLine;
                code_txt += "#else" + NewLine;
                code_txt += "      oP.OracleType = OracleType.Cursor;" + NewLine;
                code_txt += "#endif" + NewLine;
                code_txt += "      oP.Direction = ParameterDirection." + DirectionTranslationText(Direction) + ";" + NewLine;
                code_txt += "      sp_" + InternalProcedureName + ".Parameters.Add( oP );";
            }
            else if (DataType == "CLOB")
            {
                code_txt += "      oP = sp_" + InternalProcedureName + ".CreateParameter() as OracleParameter;" + NewLine;
                code_txt += "      oP.ParameterName = \"" + Name + "\";" + NewLine;
                code_txt += "#if ODP_NET" + NewLine;
                code_txt += "      oP.OracleDbType = OracleDbType.Clob;" + NewLine;
                code_txt += "#else" + NewLine;
                code_txt += "      oP.OracleType = OracleType.Clob;" + NewLine;
                code_txt += "#endif" + NewLine;
                code_txt += "      oP.Direction = ParameterDirection." + DirectionTranslationText(Direction) + ";" + NewLine;
                code_txt += "      sp_" + InternalProcedureName + ".Parameters.Add(oP);" + NewLine;
            }
            else
            {
                // Handling of "normal" datatypes
                code_txt += "      p = sp_" + InternalProcedureName + ".CreateParameter();" + NewLine;
                code_txt += "      p.ParameterName = \"" + Name + "\";" + NewLine;
                code_txt += "      p.DbType = " + DataTypeTranslationText(DataType, DataPrecision) + ";" + NewLine;

                switch (DataType)
                {
                    case "VARCHAR":
                    case "VARCHAR2":
                    case "CHAR":
                    case "ROWID":
                        code_txt += "      p.Size = " + DataLength + ";" + NewLine;
                        break;
                    case "NUMBER":
                        if (DataPrecision != "0") // Not Double Datatype
                        {
                            code_txt += "      p.Precision = " + DataPrecision + ";" + NewLine;
                            code_txt += "      p.Scale     = " + DataScale + ";" + NewLine;
                        }
                        break;
                    case "DATE":
                    case "TIMESTAMP":
                        // Nothing special to do with Date type.
                        break;
                    case "PL/SQL BOOLEAN":
                        break;
                    case "BINARY_INTEGER":
                        code_txt += "      p.Scale     = " + DataScale + ";" + NewLine;
                        break;
                    default:
                        code_txt += "*** Unsupported datatype ***" + NewLine;
                        break;
                }

                code_txt += "      p.Direction = ParameterDirection." + DirectionTranslationText(Direction) + ";" + NewLine;
                code_txt += "      sp_" + InternalProcedureName + ".Parameters.Add( p );";

            }

            return code_txt;
        }

        // ----------------------------------------------------------------------------

        public string GetNativeDataType()
        {
            string code_txt;

            switch (DataType)
            {
                case "VARCHAR":
                case "VARCHAR2":
                case "CHAR":
                case "ROWID":
                    code_txt = "string";
                    break;
                case "NUMBER":
                    if (DataScale == "0" && Int32.Parse(DataPrecision) <= 9)
                    {
                        code_txt = "Nullable<int>";
                    }
                    else
                    {
                        code_txt = "Nullable<double>";
                    }
                    break;
                case "DATE":
                case "TIMESTAMP":
                    code_txt = "Nullable<DateTime>";
                    break;
                case "REF CURSOR":
                    code_txt = "IDataReader";
                    break;
                case "CLOB":
                    code_txt = "string";
                    break;
                case "PL/SQL BOOLEAN":
                    code_txt = "Nullable<bool>";
                    break;
                case "BINARY_INTEGER":
                    code_txt = "Nullable<int>";
                    break;
                default:
                    code_txt = "unsupported";
                    break;
            }

            return code_txt;
        }

        // ----------------------------------------------------------------------------

        public string GetParameterDeclaration(int MaxLen /* only for pretty printing */ )
        {
            string code_txt;

            if ((Direction != "RETURN"))
            {
                if ((Direction != "IN"))
                {
                    if (DataType == "REF CURSOR")
                    {
                        code_txt = "out " + GetNativeDataType();
                    }
                    else
                    {
                        code_txt = "ref " + GetNativeDataType();
                    }
                }
                else
                {
                    code_txt = GetNativeDataType();
                }

                code_txt = (code_txt + new String(' ', 24)).Substring(0, 24);

                code_txt += "" + Name;
            }
            else
            {
                code_txt = "";
            }

            return code_txt;
        }

        // ----------------------------------------------------------------------------

        public string GetParameterSeparator()
        {
            return ",";
        }

        // ----------------------------------------------------------------------------

        public string GetSetInParams(int MaxLen)
        {
            string alignSpace = new String(' ', MaxLen - Name.Length);
            string code_txt = "";

            switch (DataType)
            {
                case "VARCHAR":
                case "VARCHAR2":
                case "CHAR":
                case "CLOB":
                case "ROWID":
                    code_txt += "      if ( String.IsNullOrEmpty(" + Name + ") )" + NewLine;
                    code_txt += "        " + code_spname_param_value() + alignSpace + " = DBNull.Value;" + NewLine;
                    code_txt += "      else" + NewLine;
                    code_txt += "        " + code_spname_param_value() + alignSpace + " = " + Name + ";";
                    break;
                case "NUMBER":
                    code_txt += "      if ( " + Name + " == null )" + NewLine;
                    code_txt += "        " + code_spname_param_value() + alignSpace + " = DBNull.Value;" + NewLine;
                    code_txt += "      else" + NewLine;
                    code_txt += "        " + code_spname_param_value() + alignSpace + " = " + Name + ";";
                    break;
                case "DATE":
                case "TIMESTAMP":
                    code_txt += "      if ( " + Name + " == null )" + NewLine;
                    code_txt += "        " + code_spname_param_value() + alignSpace + " = DBNull.Value;" + NewLine;
                    code_txt += "      else" + NewLine;
                    code_txt += "        " + code_spname_param_value() + alignSpace + " = " + Name + ";";
                    break;
                case "PL/SQL BOOLEAN":
                    code_txt += "      if ( " + Name + " == null )" + NewLine;
                    code_txt += "        " + code_spname_param_value() + alignSpace + " = DBNull.Value;" + NewLine;
                    code_txt += "      else" + NewLine;
                    code_txt += "        " + code_spname_param_value() + alignSpace + " = " + Name + ";";
                    break;
                case "BINARY_INTEGER":
                    code_txt += "      if ( " + Name + " == null )" + NewLine;
                    code_txt += "        " + code_spname_param_value() + alignSpace + " = DBNull.Value;" + NewLine;
                    code_txt += "      else" + NewLine;
                    code_txt += "        " + code_spname_param_value() + alignSpace + " = " + Name + ";";
                    break;
            }

            return code_txt;
        }

        // ----------------------------------------------------------------------------

        public string GetSetOutParam(string lName)
        {
            bool skip = false;
            string code_txt = "";
            string assignnull = "";
            string assignnormal = "";

            switch (DataType)
            {
                case "VARCHAR":
                case "VARCHAR2":
                case "CHAR":
                case "ROWID":
                    assignnull = " = null;";
                    assignnormal = " = " + code_spname_param_value() + ".ToString();";
                    break;
                case "NUMBER":
                    assignnull = " = null;";

                    if (DataScale == "0" && Int32.Parse(DataPrecision) <= 9)
                    {
                        assignnormal = " = Convert.ToInt32(" + code_spname_param_value() + ");";
                    }
                    else
                    {
                        assignnormal = " = Convert.ToDouble(" + code_spname_param_value() + ");";
                    }
                    break;
                case "DATE":
                case "TIMESTAMP":
                    assignnull = " = null;";
                    assignnormal = " = (DateTime)" + code_spname_param_value() + ";";
                    break;
                case "REF CURSOR":
                    assignnull = "";
                    assignnormal = " = (IDataReader)" + code_spname_param_value() + ";";
                    skip = true;

                    code_txt += "if (!(" + code_spname_param_value() + " as OracleRefCursor).IsNull)" + NewLine;
                    code_txt += "{" + NewLine;
                    code_txt += "   #if ODP_NET" + NewLine;
                    code_txt += "       " + lName + " = (IDataReader)(" + code_spname_param_value() + " as OracleRefCursor).GetDataReader();" + NewLine;
                    code_txt += "   #else" + NewLine;
                    code_txt += "       " + lName + " = (IDataReader)" + code_spname_param_value() + ";" + NewLine;
                    code_txt += "   #endif" + NewLine;
                    code_txt += "}" + NewLine;
                    code_txt += "else" + NewLine;
                    code_txt += "{" + NewLine;
                    code_txt += "   " + lName + " = null;" + NewLine;
                    code_txt += "}" + NewLine;
                    break;
                case "CLOB":
                    assignnull = " = null;";
                    assignnormal = " = (string)((OracleClob)(" + code_spname_param_value() + ")).Value;";
                    break;
                case "PL/SQL BOOLEAN":
                    assignnull = " = null;";
                    assignnormal = " = (Nullable<bool>)" + code_spname_param_value() + ";";
                    break;
                case "BINARY_INTEGER":
                    assignnull = " = null;";
                    assignnormal = " = (Nullable<int>)" + code_spname_param_value() + ";";
                    break;
                default:
                    assignnull = "unsupported";
                    assignnormal = "unsupported";
                    break;
            }

            if (!skip)
            {
                if (assignnull != "")
                {
                    code_txt += "      if ( " + code_spname_param_value() + " == DBNull.Value";

                    if (DataType == "CLOB") { code_txt += " || ((OracleClob)(" + code_spname_param_value() + ")).IsNull"; }

                    code_txt += ")" + NewLine;
                    code_txt += "        " + lName + assignnull + NewLine;
                    code_txt += "      else" + NewLine;
                    code_txt += "        " + lName + assignnormal;
                }
                else
                {
                    code_txt += "      " + lName + assignnormal;
                }
            }

            return code_txt;
        }

        private string code_spname()
        {
            return "sp_" + InternalProcedureName;
        }

        private string code_spname_param_value()
        {
            return "(" + code_spname() + ".Parameters[\"" + Name + "\"] as IDbDataParameter).Value";
        }


    }

    // ----------------------------------------------------------------------------

}
