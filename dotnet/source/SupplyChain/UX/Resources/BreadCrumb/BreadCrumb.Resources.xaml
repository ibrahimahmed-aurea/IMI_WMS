<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:Imi.Framework.Wpf.Controls;assembly=Imi.Framework.Wpf.Controls"
    xmlns:local="clr-namespace:Imi.SupplyChain.UX"
    xmlns:themes="http://schemas.actiprosoftware.com/winfx/xaml/themes"
    xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options">
      
  <DrawingBrush x:Key="MacHouse" Stretch="Uniform" PresentationOptions:Freeze="True">
    <DrawingBrush.Drawing>
      <DrawingGroup>
        <DrawingGroup.Children>
          <GeometryDrawing Brush="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundNormalBrushKey}}" Geometry="F1 M 71,360L 71,376L 83,376L 83,360L 95,360L 95,376L 107,376L 107,360L 115,360L 115,358L 91,334L 87,334L 63,358L 63,360L 71,360 Z ">
            <GeometryDrawing.Pen>
              <Pen LineJoin="Round" Brush="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundNormalBrushKey}}"/>
            </GeometryDrawing.Pen>
          </GeometryDrawing>
        </DrawingGroup.Children>
      </DrawingGroup>
    </DrawingBrush.Drawing>
  </DrawingBrush>

  <DrawingBrush x:Key="LeftArrow" Stretch="Uniform" PresentationOptions:Freeze="True">
    <DrawingBrush.Drawing>
      <DrawingGroup>
        <DrawingGroup.Children>
          <GeometryDrawing Geometry="F1 M 129,425.204L 169,365.204L 129,305.204">
            <GeometryDrawing.Pen>
              <Pen Thickness="3" LineJoin="Round" Brush="{DynamicResource {x:Static themes:AssetResourceKeys.ContainerBorderNormalBrushKey}}"/>
            </GeometryDrawing.Pen>
          </GeometryDrawing>
        </DrawingGroup.Children>
      </DrawingGroup>
    </DrawingBrush.Drawing>
  </DrawingBrush>

  <!-- Templates -->
  <Style x:Key="HouseButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <Rectangle Width="14" Height="14" Fill="{StaticResource MacHouse}">
              <!--
              <Rectangle.Effect>
                <DropShadowEffect Direction="314" Opacity="0.675" ShadowDepth="2"/>
              </Rectangle.Effect>
              -->
            </Rectangle>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="PathButtonFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundNormalBrushKey}}" StrokeDashArray="1 2" StrokeThickness="1"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  
  <Style x:Key="PathButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource PathButtonFocusVisual}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <TextBlock x:Name="text" Text="{TemplateBinding Content}"/>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="true"/>
                <Condition Property="IsEnabled" Value="True"/>
              </MultiTrigger.Conditions>
              <Setter Property="TextDecorations" TargetName="text" Value="Underline"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="CloseButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundNormalBrushKey}}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <TextBlock x:Name="text" Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}"/>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="true"/>
                <Condition Property="IsEnabled" Value="True"/>
              </MultiTrigger.Conditions>
              <Setter Property="TextDecorations" TargetName="text" Value="Underline"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type controls:BreadCrumbItem}">
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="IsTabStop" Value="False"/>
    <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type controls:BreadCrumbItem}">
          <ControlTemplate.Resources>
            <!--
                        <controls:MarginLeftAnimation x:Key="PART_AddAnimation" Direction="Right" Duration="0:0:0.4"/>
                        <controls:MarginLeftAnimation x:Key="PART_CloseAnimation" Direction="Left" Duration="0:0:0.4"/>
                        -->
          </ControlTemplate.Resources>
          <Grid ClipToBounds="True" HorizontalAlignment="Left" VerticalAlignment="Center">
            <StackPanel x:Name="PART_Animator" Orientation="Horizontal" Width="Auto" Margin="0,2,0,2" Background="Transparent" HorizontalAlignment="Left">
              <Button x:Name="PathButton"
                      Style="{StaticResource PathButtonStyle}"
                      Width="Auto" Height="Auto"
                      VerticalAlignment="Center" HorizontalAlignment="Left"
                      Content="{TemplateBinding Header}"
                      Command="{Binding BreadCrumbItemClickCommand, RelativeSource={RelativeSource TemplatedParent}}"
                      Margin="6,0,0,0" 
                      Foreground="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundNormalBrushKey}}" Background="Transparent"/>
              <Rectangle x:Name="Arrow" Width="12" Height="30" Fill="{StaticResource LeftArrow}" VerticalAlignment="Center" Margin="6,-2,0,-2" SnapsToDevicePixels="True"/>
            </StackPanel>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsCurrentItem" Value="True">
              <Setter Property="Visibility" TargetName="Arrow" Value="Collapsed"/>
              <Setter Property="IsEnabled" TargetName="PathButton" Value="False"/>
            </Trigger>
            <Trigger Property="IsClosing" Value="True">
              <Setter Property="FontWeight" Value="Bold" TargetName="PathButton"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="true"/>
                <Condition Property="IsCurrentItem" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter Property="TextBlock.TextDecorations" TargetName="PathButton" Value="Underline"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ItemsPanelTemplate x:Key="BreadCrumbItemsPanelTemplate">
    <VirtualizingStackPanel IsItemsHost="True" Orientation="Horizontal"/>
  </ItemsPanelTemplate>

  <Style TargetType="{x:Type controls:BreadCrumb}">
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="ItemsPanel" Value="{StaticResource BreadCrumbItemsPanelTemplate}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type controls:BreadCrumb}">
                    <Border BorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.ListBorderNormalBrushKey}}" Background="{DynamicResource {x:Static themes:AssetResourceKeys.ContainerMediumBackgroundNormalBrushKey}}" BorderThickness="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBorderNormalThicknessKey}}" CornerRadius="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBorderNormalCornerRadiusKey}}" x:Name="outerBorder" SnapsToDevicePixels="True">
              <Grid x:Name="MainGrid" Width="Auto" Height="Auto" ClipToBounds="True">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto"/>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Grid HorizontalAlignment="Left" Width="Auto" VerticalAlignment="Center">
                  <StackPanel HorizontalAlignment="Left" VerticalAlignment="Center" Width="Auto" Height="Auto" Orientation="Horizontal">
                    <Button x:Name="HomeButton"
                        Style="{StaticResource HouseButtonStyle}"
                        VerticalAlignment="Center" HorizontalAlignment="Left"
                        IsTabStop="False"
                        Command="{Binding BreadCrumbHomeCommand, RelativeSource={RelativeSource TemplatedParent}}"
                        Margin="8,0,0,0"/>
                    <Rectangle Width="12" Height="30" Fill="{StaticResource LeftArrow}" Margin="2,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                  </StackPanel>
                </Grid>
                <ItemsPresenter Grid.Column="1"/>
                <Button x:Name="CloseButton" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0,0,8,0"
                        Style="{StaticResource CloseButtonStyle}" Grid.Column="2" IsTabStop="False"
                        Content="{x:Static local:StringResources.BreadCrumb_Back}"
                        Command="{Binding BreadCrumbCloseCommand, RelativeSource={RelativeSource TemplatedParent}}"/>

              </Grid>
            </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsAtHomeDirectory" Value="true">
              <Setter Property="Visibility" TargetName="CloseButton" Value="Hidden"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>
