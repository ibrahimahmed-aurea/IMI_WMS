//===============================================================================
// Microsoft patterns & practices
// Smart Client Software Factory
//===============================================================================
// Copyright  Microsoft Corporation.  All rights reserved.
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE.
//===============================================================================
// The example companies, organizations, products, domain names,
// e-mail addresses, logos, people, places, and events depicted
// herein are fictitious.  No association with any real company,
// organization, product, domain name, email address, logo, person,
// places, or events is intended or should be inferred.
//===============================================================================

//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by this guidance package as part of the solution template
//
// This class contains code that otherwise would be repeated in every presenter when using the M-V-P pattern. 
// It includes a reference to a generic view and a reference to the WorkItem it belongs. 
// It also provides virtual methods to work with the controlled view
// 
// For more information see: 
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-210-Creating%20a%20Smart%20Client%20Solution.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.SmartParts;
using Imi.Framework.UX.Services;
using System.Collections.Generic;
using Microsoft.Practices.ObjectBuilder;

namespace Imi.Framework.UX
{
	public abstract class Presenter<TView> : IBuilderAware
        where TView : class
	{
		private TView _view;
		private WorkItem _workItem;
        
		public TView View
		{
			get { return _view; }
			set { _view = value; OnViewSet(); }
		}

		[ServiceDependency]
		public WorkItem WorkItem
		{
			get 
            { 
                return _workItem; 
            }
			set 
            { 
                _workItem = value;
            }
		}

        private void ItemsRemovedEventHandler(object sender, Microsoft.Practices.CompositeUI.Utility.DataEventArgs<object> e)
        {
            if (e.Data == _view)
            {
                WorkItem.Items.Remove(this);
            }
        }
                        
        public virtual void OnViewReady() 
        {
        }

        public virtual void OnViewShow() 
        {
        }

		public virtual void OnViewSet() 
        { 
        }

        public virtual void CloseView()
        {
        }

        #region IBuilderAware Members

        public virtual void OnBuiltUp(string id)
        {
            _workItem.Items.Removed += ItemsRemovedEventHandler;
        }

        public virtual void OnTearingDown()
        {
            _workItem.Items.Removed -= ItemsRemovedEventHandler;
        }

        #endregion
    }
}

