/*
  File           : 

  Description    : Public interface class for WebService interface for inbound data.
                   This code was generated, do not edit.

*/
using System;
using System.Web;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.IO;
using Imi.Framework.Versioning;

namespace Imi.Wms.WebServices.OutboundTesterRMS
{
  [WebService(Namespace="http://im.se/wms/webservices/", Description="Message Outbound (Sender) interface 8.0.1 generated on 2017-09-08 11:58:12")]
  [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
  public class InboundInterface : WSBase
  {
    public string _Debug()
    {
      return "Generated on   : 2017-09-08 11:58:12\r\n" +
             "Generated by   : SWG\\aron@SE0133D\r\n" +
             "Generated in   : C:\\projects\\views\\aron_80M_ss\\dotnet\\source\\CodeGenerators\\wscc\r\n";
    }

    private void Log( bool Enter )
    {

      string path = @"C:\log\Inbound.log";

      using (StreamWriter w = File.AppendText(path))
      {
        w.Write( "{0} {1}.{2}", System.DateTime.Now.ToShortDateString(), 
          System.DateTime.Now.ToLongTimeString(), System.Convert.ToString( System.DateTime.Now.Millisecond ) );

        StackTrace st = new StackTrace(1, true);

        if ( st.FrameCount > 1 )
        {
          StackFrame sf = st.GetFrame(1);
        
          w.Write("{0}{1}{2}", '\t', sf.GetMethod(), '\t' );
        }
        
        if (Enter)
          w.WriteLine( "Enter" );
        else
          w.WriteLine( "Leave" );
      }
    }

    private void EnterProc()
    {
      try
      {
        // Log( true );
      }
      catch
      {
      }
    }

    private void ExitProc()
    {
      try
      {
        // Log( false );
      }
      catch
      {
      }
    }

    [WebMethod]
    public string WhoAmI()
    {
      EnterProc();

      string s = CurrentVersion.VersionName;

      ExitProc();

      return s;
    }


    [WebMethod]
    public void Departure( string CommPartnerId, string TransactionId, DepartureDoc aDepartureDoc )
    {
      EnterProc();

      DepartureInsert aDepartureHandler;

      try
      {
        MessageTransaction mt = BeginWebmethod( CommPartnerId, TransactionId, "DEP" );

        try
        {
          aDepartureHandler = new DepartureInsert( this );
        }
        catch (Exception e)
        {
          Exception InternalError = new Exception( "InternalError: Building insert handler", e );
          throw (InternalError);
        }

        try
        {
          if ( aDepartureDoc == null )
          {
            Exception InternalError = new Exception( "DataError: Root object cannot be null" );
            throw (InternalError);
          }
          aDepartureHandler.Process( ref mt, null, aDepartureDoc );
          GetDataBase().Commit();
        }
        catch (Exception e)
        {
          try
          {
            GetDataBase().Rollback();
          }
          catch (Exception)
          {}
          Exception InternalError = new Exception( "DataError: Error processing data", e );
          throw (InternalError);
        }
      }

      finally
      {
        EndWebmethod();
      }

      ExitProc();

      return;
    }


    [WebMethod]
    public void DepartureNode( string CommPartnerId, string TransactionId, DepartureNodeDoc aDepartureNodeDoc )
    {
      EnterProc();

      DepartureNodeInsert aDepartureNodeHandler;

      try
      {
        MessageTransaction mt = BeginWebmethod( CommPartnerId, TransactionId, "DEP_NODE" );

        try
        {
          aDepartureNodeHandler = new DepartureNodeInsert( this );
        }
        catch (Exception e)
        {
          Exception InternalError = new Exception( "InternalError: Building insert handler", e );
          throw (InternalError);
        }

        try
        {
          if ( aDepartureNodeDoc == null )
          {
            Exception InternalError = new Exception( "DataError: Root object cannot be null" );
            throw (InternalError);
          }
          aDepartureNodeHandler.Process( ref mt, null, aDepartureNodeDoc );
          GetDataBase().Commit();
        }
        catch (Exception e)
        {
          try
          {
            GetDataBase().Rollback();
          }
          catch (Exception)
          {}
          Exception InternalError = new Exception( "DataError: Error processing data", e );
          throw (InternalError);
        }
      }

      finally
      {
        EndWebmethod();
      }

      ExitProc();

      return;
    }


    [WebMethod]
    public void DepartureTransportType( string CommPartnerId, string TransactionId, DepartureTransportTypeDoc aDepartureTransportTypeDoc )
    {
      EnterProc();

      DepartureTransportTypeInsert aDepartureTransportTypeHandler;

      try
      {
        MessageTransaction mt = BeginWebmethod( CommPartnerId, TransactionId, "DEP_TRP" );

        try
        {
          aDepartureTransportTypeHandler = new DepartureTransportTypeInsert( this );
        }
        catch (Exception e)
        {
          Exception InternalError = new Exception( "InternalError: Building insert handler", e );
          throw (InternalError);
        }

        try
        {
          if ( aDepartureTransportTypeDoc == null )
          {
            Exception InternalError = new Exception( "DataError: Root object cannot be null" );
            throw (InternalError);
          }
          aDepartureTransportTypeHandler.Process( ref mt, null, aDepartureTransportTypeDoc );
          GetDataBase().Commit();
        }
        catch (Exception e)
        {
          try
          {
            GetDataBase().Rollback();
          }
          catch (Exception)
          {}
          Exception InternalError = new Exception( "DataError: Error processing data", e );
          throw (InternalError);
        }
      }

      finally
      {
        EndWebmethod();
      }

      ExitProc();

      return;
    }


    [WebMethod]
    public void DepartureLoad( string CommPartnerId, string TransactionId, DepartureLoadDoc aDepartureLoadDoc )
    {
      EnterProc();

      DepartureLoadInsert aDepartureLoadHandler;

      try
      {
        MessageTransaction mt = BeginWebmethod( CommPartnerId, TransactionId, "DEP_LOAD" );

        try
        {
          aDepartureLoadHandler = new DepartureLoadInsert( this );
        }
        catch (Exception e)
        {
          Exception InternalError = new Exception( "InternalError: Building insert handler", e );
          throw (InternalError);
        }

        try
        {
          if ( aDepartureLoadDoc == null )
          {
            Exception InternalError = new Exception( "DataError: Root object cannot be null" );
            throw (InternalError);
          }
          aDepartureLoadHandler.Process( ref mt, null, aDepartureLoadDoc );
          GetDataBase().Commit();
        }
        catch (Exception e)
        {
          try
          {
            GetDataBase().Rollback();
          }
          catch (Exception)
          {}
          Exception InternalError = new Exception( "DataError: Error processing data", e );
          throw (InternalError);
        }
      }

      finally
      {
        EndWebmethod();
      }

      ExitProc();

      return;
    }


    [WebMethod]
    public void ModifyDepartureLoad( string CommPartnerId, string TransactionId, ModifyDepartureLoadDoc aModifyDepartureLoadDoc )
    {
      EnterProc();

      ModifyDepartureLoadInsert aModifyDepartureLoadHandler;

      try
      {
        MessageTransaction mt = BeginWebmethod( CommPartnerId, TransactionId, "MOD_DEP_LOAD" );

        try
        {
          aModifyDepartureLoadHandler = new ModifyDepartureLoadInsert( this );
        }
        catch (Exception e)
        {
          Exception InternalError = new Exception( "InternalError: Building insert handler", e );
          throw (InternalError);
        }

        try
        {
          if ( aModifyDepartureLoadDoc == null )
          {
            Exception InternalError = new Exception( "DataError: Root object cannot be null" );
            throw (InternalError);
          }
          aModifyDepartureLoadHandler.Process( ref mt, null, aModifyDepartureLoadDoc );
          GetDataBase().Commit();
        }
        catch (Exception e)
        {
          try
          {
            GetDataBase().Rollback();
          }
          catch (Exception)
          {}
          Exception InternalError = new Exception( "DataError: Error processing data", e );
          throw (InternalError);
        }
      }

      finally
      {
        EndWebmethod();
      }

      ExitProc();

      return;
    }


    [WebMethod]
    public void RemoveDeparture( string CommPartnerId, string TransactionId, RemoveDepartureDoc aRemoveDepartureDoc )
    {
      EnterProc();

      RemoveDepartureInsert aRemoveDepartureHandler;

      try
      {
        MessageTransaction mt = BeginWebmethod( CommPartnerId, TransactionId, "REM_DEP" );

        try
        {
          aRemoveDepartureHandler = new RemoveDepartureInsert( this );
        }
        catch (Exception e)
        {
          Exception InternalError = new Exception( "InternalError: Building insert handler", e );
          throw (InternalError);
        }

        try
        {
          if ( aRemoveDepartureDoc == null )
          {
            Exception InternalError = new Exception( "DataError: Root object cannot be null" );
            throw (InternalError);
          }
          aRemoveDepartureHandler.Process( ref mt, null, aRemoveDepartureDoc );
          GetDataBase().Commit();
        }
        catch (Exception e)
        {
          try
          {
            GetDataBase().Rollback();
          }
          catch (Exception)
          {}
          Exception InternalError = new Exception( "DataError: Error processing data", e );
          throw (InternalError);
        }
      }

      finally
      {
        EndWebmethod();
      }

      ExitProc();

      return;
    }


    [WebMethod]
    public void RemoveDepartureNode( string CommPartnerId, string TransactionId, RemoveDepartureNodeDoc aRemoveDepartureNodeDoc )
    {
      EnterProc();

      RemoveDepartureNodeInsert aRemoveDepartureNodeHandler;

      try
      {
        MessageTransaction mt = BeginWebmethod( CommPartnerId, TransactionId, "REM_DEP_NODE" );

        try
        {
          aRemoveDepartureNodeHandler = new RemoveDepartureNodeInsert( this );
        }
        catch (Exception e)
        {
          Exception InternalError = new Exception( "InternalError: Building insert handler", e );
          throw (InternalError);
        }

        try
        {
          if ( aRemoveDepartureNodeDoc == null )
          {
            Exception InternalError = new Exception( "DataError: Root object cannot be null" );
            throw (InternalError);
          }
          aRemoveDepartureNodeHandler.Process( ref mt, null, aRemoveDepartureNodeDoc );
          GetDataBase().Commit();
        }
        catch (Exception e)
        {
          try
          {
            GetDataBase().Rollback();
          }
          catch (Exception)
          {}
          Exception InternalError = new Exception( "DataError: Error processing data", e );
          throw (InternalError);
        }
      }

      finally
      {
        EndWebmethod();
      }

      ExitProc();

      return;
    }


    [WebMethod]
    public void RemoveDepartureTransportType( string CommPartnerId, string TransactionId, RemoveDepartureTransportTypeDoc aRemoveDepartureTransportTypeDoc )
    {
      EnterProc();

      RemoveDepartureTransportTypeInsert aRemoveDepartureTransportTypeHandler;

      try
      {
        MessageTransaction mt = BeginWebmethod( CommPartnerId, TransactionId, "REM_DEP_TRP" );

        try
        {
          aRemoveDepartureTransportTypeHandler = new RemoveDepartureTransportTypeInsert( this );
        }
        catch (Exception e)
        {
          Exception InternalError = new Exception( "InternalError: Building insert handler", e );
          throw (InternalError);
        }

        try
        {
          if ( aRemoveDepartureTransportTypeDoc == null )
          {
            Exception InternalError = new Exception( "DataError: Root object cannot be null" );
            throw (InternalError);
          }
          aRemoveDepartureTransportTypeHandler.Process( ref mt, null, aRemoveDepartureTransportTypeDoc );
          GetDataBase().Commit();
        }
        catch (Exception e)
        {
          try
          {
            GetDataBase().Rollback();
          }
          catch (Exception)
          {}
          Exception InternalError = new Exception( "DataError: Error processing data", e );
          throw (InternalError);
        }
      }

      finally
      {
        EndWebmethod();
      }

      ExitProc();

      return;
    }


    [WebMethod]
    public void Confirm( string CommPartnerId, string TransactionId, ConfirmDoc aConfirmDoc )
    {
      EnterProc();

      ConfirmInsert aConfirmHandler;

      try
      {
        MessageTransaction mt = BeginWebmethod( CommPartnerId, TransactionId, "CONFIRM" );

        try
        {
          aConfirmHandler = new ConfirmInsert( this );
        }
        catch (Exception e)
        {
          Exception InternalError = new Exception( "InternalError: Building insert handler", e );
          throw (InternalError);
        }

        try
        {
          if ( aConfirmDoc == null )
          {
            Exception InternalError = new Exception( "DataError: Root object cannot be null" );
            throw (InternalError);
          }
          aConfirmHandler.Process( ref mt, null, aConfirmDoc );
          GetDataBase().Commit();
        }
        catch (Exception e)
        {
          try
          {
            GetDataBase().Rollback();
          }
          catch (Exception)
          {}
          Exception InternalError = new Exception( "DataError: Error processing data", e );
          throw (InternalError);
        }
      }

      finally
      {
        EndWebmethod();
      }

      ExitProc();

      return;
    }

  }
}
