/*
  File           : 

  Description    : Internal classes for inserting inbound data into queue tables.
                   This code was generated, do not edit.

*/
using System;
using System.Text;
using System.Data;
using System.Data.Common;

namespace Imi.Wms.WebServices.OutboundTesterMAPI
{
  public class InsertHandler
  {
      public string _Debug()
      {
          return "Generated on   : 2008-05-12 13:33:58\r\n" +
                 "Generated by   : SWG\\olla@IMIPC1091\r\n" +
                 "Generated in   : C:\\project\\views\\olla_dotnet_ss\\dotnet\\source\\CodeGenerators\\wscc\r\n";
      }
  }

  public class MovementIn_01Insert : SegmentImpl
  {

    public MovementIn_01Insert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_MAPI_OUT_MOVEMENT_IN_01 ( ");
        s.Append(" MAPI_OUT_ID");
        s.Append(",OPCODE");
        s.Append(",OperationalCode");
        s.Append(",ItemLoadIdentity");
        s.Append(",ProductNumber");
        s.Append(",FifoDate");
        s.Append(",HoldCode");
        s.Append(",ProductionLotIdentity");
        s.Append(",CreatedDate");

        s.Append(" ) values ( ");

        s.Append(" :MAPI_OUT_ID");
        s.Append(",:OPCODE");
        s.Append(",:OperationalCode");
        s.Append(",:ItemLoadIdentity");
        s.Append(",:ProductNumber");
        s.Append(",:FifoDate");
        s.Append(",:HoldCode");
        s.Append(",:ProductionLotIdentity");
        s.Append(",:CreatedDate");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("MAPI_OUT_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("OperationalCode", 1));
        fStmt.Parameters.Add(StringParam("ItemLoadIdentity", 35));
        fStmt.Parameters.Add(StringParam("ProductNumber", 35));
        fStmt.Parameters.Add(DateParam("FifoDate"));
        fStmt.Parameters.Add(StringParam("HoldCode", 1));
        fStmt.Parameters.Add(StringParam("ProductionLotIdentity", 40));
        fStmt.Parameters.Add(DateParam("CreatedDate"));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, MovementIn_01Doc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["MAPI_OUT_ID"] as IDbDataParameter).Value = StringValue(trans.MapiInId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for MovementIn_01Doc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter MovementIn_01Doc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter MovementIn_01Doc.OPCODE not allowed");


        if (p.OperationalCode != null)
        {
            if (p.OperationalCode.Length > 1)
                error.AppendLine("Value for MovementIn_01Doc.OperationalCode too long, max 1 chars");

            (fStmt.Parameters["OperationalCode"] as IDbDataParameter).Value = p.OperationalCode;
        }
        else
            (fStmt.Parameters["OperationalCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ItemLoadIdentity != null)
        {
            if (p.ItemLoadIdentity.Length > 35)
                error.AppendLine("Value for MovementIn_01Doc.ItemLoadIdentity too long, max 35 chars");

            (fStmt.Parameters["ItemLoadIdentity"] as IDbDataParameter).Value = p.ItemLoadIdentity;
        }
        else
            (fStmt.Parameters["ItemLoadIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductNumber != null)
        {
            if (p.ProductNumber.Length > 35)
                error.AppendLine("Value for MovementIn_01Doc.ProductNumber too long, max 35 chars");

            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
        }
        else
            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FifoDate != null)
        {
            (fStmt.Parameters["FifoDate"] as IDbDataParameter).Value = p.FifoDate;
        }
        else
            (fStmt.Parameters["FifoDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.HoldCode != null)
        {
            if (p.HoldCode.Length > 1)
                error.AppendLine("Value for MovementIn_01Doc.HoldCode too long, max 1 chars");

            (fStmt.Parameters["HoldCode"] as IDbDataParameter).Value = p.HoldCode;
        }
        else
            (fStmt.Parameters["HoldCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionLotIdentity != null)
        {
            if (p.ProductionLotIdentity.Length > 40)
                error.AppendLine("Value for MovementIn_01Doc.ProductionLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = p.ProductionLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CreatedDate != null)
        {
            (fStmt.Parameters["CreatedDate"] as IDbDataParameter).Value = p.CreatedDate;
        }
        else
            (fStmt.Parameters["CreatedDate"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.TransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class MovementOut_01Insert : SegmentImpl
  {

    public MovementOut_01Insert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_MAPI_OUT_MOVEMENT_OUT_01 ( ");
        s.Append(" MAPI_OUT_ID");
        s.Append(",OPCODE");
        s.Append(",OperationalCode");
        s.Append(",MovementOrderIdentity");
        s.Append(",MovementOrderType");
        s.Append(",ProductNumber");
        s.Append(",ToLocationAddress");
        s.Append(",MovementPriority");
        s.Append(",ProductionLotIdentity");
        s.Append(",ItemLoadIdentity");

        s.Append(" ) values ( ");

        s.Append(" :MAPI_OUT_ID");
        s.Append(",:OPCODE");
        s.Append(",:OperationalCode");
        s.Append(",:MovementOrderIdentity");
        s.Append(",:MovementOrderType");
        s.Append(",:ProductNumber");
        s.Append(",:ToLocationAddress");
        s.Append(",:MovementPriority");
        s.Append(",:ProductionLotIdentity");
        s.Append(",:ItemLoadIdentity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("MAPI_OUT_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("OperationalCode", 1));
        fStmt.Parameters.Add(NumberParam("MovementOrderIdentity", 8, 0));
        fStmt.Parameters.Add(StringParam("MovementOrderType", 2));
        fStmt.Parameters.Add(StringParam("ProductNumber", 35));
        fStmt.Parameters.Add(StringParam("ToLocationAddress", 12));
        fStmt.Parameters.Add(NumberParam("MovementPriority", 2, 0));
        fStmt.Parameters.Add(StringParam("ProductionLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("ItemLoadIdentity", 35));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, MovementOut_01Doc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["MAPI_OUT_ID"] as IDbDataParameter).Value = StringValue(trans.MapiInId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for MovementOut_01Doc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter MovementOut_01Doc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter MovementOut_01Doc.OPCODE not allowed");


        if (p.OperationalCode != null)
        {
            if (p.OperationalCode.Length > 1)
                error.AppendLine("Value for MovementOut_01Doc.OperationalCode too long, max 1 chars");

            (fStmt.Parameters["OperationalCode"] as IDbDataParameter).Value = p.OperationalCode;
        }
        else
            (fStmt.Parameters["OperationalCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MovementOrderIdentity != null)
        {
            (fStmt.Parameters["MovementOrderIdentity"] as IDbDataParameter).Value = p.MovementOrderIdentity;
        }
        else
            (fStmt.Parameters["MovementOrderIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MovementOrderType != null)
        {
            if (p.MovementOrderType.Length > 2)
                error.AppendLine("Value for MovementOut_01Doc.MovementOrderType too long, max 2 chars");

            (fStmt.Parameters["MovementOrderType"] as IDbDataParameter).Value = p.MovementOrderType;
        }
        else
            (fStmt.Parameters["MovementOrderType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductNumber != null)
        {
            if (p.ProductNumber.Length > 35)
                error.AppendLine("Value for MovementOut_01Doc.ProductNumber too long, max 35 chars");

            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
        }
        else
            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ToLocationAddress != null)
        {
            if (p.ToLocationAddress.Length > 12)
                error.AppendLine("Value for MovementOut_01Doc.ToLocationAddress too long, max 12 chars");

            (fStmt.Parameters["ToLocationAddress"] as IDbDataParameter).Value = p.ToLocationAddress;
        }
        else
            (fStmt.Parameters["ToLocationAddress"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MovementPriority != null)
        {
            (fStmt.Parameters["MovementPriority"] as IDbDataParameter).Value = p.MovementPriority;
        }
        else
            (fStmt.Parameters["MovementPriority"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionLotIdentity != null)
        {
            if (p.ProductionLotIdentity.Length > 40)
                error.AppendLine("Value for MovementOut_01Doc.ProductionLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = p.ProductionLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ItemLoadIdentity != null)
        {
            if (p.ItemLoadIdentity.Length > 35)
                error.AppendLine("Value for MovementOut_01Doc.ItemLoadIdentity too long, max 35 chars");

            (fStmt.Parameters["ItemLoadIdentity"] as IDbDataParameter).Value = p.ItemLoadIdentity;
        }
        else
            (fStmt.Parameters["ItemLoadIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.TransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class Product_01Insert : SegmentImpl
  {

    public Product_01Insert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_MAPI_OUT_PRODUCT_01 ( ");
        s.Append(" MAPI_OUT_ID");
        s.Append(",OPCODE");
        s.Append(",OperationalCode");
        s.Append(",ProductNumber");
        s.Append(",BarCode");
        s.Append(",ProductDescription1");
        s.Append(",HandlingUnitIdentity");
        s.Append(",BestBeforDateFlag");
        s.Append(",NumberOfBasePackageS");
        s.Append(",BatchType");

        s.Append(" ) values ( ");

        s.Append(" :MAPI_OUT_ID");
        s.Append(",:OPCODE");
        s.Append(",:OperationalCode");
        s.Append(",:ProductNumber");
        s.Append(",:BarCode");
        s.Append(",:ProductDescription1");
        s.Append(",:HandlingUnitIdentity");
        s.Append(",:BestBeforDateFlag");
        s.Append(",:NumberOfBasePackageS");
        s.Append(",:BatchType");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("MAPI_OUT_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("OperationalCode", 1));
        fStmt.Parameters.Add(StringParam("ProductNumber", 35));
        fStmt.Parameters.Add(StringParam("BarCode", 20));
        fStmt.Parameters.Add(StringParam("ProductDescription1", 35));
        fStmt.Parameters.Add(StringParam("HandlingUnitIdentity", 6));
        fStmt.Parameters.Add(StringParam("BestBeforDateFlag", 1));
        fStmt.Parameters.Add(NumberParam("NumberOfBasePackageS", 20, 6));
        fStmt.Parameters.Add(StringParam("BatchType", 100));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, Product_01Doc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["MAPI_OUT_ID"] as IDbDataParameter).Value = StringValue(trans.MapiInId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for Product_01Doc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter Product_01Doc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter Product_01Doc.OPCODE not allowed");


        if (p.OperationalCode != null)
        {
            if (p.OperationalCode.Length > 1)
                error.AppendLine("Value for Product_01Doc.OperationalCode too long, max 1 chars");

            (fStmt.Parameters["OperationalCode"] as IDbDataParameter).Value = p.OperationalCode;
        }
        else
            (fStmt.Parameters["OperationalCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductNumber != null)
        {
            if (p.ProductNumber.Length > 35)
                error.AppendLine("Value for Product_01Doc.ProductNumber too long, max 35 chars");

            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
        }
        else
            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.BarCode != null)
        {
            if (p.BarCode.Length > 20)
                error.AppendLine("Value for Product_01Doc.BarCode too long, max 20 chars");

            (fStmt.Parameters["BarCode"] as IDbDataParameter).Value = p.BarCode;
        }
        else
            (fStmt.Parameters["BarCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductDescription1 != null)
        {
            if (p.ProductDescription1.Length > 35)
                error.AppendLine("Value for Product_01Doc.ProductDescription1 too long, max 35 chars");

            (fStmt.Parameters["ProductDescription1"] as IDbDataParameter).Value = p.ProductDescription1;
        }
        else
            (fStmt.Parameters["ProductDescription1"] as IDbDataParameter).Value = DBNull.Value;

        if (p.HandlingUnitIdentity != null)
        {
            if (p.HandlingUnitIdentity.Length > 6)
                error.AppendLine("Value for Product_01Doc.HandlingUnitIdentity too long, max 6 chars");

            (fStmt.Parameters["HandlingUnitIdentity"] as IDbDataParameter).Value = p.HandlingUnitIdentity;
        }
        else
            (fStmt.Parameters["HandlingUnitIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.BestBeforDateFlag != null)
        {
            if (p.BestBeforDateFlag.Length > 1)
                error.AppendLine("Value for Product_01Doc.BestBeforDateFlag too long, max 1 chars");

            (fStmt.Parameters["BestBeforDateFlag"] as IDbDataParameter).Value = p.BestBeforDateFlag;
        }
        else
            (fStmt.Parameters["BestBeforDateFlag"] as IDbDataParameter).Value = DBNull.Value;

        if (p.NumberOfBasePackageS != null)
        {
            (fStmt.Parameters["NumberOfBasePackageS"] as IDbDataParameter).Value = p.NumberOfBasePackageS;
        }
        else
            (fStmt.Parameters["NumberOfBasePackageS"] as IDbDataParameter).Value = DBNull.Value;

        if (p.BatchType != null)
        {
            if (p.BatchType.Length > 100)
                error.AppendLine("Value for Product_01Doc.BatchType too long, max 100 chars");

            (fStmt.Parameters["BatchType"] as IDbDataParameter).Value = p.BatchType;
        }
        else
            (fStmt.Parameters["BatchType"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.TransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class StatusUpdate_01Insert : SegmentImpl
  {

    public StatusUpdate_01Insert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_MAPI_OUT_STATUS_UPDAT_01 ( ");
        s.Append(" MAPI_OUT_ID");
        s.Append(",OPCODE");
        s.Append(",ItemLoadIdentity");
        s.Append(",FifoDate");
        s.Append(",HoldCode");

        s.Append(" ) values ( ");

        s.Append(" :MAPI_OUT_ID");
        s.Append(",:OPCODE");
        s.Append(",:ItemLoadIdentity");
        s.Append(",:FifoDate");
        s.Append(",:HoldCode");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("MAPI_OUT_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ItemLoadIdentity", 35));
        fStmt.Parameters.Add(DateParam("FifoDate"));
        fStmt.Parameters.Add(StringParam("HoldCode", 1));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, StatusUpdate_01Doc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["MAPI_OUT_ID"] as IDbDataParameter).Value = StringValue(trans.MapiInId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for StatusUpdate_01Doc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter StatusUpdate_01Doc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter StatusUpdate_01Doc.OPCODE not allowed");


        if (p.ItemLoadIdentity != null)
        {
            if (p.ItemLoadIdentity.Length > 35)
                error.AppendLine("Value for StatusUpdate_01Doc.ItemLoadIdentity too long, max 35 chars");

            (fStmt.Parameters["ItemLoadIdentity"] as IDbDataParameter).Value = p.ItemLoadIdentity;
        }
        else
            (fStmt.Parameters["ItemLoadIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FifoDate != null)
        {
            (fStmt.Parameters["FifoDate"] as IDbDataParameter).Value = p.FifoDate;
        }
        else
            (fStmt.Parameters["FifoDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.HoldCode != null)
        {
            if (p.HoldCode.Length > 1)
                error.AppendLine("Value for StatusUpdate_01Doc.HoldCode too long, max 1 chars");

            (fStmt.Parameters["HoldCode"] as IDbDataParameter).Value = p.HoldCode;
        }
        else
            (fStmt.Parameters["HoldCode"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.TransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

}
