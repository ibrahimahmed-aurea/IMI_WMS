/*
  File           : PrintQueue.cs

  Description    : Wrapper class for Oracle package PRINT_QUEUE.
                   This code was generated by the PackageGenerator, do not edit.

  Generated with Commandline: Print_Queue C:\temp\PrintQueue.cs Imi.SupplyChain.Server.Job.OutputManagerSend 

PRINT_QUEUE.NEW_PRINTQUEUELOG cannot be generated since the following
parameter types are not currently supported:
    DOCUMENT_PDF_I BLOB

*/
#define ODP_NET
using System;
using System.Data;
#if ODP_NET
using Oracle.DataAccess.Client;
using Oracle.DataAccess.Types;
#else
using System.Data.OracleClient;
#endif
using Imi.Framework.Job.Data;

namespace Imi.SupplyChain.Server.Job.OutputManagerSend
{
  public partial class PrintQueue
  {
    private IDbConnectionProvider connectionProvider;

    public string _Debug()
    {
      return  "Package        : PRINT_QUEUE\r\n" +
              "Generated on   : 2016-12-01 11:09:14\r\n" +
              "Generated by   : SWG\\ndhj@SE0165D\r\n" +
              "Generated in   : C:\\Projects\\Views\\ndhj_latest_snapshot\\dotnet\\source\\CodeGenerators\\PackageGenerator\\bin\\Debug\r\n";
    }

    public PrintQueue(IDbConnectionProvider connectionProvider)
    {
      this.connectionProvider = connectionProvider;
    }

    private IDbCommand sp_Createprintjob;
    private IDbCommand sp_Enqueuedocument;
    private IDbCommand sp_Getprintconf;
    private IDbCommand sp_Getprintjobs;
    private IDbCommand sp_GetSourceVersionInfo;
    private IDbCommand sp_PrintDocError;
    private IDbCommand sp_PrintDocFinished;
    private IDbCommand sp_PrintError;
    private IDbCommand sp_PrintFinished;
    private IDbCommand sp_Remove;
    private IDbCommand sp_RemoveFromGui;
    private IDbCommand sp_ReprintFromGui;
    private IDbCommand sp_ResetFromGui;
    private IDbCommand sp_Reset;
    private IDbCommand currentCommand;
    private object syncLock = new object();

    // ----------------------------------------------------------------------------

    private void CreateSP_Createprintjob()
    {
      IDbDataParameter p;

      sp_Createprintjob = connectionProvider.GetConnection().CreateCommand();
      sp_Createprintjob.CommandText = "PRINT_QUEUE.CREATEPRINTJOB";
      sp_Createprintjob.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
      ((OracleCommand)sp_Createprintjob).BindByName = true;
#endif

      p = sp_Createprintjob.CreateParameter();
      p.ParameterName = "WHID_I";
      p.DbType = DbType.String;
      p.Size = 4;
      p.Direction = ParameterDirection.Input;
      sp_Createprintjob.Parameters.Add( p );

      p = sp_Createprintjob.CreateParameter();
      p.ParameterName = "PRINTPRIORITY_I";
      p.DbType = DbType.Decimal;
      p.Precision = 3;
      p.Scale     = 0;
      p.Direction = ParameterDirection.Input;
      sp_Createprintjob.Parameters.Add( p );
    }

    private void CreateSP_Enqueuedocument()
    {
      IDbDataParameter p;
      OracleParameter  oP;

      sp_Enqueuedocument = connectionProvider.GetConnection().CreateCommand();
      sp_Enqueuedocument.CommandText = "PRINT_QUEUE.ENQUEUEDOCUMENT";
      sp_Enqueuedocument.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
      ((OracleCommand)sp_Enqueuedocument).BindByName = true;
#endif

      oP = sp_Enqueuedocument.CreateParameter() as OracleParameter;
      oP.ParameterName = "REPORTDOCUMENT_I";
#if ODP_NET
      oP.OracleDbType = OracleDbType.Clob;
#else
      oP.OracleType = OracleType.Clob;
#endif
      oP.Direction = ParameterDirection.Input;
      sp_Enqueuedocument.Parameters.Add(oP);


      p = sp_Enqueuedocument.CreateParameter();
      p.ParameterName = "ALMID_O";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Output;
      sp_Enqueuedocument.Parameters.Add( p );

      p = sp_Enqueuedocument.CreateParameter();
      p.ParameterName = "DOCTYPE_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_Enqueuedocument.Parameters.Add( p );

      p = sp_Enqueuedocument.CreateParameter();
      p.ParameterName = "DOCSUBTYPID_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_Enqueuedocument.Parameters.Add( p );

      p = sp_Enqueuedocument.CreateParameter();
      p.ParameterName = "TERID_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_Enqueuedocument.Parameters.Add( p );

      p = sp_Enqueuedocument.CreateParameter();
      p.ParameterName = "PRTID_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_Enqueuedocument.Parameters.Add( p );

      p = sp_Enqueuedocument.CreateParameter();
      p.ParameterName = "EMPID_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_Enqueuedocument.Parameters.Add( p );

      p = sp_Enqueuedocument.CreateParameter();
      p.ParameterName = "NO_COPIES_I";
      p.DbType = DbType.Decimal;
      p.Precision = 2;
      p.Scale     = 0;
      p.Direction = ParameterDirection.Input;
      sp_Enqueuedocument.Parameters.Add( p );
    }

    private void CreateSP_Getprintconf()
    {
      OracleParameter  oP;

      sp_Getprintconf = connectionProvider.GetConnection().CreateCommand();
      sp_Getprintconf.CommandText = "PRINT_QUEUE.GETPRINTCONF";
      sp_Getprintconf.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
      ((OracleCommand)sp_Getprintconf).BindByName = true;
#endif

      oP = sp_Getprintconf.CreateParameter() as OracleParameter;
      oP.ParameterName = "PRINTCONF_CUR_O";
#if ODP_NET
      oP.OracleDbType = OracleDbType.RefCursor;
#else
      oP.OracleType = OracleType.Cursor;
#endif
      oP.Direction = ParameterDirection.Output;
      sp_Getprintconf.Parameters.Add( oP );
    }

    private void CreateSP_Getprintjobs()
    {
      IDbDataParameter p;
      OracleParameter  oP;

      sp_Getprintjobs = connectionProvider.GetConnection().CreateCommand();
      sp_Getprintjobs.CommandText = "PRINT_QUEUE.GETPRINTJOBS";
      sp_Getprintjobs.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
      ((OracleCommand)sp_Getprintjobs).BindByName = true;
#endif

      p = sp_Getprintjobs.CreateParameter();
      p.ParameterName = "JOBCOUNT_I";
      p.DbType = DbType.Double;
      p.Direction = ParameterDirection.Input;
      sp_Getprintjobs.Parameters.Add( p );

      p = sp_Getprintjobs.CreateParameter();
      p.ParameterName = "TIMEOUT_I";
      p.DbType = DbType.Double;
      p.Direction = ParameterDirection.Input;
      sp_Getprintjobs.Parameters.Add( p );

      oP = sp_Getprintjobs.CreateParameter() as OracleParameter;
      oP.ParameterName = "PRINTQUEUEDOC_CUR_O";
#if ODP_NET
      oP.OracleDbType = OracleDbType.RefCursor;
#else
      oP.OracleType = OracleType.Cursor;
#endif
      oP.Direction = ParameterDirection.Output;
      sp_Getprintjobs.Parameters.Add( oP );
    }

    private void CreateSP_GetSourceVersionInfo()
    {
      IDbDataParameter p;

      sp_GetSourceVersionInfo = connectionProvider.GetConnection().CreateCommand();
      sp_GetSourceVersionInfo.CommandText = "PRINT_QUEUE.GET_SOURCE_VERSION_INFO";
      sp_GetSourceVersionInfo.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
      ((OracleCommand)sp_GetSourceVersionInfo).BindByName = true;
#endif

      p = sp_GetSourceVersionInfo.CreateParameter();
      p.ParameterName = "";
      p.DbType = DbType.String;
      p.Size = 255;
      p.Direction = ParameterDirection.ReturnValue;
      sp_GetSourceVersionInfo.Parameters.Add( p );
    }

    private void CreateSP_PrintDocError()
    {
      IDbDataParameter p;
      OracleParameter  oP;

      sp_PrintDocError = connectionProvider.GetConnection().CreateCommand();
      sp_PrintDocError.CommandText = "PRINT_QUEUE.PRINT_DOC_ERROR";
      sp_PrintDocError.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
      ((OracleCommand)sp_PrintDocError).BindByName = true;
#endif

      p = sp_PrintDocError.CreateParameter();
      p.ParameterName = "PRINTJOBID_I";
      p.DbType = DbType.Decimal;
      p.Precision = 12;
      p.Scale     = 0;
      p.Direction = ParameterDirection.Input;
      sp_PrintDocError.Parameters.Add( p );

      p = sp_PrintDocError.CreateParameter();
      p.ParameterName = "SEQNUM_I";
      p.DbType = DbType.Decimal;
      p.Precision = 12;
      p.Scale     = 0;
      p.Direction = ParameterDirection.Input;
      sp_PrintDocError.Parameters.Add( p );

      oP = sp_PrintDocError.CreateParameter() as OracleParameter;
      oP.ParameterName = "ERROR_MSG_I";
#if ODP_NET
      oP.OracleDbType = OracleDbType.Clob;
#else
      oP.OracleType = OracleType.Clob;
#endif
      oP.Direction = ParameterDirection.Input;
      sp_PrintDocError.Parameters.Add(oP);

      p = sp_PrintDocError.CreateParameter();
      p.ParameterName = "DOCUMENT_PDF_I";
      p.DbType = DbType.Binary;
#if ODP_NET
      ((OracleParameter)p).OracleDbType = OracleDbType.Blob;
#endif
      p.Direction = ParameterDirection.Input;
      sp_PrintDocError.Parameters.Add(p);

      p = sp_PrintDocError.CreateParameter();
      p.ParameterName = "DOCTYPE_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_PrintDocError.Parameters.Add(p);

      p = sp_PrintDocError.CreateParameter();
      p.ParameterName = "DOCSUBTYPID_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_PrintDocError.Parameters.Add(p);

      p = sp_PrintDocError.CreateParameter();
      p.ParameterName = "TERID_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_PrintDocError.Parameters.Add(p);

      p = sp_PrintDocError.CreateParameter();
      p.ParameterName = "PRTID_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_PrintDocError.Parameters.Add(p);

      p = sp_PrintDocError.CreateParameter();
      p.ParameterName = "PRT_NAME_I";
      p.DbType = DbType.String;
      p.Size = 100;
      p.Direction = ParameterDirection.Input;
      sp_PrintDocError.Parameters.Add(p);

      p = sp_PrintDocError.CreateParameter();
      p.ParameterName = "EMPID_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_PrintDocError.Parameters.Add(p);

      p = sp_PrintDocError.CreateParameter();
      p.ParameterName = "NO_COPIES_I";
      p.DbType = DbType.Decimal;
      p.Precision = 2;
      p.Direction = ParameterDirection.Input;
      sp_PrintDocError.Parameters.Add(p);

      p = sp_PrintDocError.CreateParameter();
      p.ParameterName = "RPTID_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_PrintDocError.Parameters.Add(p);

    }

    private void CreateSP_PrintDocFinished()
    {
      IDbDataParameter p;

      sp_PrintDocFinished = connectionProvider.GetConnection().CreateCommand();
      sp_PrintDocFinished.CommandText = "PRINT_QUEUE.PRINT_DOC_FINISHED";
      sp_PrintDocFinished.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
      ((OracleCommand)sp_PrintDocFinished).BindByName = true;
#endif

      p = sp_PrintDocFinished.CreateParameter();
      p.ParameterName = "PRINTJOBID_I";
      p.DbType = DbType.Decimal;
      p.Precision = 12;
      p.Scale     = 0;
      p.Direction = ParameterDirection.Input;
      sp_PrintDocFinished.Parameters.Add( p );

      p = sp_PrintDocFinished.CreateParameter();
      p.ParameterName = "SEQNUM_I";
      p.DbType = DbType.Decimal;
      p.Precision = 12;
      p.Scale     = 0;
      p.Direction = ParameterDirection.Input;
      sp_PrintDocFinished.Parameters.Add( p );

      p = sp_PrintDocFinished.CreateParameter();
      p.ParameterName = "DOCUMENT_PDF_I";
      p.DbType = DbType.Binary;
#if ODP_NET
      ((OracleParameter)p).OracleDbType = OracleDbType.Blob;
#endif
      p.Direction = ParameterDirection.Input;
      sp_PrintDocFinished.Parameters.Add(p);

      p = sp_PrintDocFinished.CreateParameter();
      p.ParameterName = "DOCTYPE_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_PrintDocFinished.Parameters.Add(p);

      p = sp_PrintDocFinished.CreateParameter();
      p.ParameterName = "DOCSUBTYPID_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_PrintDocFinished.Parameters.Add(p);

      p = sp_PrintDocFinished.CreateParameter();
      p.ParameterName = "TERID_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_PrintDocFinished.Parameters.Add(p);

      p = sp_PrintDocFinished.CreateParameter();
      p.ParameterName = "PRTID_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_PrintDocFinished.Parameters.Add(p);

      p = sp_PrintDocFinished.CreateParameter();
      p.ParameterName = "PRT_NAME_I";
      p.DbType = DbType.String;
      p.Size = 100;
      p.Direction = ParameterDirection.Input;
      sp_PrintDocFinished.Parameters.Add(p);

      p = sp_PrintDocFinished.CreateParameter();
      p.ParameterName = "EMPID_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_PrintDocFinished.Parameters.Add(p);

      p = sp_PrintDocFinished.CreateParameter();
      p.ParameterName = "NO_COPIES_I";
      p.DbType = DbType.Decimal;
      p.Precision = 2;
      p.Direction = ParameterDirection.Input;
      sp_PrintDocFinished.Parameters.Add(p);

      p = sp_PrintDocFinished.CreateParameter();
      p.ParameterName = "RPTID_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_PrintDocFinished.Parameters.Add(p);

    }

    private void CreateSP_PrintError()
    {
      IDbDataParameter p;

      sp_PrintError = connectionProvider.GetConnection().CreateCommand();
      sp_PrintError.CommandText = "PRINT_QUEUE.PRINT_ERROR";
      sp_PrintError.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
      ((OracleCommand)sp_PrintError).BindByName = true;
#endif

      p = sp_PrintError.CreateParameter();
      p.ParameterName = "PRINTJOBID_I";
      p.DbType = DbType.Decimal;
      p.Precision = 12;
      p.Scale     = 0;
      p.Direction = ParameterDirection.Input;
      sp_PrintError.Parameters.Add( p );

      p = sp_PrintError.CreateParameter();
      p.ParameterName = "ERROR_ALMID_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_PrintError.Parameters.Add( p );

      p = sp_PrintError.CreateParameter();
      p.ParameterName = "FALLBACK_I";
      p.DbType = DbType.String;
      p.Size = 1;
      p.Direction = ParameterDirection.Input;
      sp_PrintError.Parameters.Add( p );
    }

    private void CreateSP_PrintFinished()
    {
      IDbDataParameter p;

      sp_PrintFinished = connectionProvider.GetConnection().CreateCommand();
      sp_PrintFinished.CommandText = "PRINT_QUEUE.PRINT_FINISHED";
      sp_PrintFinished.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
      ((OracleCommand)sp_PrintFinished).BindByName = true;
#endif

      p = sp_PrintFinished.CreateParameter();
      p.ParameterName = "PRINTJOBID_I";
      p.DbType = DbType.Decimal;
      p.Precision = 12;
      p.Scale     = 0;
      p.Direction = ParameterDirection.Input;
      sp_PrintFinished.Parameters.Add( p );

      p = sp_PrintFinished.CreateParameter();
      p.ParameterName = "OMID_I";
      p.DbType = DbType.String;
      p.Size = 4;
      p.Direction = ParameterDirection.Input;
      sp_PrintFinished.Parameters.Add( p );

      p = sp_PrintFinished.CreateParameter();
      p.ParameterName = "FALLBACK_I";
      p.DbType = DbType.String;
      p.Size = 1;
      p.Direction = ParameterDirection.Input;
      sp_PrintFinished.Parameters.Add(p);

    }

    private void CreateSP_Remove()
    {
      IDbDataParameter p;

      sp_Remove = connectionProvider.GetConnection().CreateCommand();
      sp_Remove.CommandText = "PRINT_QUEUE.REMOVE";
      sp_Remove.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
      ((OracleCommand)sp_Remove).BindByName = true;
#endif

      p = sp_Remove.CreateParameter();
      p.ParameterName = "PRINTJOBID_I";
      p.DbType = DbType.Decimal;
      p.Precision = 12;
      p.Scale     = 0;
      p.Direction = ParameterDirection.Input;
      sp_Remove.Parameters.Add( p );
    }

    private void CreateSP_RemoveFromGui()
    {
      IDbDataParameter p;

      sp_RemoveFromGui = connectionProvider.GetConnection().CreateCommand();
      sp_RemoveFromGui.CommandText = "PRINT_QUEUE.REMOVE_FROM_GUI";
      sp_RemoveFromGui.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
      ((OracleCommand)sp_RemoveFromGui).BindByName = true;
#endif

      p = sp_RemoveFromGui.CreateParameter();
      p.ParameterName = "PRINTJOBID_I";
      p.DbType = DbType.Decimal;
      p.Precision = 12;
      p.Scale     = 0;
      p.Direction = ParameterDirection.Input;
      sp_RemoveFromGui.Parameters.Add( p );

      p = sp_RemoveFromGui.CreateParameter();
      p.ParameterName = "ALMID_O";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Output;
      sp_RemoveFromGui.Parameters.Add( p );
    }

    private void CreateSP_ReprintFromGui()
    {
      IDbDataParameter p;

      sp_ReprintFromGui = connectionProvider.GetConnection().CreateCommand();
      sp_ReprintFromGui.CommandText = "PRINT_QUEUE.REPRINT_FROM_GUI";
      sp_ReprintFromGui.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
      ((OracleCommand)sp_ReprintFromGui).BindByName = true;
#endif

      p = sp_ReprintFromGui.CreateParameter();
      p.ParameterName = "PRINTJOBID_I";
      p.DbType = DbType.Decimal;
      p.Precision = 12;
      p.Scale     = 0;
      p.Direction = ParameterDirection.Input;
      sp_ReprintFromGui.Parameters.Add( p );

      p = sp_ReprintFromGui.CreateParameter();
      p.ParameterName = "SEQNUM_I";
      p.DbType = DbType.Decimal;
      p.Precision = 12;
      p.Scale     = 0;
      p.Direction = ParameterDirection.Input;
      sp_ReprintFromGui.Parameters.Add( p );

      p = sp_ReprintFromGui.CreateParameter();
      p.ParameterName = "PRTID_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_ReprintFromGui.Parameters.Add( p );

      p = sp_ReprintFromGui.CreateParameter();
      p.ParameterName = "TERID_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_ReprintFromGui.Parameters.Add( p );

      p = sp_ReprintFromGui.CreateParameter();
      p.ParameterName = "NO_COPIES_I";
      p.DbType = DbType.Decimal;
      p.Precision = 2;
      p.Scale     = 0;
      p.Direction = ParameterDirection.Input;
      sp_ReprintFromGui.Parameters.Add( p );

      p = sp_ReprintFromGui.CreateParameter();
      p.ParameterName = "EMPID_I";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Input;
      sp_ReprintFromGui.Parameters.Add( p );

      p = sp_ReprintFromGui.CreateParameter();
      p.ParameterName = "ALMID_O";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Output;
      sp_ReprintFromGui.Parameters.Add( p );
    }

    private void CreateSP_ResetFromGui()
    {
      IDbDataParameter p;

      sp_ResetFromGui = connectionProvider.GetConnection().CreateCommand();
      sp_ResetFromGui.CommandText = "PRINT_QUEUE.RESET_FROM_GUI";
      sp_ResetFromGui.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
      ((OracleCommand)sp_ResetFromGui).BindByName = true;
#endif

      p = sp_ResetFromGui.CreateParameter();
      p.ParameterName = "PRINTJOBID_I";
      p.DbType = DbType.Decimal;
      p.Precision = 12;
      p.Scale     = 0;
      p.Direction = ParameterDirection.Input;
      sp_ResetFromGui.Parameters.Add( p );

      p = sp_ResetFromGui.CreateParameter();
      p.ParameterName = "ALMID_O";
      p.DbType = DbType.String;
      p.Size = 35;
      p.Direction = ParameterDirection.Output;
      sp_ResetFromGui.Parameters.Add( p );
    }

    private void CreateSP_Reset()
    {

        sp_Reset = connectionProvider.GetConnection().CreateCommand();
        sp_Reset.CommandText = "PRINT_QUEUE.RESET";
        sp_Reset.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
        ((OracleCommand)sp_Reset).BindByName = true;
#endif
    }

    // ----------------------------------------------------------------------------

    public void Createprintjob(string                  WHID_I, 
                               Nullable<int>           PRINTPRIORITY_I)
    {
      if ( sp_Createprintjob == null )
        CreateSP_Createprintjob();

      sp_Createprintjob.Transaction = connectionProvider.CurrentTransaction;

      // Set In Parameters

      if ( String.IsNullOrEmpty(WHID_I) )
        (sp_Createprintjob.Parameters["WHID_I"] as IDbDataParameter).Value          = DBNull.Value;
      else
        (sp_Createprintjob.Parameters["WHID_I"] as IDbDataParameter).Value          = WHID_I;

      if ( PRINTPRIORITY_I == null )
        (sp_Createprintjob.Parameters["PRINTPRIORITY_I"] as IDbDataParameter).Value = DBNull.Value;
      else
        (sp_Createprintjob.Parameters["PRINTPRIORITY_I"] as IDbDataParameter).Value = PRINTPRIORITY_I;

      // Execute stored procedure

      sp_Createprintjob.Prepare();
      sp_Createprintjob.ExecuteNonQuery();

      // Set Out Parameters
    }

    public void Enqueuedocument(string                  REPORTDOCUMENT_I, 
                                ref string              ALMID_O, 
                                string                  DOCTYPE_I, 
                                string                  DOCSUBTYPID_I, 
                                string                  TERID_I, 
                                string                  PRTID_I, 
                                string                  EMPID_I, 
                                Nullable<int>           NO_COPIES_I)
    {
      if ( sp_Enqueuedocument == null )
        CreateSP_Enqueuedocument();

      sp_Enqueuedocument.Transaction = connectionProvider.CurrentTransaction;

      // Set In Parameters

      if ( String.IsNullOrEmpty(REPORTDOCUMENT_I) )
        (sp_Enqueuedocument.Parameters["REPORTDOCUMENT_I"] as IDbDataParameter).Value = DBNull.Value;
      else
        (sp_Enqueuedocument.Parameters["REPORTDOCUMENT_I"] as IDbDataParameter).Value = REPORTDOCUMENT_I;

      if ( String.IsNullOrEmpty(DOCTYPE_I) )
        (sp_Enqueuedocument.Parameters["DOCTYPE_I"] as IDbDataParameter).Value        = DBNull.Value;
      else
        (sp_Enqueuedocument.Parameters["DOCTYPE_I"] as IDbDataParameter).Value        = DOCTYPE_I;

      if ( String.IsNullOrEmpty(DOCSUBTYPID_I) )
        (sp_Enqueuedocument.Parameters["DOCSUBTYPID_I"] as IDbDataParameter).Value    = DBNull.Value;
      else
        (sp_Enqueuedocument.Parameters["DOCSUBTYPID_I"] as IDbDataParameter).Value    = DOCSUBTYPID_I;

      if ( String.IsNullOrEmpty(TERID_I) )
        (sp_Enqueuedocument.Parameters["TERID_I"] as IDbDataParameter).Value          = DBNull.Value;
      else
        (sp_Enqueuedocument.Parameters["TERID_I"] as IDbDataParameter).Value          = TERID_I;

      if ( String.IsNullOrEmpty(PRTID_I) )
        (sp_Enqueuedocument.Parameters["PRTID_I"] as IDbDataParameter).Value          = DBNull.Value;
      else
        (sp_Enqueuedocument.Parameters["PRTID_I"] as IDbDataParameter).Value          = PRTID_I;

      if ( String.IsNullOrEmpty(EMPID_I) )
        (sp_Enqueuedocument.Parameters["EMPID_I"] as IDbDataParameter).Value          = DBNull.Value;
      else
        (sp_Enqueuedocument.Parameters["EMPID_I"] as IDbDataParameter).Value          = EMPID_I;

      if ( NO_COPIES_I == null )
        (sp_Enqueuedocument.Parameters["NO_COPIES_I"] as IDbDataParameter).Value      = DBNull.Value;
      else
        (sp_Enqueuedocument.Parameters["NO_COPIES_I"] as IDbDataParameter).Value      = NO_COPIES_I;

      // Execute stored procedure

      sp_Enqueuedocument.Prepare();
      sp_Enqueuedocument.ExecuteNonQuery();

      // Set Out Parameters

      if ( (sp_Enqueuedocument.Parameters["ALMID_O"] as IDbDataParameter).Value == DBNull.Value)
        ALMID_O = null;
      else
        ALMID_O = (sp_Enqueuedocument.Parameters["ALMID_O"] as IDbDataParameter).Value.ToString();
    }

    public void Getprintconf(out IDataReader         PRINTCONF_CUR_O)
    {
      if ( sp_Getprintconf == null )
        CreateSP_Getprintconf();

      sp_Getprintconf.Transaction = connectionProvider.CurrentTransaction;

      lock (syncLock)
      {
          currentCommand = sp_Getprintconf;
      }
      // Set In Parameters

      // Execute stored procedure

      sp_Getprintconf.Prepare();
      sp_Getprintconf.ExecuteNonQuery();

      // Set Out Parameters

if (!((sp_Getprintconf.Parameters["PRINTCONF_CUR_O"] as IDbDataParameter).Value as OracleRefCursor).IsNull)
{
   #if ODP_NET
       PRINTCONF_CUR_O = (IDataReader)((sp_Getprintconf.Parameters["PRINTCONF_CUR_O"] as IDbDataParameter).Value as OracleRefCursor).GetDataReader();
   #else
       PRINTCONF_CUR_O = (IDataReader)(sp_Getprintconf.Parameters["PRINTCONF_CUR_O"] as IDbDataParameter).Value;
   #endif
}
else
{
   PRINTCONF_CUR_O = null;
}

    }

    public void Getprintjobs(Nullable<int>           JOBCOUNT_I, 
                             Nullable<int>           TIMEOUT_I, 
                             out IDataReader         PRINTQUEUEDOC_CUR_O)
    {
      if ( sp_Getprintjobs == null )
        CreateSP_Getprintjobs();

      sp_Getprintjobs.Transaction = connectionProvider.CurrentTransaction;

      lock (syncLock)
      {
          currentCommand = sp_Getprintjobs;
      }
      // Set In Parameters

      if ( JOBCOUNT_I == null )
        (sp_Getprintjobs.Parameters["JOBCOUNT_I"] as IDbDataParameter).Value = DBNull.Value;
      else
        (sp_Getprintjobs.Parameters["JOBCOUNT_I"] as IDbDataParameter).Value = JOBCOUNT_I;

      if ( TIMEOUT_I == null )
        (sp_Getprintjobs.Parameters["TIMEOUT_I"] as IDbDataParameter).Value  = DBNull.Value;
      else
        (sp_Getprintjobs.Parameters["TIMEOUT_I"] as IDbDataParameter).Value  = TIMEOUT_I;

      // Execute stored procedure

      sp_Getprintjobs.Prepare();
      sp_Getprintjobs.ExecuteNonQuery();

      // Set Out Parameters

if (!((sp_Getprintjobs.Parameters["PRINTQUEUEDOC_CUR_O"] as IDbDataParameter).Value as OracleRefCursor).IsNull)
{
   #if ODP_NET
       PRINTQUEUEDOC_CUR_O = (IDataReader)((sp_Getprintjobs.Parameters["PRINTQUEUEDOC_CUR_O"] as IDbDataParameter).Value as OracleRefCursor).GetDataReader();
   #else
       PRINTQUEUEDOC_CUR_O = (IDataReader)(sp_Getprintjobs.Parameters["PRINTQUEUEDOC_CUR_O"] as IDbDataParameter).Value;
   #endif
}
else
{
   PRINTQUEUEDOC_CUR_O = null;
}

    }

    public string GetSourceVersionInfo()
    {
      if ( sp_GetSourceVersionInfo == null )
        CreateSP_GetSourceVersionInfo();

      sp_GetSourceVersionInfo.Transaction = connectionProvider.CurrentTransaction;

      // Set In Parameters

      // Execute stored procedure

      sp_GetSourceVersionInfo.Prepare();
      sp_GetSourceVersionInfo.ExecuteNonQuery();

      // Set Out Parameters

         string ret;

      if ( (sp_GetSourceVersionInfo.Parameters[""] as IDbDataParameter).Value == DBNull.Value)
        ret = null;
      else
        ret = (sp_GetSourceVersionInfo.Parameters[""] as IDbDataParameter).Value.ToString();

       return ret;
    }

    public void PrintDocError(Nullable<double>        PRINTJOBID_I, 
                              Nullable<double>        SEQNUM_I, 
                              string                  ERROR_MSG_I,
                              byte[]                  DOCUMENT_PDF_I,
                              string                  DOCTYPE_I,
                              string                  DOCSUBTYPID_I,
                              string                  TERID_I,
                              string                  PRTID_I,
                              string                  PRT_NAME_I,
                              string                  EMPID_I,
                              Nullable<double>        NO_COPIES_I,
                              string                  RPTID_I)
    {
      if ( sp_PrintDocError == null )
        CreateSP_PrintDocError();

      sp_PrintDocError.Transaction = connectionProvider.CurrentTransaction;

      // Set In Parameters

      if ( PRINTJOBID_I == null )
        (sp_PrintDocError.Parameters["PRINTJOBID_I"] as IDbDataParameter).Value = DBNull.Value;
      else
        (sp_PrintDocError.Parameters["PRINTJOBID_I"] as IDbDataParameter).Value = PRINTJOBID_I;

      if ( SEQNUM_I == null )
        (sp_PrintDocError.Parameters["SEQNUM_I"] as IDbDataParameter).Value     = DBNull.Value;
      else
        (sp_PrintDocError.Parameters["SEQNUM_I"] as IDbDataParameter).Value     = SEQNUM_I;

      if ( String.IsNullOrEmpty(ERROR_MSG_I) )
        (sp_PrintDocError.Parameters["ERROR_MSG_I"] as IDbDataParameter).Value  = DBNull.Value;
      else
        (sp_PrintDocError.Parameters["ERROR_MSG_I"] as IDbDataParameter).Value  = ERROR_MSG_I;

      if (DOCUMENT_PDF_I == null)
          (sp_PrintDocError.Parameters["DOCUMENT_PDF_I"] as IDbDataParameter).Value = null;
      else
          (sp_PrintDocError.Parameters["DOCUMENT_PDF_I"] as IDbDataParameter).Value = DOCUMENT_PDF_I;

      if (String.IsNullOrEmpty(DOCTYPE_I))
          (sp_PrintDocError.Parameters["DOCTYPE_I"] as IDbDataParameter).Value = DBNull.Value;
      else
          (sp_PrintDocError.Parameters["DOCTYPE_I"] as IDbDataParameter).Value = DOCTYPE_I;

      if (String.IsNullOrEmpty(DOCSUBTYPID_I))
          (sp_PrintDocError.Parameters["DOCSUBTYPID_I"] as IDbDataParameter).Value = DBNull.Value;
      else
          (sp_PrintDocError.Parameters["DOCSUBTYPID_I"] as IDbDataParameter).Value = DOCSUBTYPID_I;

      if (String.IsNullOrEmpty(TERID_I))
          (sp_PrintDocError.Parameters["TERID_I"] as IDbDataParameter).Value = DBNull.Value;
      else
          (sp_PrintDocError.Parameters["TERID_I"] as IDbDataParameter).Value = TERID_I;

      if (String.IsNullOrEmpty(PRTID_I))
          (sp_PrintDocError.Parameters["PRTID_I"] as IDbDataParameter).Value = DBNull.Value;
      else
          (sp_PrintDocError.Parameters["PRTID_I"] as IDbDataParameter).Value = PRTID_I;

      if (String.IsNullOrEmpty(PRT_NAME_I))
          (sp_PrintDocError.Parameters["PRT_NAME_I"] as IDbDataParameter).Value = DBNull.Value;
      else
          (sp_PrintDocError.Parameters["PRT_NAME_I"] as IDbDataParameter).Value = PRT_NAME_I;

      if (String.IsNullOrEmpty(EMPID_I))
          (sp_PrintDocError.Parameters["EMPID_I"] as IDbDataParameter).Value = DBNull.Value;
      else
          (sp_PrintDocError.Parameters["EMPID_I"] as IDbDataParameter).Value = EMPID_I;

      if (NO_COPIES_I == null)
          (sp_PrintDocError.Parameters["NO_COPIES_I"] as IDbDataParameter).Value = DBNull.Value;
      else
          (sp_PrintDocError.Parameters["NO_COPIES_I"] as IDbDataParameter).Value = NO_COPIES_I;

      if (String.IsNullOrEmpty(RPTID_I))
          (sp_PrintDocError.Parameters["RPTID_I"] as IDbDataParameter).Value = DBNull.Value;
      else
          (sp_PrintDocError.Parameters["RPTID_I"] as IDbDataParameter).Value = RPTID_I;

      // Execute stored procedure
      sp_PrintDocError.Prepare();
      sp_PrintDocError.ExecuteNonQuery();

      // Set Out Parameters
    }

    public void PrintDocFinished(Nullable<double>        PRINTJOBID_I, 
                                 Nullable<double>        SEQNUM_I,
                                 byte[]                  DOCUMENT_PDF_I,
                                 string                  DOCTYPE_I,
                                 string                  DOCSUBTYPID_I,
                                 string                  TERID_I,
                                 string                  PRTID_I,
                                 string                  PRT_NAME_I,
                                 string                  EMPID_I,
                                 Nullable<double>        NO_COPIES_I,
                                 string                  RPTID_I)
    {
      if ( sp_PrintDocFinished == null )
        CreateSP_PrintDocFinished();

      sp_PrintDocFinished.Transaction = connectionProvider.CurrentTransaction;

      // Set In Parameters

      if ( PRINTJOBID_I == null )
        (sp_PrintDocFinished.Parameters["PRINTJOBID_I"] as IDbDataParameter).Value = DBNull.Value;
      else
        (sp_PrintDocFinished.Parameters["PRINTJOBID_I"] as IDbDataParameter).Value = PRINTJOBID_I;

      if ( SEQNUM_I == null )
        (sp_PrintDocFinished.Parameters["SEQNUM_I"] as IDbDataParameter).Value     = DBNull.Value;
      else
        (sp_PrintDocFinished.Parameters["SEQNUM_I"] as IDbDataParameter).Value     = SEQNUM_I;

      if (DOCUMENT_PDF_I== null)
          (sp_PrintDocFinished.Parameters["DOCUMENT_PDF_I"] as IDbDataParameter).Value = DBNull.Value;
      else
          (sp_PrintDocFinished.Parameters["DOCUMENT_PDF_I"] as IDbDataParameter).Value = DOCUMENT_PDF_I;

      if (String.IsNullOrEmpty(DOCTYPE_I))
          (sp_PrintDocFinished.Parameters["DOCTYPE_I"] as IDbDataParameter).Value = DBNull.Value;
      else
          (sp_PrintDocFinished.Parameters["DOCTYPE_I"] as IDbDataParameter).Value = DOCTYPE_I;

      if (String.IsNullOrEmpty(DOCSUBTYPID_I))
          (sp_PrintDocFinished.Parameters["DOCSUBTYPID_I"] as IDbDataParameter).Value = DBNull.Value;
      else
          (sp_PrintDocFinished.Parameters["DOCSUBTYPID_I"] as IDbDataParameter).Value = DOCSUBTYPID_I;

      if (String.IsNullOrEmpty(TERID_I))
          (sp_PrintDocFinished.Parameters["TERID_I"] as IDbDataParameter).Value = DBNull.Value;
      else
          (sp_PrintDocFinished.Parameters["TERID_I"] as IDbDataParameter).Value = TERID_I;

      if (String.IsNullOrEmpty(PRTID_I))
          (sp_PrintDocFinished.Parameters["PRTID_I"] as IDbDataParameter).Value = DBNull.Value;
      else
          (sp_PrintDocFinished.Parameters["PRTID_I"] as IDbDataParameter).Value = PRTID_I;

      if (String.IsNullOrEmpty(PRT_NAME_I))
          (sp_PrintDocFinished.Parameters["PRT_NAME_I"] as IDbDataParameter).Value = DBNull.Value;
      else
          (sp_PrintDocFinished.Parameters["PRT_NAME_I"] as IDbDataParameter).Value = PRT_NAME_I;

      if (String.IsNullOrEmpty(EMPID_I))
          (sp_PrintDocFinished.Parameters["EMPID_I"] as IDbDataParameter).Value = DBNull.Value;
      else
          (sp_PrintDocFinished.Parameters["EMPID_I"] as IDbDataParameter).Value = EMPID_I;

      if (NO_COPIES_I == null)
          (sp_PrintDocFinished.Parameters["NO_COPIES_I"] as IDbDataParameter).Value = DBNull.Value;
      else
          (sp_PrintDocFinished.Parameters["NO_COPIES_I"] as IDbDataParameter).Value = NO_COPIES_I;

      if (String.IsNullOrEmpty(RPTID_I))
          (sp_PrintDocFinished.Parameters["RPTID_I"] as IDbDataParameter).Value = DBNull.Value;
      else
          (sp_PrintDocFinished.Parameters["RPTID_I"] as IDbDataParameter).Value = RPTID_I;

      // Execute stored procedure

      sp_PrintDocFinished.Prepare();
      sp_PrintDocFinished.ExecuteNonQuery();

      // Set Out Parameters
    }

    public void PrintError(Nullable<double>        PRINTJOBID_I, 
                           string                  ERROR_ALMID_I, 
                           string                  FALLBACK_I)
    {
      if ( sp_PrintError == null )
        CreateSP_PrintError();

      sp_PrintError.Transaction = connectionProvider.CurrentTransaction;

      // Set In Parameters

      if ( PRINTJOBID_I == null )
        (sp_PrintError.Parameters["PRINTJOBID_I"] as IDbDataParameter).Value  = DBNull.Value;
      else
        (sp_PrintError.Parameters["PRINTJOBID_I"] as IDbDataParameter).Value  = PRINTJOBID_I;

      if ( String.IsNullOrEmpty(ERROR_ALMID_I) )
        (sp_PrintError.Parameters["ERROR_ALMID_I"] as IDbDataParameter).Value = DBNull.Value;
      else
        (sp_PrintError.Parameters["ERROR_ALMID_I"] as IDbDataParameter).Value = ERROR_ALMID_I;

      if ( String.IsNullOrEmpty(FALLBACK_I) )
        (sp_PrintError.Parameters["FALLBACK_I"] as IDbDataParameter).Value    = DBNull.Value;
      else
        (sp_PrintError.Parameters["FALLBACK_I"] as IDbDataParameter).Value    = FALLBACK_I;

      // Execute stored procedure

      sp_PrintError.Prepare();
      sp_PrintError.ExecuteNonQuery();

      // Set Out Parameters
    }

    public void PrintFinished(Nullable<double>        PRINTJOBID_I, 
                              string                  OMID_I,
                              string                  FALLBACK_I)
    {
      if ( sp_PrintFinished == null )
        CreateSP_PrintFinished();

      sp_PrintFinished.Transaction = connectionProvider.CurrentTransaction;

      // Set In Parameters

      if ( PRINTJOBID_I == null )
        (sp_PrintFinished.Parameters["PRINTJOBID_I"] as IDbDataParameter).Value = DBNull.Value;
      else
        (sp_PrintFinished.Parameters["PRINTJOBID_I"] as IDbDataParameter).Value = PRINTJOBID_I;

      if ( String.IsNullOrEmpty(OMID_I) )
        (sp_PrintFinished.Parameters["OMID_I"] as IDbDataParameter).Value       = DBNull.Value;
      else
        (sp_PrintFinished.Parameters["OMID_I"] as IDbDataParameter).Value       = OMID_I;

      if (String.IsNullOrEmpty(FALLBACK_I))
          (sp_PrintFinished.Parameters["FALLBACK_I"] as IDbDataParameter).Value = DBNull.Value;
      else
          (sp_PrintFinished.Parameters["FALLBACK_I"] as IDbDataParameter).Value = FALLBACK_I;

      // Execute stored procedure

      sp_PrintFinished.Prepare();
      sp_PrintFinished.ExecuteNonQuery();

      // Set Out Parameters
    }

    public void Remove(Nullable<double>        PRINTJOBID_I)
    {
      if ( sp_Remove == null )
        CreateSP_Remove();

      sp_Remove.Transaction = connectionProvider.CurrentTransaction;

      // Set In Parameters

      if ( PRINTJOBID_I == null )
        (sp_Remove.Parameters["PRINTJOBID_I"] as IDbDataParameter).Value = DBNull.Value;
      else
        (sp_Remove.Parameters["PRINTJOBID_I"] as IDbDataParameter).Value = PRINTJOBID_I;

      // Execute stored procedure

      sp_Remove.Prepare();
      sp_Remove.ExecuteNonQuery();

      // Set Out Parameters
    }

    public void RemoveFromGui(Nullable<double>        PRINTJOBID_I, 
                              ref string              ALMID_O)
    {
      if ( sp_RemoveFromGui == null )
        CreateSP_RemoveFromGui();

      sp_RemoveFromGui.Transaction = connectionProvider.CurrentTransaction;

      // Set In Parameters

      if ( PRINTJOBID_I == null )
        (sp_RemoveFromGui.Parameters["PRINTJOBID_I"] as IDbDataParameter).Value = DBNull.Value;
      else
        (sp_RemoveFromGui.Parameters["PRINTJOBID_I"] as IDbDataParameter).Value = PRINTJOBID_I;

      // Execute stored procedure

      sp_RemoveFromGui.Prepare();
      sp_RemoveFromGui.ExecuteNonQuery();

      // Set Out Parameters

      if ( (sp_RemoveFromGui.Parameters["ALMID_O"] as IDbDataParameter).Value == DBNull.Value)
        ALMID_O = null;
      else
        ALMID_O = (sp_RemoveFromGui.Parameters["ALMID_O"] as IDbDataParameter).Value.ToString();
    }

    public void ReprintFromGui(Nullable<double>        PRINTJOBID_I, 
                               Nullable<double>        SEQNUM_I, 
                               string                  PRTID_I, 
                               string                  TERID_I, 
                               Nullable<int>           NO_COPIES_I, 
                               string                  EMPID_I, 
                               ref string              ALMID_O)
    {
      if ( sp_ReprintFromGui == null )
        CreateSP_ReprintFromGui();

      sp_ReprintFromGui.Transaction = connectionProvider.CurrentTransaction;

      // Set In Parameters

      if ( PRINTJOBID_I == null )
        (sp_ReprintFromGui.Parameters["PRINTJOBID_I"] as IDbDataParameter).Value = DBNull.Value;
      else
        (sp_ReprintFromGui.Parameters["PRINTJOBID_I"] as IDbDataParameter).Value = PRINTJOBID_I;

      if ( SEQNUM_I == null )
        (sp_ReprintFromGui.Parameters["SEQNUM_I"] as IDbDataParameter).Value     = DBNull.Value;
      else
        (sp_ReprintFromGui.Parameters["SEQNUM_I"] as IDbDataParameter).Value     = SEQNUM_I;

      if ( String.IsNullOrEmpty(PRTID_I) )
        (sp_ReprintFromGui.Parameters["PRTID_I"] as IDbDataParameter).Value      = DBNull.Value;
      else
        (sp_ReprintFromGui.Parameters["PRTID_I"] as IDbDataParameter).Value      = PRTID_I;

      if ( String.IsNullOrEmpty(TERID_I) )
        (sp_ReprintFromGui.Parameters["TERID_I"] as IDbDataParameter).Value      = DBNull.Value;
      else
        (sp_ReprintFromGui.Parameters["TERID_I"] as IDbDataParameter).Value      = TERID_I;

      if ( NO_COPIES_I == null )
        (sp_ReprintFromGui.Parameters["NO_COPIES_I"] as IDbDataParameter).Value  = DBNull.Value;
      else
        (sp_ReprintFromGui.Parameters["NO_COPIES_I"] as IDbDataParameter).Value  = NO_COPIES_I;

      if ( String.IsNullOrEmpty(EMPID_I) )
        (sp_ReprintFromGui.Parameters["EMPID_I"] as IDbDataParameter).Value      = DBNull.Value;
      else
        (sp_ReprintFromGui.Parameters["EMPID_I"] as IDbDataParameter).Value      = EMPID_I;

      // Execute stored procedure

      sp_ReprintFromGui.Prepare();
      sp_ReprintFromGui.ExecuteNonQuery();

      // Set Out Parameters

      if ( (sp_ReprintFromGui.Parameters["ALMID_O"] as IDbDataParameter).Value == DBNull.Value)
        ALMID_O = null;
      else
        ALMID_O = (sp_ReprintFromGui.Parameters["ALMID_O"] as IDbDataParameter).Value.ToString();
    }

    public void ResetFromGui(Nullable<double>        PRINTJOBID_I, 
                             ref string              ALMID_O)
    {
      if ( sp_ResetFromGui == null )
        CreateSP_ResetFromGui();

      sp_ResetFromGui.Transaction = connectionProvider.CurrentTransaction;

      // Set In Parameters

      if ( PRINTJOBID_I == null )
        (sp_ResetFromGui.Parameters["PRINTJOBID_I"] as IDbDataParameter).Value = DBNull.Value;
      else
        (sp_ResetFromGui.Parameters["PRINTJOBID_I"] as IDbDataParameter).Value = PRINTJOBID_I;

      // Execute stored procedure

      sp_ResetFromGui.Prepare();
      sp_ResetFromGui.ExecuteNonQuery();

      // Set Out Parameters

      if ( (sp_ResetFromGui.Parameters["ALMID_O"] as IDbDataParameter).Value == DBNull.Value)
        ALMID_O = null;
      else
        ALMID_O = (sp_ResetFromGui.Parameters["ALMID_O"] as IDbDataParameter).Value.ToString();
    }

    public void Reset()
    {
        if (sp_Reset == null)
            CreateSP_Reset();

        sp_Reset.Transaction = connectionProvider.CurrentTransaction;

        // Set In Parameters

        // Execute stored procedure

        sp_Reset.Prepare();
        sp_Reset.ExecuteNonQuery();

        // Set Out Parameters
    }

    public void Cancel()
    {
      lock (syncLock)
      {
        if (currentCommand != null)
        {
          if (currentCommand.Connection != null)
          {
            if (currentCommand.Connection.State != ConnectionState.Closed)
            {
              currentCommand.Cancel();
            }
          }
        }
      }
    }
  }
}
