/*
  File           : GatewayLog.cs

  Description    : Wrapper class for Oracle package LOGG_OUTPUT.
                   Only the required procedures to start and stop logging are implemented.

*/
using System;
using System.Data;
using Oracle.DataAccess.Types;
using Oracle.DataAccess.Client;
using Imi.Framework.Job.Data;

namespace Imi.Wms.Server.Job.GatewayReceiver.OraclePackage
{
    public class DBGatewayLog
    {
        private IDbConnectionProvider connectionProvider;
        private IDbCommand sp_Enable_Server_Log;
        private IDbCommand sp_Disable_Server_Log;
        private IDbCommand currentCommand;
        private object syncLock = new object();

        public string _Debug()
        {
            return "Package        : LOGG_OUTPUT\r\n" +
                    "Generated on   : 08/01/2007 15:15:00\r\n" +
                    "Generated by   : IMIAD\\hara@IMIPC1160\r\n";
        }


        public DBGatewayLog(IDbConnectionProvider connectionProvider)
        {
            this.connectionProvider = connectionProvider;
        }


        // ----------------------------------------------------------------------------

        private void CreateSP_Enable_Server_Log()
        {
            OracleParameter p;

            sp_Enable_Server_Log = connectionProvider.GetConnection().CreateCommand();
            ((OracleCommand)sp_Enable_Server_Log).BindByName = true;
            sp_Enable_Server_Log.CommandText = "LOGG_OUTPUT.ENABLE_SERVER_LOG";
            sp_Enable_Server_Log.CommandType = System.Data.CommandType.StoredProcedure;
            ((OracleCommand)sp_Enable_Server_Log).FetchSize = 65536;

            p = new OracleParameter("DIRECTORY_I", OracleDbType.Varchar2, 255);
            p.Direction = ParameterDirection.Input;
            sp_Enable_Server_Log.Parameters.Add(p);

            p = new OracleParameter("FILENAME_I", OracleDbType.Varchar2, 255);
            p.Direction = ParameterDirection.Input;
            sp_Enable_Server_Log.Parameters.Add(p);

            p = new OracleParameter("LEVEL_I", OracleDbType.Double, 22);
            p.Direction = ParameterDirection.Input;
            sp_Enable_Server_Log.Parameters.Add(p);

        }

        private void CreateSP_Disable_Server_Log()
        {
            sp_Disable_Server_Log = connectionProvider.GetConnection().CreateCommand();
            ((OracleCommand)sp_Disable_Server_Log).BindByName = true;
            sp_Disable_Server_Log.CommandText = "LOGG_OUTPUT.DISABLE_SERVER_LOG";
            sp_Disable_Server_Log.CommandType = System.Data.CommandType.StoredProcedure;
            ((OracleCommand)sp_Disable_Server_Log).FetchSize = 65536;
        }

        public void Enable_Server_Log(string directory,
                                      string fileName,
                                      int level)
        {

            if (sp_Enable_Server_Log == null)
                CreateSP_Enable_Server_Log();

            sp_Enable_Server_Log.Transaction = connectionProvider.CurrentTransaction;

            lock (syncLock)
            {
                currentCommand = sp_Enable_Server_Log;
            }

            // Set In Parameters

            if (directory == "")
                (sp_Enable_Server_Log.Parameters["DIRECTORY_I"] as IDbDataParameter).Value = DBNull.Value;
            else
                (sp_Enable_Server_Log.Parameters["DIRECTORY_I"] as IDbDataParameter).Value = directory;

            if (fileName == "")
                (sp_Enable_Server_Log.Parameters["FILENAME_I"] as IDbDataParameter).Value = DBNull.Value;
            else
                (sp_Enable_Server_Log.Parameters["FILENAME_I"] as IDbDataParameter).Value = fileName;

            (sp_Enable_Server_Log.Parameters["LEVEL_I"] as IDbDataParameter).Value = (double)level;

            // Execute stored procedure

            sp_Enable_Server_Log.Prepare();
            sp_Enable_Server_Log.ExecuteNonQuery();

            // No Out Parameters

        }

        public void Disable_Server_Log()
        {

            if (sp_Disable_Server_Log == null)
                CreateSP_Disable_Server_Log();

            sp_Disable_Server_Log.Transaction = connectionProvider.CurrentTransaction;

            lock (syncLock)
            {
                currentCommand = sp_Disable_Server_Log;
            }

            // No In Parameters

            // Execute stored procedure

            sp_Disable_Server_Log.Prepare();
            sp_Disable_Server_Log.ExecuteNonQuery();

            // No Out Parameters

        }

        public void Cancel()
        {
            lock (syncLock)
            {
                if (currentCommand != null)
                {
                    if (currentCommand.Connection != null)
                    {
                        if (currentCommand.Connection.State != ConnectionState.Closed)
                        {
                            currentCommand.Cancel();
                        }
                    }
                }
            }
        }

    }
}
