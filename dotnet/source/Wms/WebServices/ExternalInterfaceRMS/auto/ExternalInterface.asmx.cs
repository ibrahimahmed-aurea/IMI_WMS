/*
  File           : 

  Description    : Public interface class for WebService interface for inbound data.
                   This code was generated, do not edit.

*/
using System;
using System.Web;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.IO;
using Imi.Framework.Versioning;

namespace Imi.Wms.WebServices.ExternalInterfaceRMS
{
  [WebService(Namespace="http://im.se/wms/webservices/", Description="Message Inbound (Receiver) interface 8.0.1 generated on 2017-09-08 11:57:04")]
  [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
  public class InboundInterface : WSBase
  {
    public string _Debug()
    {
      return "Generated on   : 2017-09-08 11:57:04\r\n" +
             "Generated by   : SWG\\aron@SE0133D\r\n" +
             "Generated in   : C:\\projects\\views\\aron_80M_ss\\dotnet\\source\\CodeGenerators\\wscc\r\n";
    }

    private void Log( bool Enter )
    {

      string path = @"C:\log\Inbound.log";

      using (StreamWriter w = File.AppendText(path))
      {
        w.Write( "{0} {1}.{2}", System.DateTime.Now.ToShortDateString(), 
          System.DateTime.Now.ToLongTimeString(), System.Convert.ToString( System.DateTime.Now.Millisecond ) );

        StackTrace st = new StackTrace(1, true);

        if ( st.FrameCount > 1 )
        {
          StackFrame sf = st.GetFrame(1);
        
          w.Write("{0}{1}{2}", '\t', sf.GetMethod(), '\t' );
        }
        
        if (Enter)
          w.WriteLine( "Enter" );
        else
          w.WriteLine( "Leave" );
      }
    }

    private void EnterProc()
    {
      try
      {
        // Log( true );
      }
      catch
      {
      }
    }

    private void ExitProc()
    {
      try
      {
        // Log( false );
      }
      catch
      {
      }
    }

    [WebMethod]
    public string WhoAmI()
    {
      EnterProc();

      string s = CurrentVersion.VersionName;

      ExitProc();

      return s;
    }


    [WebMethod]
    public void MethodOfShipment( string CommPartnerId, string TransactionId, MethodOfShipmentDoc aMethodOfShipmentDoc )
    {
      EnterProc();

      MethodOfShipmentInsert aMethodOfShipmentHandler;

      try
      {
        MessageTransaction mt = BeginWebmethod( CommPartnerId, TransactionId, "MOS" );

        try
        {
          aMethodOfShipmentHandler = new MethodOfShipmentInsert( this );
        }
        catch (Exception e)
        {
          Exception InternalError = new Exception( "InternalError: Building insert handler", e );
          throw (InternalError);
        }

        try
        {
          if ( aMethodOfShipmentDoc == null )
          {
            Exception InternalError = new Exception( "DataError: Root object cannot be null" );
            throw (InternalError);
          }
          aMethodOfShipmentHandler.Process( ref mt, null, aMethodOfShipmentDoc );
          GetDataBase().Commit();
        }
        catch (Exception e)
        {
          try
          {
            GetDataBase().Rollback();
          }
          catch (Exception)
          {}
          Exception InternalError = new Exception( "DataError: Error processing data", e );
          throw (InternalError);
        }
      }

      finally
      {
        EndWebmethod();
      }

      ExitProc();

      return;
    }


    [WebMethod]
    public void Forwarder( string CommPartnerId, string TransactionId, ForwarderDoc aForwarderDoc )
    {
      EnterProc();

      ForwarderInsert aForwarderHandler;

      try
      {
        MessageTransaction mt = BeginWebmethod( CommPartnerId, TransactionId, "FORW" );

        try
        {
          aForwarderHandler = new ForwarderInsert( this );
        }
        catch (Exception e)
        {
          Exception InternalError = new Exception( "InternalError: Building insert handler", e );
          throw (InternalError);
        }

        try
        {
          if ( aForwarderDoc == null )
          {
            Exception InternalError = new Exception( "DataError: Root object cannot be null" );
            throw (InternalError);
          }
          aForwarderHandler.Process( ref mt, null, aForwarderDoc );
          GetDataBase().Commit();
        }
        catch (Exception e)
        {
          try
          {
            GetDataBase().Rollback();
          }
          catch (Exception)
          {}
          Exception InternalError = new Exception( "DataError: Error processing data", e );
          throw (InternalError);
        }
      }

      finally
      {
        EndWebmethod();
      }

      ExitProc();

      return;
    }


    [WebMethod]
    public void VehicleType( string CommPartnerId, string TransactionId, VehicleTypeDoc aVehicleTypeDoc )
    {
      EnterProc();

      VehicleTypeInsert aVehicleTypeHandler;

      try
      {
        MessageTransaction mt = BeginWebmethod( CommPartnerId, TransactionId, "VEHTYP" );

        try
        {
          aVehicleTypeHandler = new VehicleTypeInsert( this );
        }
        catch (Exception e)
        {
          Exception InternalError = new Exception( "InternalError: Building insert handler", e );
          throw (InternalError);
        }

        try
        {
          if ( aVehicleTypeDoc == null )
          {
            Exception InternalError = new Exception( "DataError: Root object cannot be null" );
            throw (InternalError);
          }
          aVehicleTypeHandler.Process( ref mt, null, aVehicleTypeDoc );
          GetDataBase().Commit();
        }
        catch (Exception e)
        {
          try
          {
            GetDataBase().Rollback();
          }
          catch (Exception)
          {}
          Exception InternalError = new Exception( "DataError: Error processing data", e );
          throw (InternalError);
        }
      }

      finally
      {
        EndWebmethod();
      }

      ExitProc();

      return;
    }


    [WebMethod]
    public void VehicleTypePTT( string CommPartnerId, string TransactionId, VehicleTypePTTDoc aVehicleTypePTTDoc )
    {
      EnterProc();

      VehicleTypePTTInsert aVehicleTypePTTHandler;

      try
      {
        MessageTransaction mt = BeginWebmethod( CommPartnerId, TransactionId, "VEHTYP_PTT" );

        try
        {
          aVehicleTypePTTHandler = new VehicleTypePTTInsert( this );
        }
        catch (Exception e)
        {
          Exception InternalError = new Exception( "InternalError: Building insert handler", e );
          throw (InternalError);
        }

        try
        {
          if ( aVehicleTypePTTDoc == null )
          {
            Exception InternalError = new Exception( "DataError: Root object cannot be null" );
            throw (InternalError);
          }
          aVehicleTypePTTHandler.Process( ref mt, null, aVehicleTypePTTDoc );
          GetDataBase().Commit();
        }
        catch (Exception e)
        {
          try
          {
            GetDataBase().Rollback();
          }
          catch (Exception)
          {}
          Exception InternalError = new Exception( "DataError: Error processing data", e );
          throw (InternalError);
        }
      }

      finally
      {
        EndWebmethod();
      }

      ExitProc();

      return;
    }


    [WebMethod]
    public void Route( string CommPartnerId, string TransactionId, RouteDoc aRouteDoc )
    {
      EnterProc();

      RouteInsert aRouteHandler;

      try
      {
        MessageTransaction mt = BeginWebmethod( CommPartnerId, TransactionId, "ROUT" );

        try
        {
          aRouteHandler = new RouteInsert( this );
        }
        catch (Exception e)
        {
          Exception InternalError = new Exception( "InternalError: Building insert handler", e );
          throw (InternalError);
        }

        try
        {
          if ( aRouteDoc == null )
          {
            Exception InternalError = new Exception( "DataError: Root object cannot be null" );
            throw (InternalError);
          }
          aRouteHandler.Process( ref mt, null, aRouteDoc );
          GetDataBase().Commit();
        }
        catch (Exception e)
        {
          try
          {
            GetDataBase().Rollback();
          }
          catch (Exception)
          {}
          Exception InternalError = new Exception( "DataError: Error processing data", e );
          throw (InternalError);
        }
      }

      finally
      {
        EndWebmethod();
      }

      ExitProc();

      return;
    }


    [WebMethod]
    public void RouteNode( string CommPartnerId, string TransactionId, RouteNodeDoc aRouteNodeDoc )
    {
      EnterProc();

      RouteNodeInsert aRouteNodeHandler;

      try
      {
        MessageTransaction mt = BeginWebmethod( CommPartnerId, TransactionId, "ROUT_NODE" );

        try
        {
          aRouteNodeHandler = new RouteNodeInsert( this );
        }
        catch (Exception e)
        {
          Exception InternalError = new Exception( "InternalError: Building insert handler", e );
          throw (InternalError);
        }

        try
        {
          if ( aRouteNodeDoc == null )
          {
            Exception InternalError = new Exception( "DataError: Root object cannot be null" );
            throw (InternalError);
          }
          aRouteNodeHandler.Process( ref mt, null, aRouteNodeDoc );
          GetDataBase().Commit();
        }
        catch (Exception e)
        {
          try
          {
            GetDataBase().Rollback();
          }
          catch (Exception)
          {}
          Exception InternalError = new Exception( "DataError: Error processing data", e );
          throw (InternalError);
        }
      }

      finally
      {
        EndWebmethod();
      }

      ExitProc();

      return;
    }


    [WebMethod]
    public void RouteNodeTransitNode( string CommPartnerId, string TransactionId, RouteNodeTransitNodeDoc aRouteNodeTransitNodeDoc )
    {
      EnterProc();

      RouteNodeTransitNodeInsert aRouteNodeTransitNodeHandler;

      try
      {
        MessageTransaction mt = BeginWebmethod( CommPartnerId, TransactionId, "ROUT_NOD_TRNOD" );

        try
        {
          aRouteNodeTransitNodeHandler = new RouteNodeTransitNodeInsert( this );
        }
        catch (Exception e)
        {
          Exception InternalError = new Exception( "InternalError: Building insert handler", e );
          throw (InternalError);
        }

        try
        {
          if ( aRouteNodeTransitNodeDoc == null )
          {
            Exception InternalError = new Exception( "DataError: Root object cannot be null" );
            throw (InternalError);
          }
          aRouteNodeTransitNodeHandler.Process( ref mt, null, aRouteNodeTransitNodeDoc );
          GetDataBase().Commit();
        }
        catch (Exception e)
        {
          try
          {
            GetDataBase().Rollback();
          }
          catch (Exception)
          {}
          Exception InternalError = new Exception( "DataError: Error processing data", e );
          throw (InternalError);
        }
      }

      finally
      {
        EndWebmethod();
      }

      ExitProc();

      return;
    }


    [WebMethod]
    public void Departure( string CommPartnerId, string TransactionId, DepartureDoc aDepartureDoc )
    {
      EnterProc();

      DepartureInsert aDepartureHandler;

      try
      {
        MessageTransaction mt = BeginWebmethod( CommPartnerId, TransactionId, "NEW_DEP" );

        try
        {
          aDepartureHandler = new DepartureInsert( this );
        }
        catch (Exception e)
        {
          Exception InternalError = new Exception( "InternalError: Building insert handler", e );
          throw (InternalError);
        }

        try
        {
          if ( aDepartureDoc == null )
          {
            Exception InternalError = new Exception( "DataError: Root object cannot be null" );
            throw (InternalError);
          }
          aDepartureHandler.Process( ref mt, null, aDepartureDoc );
          GetDataBase().Commit();
        }
        catch (Exception e)
        {
          try
          {
            GetDataBase().Rollback();
          }
          catch (Exception)
          {}
          Exception InternalError = new Exception( "DataError: Error processing data", e );
          throw (InternalError);
        }
      }

      finally
      {
        EndWebmethod();
      }

      ExitProc();

      return;
    }


    [WebMethod]
    public void DepartureNode( string CommPartnerId, string TransactionId, DepartureNodeDoc aDepartureNodeDoc )
    {
      EnterProc();

      DepartureNodeInsert aDepartureNodeHandler;

      try
      {
        MessageTransaction mt = BeginWebmethod( CommPartnerId, TransactionId, "NEW_DEP_NODE" );

        try
        {
          aDepartureNodeHandler = new DepartureNodeInsert( this );
        }
        catch (Exception e)
        {
          Exception InternalError = new Exception( "InternalError: Building insert handler", e );
          throw (InternalError);
        }

        try
        {
          if ( aDepartureNodeDoc == null )
          {
            Exception InternalError = new Exception( "DataError: Root object cannot be null" );
            throw (InternalError);
          }
          aDepartureNodeHandler.Process( ref mt, null, aDepartureNodeDoc );
          GetDataBase().Commit();
        }
        catch (Exception e)
        {
          try
          {
            GetDataBase().Rollback();
          }
          catch (Exception)
          {}
          Exception InternalError = new Exception( "DataError: Error processing data", e );
          throw (InternalError);
        }
      }

      finally
      {
        EndWebmethod();
      }

      ExitProc();

      return;
    }


    [WebMethod]
    public void DepartureNodeTransitNode( string CommPartnerId, string TransactionId, DepartureNodeTransitNodeDoc aDepartureNodeTransitNodeDoc )
    {
      EnterProc();

      DepartureNodeTransitNodeInsert aDepartureNodeTransitNodeHandler;

      try
      {
        MessageTransaction mt = BeginWebmethod( CommPartnerId, TransactionId, "NEW_DEP_NODTRNOD" );

        try
        {
          aDepartureNodeTransitNodeHandler = new DepartureNodeTransitNodeInsert( this );
        }
        catch (Exception e)
        {
          Exception InternalError = new Exception( "InternalError: Building insert handler", e );
          throw (InternalError);
        }

        try
        {
          if ( aDepartureNodeTransitNodeDoc == null )
          {
            Exception InternalError = new Exception( "DataError: Root object cannot be null" );
            throw (InternalError);
          }
          aDepartureNodeTransitNodeHandler.Process( ref mt, null, aDepartureNodeTransitNodeDoc );
          GetDataBase().Commit();
        }
        catch (Exception e)
        {
          try
          {
            GetDataBase().Rollback();
          }
          catch (Exception)
          {}
          Exception InternalError = new Exception( "DataError: Error processing data", e );
          throw (InternalError);
        }
      }

      finally
      {
        EndWebmethod();
      }

      ExitProc();

      return;
    }


    [WebMethod]
    public void PrebookedTransitOrder( string CommPartnerId, string TransactionId, PrebookedTransitOrderDoc aPrebookedTransitOrderDoc )
    {
      EnterProc();

      PrebookedTransitOrderInsert aPrebookedTransitOrderHandler;

      try
      {
        MessageTransaction mt = BeginWebmethod( CommPartnerId, TransactionId, "PREORD" );

        try
        {
          aPrebookedTransitOrderHandler = new PrebookedTransitOrderInsert( this );
        }
        catch (Exception e)
        {
          Exception InternalError = new Exception( "InternalError: Building insert handler", e );
          throw (InternalError);
        }

        try
        {
          if ( aPrebookedTransitOrderDoc == null )
          {
            Exception InternalError = new Exception( "DataError: Root object cannot be null" );
            throw (InternalError);
          }
          aPrebookedTransitOrderHandler.Process( ref mt, null, aPrebookedTransitOrderDoc );
          GetDataBase().Commit();
        }
        catch (Exception e)
        {
          try
          {
            GetDataBase().Rollback();
          }
          catch (Exception)
          {}
          Exception InternalError = new Exception( "DataError: Error processing data", e );
          throw (InternalError);
        }
      }

      finally
      {
        EndWebmethod();
      }

      ExitProc();

      return;
    }


    [WebMethod]
    public void CustomerOrder( string CommPartnerId, string TransactionId, CustomerOrderDoc aCustomerOrderDoc )
    {
      EnterProc();

      CustomerOrderInsert aCustomerOrderHandler;

      try
      {
        MessageTransaction mt = BeginWebmethod( CommPartnerId, TransactionId, "CUSORD" );

        try
        {
          aCustomerOrderHandler = new CustomerOrderInsert( this );
        }
        catch (Exception e)
        {
          Exception InternalError = new Exception( "InternalError: Building insert handler", e );
          throw (InternalError);
        }

        try
        {
          if ( aCustomerOrderDoc == null )
          {
            Exception InternalError = new Exception( "DataError: Root object cannot be null" );
            throw (InternalError);
          }
          aCustomerOrderHandler.Process( ref mt, null, aCustomerOrderDoc );
          GetDataBase().Commit();
        }
        catch (Exception e)
        {
          try
          {
            GetDataBase().Rollback();
          }
          catch (Exception)
          {}
          Exception InternalError = new Exception( "DataError: Error processing data", e );
          throw (InternalError);
        }
      }

      finally
      {
        EndWebmethod();
      }

      ExitProc();

      return;
    }


    [WebMethod]
    public void NodeParty( string CommPartnerId, string TransactionId, NodePartyDoc aNodePartyDoc )
    {
      EnterProc();

      NodePartyInsert aNodePartyHandler;

      try
      {
        MessageTransaction mt = BeginWebmethod( CommPartnerId, TransactionId, "NODE_PARTY" );

        try
        {
          aNodePartyHandler = new NodePartyInsert( this );
        }
        catch (Exception e)
        {
          Exception InternalError = new Exception( "InternalError: Building insert handler", e );
          throw (InternalError);
        }

        try
        {
          if ( aNodePartyDoc == null )
          {
            Exception InternalError = new Exception( "DataError: Root object cannot be null" );
            throw (InternalError);
          }
          aNodePartyHandler.Process( ref mt, null, aNodePartyDoc );
          GetDataBase().Commit();
        }
        catch (Exception e)
        {
          try
          {
            GetDataBase().Rollback();
          }
          catch (Exception)
          {}
          Exception InternalError = new Exception( "DataError: Error processing data", e );
          throw (InternalError);
        }
      }

      finally
      {
        EndWebmethod();
      }

      ExitProc();

      return;
    }

  }
}
