/*
  File           : 

  Description    : Public interface class for WebService interface for inbound data.

 * 061221 olla dotnet2.0 conversion

*/
using System;
using System.Web;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.IO;
using Imi.Framework.Versioning;

namespace Imi.Wms.WebServices.ExternalInterface
{
    [WebService(Namespace = "http://im.se/wms/webservices/", Description = "WMS Outbound (Sender) interface 5.1.16 generated on 2006-12-12 15:02:46")]
    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    public class InboundInterface : WSBase
    {
        public string _Debug()
        {
            return "Generated on   : 2005-09-16 11:45:20\r\n" +
                   "Generated by   : IMINT1\\olla@IMIPC1091\r\n" +
                   "Generated in   : C:\\project\\views\\olla_temp_ss\\client\\C#\\wscc\r\n";
        }

        private void Log(bool Enter)
        {

            string path = @"C:\log\Inbound.log";

            using (StreamWriter w = File.AppendText(path))
            {
                w.Write("{0} {1}.{2}", System.DateTime.Now.ToShortDateString(),
                  System.DateTime.Now.ToLongTimeString(), System.Convert.ToString(System.DateTime.Now.Millisecond));

                StackTrace st = new StackTrace(1, true);

                if (st.FrameCount > 1)
                {
                    StackFrame sf = st.GetFrame(1);

                    w.Write("{0}{1}{2}", '\t', sf.GetMethod(), '\t');
                }

                if (Enter)
                    w.WriteLine("Enter");
                else
                    w.WriteLine("Leave");
            }
        }

        private void EnterProc()
        {
            try
            {
                // Log( true );
            }
            catch
            {
            }
        }

        private void ExitProc()
        {
            try
            {
                // Log( false );
            }
            catch
            {
            }
        }

        [WebMethod]
        public string WhoAmI()
        {
            EnterProc();

            string s = "5.0.18 interface in " + CurrentVersion.VersionName;

            ExitProc();

            return s;
        }


        [WebMethod]
        public void DeliveryReceipt(string ChannelId, string ChannelRef, string TransactionId, DeliveryReceiptHeadDoc aDeliveryReceiptHeadDoc)
        {
            EnterProc();

            DeliveryReceiptHeadInsert aDeliveryReceiptHeadHandler;

            try
            {
                MessageTransaction mt = BeginWebmethod(ChannelId, ChannelRef, TransactionId, "DR");

                try
                {
                    aDeliveryReceiptHeadHandler = new DeliveryReceiptHeadInsert(this);
                }
                catch (Exception e)
                {
                    Exception InternalError = new Exception("InternalError: Building insert handler", e);
                    throw (InternalError);
                }

                try
                {
                    if (aDeliveryReceiptHeadDoc == null)
                    {
                        Exception InternalError = new Exception("DataError: Root object cannot be null");
                        throw (InternalError);
                    }
                    aDeliveryReceiptHeadHandler.Process(ref mt, null, aDeliveryReceiptHeadDoc);
                    GetDataBase().Commit();
                }
                catch (Exception e)
                {
                    try
                    {
                        GetDataBase().Rollback();
                    }
                    catch (Exception)
                    { }
                    Exception InternalError = new Exception("DataError: Error processing data", e);
                    throw (InternalError);
                }
            }

            finally
            {
                EndWebmethod();
            }

            ExitProc();

            return;
        }


        [WebMethod]
        public void PickReceipt(string ChannelId, string ChannelRef, string TransactionId, PickReceiptHeadDoc aPickReceiptHeadDoc)
        {
            EnterProc();

            PickReceiptHeadInsert aPickReceiptHeadHandler;

            try
            {
                MessageTransaction mt = BeginWebmethod(ChannelId, ChannelRef, TransactionId, "PR");

                try
                {
                    aPickReceiptHeadHandler = new PickReceiptHeadInsert(this);
                }
                catch (Exception e)
                {
                    Exception InternalError = new Exception("InternalError: Building insert handler", e);
                    throw (InternalError);
                }

                try
                {
                    if (aPickReceiptHeadDoc == null)
                    {
                        Exception InternalError = new Exception("DataError: Root object cannot be null");
                        throw (InternalError);
                    }
                    aPickReceiptHeadHandler.Process(ref mt, null, aPickReceiptHeadDoc);
                    GetDataBase().Commit();
                }
                catch (Exception e)
                {
                    try
                    {
                        GetDataBase().Rollback();
                    }
                    catch (Exception)
                    { }
                    Exception InternalError = new Exception("DataError: Error processing data", e);
                    throw (InternalError);
                }
            }

            finally
            {
                EndWebmethod();
            }

            ExitProc();

            return;
        }


        [WebMethod]
        public void VendorReturnReceipt(string ChannelId, string ChannelRef, string TransactionId, ReturnReceiptHeadDoc aReturnReceiptHeadDoc)
        {
            EnterProc();

            ReturnReceiptHeadInsert aReturnReceiptHeadHandler;

            try
            {
                MessageTransaction mt = BeginWebmethod(ChannelId, ChannelRef, TransactionId, "RR");

                try
                {
                    aReturnReceiptHeadHandler = new ReturnReceiptHeadInsert(this);
                }
                catch (Exception e)
                {
                    Exception InternalError = new Exception("InternalError: Building insert handler", e);
                    throw (InternalError);
                }

                try
                {
                    if (aReturnReceiptHeadDoc == null)
                    {
                        Exception InternalError = new Exception("DataError: Root object cannot be null");
                        throw (InternalError);
                    }
                    aReturnReceiptHeadHandler.Process(ref mt, null, aReturnReceiptHeadDoc);
                    GetDataBase().Commit();
                }
                catch (Exception e)
                {
                    try
                    {
                        GetDataBase().Rollback();
                    }
                    catch (Exception)
                    { }
                    Exception InternalError = new Exception("DataError: Error processing data", e);
                    throw (InternalError);
                }
            }

            finally
            {
                EndWebmethod();
            }

            ExitProc();

            return;
        }


        [WebMethod]
        public void InspectionReceipt(string ChannelId, string ChannelRef, string TransactionId, InspectionReceiptHeadDoc aInspectionReceiptHeadDoc)
        {
            EnterProc();

            InspectionReceiptHeadInsert aInspectionReceiptHeadHandler;

            try
            {
                MessageTransaction mt = BeginWebmethod(ChannelId, ChannelRef, TransactionId, "IR");

                try
                {
                    aInspectionReceiptHeadHandler = new InspectionReceiptHeadInsert(this);
                }
                catch (Exception e)
                {
                    Exception InternalError = new Exception("InternalError: Building insert handler", e);
                    throw (InternalError);
                }

                try
                {
                    if (aInspectionReceiptHeadDoc == null)
                    {
                        Exception InternalError = new Exception("DataError: Root object cannot be null");
                        throw (InternalError);
                    }
                    aInspectionReceiptHeadHandler.Process(ref mt, null, aInspectionReceiptHeadDoc);
                    GetDataBase().Commit();
                }
                catch (Exception e)
                {
                    try
                    {
                        GetDataBase().Rollback();
                    }
                    catch (Exception)
                    { }
                    Exception InternalError = new Exception("DataError: Error processing data", e);
                    throw (InternalError);
                }
            }

            finally
            {
                EndWebmethod();
            }

            ExitProc();

            return;
        }


        [WebMethod]
        public void InventoryChange(string ChannelId, string ChannelRef, string TransactionId, InventoryChangeLineDoc aInventoryChangeLineDoc)
        {
            EnterProc();

            InventoryChangeLineInsert aInventoryChangeLineHandler;

            try
            {
                MessageTransaction mt = BeginWebmethod(ChannelId, ChannelRef, TransactionId, "IC");

                try
                {
                    aInventoryChangeLineHandler = new InventoryChangeLineInsert(this);
                }
                catch (Exception e)
                {
                    Exception InternalError = new Exception("InternalError: Building insert handler", e);
                    throw (InternalError);
                }

                try
                {
                    if (aInventoryChangeLineDoc == null)
                    {
                        Exception InternalError = new Exception("DataError: Root object cannot be null");
                        throw (InternalError);
                    }
                    aInventoryChangeLineHandler.Process(ref mt, null, aInventoryChangeLineDoc);
                    GetDataBase().Commit();
                }
                catch (Exception e)
                {
                    try
                    {
                        GetDataBase().Rollback();
                    }
                    catch (Exception)
                    { }
                    Exception InternalError = new Exception("DataError: Error processing data", e);
                    throw (InternalError);
                }
            }

            finally
            {
                EndWebmethod();
            }

            ExitProc();

            return;
        }


        [WebMethod]
        public void BalanceAnswer(string ChannelId, string ChannelRef, string TransactionId, BalanceAnswerLineDoc aBalanceAnswerLineDoc)
        {
            EnterProc();

            BalanceAnswerLineInsert aBalanceAnswerLineHandler;

            try
            {
                MessageTransaction mt = BeginWebmethod(ChannelId, ChannelRef, TransactionId, "BA");

                try
                {
                    aBalanceAnswerLineHandler = new BalanceAnswerLineInsert(this);
                }
                catch (Exception e)
                {
                    Exception InternalError = new Exception("InternalError: Building insert handler", e);
                    throw (InternalError);
                }

                try
                {
                    if (aBalanceAnswerLineDoc == null)
                    {
                        Exception InternalError = new Exception("DataError: Root object cannot be null");
                        throw (InternalError);
                    }
                    aBalanceAnswerLineHandler.Process(ref mt, null, aBalanceAnswerLineDoc);
                    GetDataBase().Commit();
                }
                catch (Exception e)
                {
                    try
                    {
                        GetDataBase().Rollback();
                    }
                    catch (Exception)
                    { }
                    Exception InternalError = new Exception("DataError: Error processing data", e);
                    throw (InternalError);
                }
            }

            finally
            {
                EndWebmethod();
            }

            ExitProc();

            return;
        }


        [WebMethod]
        public void ReturnedPackingMaterial(string ChannelId, string ChannelRef, string TransactionId, ReturnedPackingMaterialHeadDoc aReturnedPackingMaterialHeadDoc)
        {
            EnterProc();

            ReturnedPackingMaterialHeadInsert aReturnedPackingMaterialHeadHandler;

            try
            {
                MessageTransaction mt = BeginWebmethod(ChannelId, ChannelRef, TransactionId, "PM");

                try
                {
                    aReturnedPackingMaterialHeadHandler = new ReturnedPackingMaterialHeadInsert(this);
                }
                catch (Exception e)
                {
                    Exception InternalError = new Exception("InternalError: Building insert handler", e);
                    throw (InternalError);
                }

                try
                {
                    if (aReturnedPackingMaterialHeadDoc == null)
                    {
                        Exception InternalError = new Exception("DataError: Root object cannot be null");
                        throw (InternalError);
                    }
                    aReturnedPackingMaterialHeadHandler.Process(ref mt, null, aReturnedPackingMaterialHeadDoc);
                    GetDataBase().Commit();
                }
                catch (Exception e)
                {
                    try
                    {
                        GetDataBase().Rollback();
                    }
                    catch (Exception)
                    { }
                    Exception InternalError = new Exception("DataError: Error processing data", e);
                    throw (InternalError);
                }
            }

            finally
            {
                EndWebmethod();
            }

            ExitProc();

            return;
        }


        [WebMethod]
        public void ASN(string ChannelId, string ChannelRef, string TransactionId, ASNHeadDoc aASNHeadDoc)
        {
            EnterProc();

            ASNHeadInsert aASNHeadHandler;

            try
            {
                MessageTransaction mt = BeginWebmethod(ChannelId, ChannelRef, TransactionId, "SR");

                try
                {
                    aASNHeadHandler = new ASNHeadInsert(this);
                }
                catch (Exception e)
                {
                    Exception InternalError = new Exception("InternalError: Building insert handler", e);
                    throw (InternalError);
                }

                try
                {
                    if (aASNHeadDoc == null)
                    {
                        Exception InternalError = new Exception("DataError: Root object cannot be null");
                        throw (InternalError);
                    }
                    aASNHeadHandler.Process(ref mt, null, aASNHeadDoc);
                    GetDataBase().Commit();
                }
                catch (Exception e)
                {
                    try
                    {
                        GetDataBase().Rollback();
                    }
                    catch (Exception)
                    { }
                    Exception InternalError = new Exception("DataError: Error processing data", e);
                    throw (InternalError);
                }
            }

            finally
            {
                EndWebmethod();
            }

            ExitProc();

            return;
        }


        [WebMethod]
        public void ConfirmationOfReceipt(string ChannelId, string ChannelRef, string TransactionId, ConfirmationOfReceiptHeadDoc aConfirmationOfReceiptHeadDoc)
        {
            EnterProc();

            ConfirmationOfReceiptHeadInsert aConfirmationOfReceiptHeadHandler;

            try
            {
                MessageTransaction mt = BeginWebmethod(ChannelId, ChannelRef, TransactionId, "COR");

                try
                {
                    aConfirmationOfReceiptHeadHandler = new ConfirmationOfReceiptHeadInsert(this);
                }
                catch (Exception e)
                {
                    Exception InternalError = new Exception("InternalError: Building insert handler", e);
                    throw (InternalError);
                }

                try
                {
                    if (aConfirmationOfReceiptHeadDoc == null)
                    {
                        Exception InternalError = new Exception("DataError: Root object cannot be null");
                        throw (InternalError);
                    }
                    aConfirmationOfReceiptHeadHandler.Process(ref mt, null, aConfirmationOfReceiptHeadDoc);
                    GetDataBase().Commit();
                }
                catch (Exception e)
                {
                    try
                    {
                        GetDataBase().Rollback();
                    }
                    catch (Exception)
                    { }
                    Exception InternalError = new Exception("DataError: Error processing data", e);
                    throw (InternalError);
                }
            }

            finally
            {
                EndWebmethod();
            }

            ExitProc();

            return;
        }


        [WebMethod]
        public void InboundOrderCompleted(string ChannelId, string ChannelRef, string TransactionId, InboundOrderCompletedDoc aInboundOrderCompletedDoc)
        {
            EnterProc();

            InboundOrderCompletedInsert aInboundOrderCompletedHandler;

            try
            {
                MessageTransaction mt = BeginWebmethod(ChannelId, ChannelRef, TransactionId, "IOC");

                try
                {
                    aInboundOrderCompletedHandler = new InboundOrderCompletedInsert(this);
                }
                catch (Exception e)
                {
                    Exception InternalError = new Exception("InternalError: Building insert handler", e);
                    throw (InternalError);
                }

                try
                {
                    if (aInboundOrderCompletedDoc == null)
                    {
                        Exception InternalError = new Exception("DataError: Root object cannot be null");
                        throw (InternalError);
                    }
                    aInboundOrderCompletedHandler.Process(ref mt, null, aInboundOrderCompletedDoc);
                    GetDataBase().Commit();
                }
                catch (Exception e)
                {
                    try
                    {
                        GetDataBase().Rollback();
                    }
                    catch (Exception)
                    { }
                    Exception InternalError = new Exception("DataError: Error processing data", e);
                    throw (InternalError);
                }
            }

            finally
            {
                EndWebmethod();
            }

            ExitProc();

            return;
        }
    }
}
