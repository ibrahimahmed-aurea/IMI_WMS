/*
  File           : WebServiceSend.cs

  Description    : Wrapper class for Oracle package WebServiceSend.
                   This code was generated, do not edit.

*/
#define ODP_NET
using System;
using System.Data;
#if ODP_NET
using Oracle.DataAccess.Client;
#else
using System.Data.OracleClient;
#endif
using Imi.Framework.Job.Data;

namespace Imi.SupplyChain.Server.Job.WebServiceSendMAPI.PLSQLInterface
{
    public class DbWebServiceSend
    {
        private IDbConnectionProvider connectionProvider;

        public string _Debug()
        {
            return "Package        : WebServiceSend\r\n" +
              "Generated on   : 2005-09-02 10:56:22\r\n" +
              "Generated by   : IMINT1\\olla@IMIPC1091\r\n" +
              "Generated in   : C:\\TEMP\\wscc\r\n";
        }

        public DbWebServiceSend(IDbConnectionProvider connectionProvider)
        {
            this.connectionProvider = connectionProvider;
        }

        private IDbCommand sp_ModifyError;
        private IDbCommand sp_ModifySend;
        private IDbCommand sp_GetMAPIOUTCur;
        private IDbCommand currentCommand;
        private object syncLock = new object();
        // ----------------------------------------------------------------------------

        // ----------------------------------------------------------------------------

        private void CreateSP_ModifyError()
        {
            IDbDataParameter p;

            sp_ModifyError = connectionProvider.GetConnection().CreateCommand();
            sp_ModifyError.CommandText = "MAPIOUT_CONFIG.MODIFY_ERROR";
            sp_ModifyError.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
            ((OracleCommand)sp_ModifyError).BindByName = true;
#endif


            p = sp_ModifyError.CreateParameter();
            p.ParameterName = "MAPI_OUT_ID_I";
            p.DbType = DbType.String;
            p.Size = 255;
            p.Direction = ParameterDirection.Input;
            sp_ModifyError.Parameters.Add(p);

            p = sp_ModifyError.CreateParameter();
            p.ParameterName = "FIRSTSNDDTM_I";
            p.DbType = DbType.DateTime;
            p.Direction = ParameterDirection.Input;
            sp_ModifyError.Parameters.Add(p);

            p = sp_ModifyError.CreateParameter();
            p.ParameterName = "SNDERRCODE_I";
            p.DbType = DbType.String;
            p.Size = 255;
            p.Direction = ParameterDirection.Input;
            sp_ModifyError.Parameters.Add(p);

            p = sp_ModifyError.CreateParameter();
            p.ParameterName = "SNDERRMSG_I";
            p.DbType = DbType.String;
            p.Size = 255;
            p.Direction = ParameterDirection.Input;
            sp_ModifyError.Parameters.Add(p);

            p = sp_ModifyError.CreateParameter();
            p.ParameterName = "ALMID_O";
            p.DbType = DbType.String;
            p.Size = 255;
            p.Direction = ParameterDirection.Output;
            sp_ModifyError.Parameters.Add(p);
        }

        private void CreateSP_Modify()
        {
            IDbDataParameter p;

            sp_ModifySend = connectionProvider.GetConnection().CreateCommand();
            sp_ModifySend.CommandText = "MAPIOUT_CONFIG.MODIFY";
            sp_ModifySend.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
            ((OracleCommand)sp_ModifySend).BindByName = true;
#endif


            p = sp_ModifySend.CreateParameter();
            p.ParameterName = "MAPI_OUT_ID_I";
            p.DbType = DbType.String;
            p.Size = 14;
            p.Direction = ParameterDirection.Input;
            sp_ModifySend.Parameters.Add(p);

            p = sp_ModifySend.CreateParameter();
            p.ParameterName = "FIRSTSNDDTM_I";
            p.DbType = DbType.DateTime;
            p.Direction = ParameterDirection.Input;
            sp_ModifySend.Parameters.Add(p);

            p = sp_ModifySend.CreateParameter();
            p.ParameterName = "ALMID_O";
            p.DbType = DbType.String;
            p.Size = 35;
            p.Direction = ParameterDirection.Output;
            sp_ModifySend.Parameters.Add(p);
        }

        private void CreateSP_GetMAPIOUTCur()
        {
            sp_GetMAPIOUTCur = connectionProvider.GetConnection().CreateCommand();
            sp_GetMAPIOUTCur.CommandText = "MAPIOUT_CONFIG.GET_MAPI_OUT_CUR";
            sp_GetMAPIOUTCur.CommandType = System.Data.CommandType.StoredProcedure;
#if ODP_NET
            ((OracleCommand)sp_GetMAPIOUTCur).BindByName = true;
#endif


            OracleParameter oP = sp_GetMAPIOUTCur.CreateParameter() as OracleParameter;
            oP.ParameterName = "MAPI_OUT_Cur_O";
#if ODP_NET
            oP.OracleDbType = OracleDbType.RefCursor;
#else
            oP.OracleType = OracleType.Cursor;
#endif
            oP.Direction = ParameterDirection.Output;
            sp_GetMAPIOUTCur.Parameters.Add(oP);
        }

        // ----------------------------------------------------------------------------

        public void ModifyError(string MAPI_OUT_ID_I,
                                Nullable<DateTime> FIRSTSNDDTM_I,
                                string SNDERRCODE_I,
                                string SNDERRMSG_I,
                                ref string ALMID_O)
        {
            if (sp_ModifyError == null)
                CreateSP_ModifyError();

            sp_ModifyError.Transaction = connectionProvider.CurrentTransaction;

            lock (syncLock)
            {
                currentCommand = sp_ModifyError;
            }

            // Set In Parameters
            
            if (String.IsNullOrEmpty(MAPI_OUT_ID_I))
                (sp_ModifyError.Parameters["MAPI_OUT_ID_I"] as IDbDataParameter).Value = DBNull.Value;
            else
                (sp_ModifyError.Parameters["MAPI_OUT_ID_I"] as IDbDataParameter).Value = MAPI_OUT_ID_I;

            if (FIRSTSNDDTM_I == null)
                (sp_ModifyError.Parameters["FIRSTSNDDTM_I"] as IDbDataParameter).Value = DBNull.Value;
            else
                (sp_ModifyError.Parameters["FIRSTSNDDTM_I"] as IDbDataParameter).Value = FIRSTSNDDTM_I;

            if (String.IsNullOrEmpty(SNDERRCODE_I))
                (sp_ModifyError.Parameters["SNDERRCODE_I"] as IDbDataParameter).Value = DBNull.Value;
            else
                (sp_ModifyError.Parameters["SNDERRCODE_I"] as IDbDataParameter).Value = SNDERRCODE_I;

            if (String.IsNullOrEmpty(SNDERRMSG_I))
                (sp_ModifyError.Parameters["SNDERRMSG_I"] as IDbDataParameter).Value = DBNull.Value;
            else
                (sp_ModifyError.Parameters["SNDERRMSG_I"] as IDbDataParameter).Value = SNDERRMSG_I;

            // Execute stored procedure

            sp_ModifyError.Prepare();
            sp_ModifyError.ExecuteNonQuery();

            // Set Out Parameters

            if ((sp_ModifyError.Parameters["ALMID_O"] as IDbDataParameter).Value == DBNull.Value)
                ALMID_O = "";
            else
                ALMID_O = (sp_ModifyError.Parameters["ALMID_O"] as IDbDataParameter).Value.ToString();
        }

        public void Modify(string MAPI_OUT_ID_I,
                           Nullable<DateTime> FIRSTSNDDTM_I,
                           ref string ALMID_O)
        {
            if (sp_ModifySend == null)
                CreateSP_Modify();

            sp_ModifySend.Transaction = connectionProvider.CurrentTransaction;

            lock (syncLock)
            {
                currentCommand = sp_ModifySend;
            }

            // Set In Parameters

            if (String.IsNullOrEmpty(MAPI_OUT_ID_I))
                (sp_ModifySend.Parameters["MAPI_OUT_ID_I"] as IDbDataParameter).Value = DBNull.Value;
            else
                (sp_ModifySend.Parameters["MAPI_OUT_ID_I"] as IDbDataParameter).Value = MAPI_OUT_ID_I;

            if (FIRSTSNDDTM_I == null)
                (sp_ModifySend.Parameters["FIRSTSNDDTM_I"] as IDbDataParameter).Value = DBNull.Value;
            else
                (sp_ModifySend.Parameters["FIRSTSNDDTM_I"] as IDbDataParameter).Value = FIRSTSNDDTM_I;

            // Execute stored procedure

            sp_ModifySend.Prepare();
            sp_ModifySend.ExecuteNonQuery();

            // Set Out Parameters

            if ((sp_ModifySend.Parameters["ALMID_O"] as IDbDataParameter).Value == DBNull.Value)
                ALMID_O = "";
            else
                ALMID_O = (sp_ModifySend.Parameters["ALMID_O"] as IDbDataParameter).Value.ToString();
        }

        public IDataReader GetMAPIOUTCur()
        {// Get_MAPI_OUT_Cur
            if (sp_GetMAPIOUTCur == null)
                CreateSP_GetMAPIOUTCur();

            sp_GetMAPIOUTCur.Transaction = connectionProvider.CurrentTransaction; 

            lock (syncLock)
            {
                currentCommand = sp_GetMAPIOUTCur;
            }

            // Set In Parameters

            // Execute stored procedure

            sp_GetMAPIOUTCur.Prepare();
            IDataReader r = sp_GetMAPIOUTCur.ExecuteReader();

            return r;
        }

        public void Cancel()
        {
            lock (syncLock)
            {
                if (currentCommand != null)
                {
                    if (currentCommand.Connection != null)
                    {
                        if (currentCommand.Connection.State != ConnectionState.Closed)
                        {
                            currentCommand.Cancel();
                        }
                    }
                }
            }
        }

    }
}
