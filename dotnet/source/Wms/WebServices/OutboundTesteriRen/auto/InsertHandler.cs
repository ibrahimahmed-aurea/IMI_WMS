/*
  File           : 

  Description    : Internal classes for inserting inbound data into queue tables.

 * 061221 olla dotnet2.0 conversion

*/
using System;
using System.Text;
using System.Data;
using System.Data.Common;

namespace Imi.Wms.WebServices.ExternalInterface
{
    public class InsertHandler
    {
        public string _Debug()
        {
            return "Generated on   : 2005-09-21 20:25:50\r\n" +
                   "Generated by   : IMINT1\\olla@IMIPC1091\r\n" +
                   "Generated in   : C:\\project\\views\\olla_temp_ss\\client\\C#\\wscc\r\n";
        }
    }

    public class BalanceAnswerLineInsert : SegmentImpl
    {

        public BalanceAnswerLineInsert(WSBase owner)
            : base(owner)
        {
            StringBuilder s = new StringBuilder("insert into EXT2_BALANCE_ANSWER ( ");
            s.Append(" HAPIRCV_ID");
            s.Append(",OPCODE");
            s.Append(",LastBalanceAnswer");
            s.Append(",WarehouseIdentity");
            s.Append(",OwnerIdentity");
            s.Append(",ClientIdentity");
            s.Append(",ProductNumber");
            s.Append(",ProductionLotIdentity");
            s.Append(",ProductionSubLotIdentity");
            s.Append(",MarketingLotIdentity");
            s.Append(",QualityLotIdentity");
            s.Append(",PackageIdentity");
            s.Append(",InventoryStatusCode");
            s.Append(",FreeQuantity");
            s.Append(",PickLocationQuantity");
            s.Append(",ReservedForReplenQuantity");
            s.Append(",PickedQuantity");
            s.Append(",TopickQuantity");
            s.Append(",CustomerReservedQuantity");
            s.Append(",MessageNumber");

            s.Append(" ) values ( ");

            s.Append(" :HAPIRCV_ID");
            s.Append(",:OPCODE");
            s.Append(",:LastBalanceAnswer");
            s.Append(",:WarehouseIdentity");
            s.Append(",:OwnerIdentity");
            s.Append(",:ClientIdentity");
            s.Append(",:ProductNumber");
            s.Append(",:ProductionLotIdentity");
            s.Append(",:ProductionSubLotIdentity");
            s.Append(",:MarketingLotIdentity");
            s.Append(",:QualityLotIdentity");
            s.Append(",:PackageIdentity");
            s.Append(",:InventoryStatusCode");
            s.Append(",:FreeQuantity");
            s.Append(",:PickLocationQuantity");
            s.Append(",:ReservedForReplenQuantity");
            s.Append(",:PickedQuantity");
            s.Append(",:TopickQuantity");
            s.Append(",:CustomerReservedQuantity");
            s.Append(",:MessageNumber");

            s.Append(" )");

            fStmt.CommandText = s.ToString();

            fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
            fStmt.Parameters.Add(StringParam("OPCODE", 1));
            fStmt.Parameters.Add(StringParam("LastBalanceAnswer", 1));
            fStmt.Parameters.Add(StringParam("WarehouseIdentity", 4));
            fStmt.Parameters.Add(StringParam("OwnerIdentity", 35));
            fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
            fStmt.Parameters.Add(StringParam("ProductNumber", 35));
            fStmt.Parameters.Add(StringParam("ProductionLotIdentity", 40));
            fStmt.Parameters.Add(StringParam("ProductionSubLotIdentity", 40));
            fStmt.Parameters.Add(StringParam("MarketingLotIdentity", 20));
            fStmt.Parameters.Add(StringParam("QualityLotIdentity", 20));
            fStmt.Parameters.Add(StringParam("PackageIdentity", 17));
            fStmt.Parameters.Add(StringParam("InventoryStatusCode", 8));
            fStmt.Parameters.Add(NumberParam("FreeQuantity", 20, 6));
            fStmt.Parameters.Add(NumberParam("PickLocationQuantity", 20, 6));
            fStmt.Parameters.Add(NumberParam("ReservedForReplenQuantity", 20, 6));
            fStmt.Parameters.Add(NumberParam("PickedQuantity", 20, 6));
            fStmt.Parameters.Add(NumberParam("TopickQuantity", 20, 6));
            fStmt.Parameters.Add(NumberParam("CustomerReservedQuantity", 20, 6));
            fStmt.Parameters.Add(NumberParam("MessageNumber", 14, 0));

            fStmt.Prepare();

        }

        public void Process(ref MessageTransaction trans, SegmentImpl parent, BalanceAnswerLineDoc p)
        {
            if (p == null)
            {
                // this is useful for testing calls without sending data
                return;
            }

            (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

            if (p.OPCODE != null)
            {
                if (p.OPCODE.Length > 1)
                    throw (new Exception("Value for BalanceAnswerLineDoc.OPCODE too long, max 1 chars"));

                if (p.OPCODE.Length == 0)
                    throw (new Exception("Zero length for mandatory parameter BalanceAnswerLineDoc.OPCODE not allowed"));

                (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
            }
            else
                throw (new Exception("Null value for mandatory parameter BalanceAnswerLineDoc.OPCODE not allowed"));


            if (p.LastBalanceAnswer != null)
            {
                if (p.LastBalanceAnswer.Length > 1)
                    throw (new Exception("Value for BalanceAnswerLineDoc.LastBalanceAnswer too long, max 1 chars"));

                (fStmt.Parameters["LastBalanceAnswer"] as IDbDataParameter).Value = p.LastBalanceAnswer;
            }
            else
                (fStmt.Parameters["LastBalanceAnswer"] as IDbDataParameter).Value = DBNull.Value;

            if (p.WarehouseIdentity != null)
            {
                if (p.WarehouseIdentity.Length > 4)
                    throw (new Exception("Value for BalanceAnswerLineDoc.WarehouseIdentity too long, max 4 chars"));

                (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = p.WarehouseIdentity;
            }
            else
                (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.OwnerIdentity != null)
            {
                if (p.OwnerIdentity.Length > 35)
                    throw (new Exception("Value for BalanceAnswerLineDoc.OwnerIdentity too long, max 35 chars"));

                (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = p.OwnerIdentity;
            }
            else
                (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = DBNull.Value;

            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

            if (p.ProductNumber != null)
            {
                if (p.ProductNumber.Length > 35)
                    throw (new Exception("Value for BalanceAnswerLineDoc.ProductNumber too long, max 35 chars"));

                (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
            }
            else
                (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductionLotIdentity != null)
            {
                if (p.ProductionLotIdentity.Length > 40)
                    throw (new Exception("Value for BalanceAnswerLineDoc.ProductionLotIdentity too long, max 40 chars"));

                (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = p.ProductionLotIdentity;
            }
            else
                (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductionSubLotIdentity != null)
            {
                if (p.ProductionSubLotIdentity.Length > 40)
                    throw (new Exception("Value for BalanceAnswerLineDoc.ProductionSubLotIdentity too long, max 40 chars"));

                (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = p.ProductionSubLotIdentity;
            }
            else
                (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.MarketingLotIdentity != null)
            {
                if (p.MarketingLotIdentity.Length > 20)
                    throw (new Exception("Value for BalanceAnswerLineDoc.MarketingLotIdentity too long, max 20 chars"));

                (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = p.MarketingLotIdentity;
            }
            else
                (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.QualityLotIdentity != null)
            {
                if (p.QualityLotIdentity.Length > 20)
                    throw (new Exception("Value for BalanceAnswerLineDoc.QualityLotIdentity too long, max 20 chars"));

                (fStmt.Parameters["QualityLotIdentity"] as IDbDataParameter).Value = p.QualityLotIdentity;
            }
            else
                (fStmt.Parameters["QualityLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PackageIdentity != null)
            {
                if (p.PackageIdentity.Length > 17)
                    throw (new Exception("Value for BalanceAnswerLineDoc.PackageIdentity too long, max 17 chars"));

                (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
            }
            else
                (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.InventoryStatusCode != null)
            {
                if (p.InventoryStatusCode.Length > 8)
                    throw (new Exception("Value for BalanceAnswerLineDoc.InventoryStatusCode too long, max 8 chars"));

                (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = p.InventoryStatusCode;
            }
            else
                (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = DBNull.Value;

            if (p.FreeQuantity != null)
            {
                (fStmt.Parameters["FreeQuantity"] as IDbDataParameter).Value = p.FreeQuantity.Value;
            }
            else
                (fStmt.Parameters["FreeQuantity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PickLocationQuantity != null)
            {
                (fStmt.Parameters["PickLocationQuantity"] as IDbDataParameter).Value = p.PickLocationQuantity.Value;
            }
            else
                (fStmt.Parameters["PickLocationQuantity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ReservedForReplenQuantity != null)
            {
                (fStmt.Parameters["ReservedForReplenQuantity"] as IDbDataParameter).Value = p.ReservedForReplenQuantity.Value;
            }
            else
                (fStmt.Parameters["ReservedForReplenQuantity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PickedQuantity != null)
            {
                (fStmt.Parameters["PickedQuantity"] as IDbDataParameter).Value = p.PickedQuantity.Value;
            }
            else
                (fStmt.Parameters["PickedQuantity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.TopickQuantity != null)
            {
                (fStmt.Parameters["TopickQuantity"] as IDbDataParameter).Value = p.TopickQuantity.Value;
            }
            else
                (fStmt.Parameters["TopickQuantity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReservedQuantity != null)
            {
                (fStmt.Parameters["CustomerReservedQuantity"] as IDbDataParameter).Value = p.CustomerReservedQuantity.Value;
            }
            else
                (fStmt.Parameters["CustomerReservedQuantity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.MessageNumber != null)
            {
                (fStmt.Parameters["MessageNumber"] as IDbDataParameter).Value = p.MessageNumber.Value;
            }
            else
                (fStmt.Parameters["MessageNumber"] as IDbDataParameter).Value = DBNull.Value;

            trans.HapiTransSeq++;

            fStmt.ExecuteNonQuery();

        }
    }

    public class DeliveryReceiptHeadInsert : SegmentImpl
    {
        private DeliveryReceiptLineInsert aDeliveryReceiptLineInsert;

        public DeliveryReceiptHeadInsert(WSBase owner)
            : base(owner)
        {
            StringBuilder s = new StringBuilder("insert into EXT2_DLVRY_RECEIPT_HEAD ( ");
            s.Append(" HAPIRCV_ID");
            s.Append(",OPCODE");
            s.Append(",ClientIdentity");
            s.Append(",DeliveryIdentity");
            s.Append(",ArrivalDateTime");
            s.Append(",WarehouseIdentity");
            s.Append(",EmployeeIdentity");
            s.Append(",ReceiveType");
            s.Append(",PackingSlipNumber");
            s.Append(",BillOfLadingNumber");
            s.Append(",VehicleIdentity");

            s.Append(" ) values ( ");

            s.Append(" :HAPIRCV_ID");
            s.Append(",:OPCODE");
            s.Append(",:ClientIdentity");
            s.Append(",:DeliveryIdentity");
            s.Append(",:ArrivalDateTime");
            s.Append(",:WarehouseIdentity");
            s.Append(",:EmployeeIdentity");
            s.Append(",:ReceiveType");
            s.Append(",:PackingSlipNumber");
            s.Append(",:BillOfLadingNumber");
            s.Append(",:VehicleIdentity");

            s.Append(" )");

            fStmt.CommandText = s.ToString();

            fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
            fStmt.Parameters.Add(StringParam("OPCODE", 1));
            fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
            fStmt.Parameters.Add(NumberParam("DeliveryIdentity", 8, 0));
            fStmt.Parameters.Add(DateParam("ArrivalDateTime"));
            fStmt.Parameters.Add(StringParam("WarehouseIdentity", 4));
            fStmt.Parameters.Add(StringParam("EmployeeIdentity", 8));
            fStmt.Parameters.Add(StringParam("ReceiveType", 2));
            fStmt.Parameters.Add(StringParam("PackingSlipNumber", 35));
            fStmt.Parameters.Add(StringParam("BillOfLadingNumber", 35));
            fStmt.Parameters.Add(StringParam("VehicleIdentity", 17));

            fStmt.Prepare();

            aDeliveryReceiptLineInsert = new DeliveryReceiptLineInsert(owner);
        }

        public void Process(ref MessageTransaction trans, SegmentImpl parent, DeliveryReceiptHeadDoc p)
        {
            if (p == null)
            {
                // this is useful for testing calls without sending data
                return;
            }

            (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

            if (p.OPCODE != null)
            {
                if (p.OPCODE.Length > 1)
                    throw (new Exception("Value for DeliveryReceiptHeadDoc.OPCODE too long, max 1 chars"));

                if (p.OPCODE.Length == 0)
                    throw (new Exception("Zero length for mandatory parameter DeliveryReceiptHeadDoc.OPCODE not allowed"));

                (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
            }
            else
                throw (new Exception("Null value for mandatory parameter DeliveryReceiptHeadDoc.OPCODE not allowed"));


            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

            if (p.DeliveryIdentity != null)
            {
                (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = p.DeliveryIdentity.Value;
            }
            else
                (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ArrivalDateTime != null)
            {
                (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = p.ArrivalDateTime.Value;
            }
            else
                (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = DBNull.Value;

            if (p.WarehouseIdentity != null)
            {
                if (p.WarehouseIdentity.Length > 4)
                    throw (new Exception("Value for DeliveryReceiptHeadDoc.WarehouseIdentity too long, max 4 chars"));

                (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = p.WarehouseIdentity;
            }
            else
                (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.EmployeeIdentity != null)
            {
                if (p.EmployeeIdentity.Length > 8)
                    throw (new Exception("Value for DeliveryReceiptHeadDoc.EmployeeIdentity too long, max 8 chars"));

                (fStmt.Parameters["EmployeeIdentity"] as IDbDataParameter).Value = p.EmployeeIdentity;
            }
            else
                (fStmt.Parameters["EmployeeIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ReceiveType != null)
            {
                if (p.ReceiveType.Length > 2)
                    throw (new Exception("Value for DeliveryReceiptHeadDoc.ReceiveType too long, max 2 chars"));

                (fStmt.Parameters["ReceiveType"] as IDbDataParameter).Value = p.ReceiveType;
            }
            else
                (fStmt.Parameters["ReceiveType"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PackingSlipNumber != null)
            {
                if (p.PackingSlipNumber.Length > 35)
                    throw (new Exception("Value for DeliveryReceiptHeadDoc.PackingSlipNumber too long, max 35 chars"));

                (fStmt.Parameters["PackingSlipNumber"] as IDbDataParameter).Value = p.PackingSlipNumber;
            }
            else
                (fStmt.Parameters["PackingSlipNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.BillOfLadingNumber != null)
            {
                if (p.BillOfLadingNumber.Length > 35)
                    throw (new Exception("Value for DeliveryReceiptHeadDoc.BillOfLadingNumber too long, max 35 chars"));

                (fStmt.Parameters["BillOfLadingNumber"] as IDbDataParameter).Value = p.BillOfLadingNumber;
            }
            else
                (fStmt.Parameters["BillOfLadingNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.VehicleIdentity != null)
            {
                if (p.VehicleIdentity.Length > 17)
                    throw (new Exception("Value for DeliveryReceiptHeadDoc.VehicleIdentity too long, max 17 chars"));

                (fStmt.Parameters["VehicleIdentity"] as IDbDataParameter).Value = p.VehicleIdentity;
            }
            else
                (fStmt.Parameters["VehicleIdentity"] as IDbDataParameter).Value = DBNull.Value;

            trans.HapiTransSeq++;

            fStmt.ExecuteNonQuery();

            if (p.aDeliveryReceiptLineDocs != null)
                foreach (DeliveryReceiptLineDoc c in p.aDeliveryReceiptLineDocs)
                    aDeliveryReceiptLineInsert.Process(ref trans, this, c);
        }
    }

    public class DeliveryReceiptLineInsert : SegmentImpl
    {
        private DeliveryReceiptPackingMaterialInsert aDeliveryReceiptPackingMaterialInsert;

        public DeliveryReceiptLineInsert(WSBase owner)
            : base(owner)
        {
            StringBuilder s = new StringBuilder("insert into EXT2_DLVRY_RECEIPT_LINE ( ");
            s.Append(" HAPIRCV_ID");
            s.Append(",OPCODE");
            s.Append(",InventoryStatusCode");
            s.Append(",PurchaseOrderLineSequence");
            s.Append(",PurchaseOrderType");
            s.Append(",CustomerOrderNumber");
            s.Append(",CustomerOrderSequence");
            s.Append(",CustomerOrderLinePosition");
            s.Append(",CustomerOrderLineKitPosition");
            s.Append(",CustomerOrderLineSequence");
            s.Append(",DespatchadvicenoticeIdentity");
            s.Append(",ItemLoadIdentity");
            s.Append(",ExpiryDate");
            s.Append(",ReturnsFinished");
            s.Append(",DecidedActionCode");
            s.Append(",FromPartyId");
            s.Append(",FromPartyQualifier");
            s.Append(",CustomerReturnOrderNumber");
            s.Append(",CustomerReturnOrderSequence");
            s.Append(",CustomerReturnOrderLinePos");
            s.Append(",CustomerReturnOrderLineKitPos");
            s.Append(",CustomerReturnOrderLineSeq");
            s.Append(",DiscrepancyCode");
            s.Append(",DiscrepancyActionCode");
            s.Append(",ManufacturingDate");
            s.Append(",MeasureQualifier");
            s.Append(",ClientIdentity");
            s.Append(",DeliveryIdentity");
            s.Append(",DeliveryidentityLine");
            s.Append(",ArrivalDateTime");
            s.Append(",ProductIdentity");
            s.Append(",PackageIdentity");
            s.Append(",DeliveredQuantity");
            s.Append(",MeasuredQuantity");
            s.Append(",ProductionLotIdentity");
            s.Append(",ProductionSubLotIdentity");
            s.Append(",MarketingLotIdentity");
            s.Append(",QualityLotIdentity");
            s.Append(",PurchaseOrderNumber");
            s.Append(",PurchaseOrderSequence");
            s.Append(",PurchaseOrderLinePosition");

            s.Append(" ) values ( ");

            s.Append(" :HAPIRCV_ID");
            s.Append(",:OPCODE");
            s.Append(",:InventoryStatusCode");
            s.Append(",:PurchaseOrderLineSequence");
            s.Append(",:PurchaseOrderType");
            s.Append(",:CustomerOrderNumber");
            s.Append(",:CustomerOrderSequence");
            s.Append(",:CustomerOrderLinePosition");
            s.Append(",:CustomerOrderLineKitPosition");
            s.Append(",:CustomerOrderLineSequence");
            s.Append(",:DespatchadvicenoticeIdentity");
            s.Append(",:ItemLoadIdentity");
            s.Append(",:ExpiryDate");
            s.Append(",:ReturnsFinished");
            s.Append(",:DecidedActionCode");
            s.Append(",:FromPartyId");
            s.Append(",:FromPartyQualifier");
            s.Append(",:CustomerReturnOrderNumber");
            s.Append(",:CustomerReturnOrderSequence");
            s.Append(",:CustomerReturnOrderLinePos");
            s.Append(",:CustomerReturnOrderLineKitPos");
            s.Append(",:CustomerReturnOrderLineSeq");
            s.Append(",:DiscrepancyCode");
            s.Append(",:DiscrepancyActionCode");
            s.Append(",:ManufacturingDate");
            s.Append(",:MeasureQualifier");
            s.Append(",:ClientIdentity");
            s.Append(",:DeliveryIdentity");
            s.Append(",:DeliveryidentityLine");
            s.Append(",:ArrivalDateTime");
            s.Append(",:ProductIdentity");
            s.Append(",:PackageIdentity");
            s.Append(",:DeliveredQuantity");
            s.Append(",:MeasuredQuantity");
            s.Append(",:ProductionLotIdentity");
            s.Append(",:ProductionSubLotIdentity");
            s.Append(",:MarketingLotIdentity");
            s.Append(",:QualityLotIdentity");
            s.Append(",:PurchaseOrderNumber");
            s.Append(",:PurchaseOrderSequence");
            s.Append(",:PurchaseOrderLinePosition");

            s.Append(" )");

            fStmt.CommandText = s.ToString();

            fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
            fStmt.Parameters.Add(StringParam("OPCODE", 1));
            fStmt.Parameters.Add(StringParam("InventoryStatusCode", 8));
            fStmt.Parameters.Add(NumberParam("PurchaseOrderLineSequence", 3, 0));
            fStmt.Parameters.Add(StringParam("PurchaseOrderType", 2));
            fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
            fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
            fStmt.Parameters.Add(NumberParam("CustomerOrderLinePosition", 5, 0));
            fStmt.Parameters.Add(NumberParam("CustomerOrderLineKitPosition", 2, 0));
            fStmt.Parameters.Add(NumberParam("CustomerOrderLineSequence", 3, 0));
            fStmt.Parameters.Add(StringParam("DespatchadvicenoticeIdentity", 35));
            fStmt.Parameters.Add(StringParam("ItemLoadIdentity", 35));
            fStmt.Parameters.Add(DateParam("ExpiryDate"));
            fStmt.Parameters.Add(StringParam("ReturnsFinished", 1));
            fStmt.Parameters.Add(StringParam("DecidedActionCode", 2));
            fStmt.Parameters.Add(StringParam("FromPartyId", 35));
            fStmt.Parameters.Add(StringParam("FromPartyQualifier", 3));
            fStmt.Parameters.Add(StringParam("CustomerReturnOrderNumber", 35));
            fStmt.Parameters.Add(NumberParam("CustomerReturnOrderSequence", 3, 0));
            fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLinePos", 5, 0));
            fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineKitPos", 2, 0));
            fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineSeq", 3, 0));
            fStmt.Parameters.Add(StringParam("DiscrepancyCode", 3));
            fStmt.Parameters.Add(StringParam("DiscrepancyActionCode", 2));
            fStmt.Parameters.Add(DateParam("ManufacturingDate"));
            fStmt.Parameters.Add(StringParam("MeasureQualifier", 4));
            fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
            fStmt.Parameters.Add(NumberParam("DeliveryIdentity", 8, 0));
            fStmt.Parameters.Add(NumberParam("DeliveryidentityLine", 5, 0));
            fStmt.Parameters.Add(DateParam("ArrivalDateTime"));
            fStmt.Parameters.Add(StringParam("ProductIdentity", 35));
            fStmt.Parameters.Add(StringParam("PackageIdentity", 17));
            fStmt.Parameters.Add(NumberParam("DeliveredQuantity", 20, 6));
            fStmt.Parameters.Add(NumberParam("MeasuredQuantity", 20, 6));
            fStmt.Parameters.Add(StringParam("ProductionLotIdentity", 40));
            fStmt.Parameters.Add(StringParam("ProductionSubLotIdentity", 40));
            fStmt.Parameters.Add(StringParam("MarketingLotIdentity", 20));
            fStmt.Parameters.Add(StringParam("QualityLotIdentity", 20));
            fStmt.Parameters.Add(StringParam("PurchaseOrderNumber", 35));
            fStmt.Parameters.Add(NumberParam("PurchaseOrderSequence", 3, 0));
            fStmt.Parameters.Add(NumberParam("PurchaseOrderLinePosition", 4, 0));

            fStmt.Prepare();

            aDeliveryReceiptPackingMaterialInsert = new DeliveryReceiptPackingMaterialInsert(owner);
        }

        public void Process(ref MessageTransaction trans, SegmentImpl parent, DeliveryReceiptLineDoc p)
        {
            if (p == null)
            {
                // this is useful for testing calls without sending data
                return;
            }

            (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

            if (p.OPCODE != null)
            {
                if (p.OPCODE.Length > 1)
                    throw (new Exception("Value for DeliveryReceiptLineDoc.OPCODE too long, max 1 chars"));

                if (p.OPCODE.Length == 0)
                    throw (new Exception("Zero length for mandatory parameter DeliveryReceiptLineDoc.OPCODE not allowed"));

                (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
            }
            else
                throw (new Exception("Null value for mandatory parameter DeliveryReceiptLineDoc.OPCODE not allowed"));


            if (p.InventoryStatusCode != null)
            {
                if (p.InventoryStatusCode.Length > 8)
                    throw (new Exception("Value for DeliveryReceiptLineDoc.InventoryStatusCode too long, max 8 chars"));

                (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = p.InventoryStatusCode;
            }
            else
                (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PurchaseOrderLineSequence != null)
            {
                (fStmt.Parameters["PurchaseOrderLineSequence"] as IDbDataParameter).Value = p.PurchaseOrderLineSequence.Value;
            }
            else
                (fStmt.Parameters["PurchaseOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PurchaseOrderType != null)
            {
                if (p.PurchaseOrderType.Length > 2)
                    throw (new Exception("Value for DeliveryReceiptLineDoc.PurchaseOrderType too long, max 2 chars"));

                (fStmt.Parameters["PurchaseOrderType"] as IDbDataParameter).Value = p.PurchaseOrderType;
            }
            else
                (fStmt.Parameters["PurchaseOrderType"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderNumber != null)
            {
                if (p.CustomerOrderNumber.Length > 35)
                    throw (new Exception("Value for DeliveryReceiptLineDoc.CustomerOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
            }
            else
                (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderSequence != null)
            {
                (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderLinePosition != null)
            {
                (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = p.CustomerOrderLinePosition.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderLineKitPosition != null)
            {
                (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = p.CustomerOrderLineKitPosition.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderLineSequence != null)
            {
                (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = p.CustomerOrderLineSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.DespatchadvicenoticeIdentity != null)
            {
                if (p.DespatchadvicenoticeIdentity.Length > 35)
                    throw (new Exception("Value for DeliveryReceiptLineDoc.DespatchadvicenoticeIdentity too long, max 35 chars"));

                (fStmt.Parameters["DespatchadvicenoticeIdentity"] as IDbDataParameter).Value = p.DespatchadvicenoticeIdentity;
            }
            else
                (fStmt.Parameters["DespatchadvicenoticeIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ItemLoadIdentity != null)
            {
                if (p.ItemLoadIdentity.Length > 35)
                    throw (new Exception("Value for DeliveryReceiptLineDoc.ItemLoadIdentity too long, max 35 chars"));

                (fStmt.Parameters["ItemLoadIdentity"] as IDbDataParameter).Value = p.ItemLoadIdentity;
            }
            else
                (fStmt.Parameters["ItemLoadIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ExpiryDate != null)
            {
                (fStmt.Parameters["ExpiryDate"] as IDbDataParameter).Value = p.ExpiryDate.Value;
            }
            else
                (fStmt.Parameters["ExpiryDate"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ReturnsFinished != null)
            {
                if (p.ReturnsFinished.Length > 1)
                    throw (new Exception("Value for DeliveryReceiptLineDoc.ReturnsFinished too long, max 1 chars"));

                (fStmt.Parameters["ReturnsFinished"] as IDbDataParameter).Value = p.ReturnsFinished;
            }
            else
                (fStmt.Parameters["ReturnsFinished"] as IDbDataParameter).Value = DBNull.Value;

            if (p.DecidedActionCode != null)
            {
                if (p.DecidedActionCode.Length > 2)
                    throw (new Exception("Value for DeliveryReceiptLineDoc.DecidedActionCode too long, max 2 chars"));

                (fStmt.Parameters["DecidedActionCode"] as IDbDataParameter).Value = p.DecidedActionCode;
            }
            else
                (fStmt.Parameters["DecidedActionCode"] as IDbDataParameter).Value = DBNull.Value;

            if (p.FromPartyId != null)
            {
                if (p.FromPartyId.Length > 35)
                    throw (new Exception("Value for DeliveryReceiptLineDoc.FromPartyId too long, max 35 chars"));

                (fStmt.Parameters["FromPartyId"] as IDbDataParameter).Value = p.FromPartyId;
            }
            else
                (fStmt.Parameters["FromPartyId"] as IDbDataParameter).Value = DBNull.Value;

            if (p.FromPartyQualifier != null)
            {
                if (p.FromPartyQualifier.Length > 3)
                    throw (new Exception("Value for DeliveryReceiptLineDoc.FromPartyQualifier too long, max 3 chars"));

                (fStmt.Parameters["FromPartyQualifier"] as IDbDataParameter).Value = p.FromPartyQualifier;
            }
            else
                (fStmt.Parameters["FromPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderNumber != null)
            {
                if (p.CustomerReturnOrderNumber.Length > 35)
                    throw (new Exception("Value for DeliveryReceiptLineDoc.CustomerReturnOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = p.CustomerReturnOrderNumber;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderSequence != null)
            {
                (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = p.CustomerReturnOrderSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderLinePos != null)
            {
                (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = p.CustomerReturnOrderLinePos.Value;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderLineKitPos != null)
            {
                (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = p.CustomerReturnOrderLineKitPos.Value;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderLineSeq != null)
            {
                (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = p.CustomerReturnOrderLineSeq.Value;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

            if (p.DiscrepancyCode != null)
            {
                if (p.DiscrepancyCode.Length > 3)
                    throw (new Exception("Value for DeliveryReceiptLineDoc.DiscrepancyCode too long, max 3 chars"));

                (fStmt.Parameters["DiscrepancyCode"] as IDbDataParameter).Value = p.DiscrepancyCode;
            }
            else
                (fStmt.Parameters["DiscrepancyCode"] as IDbDataParameter).Value = DBNull.Value;

            if (p.DiscrepancyActionCode != null)
            {
                if (p.DiscrepancyActionCode.Length > 2)
                    throw (new Exception("Value for DeliveryReceiptLineDoc.DiscrepancyActionCode too long, max 2 chars"));

                (fStmt.Parameters["DiscrepancyActionCode"] as IDbDataParameter).Value = p.DiscrepancyActionCode;
            }
            else
                (fStmt.Parameters["DiscrepancyActionCode"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ManufacturingDate != null)
            {
                (fStmt.Parameters["ManufacturingDate"] as IDbDataParameter).Value = p.ManufacturingDate.Value;
            }
            else
                (fStmt.Parameters["ManufacturingDate"] as IDbDataParameter).Value = DBNull.Value;

            if (p.MeasureQualifier != null)
            {
                if (p.MeasureQualifier.Length > 4)
                    throw (new Exception("Value for DeliveryReceiptLineDoc.MeasureQualifier too long, max 4 chars"));

                (fStmt.Parameters["MeasureQualifier"] as IDbDataParameter).Value = p.MeasureQualifier;
            }
            else
                (fStmt.Parameters["MeasureQualifier"] as IDbDataParameter).Value = DBNull.Value;

            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

            if (p.DeliveryIdentity != null)
            {
                (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = p.DeliveryIdentity.Value;
            }
            else
                (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.DeliveryidentityLine != null)
            {
                (fStmt.Parameters["DeliveryidentityLine"] as IDbDataParameter).Value = p.DeliveryidentityLine.Value;
            }
            else
                (fStmt.Parameters["DeliveryidentityLine"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ArrivalDateTime != null)
            {
                (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = p.ArrivalDateTime.Value;
            }
            else
                (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductIdentity != null)
            {
                if (p.ProductIdentity.Length > 35)
                    throw (new Exception("Value for DeliveryReceiptLineDoc.ProductIdentity too long, max 35 chars"));

                (fStmt.Parameters["ProductIdentity"] as IDbDataParameter).Value = p.ProductIdentity;
            }
            else
                (fStmt.Parameters["ProductIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PackageIdentity != null)
            {
                if (p.PackageIdentity.Length > 17)
                    throw (new Exception("Value for DeliveryReceiptLineDoc.PackageIdentity too long, max 17 chars"));

                (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
            }
            else
                (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.DeliveredQuantity != null)
            {
                (fStmt.Parameters["DeliveredQuantity"] as IDbDataParameter).Value = p.DeliveredQuantity.Value;
            }
            else
                (fStmt.Parameters["DeliveredQuantity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.MeasuredQuantity != null)
            {
                (fStmt.Parameters["MeasuredQuantity"] as IDbDataParameter).Value = p.MeasuredQuantity.Value;
            }
            else
                (fStmt.Parameters["MeasuredQuantity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductionLotIdentity != null)
            {
                if (p.ProductionLotIdentity.Length > 40)
                    throw (new Exception("Value for DeliveryReceiptLineDoc.ProductionLotIdentity too long, max 40 chars"));

                (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = p.ProductionLotIdentity;
            }
            else
                (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductionSubLotIdentity != null)
            {
                if (p.ProductionSubLotIdentity.Length > 40)
                    throw (new Exception("Value for DeliveryReceiptLineDoc.ProductionSubLotIdentity too long, max 40 chars"));

                (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = p.ProductionSubLotIdentity;
            }
            else
                (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.MarketingLotIdentity != null)
            {
                if (p.MarketingLotIdentity.Length > 20)
                    throw (new Exception("Value for DeliveryReceiptLineDoc.MarketingLotIdentity too long, max 20 chars"));

                (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = p.MarketingLotIdentity;
            }
            else
                (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.QualityLotIdentity != null)
            {
                if (p.QualityLotIdentity.Length > 20)
                    throw (new Exception("Value for DeliveryReceiptLineDoc.QualityLotIdentity too long, max 20 chars"));

                (fStmt.Parameters["QualityLotIdentity"] as IDbDataParameter).Value = p.QualityLotIdentity;
            }
            else
                (fStmt.Parameters["QualityLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PurchaseOrderNumber != null)
            {
                if (p.PurchaseOrderNumber.Length > 35)
                    throw (new Exception("Value for DeliveryReceiptLineDoc.PurchaseOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = p.PurchaseOrderNumber;
            }
            else
                (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PurchaseOrderSequence != null)
            {
                (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = p.PurchaseOrderSequence.Value;
            }
            else
                (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PurchaseOrderLinePosition != null)
            {
                (fStmt.Parameters["PurchaseOrderLinePosition"] as IDbDataParameter).Value = p.PurchaseOrderLinePosition.Value;
            }
            else
                (fStmt.Parameters["PurchaseOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

            trans.HapiTransSeq++;

            fStmt.ExecuteNonQuery();

            if (p.aDeliveryReceiptPackingMaterialDocs != null)
                foreach (DeliveryReceiptPackingMaterialDoc c in p.aDeliveryReceiptPackingMaterialDocs)
                    aDeliveryReceiptPackingMaterialInsert.Process(ref trans, this, c);
        }
    }

    public class DeliveryReceiptPackingMaterialInsert : SegmentImpl
    {

        public DeliveryReceiptPackingMaterialInsert(WSBase owner)
            : base(owner)
        {
            StringBuilder s = new StringBuilder("insert into EXT2_DLVRY_RECEIPT_PM ( ");
            s.Append(" HAPIRCV_ID");
            s.Append(",OPCODE");
            s.Append(",PackingMaterialType");
            s.Append(",VendorIdentity");
            s.Append(",PurchaseOrderType");
            s.Append(",CustomerReturnOrderSequence");
            s.Append(",CustomerReturnOrderLinePos");
            s.Append(",CustomerReturnOrderLineKitPos");
            s.Append(",CustomerReturnOrderLineSeq");
            s.Append(",ClientIdentity");
            s.Append(",DeliveryIdentity");
            s.Append(",ArrivalDateTime");
            s.Append(",DeliveryidentityLine");
            s.Append(",PackageIdentity");
            s.Append(",DeliveredQuantity");
            s.Append(",PurchaseOrderNumber");
            s.Append(",PurchaseOrderSequence");
            s.Append(",CustomerOrderNumber");
            s.Append(",CustomerOrderSequence");
            s.Append(",FromPartyId");
            s.Append(",FromPartyQualifier");
            s.Append(",CustomerReturnOrderNumber");

            s.Append(" ) values ( ");

            s.Append(" :HAPIRCV_ID");
            s.Append(",:OPCODE");
            s.Append(",:PackingMaterialType");
            s.Append(",:VendorIdentity");
            s.Append(",:PurchaseOrderType");
            s.Append(",:CustomerReturnOrderSequence");
            s.Append(",:CustomerReturnOrderLinePos");
            s.Append(",:CustomerReturnOrderLineKitPos");
            s.Append(",:CustomerReturnOrderLineSeq");
            s.Append(",:ClientIdentity");
            s.Append(",:DeliveryIdentity");
            s.Append(",:ArrivalDateTime");
            s.Append(",:DeliveryidentityLine");
            s.Append(",:PackageIdentity");
            s.Append(",:DeliveredQuantity");
            s.Append(",:PurchaseOrderNumber");
            s.Append(",:PurchaseOrderSequence");
            s.Append(",:CustomerOrderNumber");
            s.Append(",:CustomerOrderSequence");
            s.Append(",:FromPartyId");
            s.Append(",:FromPartyQualifier");
            s.Append(",:CustomerReturnOrderNumber");

            s.Append(" )");

            fStmt.CommandText = s.ToString();

            fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
            fStmt.Parameters.Add(StringParam("OPCODE", 1));
            fStmt.Parameters.Add(StringParam("PackingMaterialType", 35));
            fStmt.Parameters.Add(StringParam("VendorIdentity", 35));
            fStmt.Parameters.Add(StringParam("PurchaseOrderType", 2));
            fStmt.Parameters.Add(NumberParam("CustomerReturnOrderSequence", 3, 0));
            fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLinePos", 3, 0));
            fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineKitPos", 3, 0));
            fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineSeq", 3, 0));
            fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
            fStmt.Parameters.Add(NumberParam("DeliveryIdentity", 8, 0));
            fStmt.Parameters.Add(DateParam("ArrivalDateTime"));
            fStmt.Parameters.Add(NumberParam("DeliveryidentityLine", 5, 0));
            fStmt.Parameters.Add(StringParam("PackageIdentity", 17));
            fStmt.Parameters.Add(NumberParam("DeliveredQuantity", 20, 6));
            fStmt.Parameters.Add(StringParam("PurchaseOrderNumber", 35));
            fStmt.Parameters.Add(NumberParam("PurchaseOrderSequence", 3, 0));
            fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
            fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
            fStmt.Parameters.Add(StringParam("FromPartyId", 35));
            fStmt.Parameters.Add(StringParam("FromPartyQualifier", 3));
            fStmt.Parameters.Add(StringParam("CustomerReturnOrderNumber", 35));

            fStmt.Prepare();

        }

        public void Process(ref MessageTransaction trans, SegmentImpl parent, DeliveryReceiptPackingMaterialDoc p)
        {
            if (p == null)
            {
                // this is useful for testing calls without sending data
                return;
            }

            (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

            if (p.OPCODE != null)
            {
                if (p.OPCODE.Length > 1)
                    throw (new Exception("Value for DeliveryReceiptPackingMaterialDoc.OPCODE too long, max 1 chars"));

                if (p.OPCODE.Length == 0)
                    throw (new Exception("Zero length for mandatory parameter DeliveryReceiptPackingMaterialDoc.OPCODE not allowed"));

                (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
            }
            else
                throw (new Exception("Null value for mandatory parameter DeliveryReceiptPackingMaterialDoc.OPCODE not allowed"));


            if (p.PackingMaterialType != null)
            {
                if (p.PackingMaterialType.Length > 35)
                    throw (new Exception("Value for DeliveryReceiptPackingMaterialDoc.PackingMaterialType too long, max 35 chars"));

                (fStmt.Parameters["PackingMaterialType"] as IDbDataParameter).Value = p.PackingMaterialType;
            }
            else
                (fStmt.Parameters["PackingMaterialType"] as IDbDataParameter).Value = DBNull.Value;

            if (p.VendorIdentity != null)
            {
                if (p.VendorIdentity.Length > 35)
                    throw (new Exception("Value for DeliveryReceiptPackingMaterialDoc.VendorIdentity too long, max 35 chars"));

                (fStmt.Parameters["VendorIdentity"] as IDbDataParameter).Value = p.VendorIdentity;
            }
            else
                (fStmt.Parameters["VendorIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PurchaseOrderType != null)
            {
                if (p.PurchaseOrderType.Length > 2)
                    throw (new Exception("Value for DeliveryReceiptPackingMaterialDoc.PurchaseOrderType too long, max 2 chars"));

                (fStmt.Parameters["PurchaseOrderType"] as IDbDataParameter).Value = p.PurchaseOrderType;
            }
            else
                (fStmt.Parameters["PurchaseOrderType"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderSequence != null)
            {
                (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = p.CustomerReturnOrderSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderLinePos != null)
            {
                (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = p.CustomerReturnOrderLinePos.Value;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderLineKitPos != null)
            {
                (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = p.CustomerReturnOrderLineKitPos.Value;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderLineSeq != null)
            {
                (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = p.CustomerReturnOrderLineSeq.Value;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

            if (p.DeliveryIdentity != null)
            {
                (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = p.DeliveryIdentity.Value;
            }
            else
                (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ArrivalDateTime != null)
            {
                (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = p.ArrivalDateTime.Value;
            }
            else
                (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = DBNull.Value;

            if (p.DeliveryidentityLine != null)
            {
                (fStmt.Parameters["DeliveryidentityLine"] as IDbDataParameter).Value = p.DeliveryidentityLine.Value;
            }
            else
                (fStmt.Parameters["DeliveryidentityLine"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PackageIdentity != null)
            {
                if (p.PackageIdentity.Length > 17)
                    throw (new Exception("Value for DeliveryReceiptPackingMaterialDoc.PackageIdentity too long, max 17 chars"));

                (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
            }
            else
                (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.DeliveredQuantity != null)
            {
                (fStmt.Parameters["DeliveredQuantity"] as IDbDataParameter).Value = p.DeliveredQuantity.Value;
            }
            else
                (fStmt.Parameters["DeliveredQuantity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PurchaseOrderNumber != null)
            {
                if (p.PurchaseOrderNumber.Length > 35)
                    throw (new Exception("Value for DeliveryReceiptPackingMaterialDoc.PurchaseOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = p.PurchaseOrderNumber;
            }
            else
                (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PurchaseOrderSequence != null)
            {
                (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = p.PurchaseOrderSequence.Value;
            }
            else
                (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderNumber != null)
            {
                if (p.CustomerOrderNumber.Length > 35)
                    throw (new Exception("Value for DeliveryReceiptPackingMaterialDoc.CustomerOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
            }
            else
                (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderSequence != null)
            {
                (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.FromPartyId != null)
            {
                if (p.FromPartyId.Length > 35)
                    throw (new Exception("Value for DeliveryReceiptPackingMaterialDoc.FromPartyId too long, max 35 chars"));

                (fStmt.Parameters["FromPartyId"] as IDbDataParameter).Value = p.FromPartyId;
            }
            else
                (fStmt.Parameters["FromPartyId"] as IDbDataParameter).Value = DBNull.Value;

            if (p.FromPartyQualifier != null)
            {
                if (p.FromPartyQualifier.Length > 3)
                    throw (new Exception("Value for DeliveryReceiptPackingMaterialDoc.FromPartyQualifier too long, max 3 chars"));

                (fStmt.Parameters["FromPartyQualifier"] as IDbDataParameter).Value = p.FromPartyQualifier;
            }
            else
                (fStmt.Parameters["FromPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderNumber != null)
            {
                if (p.CustomerReturnOrderNumber.Length > 35)
                    throw (new Exception("Value for DeliveryReceiptPackingMaterialDoc.CustomerReturnOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = p.CustomerReturnOrderNumber;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            trans.HapiTransSeq++;

            fStmt.ExecuteNonQuery();

        }
    }

    public class InspectionReceiptHeadInsert : SegmentImpl
    {
        private InspectionReceiptLineInsert aInspectionReceiptLineInsert;

        public InspectionReceiptHeadInsert(WSBase owner)
            : base(owner)
        {
            StringBuilder s = new StringBuilder("insert into EXT2_INSPECTION_RECEIPT_HEAD ( ");
            s.Append(" HAPIRCV_ID");
            s.Append(",OPCODE");
            s.Append(",ClientIdentity");
            s.Append(",WarehouseIdentity");
            s.Append(",EmployeeIdentity");
            s.Append(",ReturnhandleddateTime");

            s.Append(" ) values ( ");

            s.Append(" :HAPIRCV_ID");
            s.Append(",:OPCODE");
            s.Append(",:ClientIdentity");
            s.Append(",:WarehouseIdentity");
            s.Append(",:EmployeeIdentity");
            s.Append(",:ReturnhandleddateTime");

            s.Append(" )");

            fStmt.CommandText = s.ToString();

            fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
            fStmt.Parameters.Add(StringParam("OPCODE", 1));
            fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
            fStmt.Parameters.Add(StringParam("WarehouseIdentity", 4));
            fStmt.Parameters.Add(StringParam("EmployeeIdentity", 8));
            fStmt.Parameters.Add(DateParam("ReturnhandleddateTime"));

            fStmt.Prepare();

            aInspectionReceiptLineInsert = new InspectionReceiptLineInsert(owner);
        }

        public void Process(ref MessageTransaction trans, SegmentImpl parent, InspectionReceiptHeadDoc p)
        {
            if (p == null)
            {
                // this is useful for testing calls without sending data
                return;
            }

            (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

            if (p.OPCODE != null)
            {
                if (p.OPCODE.Length > 1)
                    throw (new Exception("Value for InspectionReceiptHeadDoc.OPCODE too long, max 1 chars"));

                if (p.OPCODE.Length == 0)
                    throw (new Exception("Zero length for mandatory parameter InspectionReceiptHeadDoc.OPCODE not allowed"));

                (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
            }
            else
                throw (new Exception("Null value for mandatory parameter InspectionReceiptHeadDoc.OPCODE not allowed"));


            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

            if (p.WarehouseIdentity != null)
            {
                if (p.WarehouseIdentity.Length > 4)
                    throw (new Exception("Value for InspectionReceiptHeadDoc.WarehouseIdentity too long, max 4 chars"));

                (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = p.WarehouseIdentity;
            }
            else
                (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.EmployeeIdentity != null)
            {
                if (p.EmployeeIdentity.Length > 8)
                    throw (new Exception("Value for InspectionReceiptHeadDoc.EmployeeIdentity too long, max 8 chars"));

                (fStmt.Parameters["EmployeeIdentity"] as IDbDataParameter).Value = p.EmployeeIdentity;
            }
            else
                (fStmt.Parameters["EmployeeIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ReturnhandleddateTime != null)
            {
                (fStmt.Parameters["ReturnhandleddateTime"] as IDbDataParameter).Value = p.ReturnhandleddateTime.Value;
            }
            else
                (fStmt.Parameters["ReturnhandleddateTime"] as IDbDataParameter).Value = DBNull.Value;

            trans.HapiTransSeq++;

            fStmt.ExecuteNonQuery();

            if (p.aInspectionReceiptLineDocs != null)
                foreach (InspectionReceiptLineDoc c in p.aInspectionReceiptLineDocs)
                    aInspectionReceiptLineInsert.Process(ref trans, this, c);
        }
    }

    public class InspectionReceiptLineInsert : SegmentImpl
    {
        private InspectionReceiptLinePackingMaterialInsert aInspectionReceiptLinePackingMaterialInsert;

        public InspectionReceiptLineInsert(WSBase owner)
            : base(owner)
        {
            StringBuilder s = new StringBuilder("insert into EXT2_INSPECTION_RECEIPT_LINE ( ");
            s.Append(" HAPIRCV_ID");
            s.Append(",OPCODE");
            s.Append(",ProductionSubLotIdentity");
            s.Append(",MarketingLotIdentity");
            s.Append(",QualityLotIdentity");
            s.Append(",ItemLoadIdentity");
            s.Append(",ExpiryDate");
            s.Append(",FromPartyId");
            s.Append(",FromPartyQualifier");
            s.Append(",ShiptoCustomerIdentity");
            s.Append(",ShiptoCustomerQualifier");
            s.Append(",ClientIdentity");
            s.Append(",WorkOrderIdentity");
            s.Append(",WorkOrderLine");
            s.Append(",WorkOrderLineSeq");
            s.Append(",ProductIdentity");
            s.Append(",PackageIdentity");
            s.Append(",InspectedQuantity");
            s.Append(",DecidedActionCode");
            s.Append(",CustomerReturnOrderNumber");
            s.Append(",CustomerReturnOrderSequence");
            s.Append(",CustomerReturnOrderLinePos");
            s.Append(",CustomerReturnOrderLineKitPos");
            s.Append(",CustomerReturnOrderLineSeq");
            s.Append(",DeliveryIdentity");
            s.Append(",DeliveryidentityLine");
            s.Append(",MeasuredQuantity");
            s.Append(",InventoryStatusCode");
            s.Append(",ProductionLotIdentity");

            s.Append(" ) values ( ");

            s.Append(" :HAPIRCV_ID");
            s.Append(",:OPCODE");
            s.Append(",:ProductionSubLotIdentity");
            s.Append(",:MarketingLotIdentity");
            s.Append(",:QualityLotIdentity");
            s.Append(",:ItemLoadIdentity");
            s.Append(",:ExpiryDate");
            s.Append(",:FromPartyId");
            s.Append(",:FromPartyQualifier");
            s.Append(",:ShiptoCustomerIdentity");
            s.Append(",:ShiptoCustomerQualifier");
            s.Append(",:ClientIdentity");
            s.Append(",:WorkOrderIdentity");
            s.Append(",:WorkOrderLine");
            s.Append(",:WorkOrderLineSeq");
            s.Append(",:ProductIdentity");
            s.Append(",:PackageIdentity");
            s.Append(",:InspectedQuantity");
            s.Append(",:DecidedActionCode");
            s.Append(",:CustomerReturnOrderNumber");
            s.Append(",:CustomerReturnOrderSequence");
            s.Append(",:CustomerReturnOrderLinePos");
            s.Append(",:CustomerReturnOrderLineKitPos");
            s.Append(",:CustomerReturnOrderLineSeq");
            s.Append(",:DeliveryIdentity");
            s.Append(",:DeliveryidentityLine");
            s.Append(",:MeasuredQuantity");
            s.Append(",:InventoryStatusCode");
            s.Append(",:ProductionLotIdentity");

            s.Append(" )");

            fStmt.CommandText = s.ToString();

            fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
            fStmt.Parameters.Add(StringParam("OPCODE", 1));
            fStmt.Parameters.Add(StringParam("ProductionSubLotIdentity", 40));
            fStmt.Parameters.Add(StringParam("MarketingLotIdentity", 20));
            fStmt.Parameters.Add(StringParam("QualityLotIdentity", 20));
            fStmt.Parameters.Add(StringParam("ItemLoadIdentity", 35));
            fStmt.Parameters.Add(DateParam("ExpiryDate"));
            fStmt.Parameters.Add(StringParam("FromPartyId", 35));
            fStmt.Parameters.Add(StringParam("FromPartyQualifier", 3));
            fStmt.Parameters.Add(StringParam("ShiptoCustomerIdentity", 35));
            fStmt.Parameters.Add(StringParam("ShiptoCustomerQualifier", 3));
            fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
            fStmt.Parameters.Add(StringParam("WorkOrderIdentity", 35));
            fStmt.Parameters.Add(NumberParam("WorkOrderLine", 4, 0));
            fStmt.Parameters.Add(NumberParam("WorkOrderLineSeq", 4, 0));
            fStmt.Parameters.Add(StringParam("ProductIdentity", 35));
            fStmt.Parameters.Add(StringParam("PackageIdentity", 17));
            fStmt.Parameters.Add(NumberParam("InspectedQuantity", 20, 6));
            fStmt.Parameters.Add(StringParam("DecidedActionCode", 3));
            fStmt.Parameters.Add(StringParam("CustomerReturnOrderNumber", 35));
            fStmt.Parameters.Add(NumberParam("CustomerReturnOrderSequence", 3, 0));
            fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLinePos", 4, 0));
            fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineKitPos", 3, 0));
            fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineSeq", 3, 0));
            fStmt.Parameters.Add(NumberParam("DeliveryIdentity", 8, 0));
            fStmt.Parameters.Add(NumberParam("DeliveryidentityLine", 5, 0));
            fStmt.Parameters.Add(NumberParam("MeasuredQuantity", 20, 6));
            fStmt.Parameters.Add(StringParam("InventoryStatusCode", 8));
            fStmt.Parameters.Add(StringParam("ProductionLotIdentity", 40));

            fStmt.Prepare();

            aInspectionReceiptLinePackingMaterialInsert = new InspectionReceiptLinePackingMaterialInsert(owner);
        }

        public void Process(ref MessageTransaction trans, SegmentImpl parent, InspectionReceiptLineDoc p)
        {
            if (p == null)
            {
                // this is useful for testing calls without sending data
                return;
            }

            (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

            if (p.OPCODE != null)
            {
                if (p.OPCODE.Length > 1)
                    throw (new Exception("Value for InspectionReceiptLineDoc.OPCODE too long, max 1 chars"));

                if (p.OPCODE.Length == 0)
                    throw (new Exception("Zero length for mandatory parameter InspectionReceiptLineDoc.OPCODE not allowed"));

                (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
            }
            else
                throw (new Exception("Null value for mandatory parameter InspectionReceiptLineDoc.OPCODE not allowed"));


            if (p.ProductionSubLotIdentity != null)
            {
                if (p.ProductionSubLotIdentity.Length > 40)
                    throw (new Exception("Value for InspectionReceiptLineDoc.ProductionSubLotIdentity too long, max 40 chars"));

                (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = p.ProductionSubLotIdentity;
            }
            else
                (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.MarketingLotIdentity != null)
            {
                if (p.MarketingLotIdentity.Length > 20)
                    throw (new Exception("Value for InspectionReceiptLineDoc.MarketingLotIdentity too long, max 20 chars"));

                (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = p.MarketingLotIdentity;
            }
            else
                (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.QualityLotIdentity != null)
            {
                if (p.QualityLotIdentity.Length > 20)
                    throw (new Exception("Value for InspectionReceiptLineDoc.QualityLotIdentity too long, max 20 chars"));

                (fStmt.Parameters["QualityLotIdentity"] as IDbDataParameter).Value = p.QualityLotIdentity;
            }
            else
                (fStmt.Parameters["QualityLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ItemLoadIdentity != null)
            {
                if (p.ItemLoadIdentity.Length > 35)
                    throw (new Exception("Value for InspectionReceiptLineDoc.ItemLoadIdentity too long, max 35 chars"));

                (fStmt.Parameters["ItemLoadIdentity"] as IDbDataParameter).Value = p.ItemLoadIdentity;
            }
            else
                (fStmt.Parameters["ItemLoadIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ExpiryDate != null)
            {
                (fStmt.Parameters["ExpiryDate"] as IDbDataParameter).Value = p.ExpiryDate.Value;
            }
            else
                (fStmt.Parameters["ExpiryDate"] as IDbDataParameter).Value = DBNull.Value;

            if (p.FromPartyId != null)
            {
                if (p.FromPartyId.Length > 35)
                    throw (new Exception("Value for InspectionReceiptLineDoc.FromPartyId too long, max 35 chars"));

                (fStmt.Parameters["FromPartyId"] as IDbDataParameter).Value = p.FromPartyId;
            }
            else
                (fStmt.Parameters["FromPartyId"] as IDbDataParameter).Value = DBNull.Value;

            if (p.FromPartyQualifier != null)
            {
                if (p.FromPartyQualifier.Length > 3)
                    throw (new Exception("Value for InspectionReceiptLineDoc.FromPartyQualifier too long, max 3 chars"));

                (fStmt.Parameters["FromPartyQualifier"] as IDbDataParameter).Value = p.FromPartyQualifier;
            }
            else
                (fStmt.Parameters["FromPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShiptoCustomerIdentity != null)
            {
                if (p.ShiptoCustomerIdentity.Length > 35)
                    throw (new Exception("Value for InspectionReceiptLineDoc.ShiptoCustomerIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShiptoCustomerIdentity"] as IDbDataParameter).Value = p.ShiptoCustomerIdentity;
            }
            else
                (fStmt.Parameters["ShiptoCustomerIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShiptoCustomerQualifier != null)
            {
                if (p.ShiptoCustomerQualifier.Length > 3)
                    throw (new Exception("Value for InspectionReceiptLineDoc.ShiptoCustomerQualifier too long, max 3 chars"));

                (fStmt.Parameters["ShiptoCustomerQualifier"] as IDbDataParameter).Value = p.ShiptoCustomerQualifier;
            }
            else
                (fStmt.Parameters["ShiptoCustomerQualifier"] as IDbDataParameter).Value = DBNull.Value;

            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

            if (p.WorkOrderIdentity != null)
            {
                if (p.WorkOrderIdentity.Length > 35)
                    throw (new Exception("Value for InspectionReceiptLineDoc.WorkOrderIdentity too long, max 35 chars"));

                (fStmt.Parameters["WorkOrderIdentity"] as IDbDataParameter).Value = p.WorkOrderIdentity;
            }
            else
                (fStmt.Parameters["WorkOrderIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.WorkOrderLine != null)
            {
                (fStmt.Parameters["WorkOrderLine"] as IDbDataParameter).Value = p.WorkOrderLine.Value;
            }
            else
                (fStmt.Parameters["WorkOrderLine"] as IDbDataParameter).Value = DBNull.Value;

            if (p.WorkOrderLineSeq != null)
            {
                (fStmt.Parameters["WorkOrderLineSeq"] as IDbDataParameter).Value = p.WorkOrderLineSeq.Value;
            }
            else
                (fStmt.Parameters["WorkOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductIdentity != null)
            {
                if (p.ProductIdentity.Length > 35)
                    throw (new Exception("Value for InspectionReceiptLineDoc.ProductIdentity too long, max 35 chars"));

                (fStmt.Parameters["ProductIdentity"] as IDbDataParameter).Value = p.ProductIdentity;
            }
            else
                (fStmt.Parameters["ProductIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PackageIdentity != null)
            {
                if (p.PackageIdentity.Length > 17)
                    throw (new Exception("Value for InspectionReceiptLineDoc.PackageIdentity too long, max 17 chars"));

                (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
            }
            else
                (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.InspectedQuantity != null)
            {
                (fStmt.Parameters["InspectedQuantity"] as IDbDataParameter).Value = p.InspectedQuantity.Value;
            }
            else
                (fStmt.Parameters["InspectedQuantity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.DecidedActionCode != null)
            {
                if (p.DecidedActionCode.Length > 3)
                    throw (new Exception("Value for InspectionReceiptLineDoc.DecidedActionCode too long, max 3 chars"));

                (fStmt.Parameters["DecidedActionCode"] as IDbDataParameter).Value = p.DecidedActionCode;
            }
            else
                (fStmt.Parameters["DecidedActionCode"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderNumber != null)
            {
                if (p.CustomerReturnOrderNumber.Length > 35)
                    throw (new Exception("Value for InspectionReceiptLineDoc.CustomerReturnOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = p.CustomerReturnOrderNumber;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderSequence != null)
            {
                (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = p.CustomerReturnOrderSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderLinePos != null)
            {
                (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = p.CustomerReturnOrderLinePos.Value;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderLineKitPos != null)
            {
                (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = p.CustomerReturnOrderLineKitPos.Value;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderLineSeq != null)
            {
                (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = p.CustomerReturnOrderLineSeq.Value;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

            if (p.DeliveryIdentity != null)
            {
                (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = p.DeliveryIdentity.Value;
            }
            else
                (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.DeliveryidentityLine != null)
            {
                (fStmt.Parameters["DeliveryidentityLine"] as IDbDataParameter).Value = p.DeliveryidentityLine.Value;
            }
            else
                (fStmt.Parameters["DeliveryidentityLine"] as IDbDataParameter).Value = DBNull.Value;

            if (p.MeasuredQuantity != null)
            {
                (fStmt.Parameters["MeasuredQuantity"] as IDbDataParameter).Value = p.MeasuredQuantity.Value;
            }
            else
                (fStmt.Parameters["MeasuredQuantity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.InventoryStatusCode != null)
            {
                if (p.InventoryStatusCode.Length > 8)
                    throw (new Exception("Value for InspectionReceiptLineDoc.InventoryStatusCode too long, max 8 chars"));

                (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = p.InventoryStatusCode;
            }
            else
                (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductionLotIdentity != null)
            {
                if (p.ProductionLotIdentity.Length > 40)
                    throw (new Exception("Value for InspectionReceiptLineDoc.ProductionLotIdentity too long, max 40 chars"));

                (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = p.ProductionLotIdentity;
            }
            else
                (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            trans.HapiTransSeq++;

            fStmt.ExecuteNonQuery();

            if (p.aInspectionReceiptLinePackingMaterialDocs != null)
                foreach (InspectionReceiptLinePackingMaterialDoc c in p.aInspectionReceiptLinePackingMaterialDocs)
                    aInspectionReceiptLinePackingMaterialInsert.Process(ref trans, this, c);
        }
    }

    public class InspectionReceiptLinePackingMaterialInsert : SegmentImpl
    {

        public InspectionReceiptLinePackingMaterialInsert(WSBase owner)
            : base(owner)           
        {
            StringBuilder s = new StringBuilder("insert into EXT2_INSPECTION_RECEIPT_LINEPM ( ");
            s.Append(" HAPIRCV_ID");
            s.Append(",OPCODE");
            s.Append(",ClientIdentity");
            s.Append(",WorkOrderIdentity");
            s.Append(",WorkOrderLine");
            s.Append(",WorkOrderLineSeq");
            s.Append(",WorkOrderLinePmSeq");
            s.Append(",PackingMaterialIdentity");
            s.Append(",PackageIdentity");
            s.Append(",InspectedPmQuantity");
            s.Append(",DecidedActionCode");
            s.Append(",CustomerReturnOrderNumber");
            s.Append(",CustomerReturnOrderSequence");
            s.Append(",CustomerReturnOrderLinePos");
            s.Append(",CustomerReturnOrderLineKitPos");
            s.Append(",CustomerReturnOrderLineSeq");
            s.Append(",DeliveryIdentity");
            s.Append(",DeliveryidentityLine");
            s.Append(",FromPartyId");
            s.Append(",FromPartyQualifier");
            s.Append(",CustomerOrderNumber");
            s.Append(",CustomerOrderSequence");

            s.Append(" ) values ( ");

            s.Append(" :HAPIRCV_ID");
            s.Append(",:OPCODE");
            s.Append(",:ClientIdentity");
            s.Append(",:WorkOrderIdentity");
            s.Append(",:WorkOrderLine");
            s.Append(",:WorkOrderLineSeq");
            s.Append(",:WorkOrderLinePmSeq");
            s.Append(",:PackingMaterialIdentity");
            s.Append(",:PackageIdentity");
            s.Append(",:InspectedPmQuantity");
            s.Append(",:DecidedActionCode");
            s.Append(",:CustomerReturnOrderNumber");
            s.Append(",:CustomerReturnOrderSequence");
            s.Append(",:CustomerReturnOrderLinePos");
            s.Append(",:CustomerReturnOrderLineKitPos");
            s.Append(",:CustomerReturnOrderLineSeq");
            s.Append(",:DeliveryIdentity");
            s.Append(",:DeliveryidentityLine");
            s.Append(",:FromPartyId");
            s.Append(",:FromPartyQualifier");
            s.Append(",:CustomerOrderNumber");
            s.Append(",:CustomerOrderSequence");

            s.Append(" )");

            fStmt.CommandText = s.ToString();

            fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
            fStmt.Parameters.Add(StringParam("OPCODE", 1));
            fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
            fStmt.Parameters.Add(StringParam("WorkOrderIdentity", 35));
            fStmt.Parameters.Add(NumberParam("WorkOrderLine", 4, 0));
            fStmt.Parameters.Add(NumberParam("WorkOrderLineSeq", 4, 0));
            fStmt.Parameters.Add(NumberParam("WorkOrderLinePmSeq", 4, 0));
            fStmt.Parameters.Add(StringParam("PackingMaterialIdentity", 35));
            fStmt.Parameters.Add(StringParam("PackageIdentity", 17));
            fStmt.Parameters.Add(NumberParam("InspectedPmQuantity", 20, 6));
            fStmt.Parameters.Add(StringParam("DecidedActionCode", 3));
            fStmt.Parameters.Add(StringParam("CustomerReturnOrderNumber", 35));
            fStmt.Parameters.Add(NumberParam("CustomerReturnOrderSequence", 3, 0));
            fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLinePos", 4, 0));
            fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineKitPos", 3, 0));
            fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineSeq", 3, 0));
            fStmt.Parameters.Add(NumberParam("DeliveryIdentity", 8, 0));
            fStmt.Parameters.Add(NumberParam("DeliveryidentityLine", 5, 0));
            fStmt.Parameters.Add(StringParam("FromPartyId", 35));
            fStmt.Parameters.Add(StringParam("FromPartyQualifier", 3));
            fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
            fStmt.Parameters.Add(StringParam("CustomerOrderSequence", 3));

            fStmt.Prepare();

        }

        public void Process(ref MessageTransaction trans, SegmentImpl parent, InspectionReceiptLinePackingMaterialDoc p)
        {
            if (p == null)
            {
                // this is useful for testing calls without sending data
                return;
            }

            (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

            if (p.OPCODE != null)
            {
                if (p.OPCODE.Length > 1)
                    throw (new Exception("Value for InspectionReceiptLinePackingMaterialDoc.OPCODE too long, max 1 chars"));

                if (p.OPCODE.Length == 0)
                    throw (new Exception("Zero length for mandatory parameter InspectionReceiptLinePackingMaterialDoc.OPCODE not allowed"));

                (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
            }
            else
                throw (new Exception("Null value for mandatory parameter InspectionReceiptLinePackingMaterialDoc.OPCODE not allowed"));


            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

            if (p.WorkOrderIdentity != null)
            {
                if (p.WorkOrderIdentity.Length > 35)
                    throw (new Exception("Value for InspectionReceiptLinePackingMaterialDoc.WorkOrderIdentity too long, max 35 chars"));

                (fStmt.Parameters["WorkOrderIdentity"] as IDbDataParameter).Value = p.WorkOrderIdentity;
            }
            else
                (fStmt.Parameters["WorkOrderIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.WorkOrderLine != null)
            {
                (fStmt.Parameters["WorkOrderLine"] as IDbDataParameter).Value = p.WorkOrderLine.Value;
            }
            else
                (fStmt.Parameters["WorkOrderLine"] as IDbDataParameter).Value = DBNull.Value;

            if (p.WorkOrderLineSeq != null)
            {
                (fStmt.Parameters["WorkOrderLineSeq"] as IDbDataParameter).Value = p.WorkOrderLineSeq.Value;
            }
            else
                (fStmt.Parameters["WorkOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

            if (p.WorkOrderLinePmSeq != null)
            {
                (fStmt.Parameters["WorkOrderLinePmSeq"] as IDbDataParameter).Value = p.WorkOrderLinePmSeq.Value;
            }
            else
                (fStmt.Parameters["WorkOrderLinePmSeq"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PackingMaterialIdentity != null)
            {
                if (p.PackingMaterialIdentity.Length > 35)
                    throw (new Exception("Value for InspectionReceiptLinePackingMaterialDoc.PackingMaterialIdentity too long, max 35 chars"));

                (fStmt.Parameters["PackingMaterialIdentity"] as IDbDataParameter).Value = p.PackingMaterialIdentity;
            }
            else
                (fStmt.Parameters["PackingMaterialIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PackageIdentity != null)
            {
                if (p.PackageIdentity.Length > 17)
                    throw (new Exception("Value for InspectionReceiptLinePackingMaterialDoc.PackageIdentity too long, max 17 chars"));

                (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
            }
            else
                (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.InspectedPmQuantity != null)
            {
                (fStmt.Parameters["InspectedPmQuantity"] as IDbDataParameter).Value = p.InspectedPmQuantity.Value;
            }
            else
                (fStmt.Parameters["InspectedPmQuantity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.DecidedActionCode != null)
            {
                if (p.DecidedActionCode.Length > 3)
                    throw (new Exception("Value for InspectionReceiptLinePackingMaterialDoc.DecidedActionCode too long, max 3 chars"));

                (fStmt.Parameters["DecidedActionCode"] as IDbDataParameter).Value = p.DecidedActionCode;
            }
            else
                (fStmt.Parameters["DecidedActionCode"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderNumber != null)
            {
                if (p.CustomerReturnOrderNumber.Length > 35)
                    throw (new Exception("Value for InspectionReceiptLinePackingMaterialDoc.CustomerReturnOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = p.CustomerReturnOrderNumber;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderSequence != null)
            {
                (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = p.CustomerReturnOrderSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderLinePos != null)
            {
                (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = p.CustomerReturnOrderLinePos.Value;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderLineKitPos != null)
            {
                (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = p.CustomerReturnOrderLineKitPos.Value;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderLineSeq != null)
            {
                (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = p.CustomerReturnOrderLineSeq.Value;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

            if (p.DeliveryIdentity != null)
            {
                (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = p.DeliveryIdentity.Value;
            }
            else
                (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.DeliveryidentityLine != null)
            {
                (fStmt.Parameters["DeliveryidentityLine"] as IDbDataParameter).Value = p.DeliveryidentityLine.Value;
            }
            else
                (fStmt.Parameters["DeliveryidentityLine"] as IDbDataParameter).Value = DBNull.Value;

            if (p.FromPartyId != null)
            {
                if (p.FromPartyId.Length > 35)
                    throw (new Exception("Value for InspectionReceiptLinePackingMaterialDoc.FromPartyId too long, max 35 chars"));

                (fStmt.Parameters["FromPartyId"] as IDbDataParameter).Value = p.FromPartyId;
            }
            else
                (fStmt.Parameters["FromPartyId"] as IDbDataParameter).Value = DBNull.Value;

            if (p.FromPartyQualifier != null)
            {
                if (p.FromPartyQualifier.Length > 3)
                    throw (new Exception("Value for InspectionReceiptLinePackingMaterialDoc.FromPartyQualifier too long, max 3 chars"));

                (fStmt.Parameters["FromPartyQualifier"] as IDbDataParameter).Value = p.FromPartyQualifier;
            }
            else
                (fStmt.Parameters["FromPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderNumber != null)
            {
                if (p.CustomerOrderNumber.Length > 35)
                    throw (new Exception("Value for InspectionReceiptLinePackingMaterialDoc.CustomerOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
            }
            else
                (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderSequence != null)
            {
                if (p.CustomerOrderSequence.Length > 3)
                    throw (new Exception("Value for InspectionReceiptLinePackingMaterialDoc.CustomerOrderSequence too long, max 3 chars"));

                (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
            }
            else
                (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            trans.HapiTransSeq++;

            fStmt.ExecuteNonQuery();

        }
    }

    public class InventoryChangeLineInsert : SegmentImpl
    {

        public InventoryChangeLineInsert(WSBase owner)
            : base(owner)
        {
            StringBuilder s = new StringBuilder("insert into EXT2_INVENTORY_CHANGE ( ");
            s.Append(" HAPIRCV_ID");
            s.Append(",OPCODE");
            s.Append(",MeasuredQty");
            s.Append(",MeasuredQty2");
            s.Append(",ProductDate");
            s.Append(",ProductDate2");
            s.Append(",VendorIdentity2");
            s.Append(",ProductNumber2");
            s.Append(",PackageIdentity");
            s.Append(",PackageIdentity2");
            s.Append(",Quantity");
            s.Append(",Quantity2");
            s.Append(",InventoryStatusCode");
            s.Append(",InventoryStatusCode2");
            s.Append(",ProductionLotIdentity");
            s.Append(",ProductionLotIdentity2");
            s.Append(",ProductionSubLotIdentity");
            s.Append(",ProductionSublotIdentity2");
            s.Append(",MarketingLotIdentity");
            s.Append(",MarketingLotIdentity2");
            s.Append(",QualityLotIdentity");
            s.Append(",QualityLotIdentity2");
            s.Append(",WarehouseIdentity");
            s.Append(",CustomerOrderNumber");
            s.Append(",CustomerOrderSequence");
            s.Append(",CustomerOrderLinePosition");
            s.Append(",CustomerOrderLineKitPosition");
            s.Append(",CustomerOrderLineSequence");
            s.Append(",ReasonCode");
            s.Append(",FreeText");
            s.Append(",ClientIdentity");
            s.Append(",EmployeeId");
            s.Append(",TimeStamp");
            s.Append(",ItemLoadIdentity");
            s.Append(",OperationCode");
            s.Append(",InventoryChangeCode");
            s.Append(",InventoryChangeText");
            s.Append(",DespatchadviceIdentity");
            s.Append(",PurchaseOrderNumber");
            s.Append(",PurchaseOrderSequence");
            s.Append(",PurchaseOrderLinePosition");
            s.Append(",PurchaseOrderLineSequence");
            s.Append(",VendorIdentity");
            s.Append(",OwnerIdentity");
            s.Append(",OwnerIdentity2");
            s.Append(",ProductNumber");

            s.Append(" ) values ( ");

            s.Append(" :HAPIRCV_ID");
            s.Append(",:OPCODE");
            s.Append(",:MeasuredQty");
            s.Append(",:MeasuredQty2");
            s.Append(",:ProductDate");
            s.Append(",:ProductDate2");
            s.Append(",:VendorIdentity2");
            s.Append(",:ProductNumber2");
            s.Append(",:PackageIdentity");
            s.Append(",:PackageIdentity2");
            s.Append(",:Quantity");
            s.Append(",:Quantity2");
            s.Append(",:InventoryStatusCode");
            s.Append(",:InventoryStatusCode2");
            s.Append(",:ProductionLotIdentity");
            s.Append(",:ProductionLotIdentity2");
            s.Append(",:ProductionSubLotIdentity");
            s.Append(",:ProductionSublotIdentity2");
            s.Append(",:MarketingLotIdentity");
            s.Append(",:MarketingLotIdentity2");
            s.Append(",:QualityLotIdentity");
            s.Append(",:QualityLotIdentity2");
            s.Append(",:WarehouseIdentity");
            s.Append(",:CustomerOrderNumber");
            s.Append(",:CustomerOrderSequence");
            s.Append(",:CustomerOrderLinePosition");
            s.Append(",:CustomerOrderLineKitPosition");
            s.Append(",:CustomerOrderLineSequence");
            s.Append(",:ReasonCode");
            s.Append(",:FreeText");
            s.Append(",:ClientIdentity");
            s.Append(",:EmployeeId");
            s.Append(",:TimeStamp");
            s.Append(",:ItemLoadIdentity");
            s.Append(",:OperationCode");
            s.Append(",:InventoryChangeCode");
            s.Append(",:InventoryChangeText");
            s.Append(",:DespatchadviceIdentity");
            s.Append(",:PurchaseOrderNumber");
            s.Append(",:PurchaseOrderSequence");
            s.Append(",:PurchaseOrderLinePosition");
            s.Append(",:PurchaseOrderLineSequence");
            s.Append(",:VendorIdentity");
            s.Append(",:OwnerIdentity");
            s.Append(",:OwnerIdentity2");
            s.Append(",:ProductNumber");

            s.Append(" )");

            fStmt.CommandText = s.ToString();

            fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
            fStmt.Parameters.Add(StringParam("OPCODE", 1));
            fStmt.Parameters.Add(NumberParam("MeasuredQty", 20, 6));
            fStmt.Parameters.Add(NumberParam("MeasuredQty2", 20, 6));
            fStmt.Parameters.Add(DateParam("ProductDate"));
            fStmt.Parameters.Add(DateParam("ProductDate2"));
            fStmt.Parameters.Add(StringParam("VendorIdentity2", 35));
            fStmt.Parameters.Add(StringParam("ProductNumber2", 35));
            fStmt.Parameters.Add(StringParam("PackageIdentity", 17));
            fStmt.Parameters.Add(StringParam("PackageIdentity2", 17));
            fStmt.Parameters.Add(NumberParam("Quantity", 20, 6));
            fStmt.Parameters.Add(NumberParam("Quantity2", 20, 6));
            fStmt.Parameters.Add(StringParam("InventoryStatusCode", 8));
            fStmt.Parameters.Add(StringParam("InventoryStatusCode2", 8));
            fStmt.Parameters.Add(StringParam("ProductionLotIdentity", 40));
            fStmt.Parameters.Add(StringParam("ProductionLotIdentity2", 40));
            fStmt.Parameters.Add(StringParam("ProductionSubLotIdentity", 40));
            fStmt.Parameters.Add(StringParam("ProductionSublotIdentity2", 40));
            fStmt.Parameters.Add(StringParam("MarketingLotIdentity", 20));
            fStmt.Parameters.Add(StringParam("MarketingLotIdentity2", 20));
            fStmt.Parameters.Add(StringParam("QualityLotIdentity", 20));
            fStmt.Parameters.Add(StringParam("QualityLotIdentity2", 20));
            fStmt.Parameters.Add(StringParam("WarehouseIdentity", 4));
            fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
            fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
            fStmt.Parameters.Add(NumberParam("CustomerOrderLinePosition", 6, 0));
            fStmt.Parameters.Add(NumberParam("CustomerOrderLineKitPosition", 2, 0));
            fStmt.Parameters.Add(NumberParam("CustomerOrderLineSequence", 3, 0));
            fStmt.Parameters.Add(StringParam("ReasonCode", 6));
            fStmt.Parameters.Add(StringParam("FreeText", 45));
            fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
            fStmt.Parameters.Add(StringParam("EmployeeId", 8));
            fStmt.Parameters.Add(DateParam("TimeStamp"));
            fStmt.Parameters.Add(StringParam("ItemLoadIdentity", 35));
            fStmt.Parameters.Add(StringParam("OperationCode", 1));
            fStmt.Parameters.Add(StringParam("InventoryChangeCode", 2));
            fStmt.Parameters.Add(StringParam("InventoryChangeText", 35));
            fStmt.Parameters.Add(StringParam("DespatchadviceIdentity", 35));
            fStmt.Parameters.Add(StringParam("PurchaseOrderNumber", 35));
            fStmt.Parameters.Add(NumberParam("PurchaseOrderSequence", 3, 0));
            fStmt.Parameters.Add(NumberParam("PurchaseOrderLinePosition", 6, 0));
            fStmt.Parameters.Add(NumberParam("PurchaseOrderLineSequence", 3, 0));
            fStmt.Parameters.Add(StringParam("VendorIdentity", 35));
            fStmt.Parameters.Add(StringParam("OwnerIdentity", 35));
            fStmt.Parameters.Add(StringParam("OwnerIdentity2", 35));
            fStmt.Parameters.Add(StringParam("ProductNumber", 35));

            fStmt.Prepare();

        }

        public void Process(ref MessageTransaction trans, SegmentImpl parent, InventoryChangeLineDoc p)
        {
            if (p == null)
            {
                // this is useful for testing calls without sending data
                return;
            }

            (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

            if (p.OPCODE != null)
            {
                if (p.OPCODE.Length > 1)
                    throw (new Exception("Value for InventoryChangeLineDoc.OPCODE too long, max 1 chars"));

                if (p.OPCODE.Length == 0)
                    throw (new Exception("Zero length for mandatory parameter InventoryChangeLineDoc.OPCODE not allowed"));

                (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
            }
            else
                throw (new Exception("Null value for mandatory parameter InventoryChangeLineDoc.OPCODE not allowed"));


            if (p.MeasuredQty != null)
            {
                (fStmt.Parameters["MeasuredQty"] as IDbDataParameter).Value = p.MeasuredQty.Value;
            }
            else
                (fStmt.Parameters["MeasuredQty"] as IDbDataParameter).Value = DBNull.Value;

            if (p.MeasuredQty2 != null)
            {
                (fStmt.Parameters["MeasuredQty2"] as IDbDataParameter).Value = p.MeasuredQty2.Value;
            }
            else
                (fStmt.Parameters["MeasuredQty2"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductDate != null)
            {
                (fStmt.Parameters["ProductDate"] as IDbDataParameter).Value = p.ProductDate.Value;
            }
            else
                (fStmt.Parameters["ProductDate"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductDate2 != null)
            {
                (fStmt.Parameters["ProductDate2"] as IDbDataParameter).Value = p.ProductDate2.Value;
            }
            else
                (fStmt.Parameters["ProductDate2"] as IDbDataParameter).Value = DBNull.Value;

            if (p.VendorIdentity2 != null)
            {
                if (p.VendorIdentity2.Length > 35)
                    throw (new Exception("Value for InventoryChangeLineDoc.VendorIdentity2 too long, max 35 chars"));

                (fStmt.Parameters["VendorIdentity2"] as IDbDataParameter).Value = p.VendorIdentity2;
            }
            else
                (fStmt.Parameters["VendorIdentity2"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductNumber2 != null)
            {
                if (p.ProductNumber2.Length > 35)
                    throw (new Exception("Value for InventoryChangeLineDoc.ProductNumber2 too long, max 35 chars"));

                (fStmt.Parameters["ProductNumber2"] as IDbDataParameter).Value = p.ProductNumber2;
            }
            else
                (fStmt.Parameters["ProductNumber2"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PackageIdentity != null)
            {
                if (p.PackageIdentity.Length > 17)
                    throw (new Exception("Value for InventoryChangeLineDoc.PackageIdentity too long, max 17 chars"));

                (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
            }
            else
                (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PackageIdentity2 != null)
            {
                if (p.PackageIdentity2.Length > 17)
                    throw (new Exception("Value for InventoryChangeLineDoc.PackageIdentity2 too long, max 17 chars"));

                (fStmt.Parameters["PackageIdentity2"] as IDbDataParameter).Value = p.PackageIdentity2;
            }
            else
                (fStmt.Parameters["PackageIdentity2"] as IDbDataParameter).Value = DBNull.Value;

            if (p.Quantity != null)
            {
                (fStmt.Parameters["Quantity"] as IDbDataParameter).Value = p.Quantity.Value;
            }
            else
                (fStmt.Parameters["Quantity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.Quantity2 != null)
            {
                (fStmt.Parameters["Quantity2"] as IDbDataParameter).Value = p.Quantity2.Value;
            }
            else
                (fStmt.Parameters["Quantity2"] as IDbDataParameter).Value = DBNull.Value;

            if (p.InventoryStatusCode != null)
            {
                if (p.InventoryStatusCode.Length > 8)
                    throw (new Exception("Value for InventoryChangeLineDoc.InventoryStatusCode too long, max 8 chars"));

                (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = p.InventoryStatusCode;
            }
            else
                (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = DBNull.Value;

            if (p.InventoryStatusCode2 != null)
            {
                if (p.InventoryStatusCode2.Length > 8)
                    throw (new Exception("Value for InventoryChangeLineDoc.InventoryStatusCode2 too long, max 8 chars"));

                (fStmt.Parameters["InventoryStatusCode2"] as IDbDataParameter).Value = p.InventoryStatusCode2;
            }
            else
                (fStmt.Parameters["InventoryStatusCode2"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductionLotIdentity != null)
            {
                if (p.ProductionLotIdentity.Length > 40)
                    throw (new Exception("Value for InventoryChangeLineDoc.ProductionLotIdentity too long, max 40 chars"));

                (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = p.ProductionLotIdentity;
            }
            else
                (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductionLotIdentity2 != null)
            {
                if (p.ProductionLotIdentity2.Length > 40)
                    throw (new Exception("Value for InventoryChangeLineDoc.ProductionLotIdentity2 too long, max 40 chars"));

                (fStmt.Parameters["ProductionLotIdentity2"] as IDbDataParameter).Value = p.ProductionLotIdentity2;
            }
            else
                (fStmt.Parameters["ProductionLotIdentity2"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductionSubLotIdentity != null)
            {
                if (p.ProductionSubLotIdentity.Length > 40)
                    throw (new Exception("Value for InventoryChangeLineDoc.ProductionSubLotIdentity too long, max 40 chars"));

                (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = p.ProductionSubLotIdentity;
            }
            else
                (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductionSublotIdentity2 != null)
            {
                if (p.ProductionSublotIdentity2.Length > 40)
                    throw (new Exception("Value for InventoryChangeLineDoc.ProductionSublotIdentity2 too long, max 40 chars"));

                (fStmt.Parameters["ProductionSublotIdentity2"] as IDbDataParameter).Value = p.ProductionSublotIdentity2;
            }
            else
                (fStmt.Parameters["ProductionSublotIdentity2"] as IDbDataParameter).Value = DBNull.Value;

            if (p.MarketingLotIdentity != null)
            {
                if (p.MarketingLotIdentity.Length > 20)
                    throw (new Exception("Value for InventoryChangeLineDoc.MarketingLotIdentity too long, max 20 chars"));

                (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = p.MarketingLotIdentity;
            }
            else
                (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.MarketingLotIdentity2 != null)
            {
                if (p.MarketingLotIdentity2.Length > 20)
                    throw (new Exception("Value for InventoryChangeLineDoc.MarketingLotIdentity2 too long, max 20 chars"));

                (fStmt.Parameters["MarketingLotIdentity2"] as IDbDataParameter).Value = p.MarketingLotIdentity2;
            }
            else
                (fStmt.Parameters["MarketingLotIdentity2"] as IDbDataParameter).Value = DBNull.Value;

            if (p.QualityLotIdentity != null)
            {
                if (p.QualityLotIdentity.Length > 20)
                    throw (new Exception("Value for InventoryChangeLineDoc.QualityLotIdentity too long, max 20 chars"));

                (fStmt.Parameters["QualityLotIdentity"] as IDbDataParameter).Value = p.QualityLotIdentity;
            }
            else
                (fStmt.Parameters["QualityLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.QualityLotIdentity2 != null)
            {
                if (p.QualityLotIdentity2.Length > 20)
                    throw (new Exception("Value for InventoryChangeLineDoc.QualityLotIdentity2 too long, max 20 chars"));

                (fStmt.Parameters["QualityLotIdentity2"] as IDbDataParameter).Value = p.QualityLotIdentity2;
            }
            else
                (fStmt.Parameters["QualityLotIdentity2"] as IDbDataParameter).Value = DBNull.Value;

            if (p.WarehouseIdentity != null)
            {
                if (p.WarehouseIdentity.Length > 4)
                    throw (new Exception("Value for InventoryChangeLineDoc.WarehouseIdentity too long, max 4 chars"));

                (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = p.WarehouseIdentity;
            }
            else
                (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderNumber != null)
            {
                if (p.CustomerOrderNumber.Length > 35)
                    throw (new Exception("Value for InventoryChangeLineDoc.CustomerOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
            }
            else
                (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderSequence != null)
            {
                (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderLinePosition != null)
            {
                (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = p.CustomerOrderLinePosition.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderLineKitPosition != null)
            {
                (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = p.CustomerOrderLineKitPosition.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderLineSequence != null)
            {
                (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = p.CustomerOrderLineSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ReasonCode != null)
            {
                if (p.ReasonCode.Length > 6)
                    throw (new Exception("Value for InventoryChangeLineDoc.ReasonCode too long, max 6 chars"));

                (fStmt.Parameters["ReasonCode"] as IDbDataParameter).Value = p.ReasonCode;
            }
            else
                (fStmt.Parameters["ReasonCode"] as IDbDataParameter).Value = DBNull.Value;

            if (p.FreeText != null)
            {
                if (p.FreeText.Length > 45)
                    throw (new Exception("Value for InventoryChangeLineDoc.FreeText too long, max 45 chars"));

                (fStmt.Parameters["FreeText"] as IDbDataParameter).Value = p.FreeText;
            }
            else
                (fStmt.Parameters["FreeText"] as IDbDataParameter).Value = DBNull.Value;

            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

            if (p.EmployeeId != null)
            {
                if (p.EmployeeId.Length > 8)
                    throw (new Exception("Value for InventoryChangeLineDoc.EmployeeId too long, max 8 chars"));

                (fStmt.Parameters["EmployeeId"] as IDbDataParameter).Value = p.EmployeeId;
            }
            else
                (fStmt.Parameters["EmployeeId"] as IDbDataParameter).Value = DBNull.Value;

            if (p.TimeStamp != null)
            {
                (fStmt.Parameters["TimeStamp"] as IDbDataParameter).Value = p.TimeStamp.Value;
            }
            else
                (fStmt.Parameters["TimeStamp"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ItemLoadIdentity != null)
            {
                if (p.ItemLoadIdentity.Length > 35)
                    throw (new Exception("Value for InventoryChangeLineDoc.ItemLoadIdentity too long, max 35 chars"));

                (fStmt.Parameters["ItemLoadIdentity"] as IDbDataParameter).Value = p.ItemLoadIdentity;
            }
            else
                (fStmt.Parameters["ItemLoadIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.OperationCode != null)
            {
                if (p.OperationCode.Length > 1)
                    throw (new Exception("Value for InventoryChangeLineDoc.OperationCode too long, max 1 chars"));

                (fStmt.Parameters["OperationCode"] as IDbDataParameter).Value = p.OperationCode;
            }
            else
                (fStmt.Parameters["OperationCode"] as IDbDataParameter).Value = DBNull.Value;

            if (p.InventoryChangeCode != null)
            {
                if (p.InventoryChangeCode.Length > 2)
                    throw (new Exception("Value for InventoryChangeLineDoc.InventoryChangeCode too long, max 2 chars"));

                (fStmt.Parameters["InventoryChangeCode"] as IDbDataParameter).Value = p.InventoryChangeCode;
            }
            else
                (fStmt.Parameters["InventoryChangeCode"] as IDbDataParameter).Value = DBNull.Value;

            if (p.InventoryChangeText != null)
            {
                if (p.InventoryChangeText.Length > 35)
                    throw (new Exception("Value for InventoryChangeLineDoc.InventoryChangeText too long, max 35 chars"));

                (fStmt.Parameters["InventoryChangeText"] as IDbDataParameter).Value = p.InventoryChangeText;
            }
            else
                (fStmt.Parameters["InventoryChangeText"] as IDbDataParameter).Value = DBNull.Value;

            if (p.DespatchadviceIdentity != null)
            {
                if (p.DespatchadviceIdentity.Length > 35)
                    throw (new Exception("Value for InventoryChangeLineDoc.DespatchadviceIdentity too long, max 35 chars"));

                (fStmt.Parameters["DespatchadviceIdentity"] as IDbDataParameter).Value = p.DespatchadviceIdentity;
            }
            else
                (fStmt.Parameters["DespatchadviceIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PurchaseOrderNumber != null)
            {
                if (p.PurchaseOrderNumber.Length > 35)
                    throw (new Exception("Value for InventoryChangeLineDoc.PurchaseOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = p.PurchaseOrderNumber;
            }
            else
                (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PurchaseOrderSequence != null)
            {
                (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = p.PurchaseOrderSequence.Value;
            }
            else
                (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PurchaseOrderLinePosition != null)
            {
                (fStmt.Parameters["PurchaseOrderLinePosition"] as IDbDataParameter).Value = p.PurchaseOrderLinePosition.Value;
            }
            else
                (fStmt.Parameters["PurchaseOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PurchaseOrderLineSequence != null)
            {
                (fStmt.Parameters["PurchaseOrderLineSequence"] as IDbDataParameter).Value = p.PurchaseOrderLineSequence.Value;
            }
            else
                (fStmt.Parameters["PurchaseOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.VendorIdentity != null)
            {
                if (p.VendorIdentity.Length > 35)
                    throw (new Exception("Value for InventoryChangeLineDoc.VendorIdentity too long, max 35 chars"));

                (fStmt.Parameters["VendorIdentity"] as IDbDataParameter).Value = p.VendorIdentity;
            }
            else
                (fStmt.Parameters["VendorIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.OwnerIdentity != null)
            {
                if (p.OwnerIdentity.Length > 35)
                    throw (new Exception("Value for InventoryChangeLineDoc.OwnerIdentity too long, max 35 chars"));

                (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = p.OwnerIdentity;
            }
            else
                (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.OwnerIdentity2 != null)
            {
                if (p.OwnerIdentity2.Length > 35)
                    throw (new Exception("Value for InventoryChangeLineDoc.OwnerIdentity2 too long, max 35 chars"));

                (fStmt.Parameters["OwnerIdentity2"] as IDbDataParameter).Value = p.OwnerIdentity2;
            }
            else
                (fStmt.Parameters["OwnerIdentity2"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductNumber != null)
            {
                if (p.ProductNumber.Length > 35)
                    throw (new Exception("Value for InventoryChangeLineDoc.ProductNumber too long, max 35 chars"));

                (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
            }
            else
                (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = DBNull.Value;

            trans.HapiTransSeq++;

            fStmt.ExecuteNonQuery();

        }
    }

    public class PickReceiptHeadInsert : SegmentImpl
    {
        private PickReceiptHeadPackingMaterialInsert aPickReceiptHeadPackingMaterialInsert;
        private PickReceiptLineInsert aPickReceiptLineInsert;
        private PickReceiptServiceInsert aPickReceiptServiceInsert;
        private PickReceiptTextInsert aPickReceiptTextInsert;

        public PickReceiptHeadInsert(WSBase owner)
            : base(owner)
        {
            StringBuilder s = new StringBuilder("insert into EXT2_PICK_RECEIPT_HEAD ( ");
            s.Append(" HAPIRCV_ID");
            s.Append(",OPCODE");
            s.Append(",LastOndeparture");
            s.Append(",ClientIdentity");
            s.Append(",CustomerOrderNumber");
            s.Append(",CustomerOrderSequence");
            s.Append(",CustomerOrderSubSequence");
            s.Append(",WarehouseIdentity");

            s.Append(" ) values ( ");

            s.Append(" :HAPIRCV_ID");
            s.Append(",:OPCODE");
            s.Append(",:LastOndeparture");
            s.Append(",:ClientIdentity");
            s.Append(",:CustomerOrderNumber");
            s.Append(",:CustomerOrderSequence");
            s.Append(",:CustomerOrderSubSequence");
            s.Append(",:WarehouseIdentity");

            s.Append(" )");

            fStmt.CommandText = s.ToString();

            fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
            fStmt.Parameters.Add(StringParam("OPCODE", 1));
            fStmt.Parameters.Add(StringParam("LastOndeparture", 1));
            fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
            fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
            fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
            fStmt.Parameters.Add(NumberParam("CustomerOrderSubSequence", 2, 0));
            fStmt.Parameters.Add(StringParam("WarehouseIdentity", 4));

            fStmt.Prepare();

            aPickReceiptHeadPackingMaterialInsert = new PickReceiptHeadPackingMaterialInsert(owner);
            aPickReceiptLineInsert = new PickReceiptLineInsert(owner);
            aPickReceiptServiceInsert = new PickReceiptServiceInsert(owner);
            aPickReceiptTextInsert = new PickReceiptTextInsert(owner);
        }

        public void Process(ref MessageTransaction trans, SegmentImpl parent, PickReceiptHeadDoc p)
        {
            if (p == null)
            {
                // this is useful for testing calls without sending data
                return;
            }

            (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

            if (p.OPCODE != null)
            {
                if (p.OPCODE.Length > 1)
                    throw (new Exception("Value for PickReceiptHeadDoc.OPCODE too long, max 1 chars"));

                if (p.OPCODE.Length == 0)
                    throw (new Exception("Zero length for mandatory parameter PickReceiptHeadDoc.OPCODE not allowed"));

                (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
            }
            else
                throw (new Exception("Null value for mandatory parameter PickReceiptHeadDoc.OPCODE not allowed"));


            if (p.LastOndeparture != null)
            {
                if (p.LastOndeparture.Length > 1)
                    throw (new Exception("Value for PickReceiptHeadDoc.LastOndeparture too long, max 1 chars"));

                (fStmt.Parameters["LastOndeparture"] as IDbDataParameter).Value = p.LastOndeparture;
            }
            else
                (fStmt.Parameters["LastOndeparture"] as IDbDataParameter).Value = DBNull.Value;

            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

            if (p.CustomerOrderNumber != null)
            {
                if (p.CustomerOrderNumber.Length > 35)
                    throw (new Exception("Value for PickReceiptHeadDoc.CustomerOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
            }
            else
                (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderSequence != null)
            {
                (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderSubSequence != null)
            {
                (fStmt.Parameters["CustomerOrderSubSequence"] as IDbDataParameter).Value = p.CustomerOrderSubSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderSubSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.WarehouseIdentity != null)
            {
                if (p.WarehouseIdentity.Length > 4)
                    throw (new Exception("Value for PickReceiptHeadDoc.WarehouseIdentity too long, max 4 chars"));

                (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = p.WarehouseIdentity;
            }
            else
                (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = DBNull.Value;

            trans.HapiTransSeq++;

            fStmt.ExecuteNonQuery();

            if (p.aPickReceiptHeadPackingMaterialDocs != null)
                foreach (PickReceiptHeadPackingMaterialDoc c in p.aPickReceiptHeadPackingMaterialDocs)
                    aPickReceiptHeadPackingMaterialInsert.Process(ref trans, this, c);
            if (p.aPickReceiptLineDocs != null)
                foreach (PickReceiptLineDoc d in p.aPickReceiptLineDocs)
                    aPickReceiptLineInsert.Process(ref trans, this, d);
            if (p.aPickReceiptServiceDocs != null)
                foreach (PickReceiptServiceDoc e in p.aPickReceiptServiceDocs)
                    aPickReceiptServiceInsert.Process(ref trans, this, e);
            if (p.aPickReceiptTextDocs != null)
                foreach (PickReceiptTextDoc f in p.aPickReceiptTextDocs)
                    aPickReceiptTextInsert.Process(ref trans, this, f);
        }
    }

    public class PickReceiptHeadPackingMaterialInsert : SegmentImpl
    {

        public PickReceiptHeadPackingMaterialInsert(WSBase owner)
            : base(owner)
        {
            StringBuilder s = new StringBuilder("insert into EXT2_PICK_RECEIPT_HEAD_PM ( ");
            s.Append(" HAPIRCV_ID");
            s.Append(",OPCODE");
            s.Append(",PackingMaterialType");
            s.Append(",Quantity");
            s.Append(",ClientIdentity");
            s.Append(",CustomerOrderNumber");
            s.Append(",CustomerOrderSequence");
            s.Append(",CustomerOrderSubSequence");

            s.Append(" ) values ( ");

            s.Append(" :HAPIRCV_ID");
            s.Append(",:OPCODE");
            s.Append(",:PackingMaterialType");
            s.Append(",:Quantity");
            s.Append(",:ClientIdentity");
            s.Append(",:CustomerOrderNumber");
            s.Append(",:CustomerOrderSequence");
            s.Append(",:CustomerOrderSubSequence");

            s.Append(" )");

            fStmt.CommandText = s.ToString();

            fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
            fStmt.Parameters.Add(StringParam("OPCODE", 1));
            fStmt.Parameters.Add(StringParam("PackingMaterialType", 35));
            fStmt.Parameters.Add(NumberParam("Quantity", 20, 6));
            fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
            fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
            fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
            fStmt.Parameters.Add(NumberParam("CustomerOrderSubSequence", 2, 0));

            fStmt.Prepare();

        }

        public void Process(ref MessageTransaction trans, SegmentImpl parent, PickReceiptHeadPackingMaterialDoc p)
        {
            if (p == null)
            {
                // this is useful for testing calls without sending data
                return;
            }

            (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

            if (p.OPCODE != null)
            {
                if (p.OPCODE.Length > 1)
                    throw (new Exception("Value for PickReceiptHeadPackingMaterialDoc.OPCODE too long, max 1 chars"));

                if (p.OPCODE.Length == 0)
                    throw (new Exception("Zero length for mandatory parameter PickReceiptHeadPackingMaterialDoc.OPCODE not allowed"));

                (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
            }
            else
                throw (new Exception("Null value for mandatory parameter PickReceiptHeadPackingMaterialDoc.OPCODE not allowed"));


            if (p.PackingMaterialType != null)
            {
                if (p.PackingMaterialType.Length > 35)
                    throw (new Exception("Value for PickReceiptHeadPackingMaterialDoc.PackingMaterialType too long, max 35 chars"));

                (fStmt.Parameters["PackingMaterialType"] as IDbDataParameter).Value = p.PackingMaterialType;
            }
            else
                (fStmt.Parameters["PackingMaterialType"] as IDbDataParameter).Value = DBNull.Value;

            if (p.Quantity != null)
            {
                (fStmt.Parameters["Quantity"] as IDbDataParameter).Value = p.Quantity.Value;
            }
            else
                (fStmt.Parameters["Quantity"] as IDbDataParameter).Value = DBNull.Value;

            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

            if (p.CustomerOrderNumber != null)
            {
                if (p.CustomerOrderNumber.Length > 35)
                    throw (new Exception("Value for PickReceiptHeadPackingMaterialDoc.CustomerOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
            }
            else
                (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderSequence != null)
            {
                (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderSubSequence != null)
            {
                (fStmt.Parameters["CustomerOrderSubSequence"] as IDbDataParameter).Value = p.CustomerOrderSubSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderSubSequence"] as IDbDataParameter).Value = DBNull.Value;

            trans.HapiTransSeq++;

            fStmt.ExecuteNonQuery();

        }
    }

    public class PickReceiptLineInsert : SegmentImpl
    {
        private PickReceiptLinePackingMaterialInsert aPickReceiptLinePackingMaterialInsert;

        public PickReceiptLineInsert(WSBase owner)
            : base(owner)
        {
            StringBuilder s = new StringBuilder("insert into EXT2_PICK_RECEIPT_LINE ( ");
            s.Append(" HAPIRCV_ID");
            s.Append(",OPCODE");
            s.Append(",CustomerOrderLineKitPosition");
            s.Append(",CustomerOrderLineSequence");
            s.Append(",OwnerIdentity");
            s.Append(",ProductIdentity");
            s.Append(",PackageIdentity");
            s.Append(",PickQuantity");
            s.Append(",MeasuredQty");
            s.Append(",RestCode");
            s.Append(",DepartureIdentity");
            s.Append(",DepartureWeekday");
            s.Append(",MarketingLotIdentity");
            s.Append(",QualityLotIdentity");
            s.Append(",FreighterIdentity");
            s.Append(",ShipDate");
            s.Append(",ConsignmentNote");
            s.Append(",PackingSlipIdentity");
            s.Append(",OrderedQuantity");
            s.Append(",UnderQuantity");
            s.Append(",OverQuantity");
            s.Append(",ProductionLotIdentity");
            s.Append(",ProductionSubLotIdentity");
            s.Append(",InventoryStatusCode");
            s.Append(",SerialNumber");
            s.Append(",ClientIdentity");
            s.Append(",CustomerOrderNumber");
            s.Append(",CustomerOrderSequence");
            s.Append(",CustomerOrderSubSequence");
            s.Append(",CustomerOrderLinePosition");

            s.Append(" ) values ( ");

            s.Append(" :HAPIRCV_ID");
            s.Append(",:OPCODE");
            s.Append(",:CustomerOrderLineKitPosition");
            s.Append(",:CustomerOrderLineSequence");
            s.Append(",:OwnerIdentity");
            s.Append(",:ProductIdentity");
            s.Append(",:PackageIdentity");
            s.Append(",:PickQuantity");
            s.Append(",:MeasuredQty");
            s.Append(",:RestCode");
            s.Append(",:DepartureIdentity");
            s.Append(",:DepartureWeekday");
            s.Append(",:MarketingLotIdentity");
            s.Append(",:QualityLotIdentity");
            s.Append(",:FreighterIdentity");
            s.Append(",:ShipDate");
            s.Append(",:ConsignmentNote");
            s.Append(",:PackingSlipIdentity");
            s.Append(",:OrderedQuantity");
            s.Append(",:UnderQuantity");
            s.Append(",:OverQuantity");
            s.Append(",:ProductionLotIdentity");
            s.Append(",:ProductionSubLotIdentity");
            s.Append(",:InventoryStatusCode");
            s.Append(",:SerialNumber");
            s.Append(",:ClientIdentity");
            s.Append(",:CustomerOrderNumber");
            s.Append(",:CustomerOrderSequence");
            s.Append(",:CustomerOrderSubSequence");
            s.Append(",:CustomerOrderLinePosition");

            s.Append(" )");

            fStmt.CommandText = s.ToString();

            fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
            fStmt.Parameters.Add(StringParam("OPCODE", 1));
            fStmt.Parameters.Add(NumberParam("CustomerOrderLineKitPosition", 2, 0));
            fStmt.Parameters.Add(NumberParam("CustomerOrderLineSequence", 3, 0));
            fStmt.Parameters.Add(StringParam("OwnerIdentity", 35));
            fStmt.Parameters.Add(StringParam("ProductIdentity", 35));
            fStmt.Parameters.Add(StringParam("PackageIdentity", 17));
            fStmt.Parameters.Add(NumberParam("PickQuantity", 20, 6));
            fStmt.Parameters.Add(NumberParam("MeasuredQty", 20, 6));
            fStmt.Parameters.Add(StringParam("RestCode", 3));
            fStmt.Parameters.Add(StringParam("DepartureIdentity", 35));
            fStmt.Parameters.Add(StringParam("DepartureWeekday", 1));
            fStmt.Parameters.Add(StringParam("MarketingLotIdentity", 20));
            fStmt.Parameters.Add(StringParam("QualityLotIdentity", 20));
            fStmt.Parameters.Add(StringParam("FreighterIdentity", 35));
            fStmt.Parameters.Add(DateParam("ShipDate"));
            fStmt.Parameters.Add(StringParam("ConsignmentNote", 35));
            fStmt.Parameters.Add(StringParam("PackingSlipIdentity", 20));
            fStmt.Parameters.Add(NumberParam("OrderedQuantity", 20, 6));
            fStmt.Parameters.Add(NumberParam("UnderQuantity", 20, 6));
            fStmt.Parameters.Add(NumberParam("OverQuantity", 20, 6));
            fStmt.Parameters.Add(StringParam("ProductionLotIdentity", 40));
            fStmt.Parameters.Add(StringParam("ProductionSubLotIdentity", 40));
            fStmt.Parameters.Add(StringParam("InventoryStatusCode", 8));
            fStmt.Parameters.Add(StringParam("SerialNumber", 21));
            fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
            fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
            fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
            fStmt.Parameters.Add(NumberParam("CustomerOrderSubSequence", 2, 0));
            fStmt.Parameters.Add(NumberParam("CustomerOrderLinePosition", 5, 0));

            fStmt.Prepare();

            aPickReceiptLinePackingMaterialInsert = new PickReceiptLinePackingMaterialInsert(owner);
        }

        public void Process(ref MessageTransaction trans, SegmentImpl parent, PickReceiptLineDoc p)
        {
            if (p == null)
            {
                // this is useful for testing calls without sending data
                return;
            }

            (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

            if (p.OPCODE != null)
            {
                if (p.OPCODE.Length > 1)
                    throw (new Exception("Value for PickReceiptLineDoc.OPCODE too long, max 1 chars"));

                if (p.OPCODE.Length == 0)
                    throw (new Exception("Zero length for mandatory parameter PickReceiptLineDoc.OPCODE not allowed"));

                (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
            }
            else
                throw (new Exception("Null value for mandatory parameter PickReceiptLineDoc.OPCODE not allowed"));


            if (p.CustomerOrderLineKitPosition != null)
            {
                (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = p.CustomerOrderLineKitPosition.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderLineSequence != null)
            {
                (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = p.CustomerOrderLineSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.OwnerIdentity != null)
            {
                if (p.OwnerIdentity.Length > 35)
                    throw (new Exception("Value for PickReceiptLineDoc.OwnerIdentity too long, max 35 chars"));

                (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = p.OwnerIdentity;
            }
            else
                (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductIdentity != null)
            {
                if (p.ProductIdentity.Length > 35)
                    throw (new Exception("Value for PickReceiptLineDoc.ProductIdentity too long, max 35 chars"));

                (fStmt.Parameters["ProductIdentity"] as IDbDataParameter).Value = p.ProductIdentity;
            }
            else
                (fStmt.Parameters["ProductIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PackageIdentity != null)
            {
                if (p.PackageIdentity.Length > 17)
                    throw (new Exception("Value for PickReceiptLineDoc.PackageIdentity too long, max 17 chars"));

                (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
            }
            else
                (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PickQuantity != null)
            {
                (fStmt.Parameters["PickQuantity"] as IDbDataParameter).Value = p.PickQuantity.Value;
            }
            else
                (fStmt.Parameters["PickQuantity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.MeasuredQty != null)
            {
                (fStmt.Parameters["MeasuredQty"] as IDbDataParameter).Value = p.MeasuredQty.Value;
            }
            else
                (fStmt.Parameters["MeasuredQty"] as IDbDataParameter).Value = DBNull.Value;

            if (p.RestCode != null)
            {
                if (p.RestCode.Length > 3)
                    throw (new Exception("Value for PickReceiptLineDoc.RestCode too long, max 3 chars"));

                (fStmt.Parameters["RestCode"] as IDbDataParameter).Value = p.RestCode;
            }
            else
                (fStmt.Parameters["RestCode"] as IDbDataParameter).Value = DBNull.Value;

            if (p.DepartureIdentity != null)
            {
                if (p.DepartureIdentity.Length > 35)
                    throw (new Exception("Value for PickReceiptLineDoc.DepartureIdentity too long, max 35 chars"));

                (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = p.DepartureIdentity;
            }
            else
                (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.DepartureWeekday != null)
            {
                if (p.DepartureWeekday.Length > 1)
                    throw (new Exception("Value for PickReceiptLineDoc.DepartureWeekday too long, max 1 chars"));

                (fStmt.Parameters["DepartureWeekday"] as IDbDataParameter).Value = p.DepartureWeekday;
            }
            else
                (fStmt.Parameters["DepartureWeekday"] as IDbDataParameter).Value = DBNull.Value;

            if (p.MarketingLotIdentity != null)
            {
                if (p.MarketingLotIdentity.Length > 20)
                    throw (new Exception("Value for PickReceiptLineDoc.MarketingLotIdentity too long, max 20 chars"));

                (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = p.MarketingLotIdentity;
            }
            else
                (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.QualityLotIdentity != null)
            {
                if (p.QualityLotIdentity.Length > 20)
                    throw (new Exception("Value for PickReceiptLineDoc.QualityLotIdentity too long, max 20 chars"));

                (fStmt.Parameters["QualityLotIdentity"] as IDbDataParameter).Value = p.QualityLotIdentity;
            }
            else
                (fStmt.Parameters["QualityLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.FreighterIdentity != null)
            {
                if (p.FreighterIdentity.Length > 35)
                    throw (new Exception("Value for PickReceiptLineDoc.FreighterIdentity too long, max 35 chars"));

                (fStmt.Parameters["FreighterIdentity"] as IDbDataParameter).Value = p.FreighterIdentity;
            }
            else
                (fStmt.Parameters["FreighterIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipDate != null)
            {
                (fStmt.Parameters["ShipDate"] as IDbDataParameter).Value = p.ShipDate.Value;
            }
            else
                (fStmt.Parameters["ShipDate"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ConsignmentNote != null)
            {
                if (p.ConsignmentNote.Length > 35)
                    throw (new Exception("Value for PickReceiptLineDoc.ConsignmentNote too long, max 35 chars"));

                (fStmt.Parameters["ConsignmentNote"] as IDbDataParameter).Value = p.ConsignmentNote;
            }
            else
                (fStmt.Parameters["ConsignmentNote"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PackingSlipIdentity != null)
            {
                if (p.PackingSlipIdentity.Length > 20)
                    throw (new Exception("Value for PickReceiptLineDoc.PackingSlipIdentity too long, max 20 chars"));

                (fStmt.Parameters["PackingSlipIdentity"] as IDbDataParameter).Value = p.PackingSlipIdentity;
            }
            else
                (fStmt.Parameters["PackingSlipIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.OrderedQuantity != null)
            {
                (fStmt.Parameters["OrderedQuantity"] as IDbDataParameter).Value = p.OrderedQuantity.Value;
            }
            else
                (fStmt.Parameters["OrderedQuantity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.UnderQuantity != null)
            {
                (fStmt.Parameters["UnderQuantity"] as IDbDataParameter).Value = p.UnderQuantity.Value;
            }
            else
                (fStmt.Parameters["UnderQuantity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.OverQuantity != null)
            {
                (fStmt.Parameters["OverQuantity"] as IDbDataParameter).Value = p.OverQuantity.Value;
            }
            else
                (fStmt.Parameters["OverQuantity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductionLotIdentity != null)
            {
                if (p.ProductionLotIdentity.Length > 40)
                    throw (new Exception("Value for PickReceiptLineDoc.ProductionLotIdentity too long, max 40 chars"));

                (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = p.ProductionLotIdentity;
            }
            else
                (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductionSubLotIdentity != null)
            {
                if (p.ProductionSubLotIdentity.Length > 40)
                    throw (new Exception("Value for PickReceiptLineDoc.ProductionSubLotIdentity too long, max 40 chars"));

                (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = p.ProductionSubLotIdentity;
            }
            else
                (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.InventoryStatusCode != null)
            {
                if (p.InventoryStatusCode.Length > 8)
                    throw (new Exception("Value for PickReceiptLineDoc.InventoryStatusCode too long, max 8 chars"));

                (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = p.InventoryStatusCode;
            }
            else
                (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = DBNull.Value;

            if (p.SerialNumber != null)
            {
                if (p.SerialNumber.Length > 21)
                    throw (new Exception("Value for PickReceiptLineDoc.SerialNumber too long, max 21 chars"));

                (fStmt.Parameters["SerialNumber"] as IDbDataParameter).Value = p.SerialNumber;
            }
            else
                (fStmt.Parameters["SerialNumber"] as IDbDataParameter).Value = DBNull.Value;

            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

            if (p.CustomerOrderNumber != null)
            {
                if (p.CustomerOrderNumber.Length > 35)
                    throw (new Exception("Value for PickReceiptLineDoc.CustomerOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
            }
            else
                (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderSequence != null)
            {
                (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderSubSequence != null)
            {
                (fStmt.Parameters["CustomerOrderSubSequence"] as IDbDataParameter).Value = p.CustomerOrderSubSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderSubSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderLinePosition != null)
            {
                (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = p.CustomerOrderLinePosition.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

            trans.HapiTransSeq++;

            fStmt.ExecuteNonQuery();

            if (p.aPickReceiptLinePackingMaterialDocs != null)
                foreach (PickReceiptLinePackingMaterialDoc c in p.aPickReceiptLinePackingMaterialDocs)
                    aPickReceiptLinePackingMaterialInsert.Process(ref trans, this, c);
        }
    }

    public class PickReceiptLinePackingMaterialInsert : SegmentImpl
    {

        public PickReceiptLinePackingMaterialInsert(WSBase owner)
            : base(owner)
        {
            StringBuilder s = new StringBuilder("insert into EXT2_PICK_RECEIPT_LINE_PM ( ");
            s.Append(" HAPIRCV_ID");
            s.Append(",OPCODE");
            s.Append(",PackingMaterialType");
            s.Append(",Quantity");
            s.Append(",ClientIdentity");
            s.Append(",CustomerOrderNumber");
            s.Append(",CustomerOrderSequence");
            s.Append(",CustomerOrderSubSequence");
            s.Append(",CustomerOrderLinePosition");
            s.Append(",CustomerOrderLineKitPosition");
            s.Append(",CustomerOrderLineSequence");

            s.Append(" ) values ( ");

            s.Append(" :HAPIRCV_ID");
            s.Append(",:OPCODE");
            s.Append(",:PackingMaterialType");
            s.Append(",:Quantity");
            s.Append(",:ClientIdentity");
            s.Append(",:CustomerOrderNumber");
            s.Append(",:CustomerOrderSequence");
            s.Append(",:CustomerOrderSubSequence");
            s.Append(",:CustomerOrderLinePosition");
            s.Append(",:CustomerOrderLineKitPosition");
            s.Append(",:CustomerOrderLineSequence");

            s.Append(" )");

            fStmt.CommandText = s.ToString();

            fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
            fStmt.Parameters.Add(StringParam("OPCODE", 1));
            fStmt.Parameters.Add(StringParam("PackingMaterialType", 35));
            fStmt.Parameters.Add(NumberParam("Quantity", 20, 6));
            fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
            fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
            fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
            fStmt.Parameters.Add(NumberParam("CustomerOrderSubSequence", 2, 0));
            fStmt.Parameters.Add(NumberParam("CustomerOrderLinePosition", 5, 0));
            fStmt.Parameters.Add(NumberParam("CustomerOrderLineKitPosition", 2, 0));
            fStmt.Parameters.Add(NumberParam("CustomerOrderLineSequence", 3, 0));

            fStmt.Prepare();

        }

        public void Process(ref MessageTransaction trans, SegmentImpl parent, PickReceiptLinePackingMaterialDoc p)
        {
            if (p == null)
            {
                // this is useful for testing calls without sending data
                return;
            }

            (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

            if (p.OPCODE != null)
            {
                if (p.OPCODE.Length > 1)
                    throw (new Exception("Value for PickReceiptLinePackingMaterialDoc.OPCODE too long, max 1 chars"));

                if (p.OPCODE.Length == 0)
                    throw (new Exception("Zero length for mandatory parameter PickReceiptLinePackingMaterialDoc.OPCODE not allowed"));

                (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
            }
            else
                throw (new Exception("Null value for mandatory parameter PickReceiptLinePackingMaterialDoc.OPCODE not allowed"));


            if (p.PackingMaterialType != null)
            {
                if (p.PackingMaterialType.Length > 35)
                    throw (new Exception("Value for PickReceiptLinePackingMaterialDoc.PackingMaterialType too long, max 35 chars"));

                (fStmt.Parameters["PackingMaterialType"] as IDbDataParameter).Value = p.PackingMaterialType;
            }
            else
                (fStmt.Parameters["PackingMaterialType"] as IDbDataParameter).Value = DBNull.Value;

            if (p.Quantity != null)
            {
                (fStmt.Parameters["Quantity"] as IDbDataParameter).Value = p.Quantity.Value;
            }
            else
                (fStmt.Parameters["Quantity"] as IDbDataParameter).Value = DBNull.Value;

            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

            if (p.CustomerOrderNumber != null)
            {
                if (p.CustomerOrderNumber.Length > 35)
                    throw (new Exception("Value for PickReceiptLinePackingMaterialDoc.CustomerOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
            }
            else
                (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderSequence != null)
            {
                (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderSubSequence != null)
            {
                (fStmt.Parameters["CustomerOrderSubSequence"] as IDbDataParameter).Value = p.CustomerOrderSubSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderSubSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderLinePosition != null)
            {
                (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = p.CustomerOrderLinePosition.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderLineKitPosition != null)
            {
                (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = p.CustomerOrderLineKitPosition.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderLineSequence != null)
            {
                (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = p.CustomerOrderLineSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

            trans.HapiTransSeq++;

            fStmt.ExecuteNonQuery();

        }
    }

    public class PickReceiptServiceInsert : SegmentImpl
    {

        public PickReceiptServiceInsert(WSBase owner)
            : base(owner)
        {
            StringBuilder s = new StringBuilder("insert into EXT2_PICK_RECEIPT_SERVICE ( ");
            s.Append(" HAPIRCV_ID");
            s.Append(",OPCODE");
            s.Append(",ClientIdentity");
            s.Append(",CustomerOrderNumber");
            s.Append(",CustomerOrderSequence");
            s.Append(",CustomerOrderSubSequence");
            s.Append(",ServiceQualifier");
            s.Append(",ServiceCode");
            s.Append(",ServiceQty");

            s.Append(" ) values ( ");

            s.Append(" :HAPIRCV_ID");
            s.Append(",:OPCODE");
            s.Append(",:ClientIdentity");
            s.Append(",:CustomerOrderNumber");
            s.Append(",:CustomerOrderSequence");
            s.Append(",:CustomerOrderSubSequence");
            s.Append(",:ServiceQualifier");
            s.Append(",:ServiceCode");
            s.Append(",:ServiceQty");

            s.Append(" )");

            fStmt.CommandText = s.ToString();

            fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
            fStmt.Parameters.Add(StringParam("OPCODE", 1));
            fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
            fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
            fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
            fStmt.Parameters.Add(NumberParam("CustomerOrderSubSequence", 2, 0));
            fStmt.Parameters.Add(StringParam("ServiceQualifier", 3));
            fStmt.Parameters.Add(StringParam("ServiceCode", 17));
            fStmt.Parameters.Add(NumberParam("ServiceQty", 20, 6));

            fStmt.Prepare();

        }

        public void Process(ref MessageTransaction trans, SegmentImpl parent, PickReceiptServiceDoc p)
        {
            if (p == null)
            {
                // this is useful for testing calls without sending data
                return;
            }

            (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

            if (p.OPCODE != null)
            {
                if (p.OPCODE.Length > 1)
                    throw (new Exception("Value for PickReceiptServiceDoc.OPCODE too long, max 1 chars"));

                if (p.OPCODE.Length == 0)
                    throw (new Exception("Zero length for mandatory parameter PickReceiptServiceDoc.OPCODE not allowed"));

                (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
            }
            else
                throw (new Exception("Null value for mandatory parameter PickReceiptServiceDoc.OPCODE not allowed"));


            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

            if (p.CustomerOrderNumber != null)
            {
                if (p.CustomerOrderNumber.Length > 35)
                    throw (new Exception("Value for PickReceiptServiceDoc.CustomerOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
            }
            else
                (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderSequence != null)
            {
                (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderSubSequence != null)
            {
                (fStmt.Parameters["CustomerOrderSubSequence"] as IDbDataParameter).Value = p.CustomerOrderSubSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderSubSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ServiceQualifier != null)
            {
                if (p.ServiceQualifier.Length > 3)
                    throw (new Exception("Value for PickReceiptServiceDoc.ServiceQualifier too long, max 3 chars"));

                (fStmt.Parameters["ServiceQualifier"] as IDbDataParameter).Value = p.ServiceQualifier;
            }
            else
                (fStmt.Parameters["ServiceQualifier"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ServiceCode != null)
            {
                if (p.ServiceCode.Length > 17)
                    throw (new Exception("Value for PickReceiptServiceDoc.ServiceCode too long, max 17 chars"));

                (fStmt.Parameters["ServiceCode"] as IDbDataParameter).Value = p.ServiceCode;
            }
            else
                (fStmt.Parameters["ServiceCode"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ServiceQty != null)
            {
                (fStmt.Parameters["ServiceQty"] as IDbDataParameter).Value = p.ServiceQty.Value;
            }
            else
                (fStmt.Parameters["ServiceQty"] as IDbDataParameter).Value = DBNull.Value;

            trans.HapiTransSeq++;

            fStmt.ExecuteNonQuery();

        }
    }

    public class PickReceiptTextInsert : SegmentImpl
    {

        public PickReceiptTextInsert(WSBase owner)
            : base(owner)
        {
            StringBuilder s = new StringBuilder("insert into EXT2_PICK_RECEIPT_TEXT ( ");
            s.Append(" HAPIRCV_ID");
            s.Append(",OPCODE");
            s.Append(",ClientIdentity");
            s.Append(",CustomerOrderNumber");
            s.Append(",CustomerOrderSequence");
            s.Append(",CustomerOrderSubSequence");
            s.Append(",TextFunction");
            s.Append(",Text");

            s.Append(" ) values ( ");

            s.Append(" :HAPIRCV_ID");
            s.Append(",:OPCODE");
            s.Append(",:ClientIdentity");
            s.Append(",:CustomerOrderNumber");
            s.Append(",:CustomerOrderSequence");
            s.Append(",:CustomerOrderSubSequence");
            s.Append(",:TextFunction");
            s.Append(",:Text");

            s.Append(" )");

            fStmt.CommandText = s.ToString();

            fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
            fStmt.Parameters.Add(StringParam("OPCODE", 1));
            fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
            fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
            fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
            fStmt.Parameters.Add(NumberParam("CustomerOrderSubSequence", 2, 0));
            fStmt.Parameters.Add(StringParam("TextFunction", 3));
            fStmt.Parameters.Add(StringParam("Text", 400));

            fStmt.Prepare();

        }

        public void Process(ref MessageTransaction trans, SegmentImpl parent, PickReceiptTextDoc p)
        {
            if (p == null)
            {
                // this is useful for testing calls without sending data
                return;
            }

            (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

            if (p.OPCODE != null)
            {
                if (p.OPCODE.Length > 1)
                    throw (new Exception("Value for PickReceiptTextDoc.OPCODE too long, max 1 chars"));

                if (p.OPCODE.Length == 0)
                    throw (new Exception("Zero length for mandatory parameter PickReceiptTextDoc.OPCODE not allowed"));

                (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
            }
            else
                throw (new Exception("Null value for mandatory parameter PickReceiptTextDoc.OPCODE not allowed"));


            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

            if (p.CustomerOrderNumber != null)
            {
                if (p.CustomerOrderNumber.Length > 35)
                    throw (new Exception("Value for PickReceiptTextDoc.CustomerOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
            }
            else
                (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderSequence != null)
            {
                (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderSubSequence != null)
            {
                (fStmt.Parameters["CustomerOrderSubSequence"] as IDbDataParameter).Value = p.CustomerOrderSubSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderSubSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.TextFunction != null)
            {
                if (p.TextFunction.Length > 3)
                    throw (new Exception("Value for PickReceiptTextDoc.TextFunction too long, max 3 chars"));

                (fStmt.Parameters["TextFunction"] as IDbDataParameter).Value = p.TextFunction;
            }
            else
                (fStmt.Parameters["TextFunction"] as IDbDataParameter).Value = DBNull.Value;

            if (p.Text != null)
            {
                if (p.Text.Length > 400)
                    throw (new Exception("Value for PickReceiptTextDoc.Text too long, max 400 chars"));

                (fStmt.Parameters["Text"] as IDbDataParameter).Value = p.Text;
            }
            else
                (fStmt.Parameters["Text"] as IDbDataParameter).Value = DBNull.Value;

            trans.HapiTransSeq++;

            fStmt.ExecuteNonQuery();

        }
    }

    public class ReturnedPackingMaterialHeadInsert : SegmentImpl
    {
        private ReturnedPackingMaterialLineInsert aReturnedPackingMaterialLineInsert;

        public ReturnedPackingMaterialHeadInsert(WSBase owner)
            : base(owner)            
        {
            StringBuilder s = new StringBuilder("insert into EXT2_RETURNED_PM_HEAD ( ");
            s.Append(" HAPIRCV_ID");
            s.Append(",OPCODE");
            s.Append(",Rpmid");
            s.Append(",ClientIdentity");
            s.Append(",Customer_id");
            s.Append(",Referense");
            s.Append(",ArrivalDateTime");
            s.Append(",WarehouseIdentity");

            s.Append(" ) values ( ");

            s.Append(" :HAPIRCV_ID");
            s.Append(",:OPCODE");
            s.Append(",:Rpmid");
            s.Append(",:ClientIdentity");
            s.Append(",:Customer_id");
            s.Append(",:Referense");
            s.Append(",:ArrivalDateTime");
            s.Append(",:WarehouseIdentity");

            s.Append(" )");

            fStmt.CommandText = s.ToString();

            fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
            fStmt.Parameters.Add(StringParam("OPCODE", 1));
            fStmt.Parameters.Add(NumberParam("Rpmid", 0, 0));
            fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
            fStmt.Parameters.Add(StringParam("Customer_id", 35));
            fStmt.Parameters.Add(StringParam("Referense", 200));
            fStmt.Parameters.Add(DateParam("ArrivalDateTime"));
            fStmt.Parameters.Add(StringParam("WarehouseIdentity", 4));

            fStmt.Prepare();

            aReturnedPackingMaterialLineInsert = new ReturnedPackingMaterialLineInsert(owner);
        }

        public void Process(ref MessageTransaction trans, SegmentImpl parent, ReturnedPackingMaterialHeadDoc p)
        {
            if (p == null)
            {
                // this is useful for testing calls without sending data
                return;
            }

            (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

            if (p.OPCODE != null)
            {
                if (p.OPCODE.Length > 1)
                    throw (new Exception("Value for ReturnedPackingMaterialHeadDoc.OPCODE too long, max 1 chars"));

                if (p.OPCODE.Length == 0)
                    throw (new Exception("Zero length for mandatory parameter ReturnedPackingMaterialHeadDoc.OPCODE not allowed"));

                (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
            }
            else
                throw (new Exception("Null value for mandatory parameter ReturnedPackingMaterialHeadDoc.OPCODE not allowed"));


            if (p.Rpmid != null)
            {
                (fStmt.Parameters["Rpmid"] as IDbDataParameter).Value = p.Rpmid.Value;
            }
            else
                (fStmt.Parameters["Rpmid"] as IDbDataParameter).Value = DBNull.Value;

            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

            if (p.Customer_id != null)
            {
                if (p.Customer_id.Length > 35)
                    throw (new Exception("Value for ReturnedPackingMaterialHeadDoc.Customer_id too long, max 35 chars"));

                (fStmt.Parameters["Customer_id"] as IDbDataParameter).Value = p.Customer_id;
            }
            else
                (fStmt.Parameters["Customer_id"] as IDbDataParameter).Value = DBNull.Value;

            if (p.Referense != null)
            {
                if (p.Referense.Length > 200)
                    throw (new Exception("Value for ReturnedPackingMaterialHeadDoc.Referense too long, max 200 chars"));

                (fStmt.Parameters["Referense"] as IDbDataParameter).Value = p.Referense;
            }
            else
                (fStmt.Parameters["Referense"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ArrivalDateTime != null)
            {
                (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = p.ArrivalDateTime.Value;
            }
            else
                (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = DBNull.Value;

            if (p.WarehouseIdentity != null)
            {
                if (p.WarehouseIdentity.Length > 4)
                    throw (new Exception("Value for ReturnedPackingMaterialHeadDoc.WarehouseIdentity too long, max 4 chars"));

                (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = p.WarehouseIdentity;
            }
            else
                (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = DBNull.Value;

            trans.HapiTransSeq++;

            fStmt.ExecuteNonQuery();

            if (p.aReturnedPackingMaterialLineDocs != null)
                foreach (ReturnedPackingMaterialLineDoc c in p.aReturnedPackingMaterialLineDocs)
                    aReturnedPackingMaterialLineInsert.Process(ref trans, this, c);
        }
    }

    public class ReturnedPackingMaterialLineInsert : SegmentImpl
    {

        public ReturnedPackingMaterialLineInsert(WSBase owner)
            : base(owner)            
        {
            StringBuilder s = new StringBuilder("insert into EXT2_RETURNED_PM_LINE ( ");
            s.Append(" HAPIRCV_ID");
            s.Append(",OPCODE");
            s.Append(",Rpmid");
            s.Append(",Seqnum");
            s.Append(",ProductIdentity");
            s.Append(",Quantity");

            s.Append(" ) values ( ");

            s.Append(" :HAPIRCV_ID");
            s.Append(",:OPCODE");
            s.Append(",:Rpmid");
            s.Append(",:Seqnum");
            s.Append(",:ProductIdentity");
            s.Append(",:Quantity");

            s.Append(" )");

            fStmt.CommandText = s.ToString();

            fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
            fStmt.Parameters.Add(StringParam("OPCODE", 1));
            fStmt.Parameters.Add(NumberParam("Rpmid", 0, 0));
            fStmt.Parameters.Add(NumberParam("Seqnum", 0, 0));
            fStmt.Parameters.Add(StringParam("ProductIdentity", 35));
            fStmt.Parameters.Add(NumberParam("Quantity", 20, 6));

            fStmt.Prepare();

        }

        public void Process(ref MessageTransaction trans, SegmentImpl parent, ReturnedPackingMaterialLineDoc p)
        {
            if (p == null)
            {
                // this is useful for testing calls without sending data
                return;
            }

            (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

            if (p.OPCODE != null)
            {
                if (p.OPCODE.Length > 1)
                    throw (new Exception("Value for ReturnedPackingMaterialLineDoc.OPCODE too long, max 1 chars"));

                if (p.OPCODE.Length == 0)
                    throw (new Exception("Zero length for mandatory parameter ReturnedPackingMaterialLineDoc.OPCODE not allowed"));

                (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
            }
            else
                throw (new Exception("Null value for mandatory parameter ReturnedPackingMaterialLineDoc.OPCODE not allowed"));


            if (p.Rpmid != null)
            {
                (fStmt.Parameters["Rpmid"] as IDbDataParameter).Value = p.Rpmid.Value;
            }
            else
                (fStmt.Parameters["Rpmid"] as IDbDataParameter).Value = DBNull.Value;

            (fStmt.Parameters["Seqnum"] as IDbDataParameter).Value = NumberValue(trans.HapiTransSeq);

            if (p.ProductIdentity != null)
            {
                if (p.ProductIdentity.Length > 35)
                    throw (new Exception("Value for ReturnedPackingMaterialLineDoc.ProductIdentity too long, max 35 chars"));

                (fStmt.Parameters["ProductIdentity"] as IDbDataParameter).Value = p.ProductIdentity;
            }
            else
                (fStmt.Parameters["ProductIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.Quantity != null)
            {
                (fStmt.Parameters["Quantity"] as IDbDataParameter).Value = p.Quantity.Value;
            }
            else
                (fStmt.Parameters["Quantity"] as IDbDataParameter).Value = DBNull.Value;

            trans.HapiTransSeq++;

            fStmt.ExecuteNonQuery();

        }
    }

    public class ReturnReceiptHeadInsert : SegmentImpl
    {
        private ReturnReceiptHeadPackingMaterialInsert aReturnReceiptHeadPackingMaterialInsert;
        private ReturnReceiptLineInsert aReturnReceiptLineInsert;

        public ReturnReceiptHeadInsert(WSBase owner)
            : base(owner)            
        {
            StringBuilder s = new StringBuilder("insert into EXT2_RETURN_RECEIPT_HEAD ( ");
            s.Append(" HAPIRCV_ID");
            s.Append(",OPCODE");
            s.Append(",ClientIdentity");
            s.Append(",ReturnOrderNumber");
            s.Append(",ReturnOrderSequence");
            s.Append(",ReturnOrderSubSequence");
            s.Append(",WarehouseIdentity");
            s.Append(",ShipDate");
            s.Append(",SpontaneousReturn");
            s.Append(",VendorIdentity");

            s.Append(" ) values ( ");

            s.Append(" :HAPIRCV_ID");
            s.Append(",:OPCODE");
            s.Append(",:ClientIdentity");
            s.Append(",:ReturnOrderNumber");
            s.Append(",:ReturnOrderSequence");
            s.Append(",:ReturnOrderSubSequence");
            s.Append(",:WarehouseIdentity");
            s.Append(",:ShipDate");
            s.Append(",:SpontaneousReturn");
            s.Append(",:VendorIdentity");

            s.Append(" )");

            fStmt.CommandText = s.ToString();

            fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
            fStmt.Parameters.Add(StringParam("OPCODE", 1));
            fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
            fStmt.Parameters.Add(StringParam("ReturnOrderNumber", 35));
            fStmt.Parameters.Add(NumberParam("ReturnOrderSequence", 3, 0));
            fStmt.Parameters.Add(NumberParam("ReturnOrderSubSequence", 2, 0));
            fStmt.Parameters.Add(StringParam("WarehouseIdentity", 4));
            fStmt.Parameters.Add(DateParam("ShipDate"));
            fStmt.Parameters.Add(StringParam("SpontaneousReturn", 1));
            fStmt.Parameters.Add(StringParam("VendorIdentity", 35));

            fStmt.Prepare();

            aReturnReceiptHeadPackingMaterialInsert = new ReturnReceiptHeadPackingMaterialInsert(owner);
            aReturnReceiptLineInsert = new ReturnReceiptLineInsert(owner);
        }

        public void Process(ref MessageTransaction trans, SegmentImpl parent, ReturnReceiptHeadDoc p)
        {
            if (p == null)
            {
                // this is useful for testing calls without sending data
                return;
            }

            (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

            if (p.OPCODE != null)
            {
                if (p.OPCODE.Length > 1)
                    throw (new Exception("Value for ReturnReceiptHeadDoc.OPCODE too long, max 1 chars"));

                if (p.OPCODE.Length == 0)
                    throw (new Exception("Zero length for mandatory parameter ReturnReceiptHeadDoc.OPCODE not allowed"));

                (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
            }
            else
                throw (new Exception("Null value for mandatory parameter ReturnReceiptHeadDoc.OPCODE not allowed"));


            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

            if (p.ReturnOrderNumber != null)
            {
                if (p.ReturnOrderNumber.Length > 35)
                    throw (new Exception("Value for ReturnReceiptHeadDoc.ReturnOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["ReturnOrderNumber"] as IDbDataParameter).Value = p.ReturnOrderNumber;
            }
            else
                (fStmt.Parameters["ReturnOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ReturnOrderSequence != null)
            {
                (fStmt.Parameters["ReturnOrderSequence"] as IDbDataParameter).Value = p.ReturnOrderSequence.Value;
            }
            else
                (fStmt.Parameters["ReturnOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ReturnOrderSubSequence != null)
            {
                (fStmt.Parameters["ReturnOrderSubSequence"] as IDbDataParameter).Value = p.ReturnOrderSubSequence.Value;
            }
            else
                (fStmt.Parameters["ReturnOrderSubSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.WarehouseIdentity != null)
            {
                if (p.WarehouseIdentity.Length > 4)
                    throw (new Exception("Value for ReturnReceiptHeadDoc.WarehouseIdentity too long, max 4 chars"));

                (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = p.WarehouseIdentity;
            }
            else
                (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipDate != null)
            {
                (fStmt.Parameters["ShipDate"] as IDbDataParameter).Value = p.ShipDate.Value;
            }
            else
                (fStmt.Parameters["ShipDate"] as IDbDataParameter).Value = DBNull.Value;

            if (p.SpontaneousReturn != null)
            {
                if (p.SpontaneousReturn.Length > 1)
                    throw (new Exception("Value for ReturnReceiptHeadDoc.SpontaneousReturn too long, max 1 chars"));

                (fStmt.Parameters["SpontaneousReturn"] as IDbDataParameter).Value = p.SpontaneousReturn;
            }
            else
                (fStmt.Parameters["SpontaneousReturn"] as IDbDataParameter).Value = DBNull.Value;

            if (p.VendorIdentity != null)
            {
                if (p.VendorIdentity.Length > 35)
                    throw (new Exception("Value for ReturnReceiptHeadDoc.VendorIdentity too long, max 35 chars"));

                (fStmt.Parameters["VendorIdentity"] as IDbDataParameter).Value = p.VendorIdentity;
            }
            else
                (fStmt.Parameters["VendorIdentity"] as IDbDataParameter).Value = DBNull.Value;

            trans.HapiTransSeq++;

            fStmt.ExecuteNonQuery();

            if (p.aReturnReceiptHeadPackingMaterialDocs != null)
                foreach (ReturnReceiptHeadPackingMaterialDoc c in p.aReturnReceiptHeadPackingMaterialDocs)
                    aReturnReceiptHeadPackingMaterialInsert.Process(ref trans, this, c);
            if (p.aReturnReceiptLineDocs != null)
                foreach (ReturnReceiptLineDoc d in p.aReturnReceiptLineDocs)
                    aReturnReceiptLineInsert.Process(ref trans, this, d);
        }
    }

    public class ReturnReceiptHeadPackingMaterialInsert : SegmentImpl
    {

        public ReturnReceiptHeadPackingMaterialInsert(WSBase owner)
            : base(owner)            
        {
            StringBuilder s = new StringBuilder("insert into EXT2_RETURN_RECEIPT_HEAD_PM ( ");
            s.Append(" HAPIRCV_ID");
            s.Append(",OPCODE");
            s.Append(",ClientIdentity");
            s.Append(",ReturnOrderNumber");
            s.Append(",ReturnOrderSequence");
            s.Append(",ReturnOrderSubSequence");
            s.Append(",ShipDate");
            s.Append(",ProductIdentity");
            s.Append(",PickQuantity");
            s.Append(",SpontaneousReturn");

            s.Append(" ) values ( ");

            s.Append(" :HAPIRCV_ID");
            s.Append(",:OPCODE");
            s.Append(",:ClientIdentity");
            s.Append(",:ReturnOrderNumber");
            s.Append(",:ReturnOrderSequence");
            s.Append(",:ReturnOrderSubSequence");
            s.Append(",:ShipDate");
            s.Append(",:ProductIdentity");
            s.Append(",:PickQuantity");
            s.Append(",:SpontaneousReturn");

            s.Append(" )");

            fStmt.CommandText = s.ToString();

            fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
            fStmt.Parameters.Add(StringParam("OPCODE", 1));
            fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
            fStmt.Parameters.Add(StringParam("ReturnOrderNumber", 35));
            fStmt.Parameters.Add(NumberParam("ReturnOrderSequence", 3, 0));
            fStmt.Parameters.Add(NumberParam("ReturnOrderSubSequence", 2, 0));
            fStmt.Parameters.Add(DateParam("ShipDate"));
            fStmt.Parameters.Add(StringParam("ProductIdentity", 35));
            fStmt.Parameters.Add(NumberParam("PickQuantity", 20, 6));
            fStmt.Parameters.Add(StringParam("SpontaneousReturn", 1));

            fStmt.Prepare();

        }

        public void Process(ref MessageTransaction trans, SegmentImpl parent, ReturnReceiptHeadPackingMaterialDoc p)
        {
            if (p == null)
            {
                // this is useful for testing calls without sending data
                return;
            }

            (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

            if (p.OPCODE != null)
            {
                if (p.OPCODE.Length > 1)
                    throw (new Exception("Value for ReturnReceiptHeadPackingMaterialDoc.OPCODE too long, max 1 chars"));

                if (p.OPCODE.Length == 0)
                    throw (new Exception("Zero length for mandatory parameter ReturnReceiptHeadPackingMaterialDoc.OPCODE not allowed"));

                (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
            }
            else
                throw (new Exception("Null value for mandatory parameter ReturnReceiptHeadPackingMaterialDoc.OPCODE not allowed"));


            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

            if (p.ReturnOrderNumber != null)
            {
                if (p.ReturnOrderNumber.Length > 35)
                    throw (new Exception("Value for ReturnReceiptHeadPackingMaterialDoc.ReturnOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["ReturnOrderNumber"] as IDbDataParameter).Value = p.ReturnOrderNumber;
            }
            else
                (fStmt.Parameters["ReturnOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ReturnOrderSequence != null)
            {
                (fStmt.Parameters["ReturnOrderSequence"] as IDbDataParameter).Value = p.ReturnOrderSequence.Value;
            }
            else
                (fStmt.Parameters["ReturnOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ReturnOrderSubSequence != null)
            {
                (fStmt.Parameters["ReturnOrderSubSequence"] as IDbDataParameter).Value = p.ReturnOrderSubSequence.Value;
            }
            else
                (fStmt.Parameters["ReturnOrderSubSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipDate != null)
            {
                (fStmt.Parameters["ShipDate"] as IDbDataParameter).Value = p.ShipDate.Value;
            }
            else
                (fStmt.Parameters["ShipDate"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductIdentity != null)
            {
                if (p.ProductIdentity.Length > 35)
                    throw (new Exception("Value for ReturnReceiptHeadPackingMaterialDoc.ProductIdentity too long, max 35 chars"));

                (fStmt.Parameters["ProductIdentity"] as IDbDataParameter).Value = p.ProductIdentity;
            }
            else
                (fStmt.Parameters["ProductIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PickQuantity != null)
            {
                (fStmt.Parameters["PickQuantity"] as IDbDataParameter).Value = p.PickQuantity.Value;
            }
            else
                (fStmt.Parameters["PickQuantity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.SpontaneousReturn != null)
            {
                if (p.SpontaneousReturn.Length > 1)
                    throw (new Exception("Value for ReturnReceiptHeadPackingMaterialDoc.SpontaneousReturn too long, max 1 chars"));

                (fStmt.Parameters["SpontaneousReturn"] as IDbDataParameter).Value = p.SpontaneousReturn;
            }
            else
                (fStmt.Parameters["SpontaneousReturn"] as IDbDataParameter).Value = DBNull.Value;

            trans.HapiTransSeq++;

            fStmt.ExecuteNonQuery();

        }
    }

    public class ReturnReceiptLineInsert : SegmentImpl
    {

        public ReturnReceiptLineInsert(WSBase owner)
            : base(owner)            
        {
            StringBuilder s = new StringBuilder("insert into EXT2_RETURN_RECEIPT_LINE ( ");
            s.Append(" HAPIRCV_ID");
            s.Append(",OPCODE");
            s.Append(",ClientIdentity");
            s.Append(",ReturnOrderNumber");
            s.Append(",ReturnOrderSequence");
            s.Append(",ReturnOrderSubSequence");
            s.Append(",ShipDate");
            s.Append(",ReturnOrderLinePosition");
            s.Append(",ReturnOrderLineSequence");
            s.Append(",ProductIdentity");
            s.Append(",PackageIdentity");
            s.Append(",ProductionLotIdentity");
            s.Append(",ProductionSubLotIdentity");
            s.Append(",MarketingLotIdentity");
            s.Append(",PickQuantity");
            s.Append(",Qtyback");
            s.Append(",Qtycancel");
            s.Append(",QtySurplusPick");
            s.Append(",InventoryStatusCode");

            s.Append(" ) values ( ");

            s.Append(" :HAPIRCV_ID");
            s.Append(",:OPCODE");
            s.Append(",:ClientIdentity");
            s.Append(",:ReturnOrderNumber");
            s.Append(",:ReturnOrderSequence");
            s.Append(",:ReturnOrderSubSequence");
            s.Append(",:ShipDate");
            s.Append(",:ReturnOrderLinePosition");
            s.Append(",:ReturnOrderLineSequence");
            s.Append(",:ProductIdentity");
            s.Append(",:PackageIdentity");
            s.Append(",:ProductionLotIdentity");
            s.Append(",:ProductionSubLotIdentity");
            s.Append(",:MarketingLotIdentity");
            s.Append(",:PickQuantity");
            s.Append(",:Qtyback");
            s.Append(",:Qtycancel");
            s.Append(",:QtySurplusPick");
            s.Append(",:InventoryStatusCode");

            s.Append(" )");

            fStmt.CommandText = s.ToString();

            fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
            fStmt.Parameters.Add(StringParam("OPCODE", 1));
            fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
            fStmt.Parameters.Add(StringParam("ReturnOrderNumber", 35));
            fStmt.Parameters.Add(NumberParam("ReturnOrderSequence", 3, 0));
            fStmt.Parameters.Add(NumberParam("ReturnOrderSubSequence", 2, 0));
            fStmt.Parameters.Add(DateParam("ShipDate"));
            fStmt.Parameters.Add(NumberParam("ReturnOrderLinePosition", 5, 0));
            fStmt.Parameters.Add(NumberParam("ReturnOrderLineSequence", 5, 0));
            fStmt.Parameters.Add(StringParam("ProductIdentity", 35));
            fStmt.Parameters.Add(StringParam("PackageIdentity", 17));
            fStmt.Parameters.Add(StringParam("ProductionLotIdentity", 40));
            fStmt.Parameters.Add(StringParam("ProductionSubLotIdentity", 40));
            fStmt.Parameters.Add(StringParam("MarketingLotIdentity", 20));
            fStmt.Parameters.Add(NumberParam("PickQuantity", 20, 6));
            fStmt.Parameters.Add(NumberParam("Qtyback", 20, 6));
            fStmt.Parameters.Add(NumberParam("Qtycancel", 20, 6));
            fStmt.Parameters.Add(NumberParam("QtySurplusPick", 20, 6));
            fStmt.Parameters.Add(StringParam("InventoryStatusCode", 8));

            fStmt.Prepare();

        }

        public void Process(ref MessageTransaction trans, SegmentImpl parent, ReturnReceiptLineDoc p)
        {
            if (p == null)
            {
                // this is useful for testing calls without sending data
                return;
            }

            (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

            if (p.OPCODE != null)
            {
                if (p.OPCODE.Length > 1)
                    throw (new Exception("Value for ReturnReceiptLineDoc.OPCODE too long, max 1 chars"));

                if (p.OPCODE.Length == 0)
                    throw (new Exception("Zero length for mandatory parameter ReturnReceiptLineDoc.OPCODE not allowed"));

                (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
            }
            else
                throw (new Exception("Null value for mandatory parameter ReturnReceiptLineDoc.OPCODE not allowed"));


            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

            if (p.ReturnOrderNumber != null)
            {
                if (p.ReturnOrderNumber.Length > 35)
                    throw (new Exception("Value for ReturnReceiptLineDoc.ReturnOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["ReturnOrderNumber"] as IDbDataParameter).Value = p.ReturnOrderNumber;
            }
            else
                (fStmt.Parameters["ReturnOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ReturnOrderSequence != null)
            {
                (fStmt.Parameters["ReturnOrderSequence"] as IDbDataParameter).Value = p.ReturnOrderSequence.Value;
            }
            else
                (fStmt.Parameters["ReturnOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ReturnOrderSubSequence != null)
            {
                (fStmt.Parameters["ReturnOrderSubSequence"] as IDbDataParameter).Value = p.ReturnOrderSubSequence.Value;
            }
            else
                (fStmt.Parameters["ReturnOrderSubSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipDate != null)
            {
                (fStmt.Parameters["ShipDate"] as IDbDataParameter).Value = p.ShipDate.Value;
            }
            else
                (fStmt.Parameters["ShipDate"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ReturnOrderLinePosition != null)
            {
                (fStmt.Parameters["ReturnOrderLinePosition"] as IDbDataParameter).Value = p.ReturnOrderLinePosition.Value;
            }
            else
                (fStmt.Parameters["ReturnOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ReturnOrderLineSequence != null)
            {
                (fStmt.Parameters["ReturnOrderLineSequence"] as IDbDataParameter).Value = p.ReturnOrderLineSequence.Value;
            }
            else
                (fStmt.Parameters["ReturnOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductIdentity != null)
            {
                if (p.ProductIdentity.Length > 35)
                    throw (new Exception("Value for ReturnReceiptLineDoc.ProductIdentity too long, max 35 chars"));

                (fStmt.Parameters["ProductIdentity"] as IDbDataParameter).Value = p.ProductIdentity;
            }
            else
                (fStmt.Parameters["ProductIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PackageIdentity != null)
            {
                if (p.PackageIdentity.Length > 17)
                    throw (new Exception("Value for ReturnReceiptLineDoc.PackageIdentity too long, max 17 chars"));

                (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
            }
            else
                (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductionLotIdentity != null)
            {
                if (p.ProductionLotIdentity.Length > 40)
                    throw (new Exception("Value for ReturnReceiptLineDoc.ProductionLotIdentity too long, max 40 chars"));

                (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = p.ProductionLotIdentity;
            }
            else
                (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductionSubLotIdentity != null)
            {
                if (p.ProductionSubLotIdentity.Length > 40)
                    throw (new Exception("Value for ReturnReceiptLineDoc.ProductionSubLotIdentity too long, max 40 chars"));

                (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = p.ProductionSubLotIdentity;
            }
            else
                (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.MarketingLotIdentity != null)
            {
                if (p.MarketingLotIdentity.Length > 20)
                    throw (new Exception("Value for ReturnReceiptLineDoc.MarketingLotIdentity too long, max 20 chars"));

                (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = p.MarketingLotIdentity;
            }
            else
                (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PickQuantity != null)
            {
                (fStmt.Parameters["PickQuantity"] as IDbDataParameter).Value = p.PickQuantity.Value;
            }
            else
                (fStmt.Parameters["PickQuantity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.Qtyback != null)
            {
                (fStmt.Parameters["Qtyback"] as IDbDataParameter).Value = p.Qtyback.Value;
            }
            else
                (fStmt.Parameters["Qtyback"] as IDbDataParameter).Value = DBNull.Value;

            if (p.Qtycancel != null)
            {
                (fStmt.Parameters["Qtycancel"] as IDbDataParameter).Value = p.Qtycancel.Value;
            }
            else
                (fStmt.Parameters["Qtycancel"] as IDbDataParameter).Value = DBNull.Value;

            if (p.QtySurplusPick != null)
            {
                (fStmt.Parameters["QtySurplusPick"] as IDbDataParameter).Value = p.QtySurplusPick.Value;
            }
            else
                (fStmt.Parameters["QtySurplusPick"] as IDbDataParameter).Value = DBNull.Value;

            if (p.InventoryStatusCode != null)
            {
                if (p.InventoryStatusCode.Length > 8)
                    throw (new Exception("Value for ReturnReceiptLineDoc.InventoryStatusCode too long, max 8 chars"));

                (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = p.InventoryStatusCode;
            }
            else
                (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = DBNull.Value;

            trans.HapiTransSeq++;

            fStmt.ExecuteNonQuery();

        }
    }

    public class ASNHeadInsert : SegmentImpl
    {
        private ASNLoadCarrierInsert aASNLoadCarrierInsert;
        private ASNLineInsert aASNLineInsert;

        public ASNHeadInsert(WSBase owner)
            : base(owner)
        {
            StringBuilder s = new StringBuilder("insert into EXT2_SHIPMENT_REPORT_HEAD ( ");
            s.Append(" HAPIRCV_ID");
            s.Append(",OPCODE");
            s.Append(",ASNIdentity");
            s.Append(",ASNSequenceNumber");
            s.Append(",ShipFromPartyNodeIdentity");
            s.Append(",ClientIdentity");
            s.Append(",ASNLevel");
            s.Append(",ShipDateTime");
            s.Append(",DocumentDateTime");
            s.Append(",DeliveryWindowFirst");
            s.Append(",DeliveryWindowLast");
            s.Append(",ScheduledArrivalDateTime");
            s.Append(",ShipFromPartyIdentity");
            s.Append(",ShipFromPartyQualifier");
            s.Append(",ShipToPartyNodeIdentity");
            s.Append(",ShiptoPartyIdentity");
            s.Append(",ShiptoPartyQualifier");
            s.Append(",ForwarderIdentity");
            s.Append(",Instructions");
            s.Append(",NumberOfLoadCarriers");
            s.Append(",VehicleIdentity");
            s.Append(",EstimatedVolume");
            s.Append(",VolumeUOMIdentity");
            s.Append(",BillOfLadingNumber");
            s.Append(",PackingSlipNumber");
            s.Append(",ShippedFromWarehouseIdentity");
            s.Append(",ShippedOnDepartureIdentity");

            s.Append(" ) values ( ");

            s.Append(" :HAPIRCV_ID");
            s.Append(",:OPCODE");
            s.Append(",:ASNIdentity");
            s.Append(",:ASNSequenceNumber");
            s.Append(",:ShipFromPartyNodeIdentity");
            s.Append(",:ClientIdentity");
            s.Append(",:ASNLevel");
            s.Append(",:ShipDateTime");
            s.Append(",:DocumentDateTime");
            s.Append(",:DeliveryWindowFirst");
            s.Append(",:DeliveryWindowLast");
            s.Append(",:ScheduledArrivalDateTime");
            s.Append(",:ShipFromPartyIdentity");
            s.Append(",:ShipFromPartyQualifier");
            s.Append(",:ShipToPartyNodeIdentity");
            s.Append(",:ShiptoPartyIdentity");
            s.Append(",:ShiptoPartyQualifier");
            s.Append(",:ForwarderIdentity");
            s.Append(",:Instructions");
            s.Append(",:NumberOfLoadCarriers");
            s.Append(",:VehicleIdentity");
            s.Append(",:EstimatedVolume");
            s.Append(",:VolumeUOMIdentity");
            s.Append(",:BillOfLadingNumber");
            s.Append(",:PackingSlipNumber");
            s.Append(",:ShippedFromWarehouseIdentity");
            s.Append(",:ShippedOnDepartureIdentity");

            s.Append(" )");

            fStmt.CommandText = s.ToString();

            fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
            fStmt.Parameters.Add(StringParam("OPCODE", 1));
            fStmt.Parameters.Add(StringParam("ASNIdentity", 35));
            fStmt.Parameters.Add(NumberParam("ASNSequenceNumber", 3, 0));
            fStmt.Parameters.Add(StringParam("ShipFromPartyNodeIdentity", 35));
            fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
            fStmt.Parameters.Add(StringParam("ASNLevel", 1));
            fStmt.Parameters.Add(DateParam("ShipDateTime"));
            fStmt.Parameters.Add(DateParam("DocumentDateTime"));
            fStmt.Parameters.Add(DateParam("DeliveryWindowFirst"));
            fStmt.Parameters.Add(DateParam("DeliveryWindowLast"));
            fStmt.Parameters.Add(DateParam("ScheduledArrivalDateTime"));
            fStmt.Parameters.Add(StringParam("ShipFromPartyIdentity", 35));
            fStmt.Parameters.Add(StringParam("ShipFromPartyQualifier", 3));
            fStmt.Parameters.Add(StringParam("ShipToPartyNodeIdentity", 35));
            fStmt.Parameters.Add(StringParam("ShiptoPartyIdentity", 35));
            fStmt.Parameters.Add(StringParam("ShiptoPartyQualifier", 3));
            fStmt.Parameters.Add(StringParam("ForwarderIdentity", 17));
            fStmt.Parameters.Add(StringParam("Instructions", 400));
            fStmt.Parameters.Add(NumberParam("NumberOfLoadCarriers", 8, 0));
            fStmt.Parameters.Add(StringParam("VehicleIdentity", 17));
            fStmt.Parameters.Add(NumberParam("EstimatedVolume", 16, 6));
            fStmt.Parameters.Add(StringParam("VolumeUOMIdentity", 17));
            fStmt.Parameters.Add(StringParam("BillOfLadingNumber", 35));
            fStmt.Parameters.Add(StringParam("PackingSlipNumber", 35));
            fStmt.Parameters.Add(StringParam("ShippedFromWarehouseIdentity", 4));
            fStmt.Parameters.Add(StringParam("ShippedOnDepartureIdentity", 35));

            fStmt.Prepare();

            aASNLoadCarrierInsert = new ASNLoadCarrierInsert(owner);
            aASNLineInsert = new ASNLineInsert(owner);
        }

        public void Process(ref MessageTransaction trans, SegmentImpl parent, ASNHeadDoc p)
        {
            if (p == null)
            {
                // this is useful for testing calls without sending data
                return;
            }

            (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

            if (p.OPCODE != null)
            {
                if (p.OPCODE.Length > 1)
                    throw (new Exception("Value for ASNHeadDoc.OPCODE too long, max 1 chars"));

                if (p.OPCODE.Length == 0)
                    throw (new Exception("Zero length for mandatory parameter ASNHeadDoc.OPCODE not allowed"));

                (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
            }
            else
                throw (new Exception("Null value for mandatory parameter ASNHeadDoc.OPCODE not allowed"));


            if (p.ASNIdentity != null)
            {
                if (p.ASNIdentity.Length > 35)
                    throw (new Exception("Value for ASNHeadDoc.ASNIdentity too long, max 35 chars"));

                (fStmt.Parameters["ASNIdentity"] as IDbDataParameter).Value = p.ASNIdentity;
            }
            else
                (fStmt.Parameters["ASNIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ASNSequenceNumber != null)
            {
                (fStmt.Parameters["ASNSequenceNumber"] as IDbDataParameter).Value = p.ASNSequenceNumber.Value;
            }
            else
                (fStmt.Parameters["ASNSequenceNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipFromPartyNodeIdentity != null)
            {
                if (p.ShipFromPartyNodeIdentity.Length > 35)
                    throw (new Exception("Value for ASNHeadDoc.ShipFromPartyNodeIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipFromPartyNodeIdentity;
            }
            else
                (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

            if (p.ASNLevel != null)
            {
                if (p.ASNLevel.Length > 1)
                    throw (new Exception("Value for ASNHeadDoc.ASNLevel too long, max 1 chars"));

                (fStmt.Parameters["ASNLevel"] as IDbDataParameter).Value = p.ASNLevel;
            }
            else
                (fStmt.Parameters["ASNLevel"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipDateTime != null)
            {
                (fStmt.Parameters["ShipDateTime"] as IDbDataParameter).Value = p.ShipDateTime.Value;
            }
            else
                (fStmt.Parameters["ShipDateTime"] as IDbDataParameter).Value = DBNull.Value;

            if (p.DocumentDateTime != null)
            {
                (fStmt.Parameters["DocumentDateTime"] as IDbDataParameter).Value = p.DocumentDateTime.Value;
            }
            else
                (fStmt.Parameters["DocumentDateTime"] as IDbDataParameter).Value = DBNull.Value;

            if (p.DeliveryWindowFirst != null)
            {
                (fStmt.Parameters["DeliveryWindowFirst"] as IDbDataParameter).Value = p.DeliveryWindowFirst.Value;
            }
            else
                (fStmt.Parameters["DeliveryWindowFirst"] as IDbDataParameter).Value = DBNull.Value;

            if (p.DeliveryWindowLast != null)
            {
                (fStmt.Parameters["DeliveryWindowLast"] as IDbDataParameter).Value = p.DeliveryWindowLast.Value;
            }
            else
                (fStmt.Parameters["DeliveryWindowLast"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ScheduledArrivalDateTime != null)
            {
                (fStmt.Parameters["ScheduledArrivalDateTime"] as IDbDataParameter).Value = p.ScheduledArrivalDateTime.Value;
            }
            else
                (fStmt.Parameters["ScheduledArrivalDateTime"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipFromPartyIdentity != null)
            {
                if (p.ShipFromPartyIdentity.Length > 35)
                    throw (new Exception("Value for ASNHeadDoc.ShipFromPartyIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = p.ShipFromPartyIdentity;
            }
            else
                (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipFromPartyQualifier != null)
            {
                if (p.ShipFromPartyQualifier.Length > 3)
                    throw (new Exception("Value for ASNHeadDoc.ShipFromPartyQualifier too long, max 3 chars"));

                (fStmt.Parameters["ShipFromPartyQualifier"] as IDbDataParameter).Value = p.ShipFromPartyQualifier;
            }
            else
                (fStmt.Parameters["ShipFromPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipToPartyNodeIdentity != null)
            {
                if (p.ShipToPartyNodeIdentity.Length > 35)
                    throw (new Exception("Value for ASNHeadDoc.ShipToPartyNodeIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipToPartyNodeIdentity;
            }
            else
                (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShiptoPartyIdentity != null)
            {
                if (p.ShiptoPartyIdentity.Length > 35)
                    throw (new Exception("Value for ASNHeadDoc.ShiptoPartyIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShiptoPartyIdentity"] as IDbDataParameter).Value = p.ShiptoPartyIdentity;
            }
            else
                (fStmt.Parameters["ShiptoPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShiptoPartyQualifier != null)
            {
                if (p.ShiptoPartyQualifier.Length > 3)
                    throw (new Exception("Value for ASNHeadDoc.ShiptoPartyQualifier too long, max 3 chars"));

                (fStmt.Parameters["ShiptoPartyQualifier"] as IDbDataParameter).Value = p.ShiptoPartyQualifier;
            }
            else
                (fStmt.Parameters["ShiptoPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ForwarderIdentity != null)
            {
                if (p.ForwarderIdentity.Length > 17)
                    throw (new Exception("Value for ASNHeadDoc.ForwarderIdentity too long, max 17 chars"));

                (fStmt.Parameters["ForwarderIdentity"] as IDbDataParameter).Value = p.ForwarderIdentity;
            }
            else
                (fStmt.Parameters["ForwarderIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.Instructions != null)
            {
                if (p.Instructions.Length > 400)
                    throw (new Exception("Value for ASNHeadDoc.Instructions too long, max 400 chars"));

                (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = p.Instructions;
            }
            else
                (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = DBNull.Value;

            if (p.NumberOfLoadCarriers != null)
            {
                (fStmt.Parameters["NumberOfLoadCarriers"] as IDbDataParameter).Value = p.NumberOfLoadCarriers.Value;
            }
            else
                (fStmt.Parameters["NumberOfLoadCarriers"] as IDbDataParameter).Value = DBNull.Value;

            if (p.VehicleIdentity != null)
            {
                if (p.VehicleIdentity.Length > 17)
                    throw (new Exception("Value for ASNHeadDoc.VehicleIdentity too long, max 17 chars"));

                (fStmt.Parameters["VehicleIdentity"] as IDbDataParameter).Value = p.VehicleIdentity;
            }
            else
                (fStmt.Parameters["VehicleIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.EstimatedVolume != null)
            {
                (fStmt.Parameters["EstimatedVolume"] as IDbDataParameter).Value = p.EstimatedVolume.Value;
            }
            else
                (fStmt.Parameters["EstimatedVolume"] as IDbDataParameter).Value = DBNull.Value;

            if (p.VolumeUOMIdentity != null)
            {
                if (p.VolumeUOMIdentity.Length > 17)
                    throw (new Exception("Value for ASNHeadDoc.VolumeUOMIdentity too long, max 17 chars"));

                (fStmt.Parameters["VolumeUOMIdentity"] as IDbDataParameter).Value = p.VolumeUOMIdentity;
            }
            else
                (fStmt.Parameters["VolumeUOMIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.BillOfLadingNumber != null)
            {
                if (p.BillOfLadingNumber.Length > 35)
                    throw (new Exception("Value for ASNHeadDoc.BillOfLadingNumber too long, max 35 chars"));

                (fStmt.Parameters["BillOfLadingNumber"] as IDbDataParameter).Value = p.BillOfLadingNumber;
            }
            else
                (fStmt.Parameters["BillOfLadingNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PackingSlipNumber != null)
            {
                if (p.PackingSlipNumber.Length > 35)
                    throw (new Exception("Value for ASNHeadDoc.PackingSlipNumber too long, max 35 chars"));

                (fStmt.Parameters["PackingSlipNumber"] as IDbDataParameter).Value = p.PackingSlipNumber;
            }
            else
                (fStmt.Parameters["PackingSlipNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShippedFromWarehouseIdentity != null)
            {
                if (p.ShippedFromWarehouseIdentity.Length > 4)
                    throw (new Exception("Value for ASNHeadDoc.ShippedFromWarehouseIdentity too long, max 4 chars"));

                (fStmt.Parameters["ShippedFromWarehouseIdentity"] as IDbDataParameter).Value = p.ShippedFromWarehouseIdentity;
            }
            else
                (fStmt.Parameters["ShippedFromWarehouseIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShippedOnDepartureIdentity != null)
            {
                if (p.ShippedOnDepartureIdentity.Length > 35)
                    throw (new Exception("Value for ASNHeadDoc.ShippedOnDepartureIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShippedOnDepartureIdentity"] as IDbDataParameter).Value = p.ShippedOnDepartureIdentity;
            }
            else
                (fStmt.Parameters["ShippedOnDepartureIdentity"] as IDbDataParameter).Value = DBNull.Value;

            trans.HapiTransSeq++;

            fStmt.ExecuteNonQuery();

            if (p.aASNLoadCarrierDocs != null)
                foreach (ASNLoadCarrierDoc c in p.aASNLoadCarrierDocs)
                    aASNLoadCarrierInsert.Process(ref trans, this, c);
            if (p.aASNLineDocs != null)
                foreach (ASNLineDoc d in p.aASNLineDocs)
                    aASNLineInsert.Process(ref trans, this, d);
        }
    }

    public class ASNLoadCarrierInsert : SegmentImpl
    {

        public ASNLoadCarrierInsert(WSBase owner)
            : base(owner)            
        {
            StringBuilder s = new StringBuilder("insert into EXT2_SHIPMENT_REPORT_CARRIER ( ");
            s.Append(" HAPIRCV_ID");
            s.Append(",OPCODE");
            s.Append(",VolumeUOMIdentity");
            s.Append(",TotalHeight");
            s.Append(",HeightUOMIdentity");
            s.Append(",ASNIdentity");
            s.Append(",ASNSequenceNumber");
            s.Append(",ShipFromPartyNodeIdentity");
            s.Append(",LoadCarrierIdentity");
            s.Append(",LoadCarrierQualifier");
            s.Append(",ClientIdentity");
            s.Append(",LoadCarrierType");
            s.Append(",ExternalLoadCarrierType");
            s.Append(",ParentLoadCarrierIdentity");
            s.Append(",ProductTransportIdentity");
            s.Append(",ShipFromPartyIdentity");
            s.Append(",ShipToPartyNodeIdentity");
            s.Append(",ShiptoPartyIdentity");
            s.Append(",ShiptoPartyQualifier");
            s.Append(",ShipToCustomerNodeIdentity");
            s.Append(",ShiptoCustomerIdentity");
            s.Append(",ShiptoCustomerQualifier");
            s.Append(",Instructions");
            s.Append(",TotalWeight");
            s.Append(",WeightUOMIdentity");
            s.Append(",TotalVolume");

            s.Append(" ) values ( ");

            s.Append(" :HAPIRCV_ID");
            s.Append(",:OPCODE");
            s.Append(",:VolumeUOMIdentity");
            s.Append(",:TotalHeight");
            s.Append(",:HeightUOMIdentity");
            s.Append(",:ASNIdentity");
            s.Append(",:ASNSequenceNumber");
            s.Append(",:ShipFromPartyNodeIdentity");
            s.Append(",:LoadCarrierIdentity");
            s.Append(",:LoadCarrierQualifier");
            s.Append(",:ClientIdentity");
            s.Append(",:LoadCarrierType");
            s.Append(",:ExternalLoadCarrierType");
            s.Append(",:ParentLoadCarrierIdentity");
            s.Append(",:ProductTransportIdentity");
            s.Append(",:ShipFromPartyIdentity");
            s.Append(",:ShipToPartyNodeIdentity");
            s.Append(",:ShiptoPartyIdentity");
            s.Append(",:ShiptoPartyQualifier");
            s.Append(",:ShipToCustomerNodeIdentity");
            s.Append(",:ShiptoCustomerIdentity");
            s.Append(",:ShiptoCustomerQualifier");
            s.Append(",:Instructions");
            s.Append(",:TotalWeight");
            s.Append(",:WeightUOMIdentity");
            s.Append(",:TotalVolume");

            s.Append(" )");

            fStmt.CommandText = s.ToString();

            fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
            fStmt.Parameters.Add(StringParam("OPCODE", 1));
            fStmt.Parameters.Add(StringParam("VolumeUOMIdentity", 17));
            fStmt.Parameters.Add(NumberParam("TotalHeight", 9, 4));
            fStmt.Parameters.Add(StringParam("HeightUOMIdentity", 17));
            fStmt.Parameters.Add(StringParam("ASNIdentity", 35));
            fStmt.Parameters.Add(NumberParam("ASNSequenceNumber", 3, 0));
            fStmt.Parameters.Add(StringParam("ShipFromPartyNodeIdentity", 35));
            fStmt.Parameters.Add(StringParam("LoadCarrierIdentity", 35));
            fStmt.Parameters.Add(StringParam("LoadCarrierQualifier", 4));
            fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
            fStmt.Parameters.Add(StringParam("LoadCarrierType", 20));
            fStmt.Parameters.Add(StringParam("ExternalLoadCarrierType", 20));
            fStmt.Parameters.Add(StringParam("ParentLoadCarrierIdentity", 35));
            fStmt.Parameters.Add(StringParam("ProductTransportIdentity", 5));
            fStmt.Parameters.Add(StringParam("ShipFromPartyIdentity", 35));
            fStmt.Parameters.Add(StringParam("ShipToPartyNodeIdentity", 35));
            fStmt.Parameters.Add(StringParam("ShiptoPartyIdentity", 35));
            fStmt.Parameters.Add(StringParam("ShiptoPartyQualifier", 3));
            fStmt.Parameters.Add(StringParam("ShipToCustomerNodeIdentity", 35));
            fStmt.Parameters.Add(StringParam("ShiptoCustomerIdentity", 35));
            fStmt.Parameters.Add(StringParam("ShiptoCustomerQualifier", 3));
            fStmt.Parameters.Add(StringParam("Instructions", 400));
            fStmt.Parameters.Add(NumberParam("TotalWeight", 16, 6));
            fStmt.Parameters.Add(StringParam("WeightUOMIdentity", 17));
            fStmt.Parameters.Add(NumberParam("TotalVolume", 16, 6));

            fStmt.Prepare();

        }

        public void Process(ref MessageTransaction trans, SegmentImpl parent, ASNLoadCarrierDoc p)
        {
            if (p == null)
            {
                // this is useful for testing calls without sending data
                return;
            }

            (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

            if (p.OPCODE != null)
            {
                if (p.OPCODE.Length > 1)
                    throw (new Exception("Value for ASNLoadCarrierDoc.OPCODE too long, max 1 chars"));

                if (p.OPCODE.Length == 0)
                    throw (new Exception("Zero length for mandatory parameter ASNLoadCarrierDoc.OPCODE not allowed"));

                (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
            }
            else
                throw (new Exception("Null value for mandatory parameter ASNLoadCarrierDoc.OPCODE not allowed"));


            if (p.VolumeUOMIdentity != null)
            {
                if (p.VolumeUOMIdentity.Length > 17)
                    throw (new Exception("Value for ASNLoadCarrierDoc.VolumeUOMIdentity too long, max 17 chars"));

                (fStmt.Parameters["VolumeUOMIdentity"] as IDbDataParameter).Value = p.VolumeUOMIdentity;
            }
            else
                (fStmt.Parameters["VolumeUOMIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.TotalHeight != null)
            {
                (fStmt.Parameters["TotalHeight"] as IDbDataParameter).Value = p.TotalHeight.Value;
            }
            else
                (fStmt.Parameters["TotalHeight"] as IDbDataParameter).Value = DBNull.Value;

            if (p.HeightUOMIdentity != null)
            {
                if (p.HeightUOMIdentity.Length > 17)
                    throw (new Exception("Value for ASNLoadCarrierDoc.HeightUOMIdentity too long, max 17 chars"));

                (fStmt.Parameters["HeightUOMIdentity"] as IDbDataParameter).Value = p.HeightUOMIdentity;
            }
            else
                (fStmt.Parameters["HeightUOMIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ASNIdentity != null)
            {
                if (p.ASNIdentity.Length > 35)
                    throw (new Exception("Value for ASNLoadCarrierDoc.ASNIdentity too long, max 35 chars"));

                (fStmt.Parameters["ASNIdentity"] as IDbDataParameter).Value = p.ASNIdentity;
            }
            else
                (fStmt.Parameters["ASNIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ASNSequenceNumber != null)
            {
                (fStmt.Parameters["ASNSequenceNumber"] as IDbDataParameter).Value = p.ASNSequenceNumber.Value;
            }
            else
                (fStmt.Parameters["ASNSequenceNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipFromPartyNodeIdentity != null)
            {
                if (p.ShipFromPartyNodeIdentity.Length > 35)
                    throw (new Exception("Value for ASNLoadCarrierDoc.ShipFromPartyNodeIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipFromPartyNodeIdentity;
            }
            else
                (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.LoadCarrierIdentity != null)
            {
                if (p.LoadCarrierIdentity.Length > 35)
                    throw (new Exception("Value for ASNLoadCarrierDoc.LoadCarrierIdentity too long, max 35 chars"));

                (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = p.LoadCarrierIdentity;
            }
            else
                (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.LoadCarrierQualifier != null)
            {
                if (p.LoadCarrierQualifier.Length > 4)
                    throw (new Exception("Value for ASNLoadCarrierDoc.LoadCarrierQualifier too long, max 4 chars"));

                (fStmt.Parameters["LoadCarrierQualifier"] as IDbDataParameter).Value = p.LoadCarrierQualifier;
            }
            else
                (fStmt.Parameters["LoadCarrierQualifier"] as IDbDataParameter).Value = DBNull.Value;

            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

            if (p.LoadCarrierType != null)
            {
                if (p.LoadCarrierType.Length > 20)
                    throw (new Exception("Value for ASNLoadCarrierDoc.LoadCarrierType too long, max 20 chars"));

                (fStmt.Parameters["LoadCarrierType"] as IDbDataParameter).Value = p.LoadCarrierType;
            }
            else
                (fStmt.Parameters["LoadCarrierType"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ExternalLoadCarrierType != null)
            {
                if (p.ExternalLoadCarrierType.Length > 20)
                    throw (new Exception("Value for ASNLoadCarrierDoc.ExternalLoadCarrierType too long, max 20 chars"));

                (fStmt.Parameters["ExternalLoadCarrierType"] as IDbDataParameter).Value = p.ExternalLoadCarrierType;
            }
            else
                (fStmt.Parameters["ExternalLoadCarrierType"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ParentLoadCarrierIdentity != null)
            {
                if (p.ParentLoadCarrierIdentity.Length > 35)
                    throw (new Exception("Value for ASNLoadCarrierDoc.ParentLoadCarrierIdentity too long, max 35 chars"));

                (fStmt.Parameters["ParentLoadCarrierIdentity"] as IDbDataParameter).Value = p.ParentLoadCarrierIdentity;
            }
            else
                (fStmt.Parameters["ParentLoadCarrierIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductTransportIdentity != null)
            {
                if (p.ProductTransportIdentity.Length > 5)
                    throw (new Exception("Value for ASNLoadCarrierDoc.ProductTransportIdentity too long, max 5 chars"));

                (fStmt.Parameters["ProductTransportIdentity"] as IDbDataParameter).Value = p.ProductTransportIdentity;
            }
            else
                (fStmt.Parameters["ProductTransportIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipFromPartyIdentity != null)
            {
                if (p.ShipFromPartyIdentity.Length > 35)
                    throw (new Exception("Value for ASNLoadCarrierDoc.ShipFromPartyIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = p.ShipFromPartyIdentity;
            }
            else
                (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipToPartyNodeIdentity != null)
            {
                if (p.ShipToPartyNodeIdentity.Length > 35)
                    throw (new Exception("Value for ASNLoadCarrierDoc.ShipToPartyNodeIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipToPartyNodeIdentity;
            }
            else
                (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShiptoPartyIdentity != null)
            {
                if (p.ShiptoPartyIdentity.Length > 35)
                    throw (new Exception("Value for ASNLoadCarrierDoc.ShiptoPartyIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShiptoPartyIdentity"] as IDbDataParameter).Value = p.ShiptoPartyIdentity;
            }
            else
                (fStmt.Parameters["ShiptoPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShiptoPartyQualifier != null)
            {
                if (p.ShiptoPartyQualifier.Length > 3)
                    throw (new Exception("Value for ASNLoadCarrierDoc.ShiptoPartyQualifier too long, max 3 chars"));

                (fStmt.Parameters["ShiptoPartyQualifier"] as IDbDataParameter).Value = p.ShiptoPartyQualifier;
            }
            else
                (fStmt.Parameters["ShiptoPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipToCustomerNodeIdentity != null)
            {
                if (p.ShipToCustomerNodeIdentity.Length > 35)
                    throw (new Exception("Value for ASNLoadCarrierDoc.ShipToCustomerNodeIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShipToCustomerNodeIdentity"] as IDbDataParameter).Value = p.ShipToCustomerNodeIdentity;
            }
            else
                (fStmt.Parameters["ShipToCustomerNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShiptoCustomerIdentity != null)
            {
                if (p.ShiptoCustomerIdentity.Length > 35)
                    throw (new Exception("Value for ASNLoadCarrierDoc.ShiptoCustomerIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShiptoCustomerIdentity"] as IDbDataParameter).Value = p.ShiptoCustomerIdentity;
            }
            else
                (fStmt.Parameters["ShiptoCustomerIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShiptoCustomerQualifier != null)
            {
                if (p.ShiptoCustomerQualifier.Length > 3)
                    throw (new Exception("Value for ASNLoadCarrierDoc.ShiptoCustomerQualifier too long, max 3 chars"));

                (fStmt.Parameters["ShiptoCustomerQualifier"] as IDbDataParameter).Value = p.ShiptoCustomerQualifier;
            }
            else
                (fStmt.Parameters["ShiptoCustomerQualifier"] as IDbDataParameter).Value = DBNull.Value;

            if (p.Instructions != null)
            {
                if (p.Instructions.Length > 400)
                    throw (new Exception("Value for ASNLoadCarrierDoc.Instructions too long, max 400 chars"));

                (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = p.Instructions;
            }
            else
                (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = DBNull.Value;

            if (p.TotalWeight != null)
            {
                (fStmt.Parameters["TotalWeight"] as IDbDataParameter).Value = p.TotalWeight.Value;
            }
            else
                (fStmt.Parameters["TotalWeight"] as IDbDataParameter).Value = DBNull.Value;

            if (p.WeightUOMIdentity != null)
            {
                if (p.WeightUOMIdentity.Length > 17)
                    throw (new Exception("Value for ASNLoadCarrierDoc.WeightUOMIdentity too long, max 17 chars"));

                (fStmt.Parameters["WeightUOMIdentity"] as IDbDataParameter).Value = p.WeightUOMIdentity;
            }
            else
                (fStmt.Parameters["WeightUOMIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.TotalVolume != null)
            {
                (fStmt.Parameters["TotalVolume"] as IDbDataParameter).Value = p.TotalVolume.Value;
            }
            else
                (fStmt.Parameters["TotalVolume"] as IDbDataParameter).Value = DBNull.Value;

            trans.HapiTransSeq++;

            fStmt.ExecuteNonQuery();

        }
    }

    public class ASNLineInsert : SegmentImpl
    {

        public ASNLineInsert(WSBase owner)
            : base(owner)
        {
            StringBuilder s = new StringBuilder("insert into EXT2_SHIPMENT_REPORT_LINE ( ");
            s.Append(" HAPIRCV_ID");
            s.Append(",OPCODE");
            s.Append(",CustomerOrderLineSequence");
            s.Append(",CustomerOrderLineKitPosition");
            s.Append(",OriginalPurchaseOrderNumber");
            s.Append(",OriginalPurchaseOrderSequence");
            s.Append(",OriginalPurchaseOrderLinePos");
            s.Append(",OriginalPurchaseOrderLineSeq");
            s.Append(",OriginalCustomerReference");
            s.Append(",InventoryStatusCode");
            s.Append(",InventoryStatusDays");
            s.Append(",InventorystatusKey");
            s.Append(",InventorystatusText");
            s.Append(",InventorystatusAlarmDate");
            s.Append(",Instructions");
            s.Append(",PredefinedItemLoadIdentity");
            s.Append(",ProductNumberShipFromPartner");
            s.Append(",ProductNumberShipToPartner");
            s.Append(",GlobalProductNumber");
            s.Append(",AdditionalPackingMaterial");
            s.Append(",CustomerOrderType");
            s.Append(",PurchaseOrderNumber");
            s.Append(",PurchaseOrderSequence");
            s.Append(",PurchaseOrderLinePos");
            s.Append(",PurchaseOrderLineSeq");
            s.Append(",StockedProductNumber");
            s.Append(",GlobalStockedProductNumber");
            s.Append(",FromPartyIdentity");
            s.Append(",FromPartyQualifier");
            s.Append(",CustomerReturnOrderNumber");
            s.Append(",CustomerReturnOrderSequence");
            s.Append(",CustomerReturnOrderLinePos");
            s.Append(",CustomerReturnOrderLineKitPos");
            s.Append(",CustomerReturnOrderLineSeq");
            s.Append(",ActionCode");
            s.Append(",ActionCodeRequirement");
            s.Append(",ReasonCode");
            s.Append(",ReasonText");
            s.Append(",ShiptoVendorIdentity");
            s.Append(",ShiptoVendorQualifier");
            s.Append(",DiscrepancyQuantity");
            s.Append(",DiscrepancyCode");
            s.Append(",DiscrepancyText");
            s.Append(",QuantityUpperTolerance");
            s.Append(",CatchMeasureLowerTolerance");
            s.Append(",CatchMeasureUpperTolerance");
            s.Append(",ASNIdentity");
            s.Append(",ASNSequenceNumber");
            s.Append(",ShipFromPartyNodeIdentity");
            s.Append(",ASNLineNumber");
            s.Append(",ASNLineSequenceNumber");
            s.Append(",LoadCarrierIdentity");
            s.Append(",ClientIdentity");
            s.Append(",ShipFromPartyIdentity");
            s.Append(",ShipToPartyNodeIdentity");
            s.Append(",ShiptoPartyIdentity");
            s.Append(",ShiptoPartyQualifier");
            s.Append(",ShipToCustomerNodeIdentity");
            s.Append(",ShiptoCustomerIdentity");
            s.Append(",ShiptoCustomerQualifier");
            s.Append(",SelltoCustomerIdentity");
            s.Append(",SelltoCustomerQualifier");
            s.Append(",OwnerIdentity");
            s.Append(",OwnerIdentityAtShipToCustomer");
            s.Append(",VendorIdentity");
            s.Append(",VendorPartyNodeIdentity");
            s.Append(",ProductNumber");
            s.Append(",ProductDescription");
            s.Append(",ProductNumberType");
            s.Append(",AlternativeProductNumber");
            s.Append(",AlternativeProductDescription");
            s.Append(",ProductDate");
            s.Append(",ExpiryDate");
            s.Append(",ManufacturingDate");
            s.Append(",VendorProductNumber");
            s.Append(",PurchasePrice");
            s.Append(",PackageIdentity");
            s.Append(",ProductionLotIdentity");
            s.Append(",ProductionSubLotIdentity");
            s.Append(",ManufacturingUnit");
            s.Append(",MarketingLotIdentity");
            s.Append(",SerialNumber");
            s.Append(",StorageLot");
            s.Append(",ShippedQuantity");
            s.Append(",MeasuredQuantity");
            s.Append(",MeasureQualifier");
            s.Append(",Volume");
            s.Append(",VolumeUOMIdentity");
            s.Append(",Weight");
            s.Append(",WeightUOMIdentity");
            s.Append(",CustomerOrderNumber");
            s.Append(",CustomerOrderSequence");
            s.Append(",CustomerOrderLinePosition");

            s.Append(" ) values ( ");

            s.Append(" :HAPIRCV_ID");
            s.Append(",:OPCODE");
            s.Append(",:CustomerOrderLineSequence");
            s.Append(",:CustomerOrderLineKitPosition");
            s.Append(",:OriginalPurchaseOrderNumber");
            s.Append(",:OriginalPurchaseOrderSequence");
            s.Append(",:OriginalPurchaseOrderLinePos");
            s.Append(",:OriginalPurchaseOrderLineSeq");
            s.Append(",:OriginalCustomerReference");
            s.Append(",:InventoryStatusCode");
            s.Append(",:InventoryStatusDays");
            s.Append(",:InventorystatusKey");
            s.Append(",:InventorystatusText");
            s.Append(",:InventorystatusAlarmDate");
            s.Append(",:Instructions");
            s.Append(",:PredefinedItemLoadIdentity");
            s.Append(",:ProductNumberShipFromPartner");
            s.Append(",:ProductNumberShipToPartner");
            s.Append(",:GlobalProductNumber");
            s.Append(",:AdditionalPackingMaterial");
            s.Append(",:CustomerOrderType");
            s.Append(",:PurchaseOrderNumber");
            s.Append(",:PurchaseOrderSequence");
            s.Append(",:PurchaseOrderLinePos");
            s.Append(",:PurchaseOrderLineSeq");
            s.Append(",:StockedProductNumber");
            s.Append(",:GlobalStockedProductNumber");
            s.Append(",:FromPartyIdentity");
            s.Append(",:FromPartyQualifier");
            s.Append(",:CustomerReturnOrderNumber");
            s.Append(",:CustomerReturnOrderSequence");
            s.Append(",:CustomerReturnOrderLinePos");
            s.Append(",:CustomerReturnOrderLineKitPos");
            s.Append(",:CustomerReturnOrderLineSeq");
            s.Append(",:ActionCode");
            s.Append(",:ActionCodeRequirement");
            s.Append(",:ReasonCode");
            s.Append(",:ReasonText");
            s.Append(",:ShiptoVendorIdentity");
            s.Append(",:ShiptoVendorQualifier");
            s.Append(",:DiscrepancyQuantity");
            s.Append(",:DiscrepancyCode");
            s.Append(",:DiscrepancyText");
            s.Append(",:QuantityUpperTolerance");
            s.Append(",:CatchMeasureLowerTolerance");
            s.Append(",:CatchMeasureUpperTolerance");
            s.Append(",:ASNIdentity");
            s.Append(",:ASNSequenceNumber");
            s.Append(",:ShipFromPartyNodeIdentity");
            s.Append(",:ASNLineNumber");
            s.Append(",:ASNLineSequenceNumber");
            s.Append(",:LoadCarrierIdentity");
            s.Append(",:ClientIdentity");
            s.Append(",:ShipFromPartyIdentity");
            s.Append(",:ShipToPartyNodeIdentity");
            s.Append(",:ShiptoPartyIdentity");
            s.Append(",:ShiptoPartyQualifier");
            s.Append(",:ShipToCustomerNodeIdentity");
            s.Append(",:ShiptoCustomerIdentity");
            s.Append(",:ShiptoCustomerQualifier");
            s.Append(",:SelltoCustomerIdentity");
            s.Append(",:SelltoCustomerQualifier");
            s.Append(",:OwnerIdentity");
            s.Append(",:OwnerIdentityAtShipToCustomer");
            s.Append(",:VendorIdentity");
            s.Append(",:VendorPartyNodeIdentity");
            s.Append(",:ProductNumber");
            s.Append(",:ProductDescription");
            s.Append(",:ProductNumberType");
            s.Append(",:AlternativeProductNumber");
            s.Append(",:AlternativeProductDescription");
            s.Append(",:ProductDate");
            s.Append(",:ExpiryDate");
            s.Append(",:ManufacturingDate");
            s.Append(",:VendorProductNumber");
            s.Append(",:PurchasePrice");
            s.Append(",:PackageIdentity");
            s.Append(",:ProductionLotIdentity");
            s.Append(",:ProductionSubLotIdentity");
            s.Append(",:ManufacturingUnit");
            s.Append(",:MarketingLotIdentity");
            s.Append(",:SerialNumber");
            s.Append(",:StorageLot");
            s.Append(",:ShippedQuantity");
            s.Append(",:MeasuredQuantity");
            s.Append(",:MeasureQualifier");
            s.Append(",:Volume");
            s.Append(",:VolumeUOMIdentity");
            s.Append(",:Weight");
            s.Append(",:WeightUOMIdentity");
            s.Append(",:CustomerOrderNumber");
            s.Append(",:CustomerOrderSequence");
            s.Append(",:CustomerOrderLinePosition");

            s.Append(" )");

            fStmt.CommandText = s.ToString();

            fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
            fStmt.Parameters.Add(StringParam("OPCODE", 1));
            fStmt.Parameters.Add(NumberParam("CustomerOrderLineSequence", 3, 0));
            fStmt.Parameters.Add(NumberParam("CustomerOrderLineKitPosition", 2, 0));
            fStmt.Parameters.Add(StringParam("OriginalPurchaseOrderNumber", 35));
            fStmt.Parameters.Add(NumberParam("OriginalPurchaseOrderSequence", 3, 0));
            fStmt.Parameters.Add(NumberParam("OriginalPurchaseOrderLinePos", 16, 0));
            fStmt.Parameters.Add(NumberParam("OriginalPurchaseOrderLineSeq", 3, 0));
            fStmt.Parameters.Add(StringParam("OriginalCustomerReference", 35));
            fStmt.Parameters.Add(StringParam("InventoryStatusCode", 8));
            fStmt.Parameters.Add(NumberParam("InventoryStatusDays", 5, 0));
            fStmt.Parameters.Add(StringParam("InventorystatusKey", 12));
            fStmt.Parameters.Add(StringParam("InventorystatusText", 200));
            fStmt.Parameters.Add(DateParam("InventorystatusAlarmDate"));
            fStmt.Parameters.Add(StringParam("Instructions", 400));
            fStmt.Parameters.Add(StringParam("PredefinedItemLoadIdentity", 35));
            fStmt.Parameters.Add(StringParam("ProductNumberShipFromPartner", 35));
            fStmt.Parameters.Add(StringParam("ProductNumberShipToPartner", 35));
            fStmt.Parameters.Add(StringParam("GlobalProductNumber", 35));
            fStmt.Parameters.Add(StringParam("AdditionalPackingMaterial", 1));
            fStmt.Parameters.Add(StringParam("CustomerOrderType", 2));
            fStmt.Parameters.Add(StringParam("PurchaseOrderNumber", 35));
            fStmt.Parameters.Add(NumberParam("PurchaseOrderSequence", 3, 0));
            fStmt.Parameters.Add(NumberParam("PurchaseOrderLinePos", 4, 0));
            fStmt.Parameters.Add(NumberParam("PurchaseOrderLineSeq", 3, 0));
            fStmt.Parameters.Add(StringParam("StockedProductNumber", 35));
            fStmt.Parameters.Add(StringParam("GlobalStockedProductNumber", 20));
            fStmt.Parameters.Add(StringParam("FromPartyIdentity", 35));
            fStmt.Parameters.Add(StringParam("FromPartyQualifier", 3));
            fStmt.Parameters.Add(StringParam("CustomerReturnOrderNumber", 35));
            fStmt.Parameters.Add(NumberParam("CustomerReturnOrderSequence", 3, 0));
            fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLinePos", 5, 0));
            fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineKitPos", 2, 0));
            fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineSeq", 3, 0));
            fStmt.Parameters.Add(StringParam("ActionCode", 2));
            fStmt.Parameters.Add(StringParam("ActionCodeRequirement", 1));
            fStmt.Parameters.Add(StringParam("ReasonCode", 2));
            fStmt.Parameters.Add(StringParam("ReasonText", 400));
            fStmt.Parameters.Add(StringParam("ShiptoVendorIdentity", 35));
            fStmt.Parameters.Add(StringParam("ShiptoVendorQualifier", 3));
            fStmt.Parameters.Add(NumberParam("DiscrepancyQuantity", 20, 6));
            fStmt.Parameters.Add(StringParam("DiscrepancyCode", 3));
            fStmt.Parameters.Add(StringParam("DiscrepancyText", 35));
            fStmt.Parameters.Add(NumberParam("QuantityUpperTolerance", 20, 6));
            fStmt.Parameters.Add(NumberParam("CatchMeasureLowerTolerance", 20, 6));
            fStmt.Parameters.Add(NumberParam("CatchMeasureUpperTolerance", 20, 6));
            fStmt.Parameters.Add(StringParam("ASNIdentity", 35));
            fStmt.Parameters.Add(NumberParam("ASNSequenceNumber", 3, 0));
            fStmt.Parameters.Add(StringParam("ShipFromPartyNodeIdentity", 35));
            fStmt.Parameters.Add(NumberParam("ASNLineNumber", 5, 0));
            fStmt.Parameters.Add(NumberParam("ASNLineSequenceNumber", 3, 0));
            fStmt.Parameters.Add(StringParam("LoadCarrierIdentity", 35));
            fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
            fStmt.Parameters.Add(StringParam("ShipFromPartyIdentity", 35));
            fStmt.Parameters.Add(StringParam("ShipToPartyNodeIdentity", 35));
            fStmt.Parameters.Add(StringParam("ShiptoPartyIdentity", 35));
            fStmt.Parameters.Add(StringParam("ShiptoPartyQualifier", 3));
            fStmt.Parameters.Add(StringParam("ShipToCustomerNodeIdentity", 35));
            fStmt.Parameters.Add(StringParam("ShiptoCustomerIdentity", 35));
            fStmt.Parameters.Add(StringParam("ShiptoCustomerQualifier", 3));
            fStmt.Parameters.Add(StringParam("SelltoCustomerIdentity", 35));
            fStmt.Parameters.Add(StringParam("SelltoCustomerQualifier", 3));
            fStmt.Parameters.Add(StringParam("OwnerIdentity", 35));
            fStmt.Parameters.Add(StringParam("OwnerIdentityAtShipToCustomer", 35));
            fStmt.Parameters.Add(StringParam("VendorIdentity", 35));
            fStmt.Parameters.Add(StringParam("VendorPartyNodeIdentity", 35));
            fStmt.Parameters.Add(StringParam("ProductNumber", 35));
            fStmt.Parameters.Add(StringParam("ProductDescription", 35));
            fStmt.Parameters.Add(StringParam("ProductNumberType", 1));
            fStmt.Parameters.Add(StringParam("AlternativeProductNumber", 35));
            fStmt.Parameters.Add(StringParam("AlternativeProductDescription", 35));
            fStmt.Parameters.Add(DateParam("ProductDate"));
            fStmt.Parameters.Add(DateParam("ExpiryDate"));
            fStmt.Parameters.Add(DateParam("ManufacturingDate"));
            fStmt.Parameters.Add(StringParam("VendorProductNumber", 35));
            fStmt.Parameters.Add(NumberParam("PurchasePrice", 22, 7));
            fStmt.Parameters.Add(StringParam("PackageIdentity", 17));
            fStmt.Parameters.Add(StringParam("ProductionLotIdentity", 40));
            fStmt.Parameters.Add(StringParam("ProductionSubLotIdentity", 40));
            fStmt.Parameters.Add(StringParam("ManufacturingUnit", 20));
            fStmt.Parameters.Add(StringParam("MarketingLotIdentity", 20));
            fStmt.Parameters.Add(StringParam("SerialNumber", 21));
            fStmt.Parameters.Add(StringParam("StorageLot", 20));
            fStmt.Parameters.Add(NumberParam("ShippedQuantity", 20, 6));
            fStmt.Parameters.Add(NumberParam("MeasuredQuantity", 20, 6));
            fStmt.Parameters.Add(StringParam("MeasureQualifier", 4));
            fStmt.Parameters.Add(NumberParam("Volume", 16, 6));
            fStmt.Parameters.Add(StringParam("VolumeUOMIdentity", 17));
            fStmt.Parameters.Add(NumberParam("Weight", 16, 6));
            fStmt.Parameters.Add(StringParam("WeightUOMIdentity", 17));
            fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
            fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
            fStmt.Parameters.Add(NumberParam("CustomerOrderLinePosition", 5, 0));

            fStmt.Prepare();

        }

        public void Process(ref MessageTransaction trans, SegmentImpl parent, ASNLineDoc p)
        {
            if (p == null)
            {
                // this is useful for testing calls without sending data
                return;
            }

            (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

            if (p.OPCODE != null)
            {
                if (p.OPCODE.Length > 1)
                    throw (new Exception("Value for ASNLineDoc.OPCODE too long, max 1 chars"));

                if (p.OPCODE.Length == 0)
                    throw (new Exception("Zero length for mandatory parameter ASNLineDoc.OPCODE not allowed"));

                (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
            }
            else
                throw (new Exception("Null value for mandatory parameter ASNLineDoc.OPCODE not allowed"));


            if (p.CustomerOrderLineSequence != null)
            {
                (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = p.CustomerOrderLineSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderLineKitPosition != null)
            {
                (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = p.CustomerOrderLineKitPosition.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = DBNull.Value;

            if (p.OriginalPurchaseOrderNumber != null)
            {
                if (p.OriginalPurchaseOrderNumber.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.OriginalPurchaseOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["OriginalPurchaseOrderNumber"] as IDbDataParameter).Value = p.OriginalPurchaseOrderNumber;
            }
            else
                (fStmt.Parameters["OriginalPurchaseOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.OriginalPurchaseOrderSequence != null)
            {
                (fStmt.Parameters["OriginalPurchaseOrderSequence"] as IDbDataParameter).Value = p.OriginalPurchaseOrderSequence.Value;
            }
            else
                (fStmt.Parameters["OriginalPurchaseOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.OriginalPurchaseOrderLinePos != null)
            {
                (fStmt.Parameters["OriginalPurchaseOrderLinePos"] as IDbDataParameter).Value = p.OriginalPurchaseOrderLinePos.Value;
            }
            else
                (fStmt.Parameters["OriginalPurchaseOrderLinePos"] as IDbDataParameter).Value = DBNull.Value;

            if (p.OriginalPurchaseOrderLineSeq != null)
            {
                (fStmt.Parameters["OriginalPurchaseOrderLineSeq"] as IDbDataParameter).Value = p.OriginalPurchaseOrderLineSeq.Value;
            }
            else
                (fStmt.Parameters["OriginalPurchaseOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

            if (p.OriginalCustomerReference != null)
            {
                if (p.OriginalCustomerReference.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.OriginalCustomerReference too long, max 35 chars"));

                (fStmt.Parameters["OriginalCustomerReference"] as IDbDataParameter).Value = p.OriginalCustomerReference;
            }
            else
                (fStmt.Parameters["OriginalCustomerReference"] as IDbDataParameter).Value = DBNull.Value;

            if (p.InventoryStatusCode != null)
            {
                if (p.InventoryStatusCode.Length > 8)
                    throw (new Exception("Value for ASNLineDoc.InventoryStatusCode too long, max 8 chars"));

                (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = p.InventoryStatusCode;
            }
            else
                (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = DBNull.Value;

            if (p.InventoryStatusDays != null)
            {
                (fStmt.Parameters["InventoryStatusDays"] as IDbDataParameter).Value = p.InventoryStatusDays.Value;
            }
            else
                (fStmt.Parameters["InventoryStatusDays"] as IDbDataParameter).Value = DBNull.Value;

            if (p.InventorystatusKey != null)
            {
                if (p.InventorystatusKey.Length > 12)
                    throw (new Exception("Value for ASNLineDoc.InventorystatusKey too long, max 12 chars"));

                (fStmt.Parameters["InventorystatusKey"] as IDbDataParameter).Value = p.InventorystatusKey;
            }
            else
                (fStmt.Parameters["InventorystatusKey"] as IDbDataParameter).Value = DBNull.Value;

            if (p.InventorystatusText != null)
            {
                if (p.InventorystatusText.Length > 200)
                    throw (new Exception("Value for ASNLineDoc.InventorystatusText too long, max 200 chars"));

                (fStmt.Parameters["InventorystatusText"] as IDbDataParameter).Value = p.InventorystatusText;
            }
            else
                (fStmt.Parameters["InventorystatusText"] as IDbDataParameter).Value = DBNull.Value;

            if (p.InventorystatusAlarmDate != null)
            {
                (fStmt.Parameters["InventorystatusAlarmDate"] as IDbDataParameter).Value = p.InventorystatusAlarmDate.Value;
            }
            else
                (fStmt.Parameters["InventorystatusAlarmDate"] as IDbDataParameter).Value = DBNull.Value;

            if (p.Instructions != null)
            {
                if (p.Instructions.Length > 400)
                    throw (new Exception("Value for ASNLineDoc.Instructions too long, max 400 chars"));

                (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = p.Instructions;
            }
            else
                (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PredefinedItemLoadIdentity != null)
            {
                if (p.PredefinedItemLoadIdentity.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.PredefinedItemLoadIdentity too long, max 35 chars"));

                (fStmt.Parameters["PredefinedItemLoadIdentity"] as IDbDataParameter).Value = p.PredefinedItemLoadIdentity;
            }
            else
                (fStmt.Parameters["PredefinedItemLoadIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductNumberShipFromPartner != null)
            {
                if (p.ProductNumberShipFromPartner.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.ProductNumberShipFromPartner too long, max 35 chars"));

                (fStmt.Parameters["ProductNumberShipFromPartner"] as IDbDataParameter).Value = p.ProductNumberShipFromPartner;
            }
            else
                (fStmt.Parameters["ProductNumberShipFromPartner"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductNumberShipToPartner != null)
            {
                if (p.ProductNumberShipToPartner.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.ProductNumberShipToPartner too long, max 35 chars"));

                (fStmt.Parameters["ProductNumberShipToPartner"] as IDbDataParameter).Value = p.ProductNumberShipToPartner;
            }
            else
                (fStmt.Parameters["ProductNumberShipToPartner"] as IDbDataParameter).Value = DBNull.Value;

            if (p.GlobalProductNumber != null)
            {
                if (p.GlobalProductNumber.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.GlobalProductNumber too long, max 35 chars"));

                (fStmt.Parameters["GlobalProductNumber"] as IDbDataParameter).Value = p.GlobalProductNumber;
            }
            else
                (fStmt.Parameters["GlobalProductNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.AdditionalPackingMaterial != null)
            {
                if (p.AdditionalPackingMaterial.Length > 1)
                    throw (new Exception("Value for ASNLineDoc.AdditionalPackingMaterial too long, max 1 chars"));

                (fStmt.Parameters["AdditionalPackingMaterial"] as IDbDataParameter).Value = p.AdditionalPackingMaterial;
            }
            else
                (fStmt.Parameters["AdditionalPackingMaterial"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderType != null)
            {
                if (p.CustomerOrderType.Length > 2)
                    throw (new Exception("Value for ASNLineDoc.CustomerOrderType too long, max 2 chars"));

                (fStmt.Parameters["CustomerOrderType"] as IDbDataParameter).Value = p.CustomerOrderType;
            }
            else
                (fStmt.Parameters["CustomerOrderType"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PurchaseOrderNumber != null)
            {
                if (p.PurchaseOrderNumber.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.PurchaseOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = p.PurchaseOrderNumber;
            }
            else
                (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PurchaseOrderSequence != null)
            {
                (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = p.PurchaseOrderSequence.Value;
            }
            else
                (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PurchaseOrderLinePos != null)
            {
                (fStmt.Parameters["PurchaseOrderLinePos"] as IDbDataParameter).Value = p.PurchaseOrderLinePos.Value;
            }
            else
                (fStmt.Parameters["PurchaseOrderLinePos"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PurchaseOrderLineSeq != null)
            {
                (fStmt.Parameters["PurchaseOrderLineSeq"] as IDbDataParameter).Value = p.PurchaseOrderLineSeq.Value;
            }
            else
                (fStmt.Parameters["PurchaseOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

            if (p.StockedProductNumber != null)
            {
                if (p.StockedProductNumber.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.StockedProductNumber too long, max 35 chars"));

                (fStmt.Parameters["StockedProductNumber"] as IDbDataParameter).Value = p.StockedProductNumber;
            }
            else
                (fStmt.Parameters["StockedProductNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.GlobalStockedProductNumber != null)
            {
                if (p.GlobalStockedProductNumber.Length > 20)
                    throw (new Exception("Value for ASNLineDoc.GlobalStockedProductNumber too long, max 20 chars"));

                (fStmt.Parameters["GlobalStockedProductNumber"] as IDbDataParameter).Value = p.GlobalStockedProductNumber;
            }
            else
                (fStmt.Parameters["GlobalStockedProductNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.FromPartyIdentity != null)
            {
                if (p.FromPartyIdentity.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.FromPartyIdentity too long, max 35 chars"));

                (fStmt.Parameters["FromPartyIdentity"] as IDbDataParameter).Value = p.FromPartyIdentity;
            }
            else
                (fStmt.Parameters["FromPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.FromPartyQualifier != null)
            {
                if (p.FromPartyQualifier.Length > 3)
                    throw (new Exception("Value for ASNLineDoc.FromPartyQualifier too long, max 3 chars"));

                (fStmt.Parameters["FromPartyQualifier"] as IDbDataParameter).Value = p.FromPartyQualifier;
            }
            else
                (fStmt.Parameters["FromPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderNumber != null)
            {
                if (p.CustomerReturnOrderNumber.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.CustomerReturnOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = p.CustomerReturnOrderNumber;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderSequence != null)
            {
                (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = p.CustomerReturnOrderSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderLinePos != null)
            {
                (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = p.CustomerReturnOrderLinePos.Value;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderLineKitPos != null)
            {
                (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = p.CustomerReturnOrderLineKitPos.Value;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderLineSeq != null)
            {
                (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = p.CustomerReturnOrderLineSeq.Value;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ActionCode != null)
            {
                if (p.ActionCode.Length > 2)
                    throw (new Exception("Value for ASNLineDoc.ActionCode too long, max 2 chars"));

                (fStmt.Parameters["ActionCode"] as IDbDataParameter).Value = p.ActionCode;
            }
            else
                (fStmt.Parameters["ActionCode"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ActionCodeRequirement != null)
            {
                if (p.ActionCodeRequirement.Length > 1)
                    throw (new Exception("Value for ASNLineDoc.ActionCodeRequirement too long, max 1 chars"));

                (fStmt.Parameters["ActionCodeRequirement"] as IDbDataParameter).Value = p.ActionCodeRequirement;
            }
            else
                (fStmt.Parameters["ActionCodeRequirement"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ReasonCode != null)
            {
                if (p.ReasonCode.Length > 2)
                    throw (new Exception("Value for ASNLineDoc.ReasonCode too long, max 2 chars"));

                (fStmt.Parameters["ReasonCode"] as IDbDataParameter).Value = p.ReasonCode;
            }
            else
                (fStmt.Parameters["ReasonCode"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ReasonText != null)
            {
                if (p.ReasonText.Length > 400)
                    throw (new Exception("Value for ASNLineDoc.ReasonText too long, max 400 chars"));

                (fStmt.Parameters["ReasonText"] as IDbDataParameter).Value = p.ReasonText;
            }
            else
                (fStmt.Parameters["ReasonText"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShiptoVendorIdentity != null)
            {
                if (p.ShiptoVendorIdentity.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.ShiptoVendorIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShiptoVendorIdentity"] as IDbDataParameter).Value = p.ShiptoVendorIdentity;
            }
            else
                (fStmt.Parameters["ShiptoVendorIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShiptoVendorQualifier != null)
            {
                if (p.ShiptoVendorQualifier.Length > 3)
                    throw (new Exception("Value for ASNLineDoc.ShiptoVendorQualifier too long, max 3 chars"));

                (fStmt.Parameters["ShiptoVendorQualifier"] as IDbDataParameter).Value = p.ShiptoVendorQualifier;
            }
            else
                (fStmt.Parameters["ShiptoVendorQualifier"] as IDbDataParameter).Value = DBNull.Value;

            if (p.DiscrepancyQuantity != null)
            {
                (fStmt.Parameters["DiscrepancyQuantity"] as IDbDataParameter).Value = p.DiscrepancyQuantity.Value;
            }
            else
                (fStmt.Parameters["DiscrepancyQuantity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.DiscrepancyCode != null)
            {
                if (p.DiscrepancyCode.Length > 3)
                    throw (new Exception("Value for ASNLineDoc.DiscrepancyCode too long, max 3 chars"));

                (fStmt.Parameters["DiscrepancyCode"] as IDbDataParameter).Value = p.DiscrepancyCode;
            }
            else
                (fStmt.Parameters["DiscrepancyCode"] as IDbDataParameter).Value = DBNull.Value;

            if (p.DiscrepancyText != null)
            {
                if (p.DiscrepancyText.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.DiscrepancyText too long, max 35 chars"));

                (fStmt.Parameters["DiscrepancyText"] as IDbDataParameter).Value = p.DiscrepancyText;
            }
            else
                (fStmt.Parameters["DiscrepancyText"] as IDbDataParameter).Value = DBNull.Value;

            if (p.QuantityUpperTolerance != null)
            {
                (fStmt.Parameters["QuantityUpperTolerance"] as IDbDataParameter).Value = p.QuantityUpperTolerance.Value;
            }
            else
                (fStmt.Parameters["QuantityUpperTolerance"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CatchMeasureLowerTolerance != null)
            {
                (fStmt.Parameters["CatchMeasureLowerTolerance"] as IDbDataParameter).Value = p.CatchMeasureLowerTolerance.Value;
            }
            else
                (fStmt.Parameters["CatchMeasureLowerTolerance"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CatchMeasureUpperTolerance != null)
            {
                (fStmt.Parameters["CatchMeasureUpperTolerance"] as IDbDataParameter).Value = p.CatchMeasureUpperTolerance.Value;
            }
            else
                (fStmt.Parameters["CatchMeasureUpperTolerance"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ASNIdentity != null)
            {
                if (p.ASNIdentity.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.ASNIdentity too long, max 35 chars"));

                (fStmt.Parameters["ASNIdentity"] as IDbDataParameter).Value = p.ASNIdentity;
            }
            else
                (fStmt.Parameters["ASNIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ASNSequenceNumber != null)
            {
                (fStmt.Parameters["ASNSequenceNumber"] as IDbDataParameter).Value = p.ASNSequenceNumber.Value;
            }
            else
                (fStmt.Parameters["ASNSequenceNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipFromPartyNodeIdentity != null)
            {
                if (p.ShipFromPartyNodeIdentity.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.ShipFromPartyNodeIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipFromPartyNodeIdentity;
            }
            else
                (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ASNLineNumber != null)
            {
                (fStmt.Parameters["ASNLineNumber"] as IDbDataParameter).Value = p.ASNLineNumber.Value;
            }
            else
                (fStmt.Parameters["ASNLineNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ASNLineSequenceNumber != null)
            {
                (fStmt.Parameters["ASNLineSequenceNumber"] as IDbDataParameter).Value = p.ASNLineSequenceNumber.Value;
            }
            else
                (fStmt.Parameters["ASNLineSequenceNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.LoadCarrierIdentity != null)
            {
                if (p.LoadCarrierIdentity.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.LoadCarrierIdentity too long, max 35 chars"));

                (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = p.LoadCarrierIdentity;
            }
            else
                (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = DBNull.Value;

            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

            if (p.ShipFromPartyIdentity != null)
            {
                if (p.ShipFromPartyIdentity.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.ShipFromPartyIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = p.ShipFromPartyIdentity;
            }
            else
                (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipToPartyNodeIdentity != null)
            {
                if (p.ShipToPartyNodeIdentity.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.ShipToPartyNodeIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipToPartyNodeIdentity;
            }
            else
                (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShiptoPartyIdentity != null)
            {
                if (p.ShiptoPartyIdentity.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.ShiptoPartyIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShiptoPartyIdentity"] as IDbDataParameter).Value = p.ShiptoPartyIdentity;
            }
            else
                (fStmt.Parameters["ShiptoPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShiptoPartyQualifier != null)
            {
                if (p.ShiptoPartyQualifier.Length > 3)
                    throw (new Exception("Value for ASNLineDoc.ShiptoPartyQualifier too long, max 3 chars"));

                (fStmt.Parameters["ShiptoPartyQualifier"] as IDbDataParameter).Value = p.ShiptoPartyQualifier;
            }
            else
                (fStmt.Parameters["ShiptoPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipToCustomerNodeIdentity != null)
            {
                if (p.ShipToCustomerNodeIdentity.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.ShipToCustomerNodeIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShipToCustomerNodeIdentity"] as IDbDataParameter).Value = p.ShipToCustomerNodeIdentity;
            }
            else
                (fStmt.Parameters["ShipToCustomerNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShiptoCustomerIdentity != null)
            {
                if (p.ShiptoCustomerIdentity.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.ShiptoCustomerIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShiptoCustomerIdentity"] as IDbDataParameter).Value = p.ShiptoCustomerIdentity;
            }
            else
                (fStmt.Parameters["ShiptoCustomerIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShiptoCustomerQualifier != null)
            {
                if (p.ShiptoCustomerQualifier.Length > 3)
                    throw (new Exception("Value for ASNLineDoc.ShiptoCustomerQualifier too long, max 3 chars"));

                (fStmt.Parameters["ShiptoCustomerQualifier"] as IDbDataParameter).Value = p.ShiptoCustomerQualifier;
            }
            else
                (fStmt.Parameters["ShiptoCustomerQualifier"] as IDbDataParameter).Value = DBNull.Value;

            if (p.SelltoCustomerIdentity != null)
            {
                if (p.SelltoCustomerIdentity.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.SelltoCustomerIdentity too long, max 35 chars"));

                (fStmt.Parameters["SelltoCustomerIdentity"] as IDbDataParameter).Value = p.SelltoCustomerIdentity;
            }
            else
                (fStmt.Parameters["SelltoCustomerIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.SelltoCustomerQualifier != null)
            {
                if (p.SelltoCustomerQualifier.Length > 3)
                    throw (new Exception("Value for ASNLineDoc.SelltoCustomerQualifier too long, max 3 chars"));

                (fStmt.Parameters["SelltoCustomerQualifier"] as IDbDataParameter).Value = p.SelltoCustomerQualifier;
            }
            else
                (fStmt.Parameters["SelltoCustomerQualifier"] as IDbDataParameter).Value = DBNull.Value;

            if (p.OwnerIdentity != null)
            {
                if (p.OwnerIdentity.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.OwnerIdentity too long, max 35 chars"));

                (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = p.OwnerIdentity;
            }
            else
                (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.OwnerIdentityAtShipToCustomer != null)
            {
                if (p.OwnerIdentityAtShipToCustomer.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.OwnerIdentityAtShipToCustomer too long, max 35 chars"));

                (fStmt.Parameters["OwnerIdentityAtShipToCustomer"] as IDbDataParameter).Value = p.OwnerIdentityAtShipToCustomer;
            }
            else
                (fStmt.Parameters["OwnerIdentityAtShipToCustomer"] as IDbDataParameter).Value = DBNull.Value;

            if (p.VendorIdentity != null)
            {
                if (p.VendorIdentity.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.VendorIdentity too long, max 35 chars"));

                (fStmt.Parameters["VendorIdentity"] as IDbDataParameter).Value = p.VendorIdentity;
            }
            else
                (fStmt.Parameters["VendorIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.VendorPartyNodeIdentity != null)
            {
                if (p.VendorPartyNodeIdentity.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.VendorPartyNodeIdentity too long, max 35 chars"));

                (fStmt.Parameters["VendorPartyNodeIdentity"] as IDbDataParameter).Value = p.VendorPartyNodeIdentity;
            }
            else
                (fStmt.Parameters["VendorPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductNumber != null)
            {
                if (p.ProductNumber.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.ProductNumber too long, max 35 chars"));

                (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
            }
            else
                (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductDescription != null)
            {
                if (p.ProductDescription.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.ProductDescription too long, max 35 chars"));

                (fStmt.Parameters["ProductDescription"] as IDbDataParameter).Value = p.ProductDescription;
            }
            else
                (fStmt.Parameters["ProductDescription"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductNumberType != null)
            {
                if (p.ProductNumberType.Length > 1)
                    throw (new Exception("Value for ASNLineDoc.ProductNumberType too long, max 1 chars"));

                (fStmt.Parameters["ProductNumberType"] as IDbDataParameter).Value = p.ProductNumberType;
            }
            else
                (fStmt.Parameters["ProductNumberType"] as IDbDataParameter).Value = DBNull.Value;

            if (p.AlternativeProductNumber != null)
            {
                if (p.AlternativeProductNumber.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.AlternativeProductNumber too long, max 35 chars"));

                (fStmt.Parameters["AlternativeProductNumber"] as IDbDataParameter).Value = p.AlternativeProductNumber;
            }
            else
                (fStmt.Parameters["AlternativeProductNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.AlternativeProductDescription != null)
            {
                if (p.AlternativeProductDescription.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.AlternativeProductDescription too long, max 35 chars"));

                (fStmt.Parameters["AlternativeProductDescription"] as IDbDataParameter).Value = p.AlternativeProductDescription;
            }
            else
                (fStmt.Parameters["AlternativeProductDescription"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductDate != null)
            {
                (fStmt.Parameters["ProductDate"] as IDbDataParameter).Value = p.ProductDate.Value;
            }
            else
                (fStmt.Parameters["ProductDate"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ExpiryDate != null)
            {
                (fStmt.Parameters["ExpiryDate"] as IDbDataParameter).Value = p.ExpiryDate.Value;
            }
            else
                (fStmt.Parameters["ExpiryDate"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ManufacturingDate != null)
            {
                (fStmt.Parameters["ManufacturingDate"] as IDbDataParameter).Value = p.ManufacturingDate.Value;
            }
            else
                (fStmt.Parameters["ManufacturingDate"] as IDbDataParameter).Value = DBNull.Value;

            if (p.VendorProductNumber != null)
            {
                if (p.VendorProductNumber.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.VendorProductNumber too long, max 35 chars"));

                (fStmt.Parameters["VendorProductNumber"] as IDbDataParameter).Value = p.VendorProductNumber;
            }
            else
                (fStmt.Parameters["VendorProductNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PurchasePrice != null)
            {
                (fStmt.Parameters["PurchasePrice"] as IDbDataParameter).Value = p.PurchasePrice.Value;
            }
            else
                (fStmt.Parameters["PurchasePrice"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PackageIdentity != null)
            {
                if (p.PackageIdentity.Length > 17)
                    throw (new Exception("Value for ASNLineDoc.PackageIdentity too long, max 17 chars"));

                (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
            }
            else
                (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductionLotIdentity != null)
            {
                if (p.ProductionLotIdentity.Length > 40)
                    throw (new Exception("Value for ASNLineDoc.ProductionLotIdentity too long, max 40 chars"));

                (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = p.ProductionLotIdentity;
            }
            else
                (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductionSubLotIdentity != null)
            {
                if (p.ProductionSubLotIdentity.Length > 40)
                    throw (new Exception("Value for ASNLineDoc.ProductionSubLotIdentity too long, max 40 chars"));

                (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = p.ProductionSubLotIdentity;
            }
            else
                (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ManufacturingUnit != null)
            {
                if (p.ManufacturingUnit.Length > 20)
                    throw (new Exception("Value for ASNLineDoc.ManufacturingUnit too long, max 20 chars"));

                (fStmt.Parameters["ManufacturingUnit"] as IDbDataParameter).Value = p.ManufacturingUnit;
            }
            else
                (fStmt.Parameters["ManufacturingUnit"] as IDbDataParameter).Value = DBNull.Value;

            if (p.MarketingLotIdentity != null)
            {
                if (p.MarketingLotIdentity.Length > 20)
                    throw (new Exception("Value for ASNLineDoc.MarketingLotIdentity too long, max 20 chars"));

                (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = p.MarketingLotIdentity;
            }
            else
                (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.SerialNumber != null)
            {
                if (p.SerialNumber.Length > 21)
                    throw (new Exception("Value for ASNLineDoc.SerialNumber too long, max 21 chars"));

                (fStmt.Parameters["SerialNumber"] as IDbDataParameter).Value = p.SerialNumber;
            }
            else
                (fStmt.Parameters["SerialNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.StorageLot != null)
            {
                if (p.StorageLot.Length > 20)
                    throw (new Exception("Value for ASNLineDoc.StorageLot too long, max 20 chars"));

                (fStmt.Parameters["StorageLot"] as IDbDataParameter).Value = p.StorageLot;
            }
            else
                (fStmt.Parameters["StorageLot"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShippedQuantity != null)
            {
                (fStmt.Parameters["ShippedQuantity"] as IDbDataParameter).Value = p.ShippedQuantity.Value;
            }
            else
                (fStmt.Parameters["ShippedQuantity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.MeasuredQuantity != null)
            {
                (fStmt.Parameters["MeasuredQuantity"] as IDbDataParameter).Value = p.MeasuredQuantity.Value;
            }
            else
                (fStmt.Parameters["MeasuredQuantity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.MeasureQualifier != null)
            {
                if (p.MeasureQualifier.Length > 4)
                    throw (new Exception("Value for ASNLineDoc.MeasureQualifier too long, max 4 chars"));

                (fStmt.Parameters["MeasureQualifier"] as IDbDataParameter).Value = p.MeasureQualifier;
            }
            else
                (fStmt.Parameters["MeasureQualifier"] as IDbDataParameter).Value = DBNull.Value;

            if (p.Volume != null)
            {
                (fStmt.Parameters["Volume"] as IDbDataParameter).Value = p.Volume.Value;
            }
            else
                (fStmt.Parameters["Volume"] as IDbDataParameter).Value = DBNull.Value;

            if (p.VolumeUOMIdentity != null)
            {
                if (p.VolumeUOMIdentity.Length > 17)
                    throw (new Exception("Value for ASNLineDoc.VolumeUOMIdentity too long, max 17 chars"));

                (fStmt.Parameters["VolumeUOMIdentity"] as IDbDataParameter).Value = p.VolumeUOMIdentity;
            }
            else
                (fStmt.Parameters["VolumeUOMIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.Weight != null)
            {
                (fStmt.Parameters["Weight"] as IDbDataParameter).Value = p.Weight.Value;
            }
            else
                (fStmt.Parameters["Weight"] as IDbDataParameter).Value = DBNull.Value;

            if (p.WeightUOMIdentity != null)
            {
                if (p.WeightUOMIdentity.Length > 17)
                    throw (new Exception("Value for ASNLineDoc.WeightUOMIdentity too long, max 17 chars"));

                (fStmt.Parameters["WeightUOMIdentity"] as IDbDataParameter).Value = p.WeightUOMIdentity;
            }
            else
                (fStmt.Parameters["WeightUOMIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderNumber != null)
            {
                if (p.CustomerOrderNumber.Length > 35)
                    throw (new Exception("Value for ASNLineDoc.CustomerOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
            }
            else
                (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderSequence != null)
            {
                (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderLinePosition != null)
            {
                (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = p.CustomerOrderLinePosition.Value;
            }
            else
                (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

            trans.HapiTransSeq++;

            fStmt.ExecuteNonQuery();

        }
    }

    public class ConfirmationOfReceiptHeadInsert : SegmentImpl
    {
        private ConfirmationOfReceiptLoadCarrierInsert aConfirmationOfReceiptLoadCarrierInsert;
        private ConfirmationOfReceiptLineInsert aConfirmationOfReceiptLineInsert;

        public ConfirmationOfReceiptHeadInsert(WSBase owner)
            : base(owner)            
        {
            StringBuilder s = new StringBuilder("insert into EXT2_CONF_OF_RECEIPT_HEAD ( ");
            s.Append(" HAPIRCV_ID");
            s.Append(",OPCODE");
            s.Append(",AcknowledgeInboundAsnIdentity");
            s.Append(",ArrivalDateTime");
            s.Append(",ShipToPartyNodeIdentity");
            s.Append(",ShiptoPartyIdentity");
            s.Append(",ShiptoPartyQualifier");
            s.Append(",ShipFromPartyNodeIdentity");
            s.Append(",ShipFromPartyIdentity");
            s.Append(",ShipFromPartyQualifier");
            s.Append(",InboundAsnIdentity");
            s.Append(",InboundAsnSequenceNumber");
            s.Append(",ClientIdentity");
            s.Append(",AcknowledgeInboundAsnType");
            s.Append(",ForwarderIdentity");

            s.Append(" ) values ( ");

            s.Append(" :HAPIRCV_ID");
            s.Append(",:OPCODE");
            s.Append(",:AcknowledgeInboundAsnIdentity");
            s.Append(",:ArrivalDateTime");
            s.Append(",:ShipToPartyNodeIdentity");
            s.Append(",:ShiptoPartyIdentity");
            s.Append(",:ShiptoPartyQualifier");
            s.Append(",:ShipFromPartyNodeIdentity");
            s.Append(",:ShipFromPartyIdentity");
            s.Append(",:ShipFromPartyQualifier");
            s.Append(",:InboundAsnIdentity");
            s.Append(",:InboundAsnSequenceNumber");
            s.Append(",:ClientIdentity");
            s.Append(",:AcknowledgeInboundAsnType");
            s.Append(",:ForwarderIdentity");

            s.Append(" )");

            fStmt.CommandText = s.ToString();

            fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
            fStmt.Parameters.Add(StringParam("OPCODE", 1));
            fStmt.Parameters.Add(StringParam("AcknowledgeInboundAsnIdentity", 35));
            fStmt.Parameters.Add(DateParam("ArrivalDateTime"));
            fStmt.Parameters.Add(StringParam("ShipToPartyNodeIdentity", 35));
            fStmt.Parameters.Add(StringParam("ShiptoPartyIdentity", 35));
            fStmt.Parameters.Add(StringParam("ShiptoPartyQualifier", 3));
            fStmt.Parameters.Add(StringParam("ShipFromPartyNodeIdentity", 35));
            fStmt.Parameters.Add(StringParam("ShipFromPartyIdentity", 35));
            fStmt.Parameters.Add(StringParam("ShipFromPartyQualifier", 3));
            fStmt.Parameters.Add(StringParam("InboundAsnIdentity", 35));
            fStmt.Parameters.Add(NumberParam("InboundAsnSequenceNumber", 3, 0));
            fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
            fStmt.Parameters.Add(StringParam("AcknowledgeInboundAsnType", 1));
            fStmt.Parameters.Add(StringParam("ForwarderIdentity", 35));

            fStmt.Prepare();

            aConfirmationOfReceiptLoadCarrierInsert = new ConfirmationOfReceiptLoadCarrierInsert(owner);
            aConfirmationOfReceiptLineInsert = new ConfirmationOfReceiptLineInsert(owner);
        }

        public void Process(ref MessageTransaction trans, SegmentImpl parent, ConfirmationOfReceiptHeadDoc p)
        {
            if (p == null)
            {
                // this is useful for testing calls without sending data
                return;
            }

            (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

            if (p.OPCODE != null)
            {
                if (p.OPCODE.Length > 1)
                    throw (new Exception("Value for ConfirmationOfReceiptHeadDoc.OPCODE too long, max 1 chars"));

                if (p.OPCODE.Length == 0)
                    throw (new Exception("Zero length for mandatory parameter ConfirmationOfReceiptHeadDoc.OPCODE not allowed"));

                (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
            }
            else
                throw (new Exception("Null value for mandatory parameter ConfirmationOfReceiptHeadDoc.OPCODE not allowed"));


            if (p.AcknowledgeInboundAsnIdentity != null)
            {
                if (p.AcknowledgeInboundAsnIdentity.Length > 35)
                    throw (new Exception("Value for ConfirmationOfReceiptHeadDoc.AcknowledgeInboundAsnIdentity too long, max 35 chars"));

                (fStmt.Parameters["AcknowledgeInboundAsnIdentity"] as IDbDataParameter).Value = p.AcknowledgeInboundAsnIdentity;
            }
            else
                (fStmt.Parameters["AcknowledgeInboundAsnIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ArrivalDateTime != null)
            {
                (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = p.ArrivalDateTime.Value;
            }
            else
                (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipToPartyNodeIdentity != null)
            {
                if (p.ShipToPartyNodeIdentity.Length > 35)
                    throw (new Exception("Value for ConfirmationOfReceiptHeadDoc.ShipToPartyNodeIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipToPartyNodeIdentity;
            }
            else
                (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShiptoPartyIdentity != null)
            {
                if (p.ShiptoPartyIdentity.Length > 35)
                    throw (new Exception("Value for ConfirmationOfReceiptHeadDoc.ShiptoPartyIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShiptoPartyIdentity"] as IDbDataParameter).Value = p.ShiptoPartyIdentity;
            }
            else
                (fStmt.Parameters["ShiptoPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShiptoPartyQualifier != null)
            {
                if (p.ShiptoPartyQualifier.Length > 3)
                    throw (new Exception("Value for ConfirmationOfReceiptHeadDoc.ShiptoPartyQualifier too long, max 3 chars"));

                (fStmt.Parameters["ShiptoPartyQualifier"] as IDbDataParameter).Value = p.ShiptoPartyQualifier;
            }
            else
                (fStmt.Parameters["ShiptoPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipFromPartyNodeIdentity != null)
            {
                if (p.ShipFromPartyNodeIdentity.Length > 35)
                    throw (new Exception("Value for ConfirmationOfReceiptHeadDoc.ShipFromPartyNodeIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipFromPartyNodeIdentity;
            }
            else
                (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipFromPartyIdentity != null)
            {
                if (p.ShipFromPartyIdentity.Length > 35)
                    throw (new Exception("Value for ConfirmationOfReceiptHeadDoc.ShipFromPartyIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = p.ShipFromPartyIdentity;
            }
            else
                (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipFromPartyQualifier != null)
            {
                if (p.ShipFromPartyQualifier.Length > 3)
                    throw (new Exception("Value for ConfirmationOfReceiptHeadDoc.ShipFromPartyQualifier too long, max 3 chars"));

                (fStmt.Parameters["ShipFromPartyQualifier"] as IDbDataParameter).Value = p.ShipFromPartyQualifier;
            }
            else
                (fStmt.Parameters["ShipFromPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

            if (p.InboundAsnIdentity != null)
            {
                if (p.InboundAsnIdentity.Length > 35)
                    throw (new Exception("Value for ConfirmationOfReceiptHeadDoc.InboundAsnIdentity too long, max 35 chars"));

                (fStmt.Parameters["InboundAsnIdentity"] as IDbDataParameter).Value = p.InboundAsnIdentity;
            }
            else
                (fStmt.Parameters["InboundAsnIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.InboundAsnSequenceNumber != null)
            {
                (fStmt.Parameters["InboundAsnSequenceNumber"] as IDbDataParameter).Value = p.InboundAsnSequenceNumber.Value;
            }
            else
                (fStmt.Parameters["InboundAsnSequenceNumber"] as IDbDataParameter).Value = DBNull.Value;

            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

            if (p.AcknowledgeInboundAsnType != null)
            {
                if (p.AcknowledgeInboundAsnType.Length > 1)
                    throw (new Exception("Value for ConfirmationOfReceiptHeadDoc.AcknowledgeInboundAsnType too long, max 1 chars"));

                (fStmt.Parameters["AcknowledgeInboundAsnType"] as IDbDataParameter).Value = p.AcknowledgeInboundAsnType;
            }
            else
                (fStmt.Parameters["AcknowledgeInboundAsnType"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ForwarderIdentity != null)
            {
                if (p.ForwarderIdentity.Length > 35)
                    throw (new Exception("Value for ConfirmationOfReceiptHeadDoc.ForwarderIdentity too long, max 35 chars"));

                (fStmt.Parameters["ForwarderIdentity"] as IDbDataParameter).Value = p.ForwarderIdentity;
            }
            else
                (fStmt.Parameters["ForwarderIdentity"] as IDbDataParameter).Value = DBNull.Value;

            trans.HapiTransSeq++;

            fStmt.ExecuteNonQuery();

            if (p.aConfirmationOfReceiptLoadCarrierDocs != null)
                foreach (ConfirmationOfReceiptLoadCarrierDoc c in p.aConfirmationOfReceiptLoadCarrierDocs)
                    aConfirmationOfReceiptLoadCarrierInsert.Process(ref trans, this, c);
            if (p.aConfirmationOfReceiptLineDocs != null)
                foreach (ConfirmationOfReceiptLineDoc d in p.aConfirmationOfReceiptLineDocs)
                    aConfirmationOfReceiptLineInsert.Process(ref trans, this, d);
        }
    }

    public class ConfirmationOfReceiptLoadCarrierInsert : SegmentImpl
    {

        public ConfirmationOfReceiptLoadCarrierInsert(WSBase owner)
            : base(owner)            
        {
            StringBuilder s = new StringBuilder("insert into EXT2_CONF_OF_RECEIPT_CARRIER ( ");
            s.Append(" HAPIRCV_ID");
            s.Append(",OPCODE");
            s.Append(",AcknowledgeInboundAsnIdentity");
            s.Append(",LoadCarrierIdentity");
            s.Append(",LoadCarrierQualifier");
            s.Append(",ArrivalDateTime");
            s.Append(",ShipToPartyNodeIdentity");
            s.Append(",ShiptoPartyIdentity");
            s.Append(",ShiptoPartyQualifier");
            s.Append(",ShipFromPartyNodeIdentity");
            s.Append(",ShipFromPartyIdentity");
            s.Append(",ShipFromPartyQualifier");
            s.Append(",InboundAsnIdentity");
            s.Append(",InboundAsnSequenceNumber");
            s.Append(",DeliveryIdentity");
            s.Append(",ClientIdentity");

            s.Append(" ) values ( ");

            s.Append(" :HAPIRCV_ID");
            s.Append(",:OPCODE");
            s.Append(",:AcknowledgeInboundAsnIdentity");
            s.Append(",:LoadCarrierIdentity");
            s.Append(",:LoadCarrierQualifier");
            s.Append(",:ArrivalDateTime");
            s.Append(",:ShipToPartyNodeIdentity");
            s.Append(",:ShiptoPartyIdentity");
            s.Append(",:ShiptoPartyQualifier");
            s.Append(",:ShipFromPartyNodeIdentity");
            s.Append(",:ShipFromPartyIdentity");
            s.Append(",:ShipFromPartyQualifier");
            s.Append(",:InboundAsnIdentity");
            s.Append(",:InboundAsnSequenceNumber");
            s.Append(",:DeliveryIdentity");
            s.Append(",:ClientIdentity");

            s.Append(" )");

            fStmt.CommandText = s.ToString();

            fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
            fStmt.Parameters.Add(StringParam("OPCODE", 1));
            fStmt.Parameters.Add(StringParam("AcknowledgeInboundAsnIdentity", 35));
            fStmt.Parameters.Add(StringParam("LoadCarrierIdentity", 35));
            fStmt.Parameters.Add(StringParam("LoadCarrierQualifier", 4));
            fStmt.Parameters.Add(DateParam("ArrivalDateTime"));
            fStmt.Parameters.Add(StringParam("ShipToPartyNodeIdentity", 35));
            fStmt.Parameters.Add(StringParam("ShiptoPartyIdentity", 35));
            fStmt.Parameters.Add(StringParam("ShiptoPartyQualifier", 3));
            fStmt.Parameters.Add(StringParam("ShipFromPartyNodeIdentity", 35));
            fStmt.Parameters.Add(StringParam("ShipFromPartyIdentity", 35));
            fStmt.Parameters.Add(StringParam("ShipFromPartyQualifier", 3));
            fStmt.Parameters.Add(StringParam("InboundAsnIdentity", 35));
            fStmt.Parameters.Add(NumberParam("InboundAsnSequenceNumber", 3, 0));
            fStmt.Parameters.Add(NumberParam("DeliveryIdentity", 8, 0));
            fStmt.Parameters.Add(StringParam("ClientIdentity", 17));

            fStmt.Prepare();

        }

        public void Process(ref MessageTransaction trans, SegmentImpl parent, ConfirmationOfReceiptLoadCarrierDoc p)
        {
            if (p == null)
            {
                // this is useful for testing calls without sending data
                return;
            }

            (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

            if (p.OPCODE != null)
            {
                if (p.OPCODE.Length > 1)
                    throw (new Exception("Value for ConfirmationOfReceiptLoadCarrierDoc.OPCODE too long, max 1 chars"));

                if (p.OPCODE.Length == 0)
                    throw (new Exception("Zero length for mandatory parameter ConfirmationOfReceiptLoadCarrierDoc.OPCODE not allowed"));

                (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
            }
            else
                throw (new Exception("Null value for mandatory parameter ConfirmationOfReceiptLoadCarrierDoc.OPCODE not allowed"));


            if (p.AcknowledgeInboundAsnIdentity != null)
            {
                if (p.AcknowledgeInboundAsnIdentity.Length > 35)
                    throw (new Exception("Value for ConfirmationOfReceiptLoadCarrierDoc.AcknowledgeInboundAsnIdentity too long, max 35 chars"));

                (fStmt.Parameters["AcknowledgeInboundAsnIdentity"] as IDbDataParameter).Value = p.AcknowledgeInboundAsnIdentity;
            }
            else
                (fStmt.Parameters["AcknowledgeInboundAsnIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.LoadCarrierIdentity != null)
            {
                if (p.LoadCarrierIdentity.Length > 35)
                    throw (new Exception("Value for ConfirmationOfReceiptLoadCarrierDoc.LoadCarrierIdentity too long, max 35 chars"));

                (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = p.LoadCarrierIdentity;
            }
            else
                (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.LoadCarrierQualifier != null)
            {
                if (p.LoadCarrierQualifier.Length > 4)
                    throw (new Exception("Value for ConfirmationOfReceiptLoadCarrierDoc.LoadCarrierQualifier too long, max 4 chars"));

                (fStmt.Parameters["LoadCarrierQualifier"] as IDbDataParameter).Value = p.LoadCarrierQualifier;
            }
            else
                (fStmt.Parameters["LoadCarrierQualifier"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ArrivalDateTime != null)
            {
                (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = p.ArrivalDateTime.Value;
            }
            else
                (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipToPartyNodeIdentity != null)
            {
                if (p.ShipToPartyNodeIdentity.Length > 35)
                    throw (new Exception("Value for ConfirmationOfReceiptLoadCarrierDoc.ShipToPartyNodeIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipToPartyNodeIdentity;
            }
            else
                (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShiptoPartyIdentity != null)
            {
                if (p.ShiptoPartyIdentity.Length > 35)
                    throw (new Exception("Value for ConfirmationOfReceiptLoadCarrierDoc.ShiptoPartyIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShiptoPartyIdentity"] as IDbDataParameter).Value = p.ShiptoPartyIdentity;
            }
            else
                (fStmt.Parameters["ShiptoPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShiptoPartyQualifier != null)
            {
                if (p.ShiptoPartyQualifier.Length > 3)
                    throw (new Exception("Value for ConfirmationOfReceiptLoadCarrierDoc.ShiptoPartyQualifier too long, max 3 chars"));

                (fStmt.Parameters["ShiptoPartyQualifier"] as IDbDataParameter).Value = p.ShiptoPartyQualifier;
            }
            else
                (fStmt.Parameters["ShiptoPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipFromPartyNodeIdentity != null)
            {
                if (p.ShipFromPartyNodeIdentity.Length > 35)
                    throw (new Exception("Value for ConfirmationOfReceiptLoadCarrierDoc.ShipFromPartyNodeIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipFromPartyNodeIdentity;
            }
            else
                (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipFromPartyIdentity != null)
            {
                if (p.ShipFromPartyIdentity.Length > 35)
                    throw (new Exception("Value for ConfirmationOfReceiptLoadCarrierDoc.ShipFromPartyIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = p.ShipFromPartyIdentity;
            }
            else
                (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipFromPartyQualifier != null)
            {
                if (p.ShipFromPartyQualifier.Length > 3)
                    throw (new Exception("Value for ConfirmationOfReceiptLoadCarrierDoc.ShipFromPartyQualifier too long, max 3 chars"));

                (fStmt.Parameters["ShipFromPartyQualifier"] as IDbDataParameter).Value = p.ShipFromPartyQualifier;
            }
            else
                (fStmt.Parameters["ShipFromPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

            if (p.InboundAsnIdentity != null)
            {
                if (p.InboundAsnIdentity.Length > 35)
                    throw (new Exception("Value for ConfirmationOfReceiptLoadCarrierDoc.InboundAsnIdentity too long, max 35 chars"));

                (fStmt.Parameters["InboundAsnIdentity"] as IDbDataParameter).Value = p.InboundAsnIdentity;
            }
            else
                (fStmt.Parameters["InboundAsnIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.InboundAsnSequenceNumber != null)
            {
                (fStmt.Parameters["InboundAsnSequenceNumber"] as IDbDataParameter).Value = p.InboundAsnSequenceNumber.Value;
            }
            else
                (fStmt.Parameters["InboundAsnSequenceNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.DeliveryIdentity != null)
            {
                (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = p.DeliveryIdentity.Value;
            }
            else
                (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = DBNull.Value;

            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

            trans.HapiTransSeq++;

            fStmt.ExecuteNonQuery();

        }
    }

    public class ConfirmationOfReceiptLineInsert : SegmentImpl
    {

        public ConfirmationOfReceiptLineInsert(WSBase owner)
            : base(owner)            
        {
            StringBuilder s = new StringBuilder("insert into EXT2_CONF_OF_RECEIPT_LINE ( ");
            s.Append(" HAPIRCV_ID");
            s.Append(",OPCODE");
            s.Append(",AcknowledgeInboundAsnIdentity");
            s.Append(",AcknowledgeInboundAsnLinenum");
            s.Append(",ArrivalDateTime");
            s.Append(",ShipFromPartyNodeIdentity");
            s.Append(",ShipFromPartyIdentity");
            s.Append(",ShipFromPartyQualifier");
            s.Append(",InboundAsnIdentity");
            s.Append(",InboundAsnSequenceNumber");
            s.Append(",InboundAsnLineNumber");
            s.Append(",InboundAsnLineSequenceNumber");
            s.Append(",ProductNumber");
            s.Append(",ClientIdentity");
            s.Append(",AsnLineQuantity");
            s.Append(",ArrivedQuantity");
            s.Append(",ReceiptQuantity");
            s.Append(",ProductionLotIdentity");
            s.Append(",ProductionSubLotIdentity");
            s.Append(",SerialNumber");
            s.Append(",DeliveryIdentity");
            s.Append(",LoadCarrierIdentity");
            s.Append(",PurchaseOrderNumber");
            s.Append(",PurchaseOrderSequence");
            s.Append(",PurchaseOrderLinePos");
            s.Append(",PurchaseOrderLineSeq");
            s.Append(",CustomerOrderType");
            s.Append(",ExpiryDate");
            s.Append(",ManufacturingDate");
            s.Append(",InventoryStatusCode");
            s.Append(",MeasuredQuantity");
            s.Append(",MeasureQualifier");

            s.Append(" ) values ( ");

            s.Append(" :HAPIRCV_ID");
            s.Append(",:OPCODE");
            s.Append(",:AcknowledgeInboundAsnIdentity");
            s.Append(",:AcknowledgeInboundAsnLinenum");
            s.Append(",:ArrivalDateTime");
            s.Append(",:ShipFromPartyNodeIdentity");
            s.Append(",:ShipFromPartyIdentity");
            s.Append(",:ShipFromPartyQualifier");
            s.Append(",:InboundAsnIdentity");
            s.Append(",:InboundAsnSequenceNumber");
            s.Append(",:InboundAsnLineNumber");
            s.Append(",:InboundAsnLineSequenceNumber");
            s.Append(",:ProductNumber");
            s.Append(",:ClientIdentity");
            s.Append(",:AsnLineQuantity");
            s.Append(",:ArrivedQuantity");
            s.Append(",:ReceiptQuantity");
            s.Append(",:ProductionLotIdentity");
            s.Append(",:ProductionSubLotIdentity");
            s.Append(",:SerialNumber");
            s.Append(",:DeliveryIdentity");
            s.Append(",:LoadCarrierIdentity");
            s.Append(",:PurchaseOrderNumber");
            s.Append(",:PurchaseOrderSequence");
            s.Append(",:PurchaseOrderLinePos");
            s.Append(",:PurchaseOrderLineSeq");
            s.Append(",:CustomerOrderType");
            s.Append(",:ExpiryDate");
            s.Append(",:ManufacturingDate");
            s.Append(",:InventoryStatusCode");
            s.Append(",:MeasuredQuantity");
            s.Append(",:MeasureQualifier");

            s.Append(" )");

            fStmt.CommandText = s.ToString();

            fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
            fStmt.Parameters.Add(StringParam("OPCODE", 1));
            fStmt.Parameters.Add(StringParam("AcknowledgeInboundAsnIdentity", 35));
            fStmt.Parameters.Add(NumberParam("AcknowledgeInboundAsnLinenum", 5, 0));
            fStmt.Parameters.Add(DateParam("ArrivalDateTime"));
            fStmt.Parameters.Add(StringParam("ShipFromPartyNodeIdentity", 35));
            fStmt.Parameters.Add(StringParam("ShipFromPartyIdentity", 35));
            fStmt.Parameters.Add(StringParam("ShipFromPartyQualifier", 3));
            fStmt.Parameters.Add(StringParam("InboundAsnIdentity", 35));
            fStmt.Parameters.Add(NumberParam("InboundAsnSequenceNumber", 3, 0));
            fStmt.Parameters.Add(NumberParam("InboundAsnLineNumber", 5, 0));
            fStmt.Parameters.Add(NumberParam("InboundAsnLineSequenceNumber", 3, 0));
            fStmt.Parameters.Add(StringParam("ProductNumber", 35));
            fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
            fStmt.Parameters.Add(NumberParam("AsnLineQuantity", 20, 6));
            fStmt.Parameters.Add(NumberParam("ArrivedQuantity", 20, 6));
            fStmt.Parameters.Add(NumberParam("ReceiptQuantity", 20, 6));
            fStmt.Parameters.Add(StringParam("ProductionLotIdentity", 40));
            fStmt.Parameters.Add(StringParam("ProductionSubLotIdentity", 40));
            fStmt.Parameters.Add(StringParam("SerialNumber", 21));
            fStmt.Parameters.Add(NumberParam("DeliveryIdentity", 8, 0));
            fStmt.Parameters.Add(StringParam("LoadCarrierIdentity", 35));
            fStmt.Parameters.Add(StringParam("PurchaseOrderNumber", 35));
            fStmt.Parameters.Add(NumberParam("PurchaseOrderSequence", 3, 0));
            fStmt.Parameters.Add(NumberParam("PurchaseOrderLinePos", 4, 0));
            fStmt.Parameters.Add(NumberParam("PurchaseOrderLineSeq", 3, 0));
            fStmt.Parameters.Add(StringParam("CustomerOrderType", 2));
            fStmt.Parameters.Add(DateParam("ExpiryDate"));
            fStmt.Parameters.Add(DateParam("ManufacturingDate"));
            fStmt.Parameters.Add(StringParam("InventoryStatusCode", 8));
            fStmt.Parameters.Add(NumberParam("MeasuredQuantity", 20, 6));
            fStmt.Parameters.Add(StringParam("MeasureQualifier", 4));

            fStmt.Prepare();

        }

        public void Process(ref MessageTransaction trans, SegmentImpl parent, ConfirmationOfReceiptLineDoc p)
        {
            if (p == null)
            {
                // this is useful for testing calls without sending data
                return;
            }

            (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

            if (p.OPCODE != null)
            {
                if (p.OPCODE.Length > 1)
                    throw (new Exception("Value for ConfirmationOfReceiptLineDoc.OPCODE too long, max 1 chars"));

                if (p.OPCODE.Length == 0)
                    throw (new Exception("Zero length for mandatory parameter ConfirmationOfReceiptLineDoc.OPCODE not allowed"));

                (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
            }
            else
                throw (new Exception("Null value for mandatory parameter ConfirmationOfReceiptLineDoc.OPCODE not allowed"));


            if (p.AcknowledgeInboundAsnIdentity != null)
            {
                if (p.AcknowledgeInboundAsnIdentity.Length > 35)
                    throw (new Exception("Value for ConfirmationOfReceiptLineDoc.AcknowledgeInboundAsnIdentity too long, max 35 chars"));

                (fStmt.Parameters["AcknowledgeInboundAsnIdentity"] as IDbDataParameter).Value = p.AcknowledgeInboundAsnIdentity;
            }
            else
                (fStmt.Parameters["AcknowledgeInboundAsnIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.AcknowledgeInboundAsnLinenum != null)
            {
                (fStmt.Parameters["AcknowledgeInboundAsnLinenum"] as IDbDataParameter).Value = p.AcknowledgeInboundAsnLinenum.Value;
            }
            else
                (fStmt.Parameters["AcknowledgeInboundAsnLinenum"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ArrivalDateTime != null)
            {
                (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = p.ArrivalDateTime.Value;
            }
            else
                (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipFromPartyNodeIdentity != null)
            {
                if (p.ShipFromPartyNodeIdentity.Length > 35)
                    throw (new Exception("Value for ConfirmationOfReceiptLineDoc.ShipFromPartyNodeIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipFromPartyNodeIdentity;
            }
            else
                (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipFromPartyIdentity != null)
            {
                if (p.ShipFromPartyIdentity.Length > 35)
                    throw (new Exception("Value for ConfirmationOfReceiptLineDoc.ShipFromPartyIdentity too long, max 35 chars"));

                (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = p.ShipFromPartyIdentity;
            }
            else
                (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ShipFromPartyQualifier != null)
            {
                if (p.ShipFromPartyQualifier.Length > 3)
                    throw (new Exception("Value for ConfirmationOfReceiptLineDoc.ShipFromPartyQualifier too long, max 3 chars"));

                (fStmt.Parameters["ShipFromPartyQualifier"] as IDbDataParameter).Value = p.ShipFromPartyQualifier;
            }
            else
                (fStmt.Parameters["ShipFromPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

            if (p.InboundAsnIdentity != null)
            {
                if (p.InboundAsnIdentity.Length > 35)
                    throw (new Exception("Value for ConfirmationOfReceiptLineDoc.InboundAsnIdentity too long, max 35 chars"));

                (fStmt.Parameters["InboundAsnIdentity"] as IDbDataParameter).Value = p.InboundAsnIdentity;
            }
            else
                (fStmt.Parameters["InboundAsnIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.InboundAsnSequenceNumber != null)
            {
                (fStmt.Parameters["InboundAsnSequenceNumber"] as IDbDataParameter).Value = p.InboundAsnSequenceNumber.Value;
            }
            else
                (fStmt.Parameters["InboundAsnSequenceNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.InboundAsnLineNumber != null)
            {
                (fStmt.Parameters["InboundAsnLineNumber"] as IDbDataParameter).Value = p.InboundAsnLineNumber.Value;
            }
            else
                (fStmt.Parameters["InboundAsnLineNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.InboundAsnLineSequenceNumber != null)
            {
                (fStmt.Parameters["InboundAsnLineSequenceNumber"] as IDbDataParameter).Value = p.InboundAsnLineSequenceNumber.Value;
            }
            else
                (fStmt.Parameters["InboundAsnLineSequenceNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductNumber != null)
            {
                if (p.ProductNumber.Length > 35)
                    throw (new Exception("Value for ConfirmationOfReceiptLineDoc.ProductNumber too long, max 35 chars"));

                (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
            }
            else
                (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = DBNull.Value;

            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

            if (p.AsnLineQuantity != null)
            {
                (fStmt.Parameters["AsnLineQuantity"] as IDbDataParameter).Value = p.AsnLineQuantity.Value;
            }
            else
                (fStmt.Parameters["AsnLineQuantity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ArrivedQuantity != null)
            {
                (fStmt.Parameters["ArrivedQuantity"] as IDbDataParameter).Value = p.ArrivedQuantity.Value;
            }
            else
                (fStmt.Parameters["ArrivedQuantity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ReceiptQuantity != null)
            {
                (fStmt.Parameters["ReceiptQuantity"] as IDbDataParameter).Value = p.ReceiptQuantity.Value;
            }
            else
                (fStmt.Parameters["ReceiptQuantity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductionLotIdentity != null)
            {
                if (p.ProductionLotIdentity.Length > 40)
                    throw (new Exception("Value for ConfirmationOfReceiptLineDoc.ProductionLotIdentity too long, max 40 chars"));

                (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = p.ProductionLotIdentity;
            }
            else
                (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ProductionSubLotIdentity != null)
            {
                if (p.ProductionSubLotIdentity.Length > 40)
                    throw (new Exception("Value for ConfirmationOfReceiptLineDoc.ProductionSubLotIdentity too long, max 40 chars"));

                (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = p.ProductionSubLotIdentity;
            }
            else
                (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.SerialNumber != null)
            {
                if (p.SerialNumber.Length > 21)
                    throw (new Exception("Value for ConfirmationOfReceiptLineDoc.SerialNumber too long, max 21 chars"));

                (fStmt.Parameters["SerialNumber"] as IDbDataParameter).Value = p.SerialNumber;
            }
            else
                (fStmt.Parameters["SerialNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.DeliveryIdentity != null)
            {
                (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = p.DeliveryIdentity.Value;
            }
            else
                (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.LoadCarrierIdentity != null)
            {
                if (p.LoadCarrierIdentity.Length > 35)
                    throw (new Exception("Value for ConfirmationOfReceiptLineDoc.LoadCarrierIdentity too long, max 35 chars"));

                (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = p.LoadCarrierIdentity;
            }
            else
                (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PurchaseOrderNumber != null)
            {
                if (p.PurchaseOrderNumber.Length > 35)
                    throw (new Exception("Value for ConfirmationOfReceiptLineDoc.PurchaseOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = p.PurchaseOrderNumber;
            }
            else
                (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PurchaseOrderSequence != null)
            {
                (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = p.PurchaseOrderSequence.Value;
            }
            else
                (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PurchaseOrderLinePos != null)
            {
                (fStmt.Parameters["PurchaseOrderLinePos"] as IDbDataParameter).Value = p.PurchaseOrderLinePos.Value;
            }
            else
                (fStmt.Parameters["PurchaseOrderLinePos"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PurchaseOrderLineSeq != null)
            {
                (fStmt.Parameters["PurchaseOrderLineSeq"] as IDbDataParameter).Value = p.PurchaseOrderLineSeq.Value;
            }
            else
                (fStmt.Parameters["PurchaseOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerOrderType != null)
            {
                if (p.CustomerOrderType.Length > 2)
                    throw (new Exception("Value for ConfirmationOfReceiptLineDoc.CustomerOrderType too long, max 2 chars"));

                (fStmt.Parameters["CustomerOrderType"] as IDbDataParameter).Value = p.CustomerOrderType;
            }
            else
                (fStmt.Parameters["CustomerOrderType"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ExpiryDate != null)
            {
                (fStmt.Parameters["ExpiryDate"] as IDbDataParameter).Value = p.ExpiryDate.Value;
            }
            else
                (fStmt.Parameters["ExpiryDate"] as IDbDataParameter).Value = DBNull.Value;

            if (p.ManufacturingDate != null)
            {
                (fStmt.Parameters["ManufacturingDate"] as IDbDataParameter).Value = p.ManufacturingDate.Value;
            }
            else
                (fStmt.Parameters["ManufacturingDate"] as IDbDataParameter).Value = DBNull.Value;

            if (p.InventoryStatusCode != null)
            {
                if (p.InventoryStatusCode.Length > 8)
                    throw (new Exception("Value for ConfirmationOfReceiptLineDoc.InventoryStatusCode too long, max 8 chars"));

                (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = p.InventoryStatusCode;
            }
            else
                (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = DBNull.Value;

            if (p.MeasuredQuantity != null)
            {
                (fStmt.Parameters["MeasuredQuantity"] as IDbDataParameter).Value = p.MeasuredQuantity.Value;
            }
            else
                (fStmt.Parameters["MeasuredQuantity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.MeasureQualifier != null)
            {
                if (p.MeasureQualifier.Length > 4)
                    throw (new Exception("Value for ConfirmationOfReceiptLineDoc.MeasureQualifier too long, max 4 chars"));

                (fStmt.Parameters["MeasureQualifier"] as IDbDataParameter).Value = p.MeasureQualifier;
            }
            else
                (fStmt.Parameters["MeasureQualifier"] as IDbDataParameter).Value = DBNull.Value;

            trans.HapiTransSeq++;

            fStmt.ExecuteNonQuery();

        }
    }

    public class InboundOrderCompletedInsert : SegmentImpl
    {

        public InboundOrderCompletedInsert(WSBase owner)
            : base(owner)           
        {
            StringBuilder s = new StringBuilder("insert into EXT2_INB_ORDER_COMPLETED ( ");
            s.Append(" HAPIRCV_ID");
            s.Append(",OPCODE");
            s.Append(",ClientIdentity");
            s.Append(",WarehouseIdentity");
            s.Append(",EmployeeIdentity");
            s.Append(",PurchaseOrderNumber");
            s.Append(",PurchaseOrderSequence");
            s.Append(",PurchaseOrderLinePosition");
            s.Append(",PurchaseOrderLineSequence");
            s.Append(",CustomerReturnOrderNumber");
            s.Append(",CustomerReturnOrderSequence");
            s.Append(",CustomerReturnOrderLinePos");
            s.Append(",CustomerReturnOrderLineKitPos");
            s.Append(",CustomerReturnOrderLineSeq");

            s.Append(" ) values ( ");

            s.Append(" :HAPIRCV_ID");
            s.Append(",:OPCODE");
            s.Append(",:ClientIdentity");
            s.Append(",:WarehouseIdentity");
            s.Append(",:EmployeeIdentity");
            s.Append(",:PurchaseOrderNumber");
            s.Append(",:PurchaseOrderSequence");
            s.Append(",:PurchaseOrderLinePosition");
            s.Append(",:PurchaseOrderLineSequence");
            s.Append(",:CustomerReturnOrderNumber");
            s.Append(",:CustomerReturnOrderSequence");
            s.Append(",:CustomerReturnOrderLinePos");
            s.Append(",:CustomerReturnOrderLineKitPos");
            s.Append(",:CustomerReturnOrderLineSeq");

            s.Append(" )");

            fStmt.CommandText = s.ToString();

            fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
            fStmt.Parameters.Add(StringParam("OPCODE", 1));
            fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
            fStmt.Parameters.Add(StringParam("WarehouseIdentity", 4));
            fStmt.Parameters.Add(StringParam("EmployeeIdentity", 8));
            fStmt.Parameters.Add(StringParam("PurchaseOrderNumber", 35));
            fStmt.Parameters.Add(NumberParam("PurchaseOrderSequence", 3, 0));
            fStmt.Parameters.Add(NumberParam("PurchaseOrderLinePosition", 4, 0));
            fStmt.Parameters.Add(NumberParam("PurchaseOrderLineSequence", 3, 0));
            fStmt.Parameters.Add(StringParam("CustomerReturnOrderNumber", 35));
            fStmt.Parameters.Add(NumberParam("CustomerReturnOrderSequence", 3, 0));
            fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLinePos", 5, 0));
            fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineKitPos", 2, 0));
            fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineSeq", 3, 0));

            fStmt.Prepare();

        }

        public void Process(ref MessageTransaction trans, SegmentImpl parent, InboundOrderCompletedDoc p)
        {
            if (p == null)
            {
                // this is useful for testing calls without sending data
                return;
            }

            (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

            if (p.OPCODE != null)
            {
                if (p.OPCODE.Length > 1)
                    throw (new Exception("Value for InboundOrderCompletedDoc.OPCODE too long, max 1 chars"));

                if (p.OPCODE.Length == 0)
                    throw (new Exception("Zero length for mandatory parameter InboundOrderCompletedDoc.OPCODE not allowed"));

                (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
            }
            else
                throw (new Exception("Null value for mandatory parameter InboundOrderCompletedDoc.OPCODE not allowed"));


            (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

            if (p.WarehouseIdentity != null)
            {
                if (p.WarehouseIdentity.Length > 4)
                    throw (new Exception("Value for InboundOrderCompletedDoc.WarehouseIdentity too long, max 4 chars"));

                (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = p.WarehouseIdentity;
            }
            else
                (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.EmployeeIdentity != null)
            {
                if (p.EmployeeIdentity.Length > 8)
                    throw (new Exception("Value for InboundOrderCompletedDoc.EmployeeIdentity too long, max 8 chars"));

                (fStmt.Parameters["EmployeeIdentity"] as IDbDataParameter).Value = p.EmployeeIdentity;
            }
            else
                (fStmt.Parameters["EmployeeIdentity"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PurchaseOrderNumber != null)
            {
                if (p.PurchaseOrderNumber.Length > 35)
                    throw (new Exception("Value for InboundOrderCompletedDoc.PurchaseOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = p.PurchaseOrderNumber;
            }
            else
                (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PurchaseOrderSequence != null)
            {
                (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = p.PurchaseOrderSequence.Value;
            }
            else
                (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PurchaseOrderLinePosition != null)
            {
                (fStmt.Parameters["PurchaseOrderLinePosition"] as IDbDataParameter).Value = p.PurchaseOrderLinePosition.Value;
            }
            else
                (fStmt.Parameters["PurchaseOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

            if (p.PurchaseOrderLineSequence != null)
            {
                (fStmt.Parameters["PurchaseOrderLineSequence"] as IDbDataParameter).Value = p.PurchaseOrderLineSequence.Value;
            }
            else
                (fStmt.Parameters["PurchaseOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderNumber != null)
            {
                if (p.CustomerReturnOrderNumber.Length > 35)
                    throw (new Exception("Value for InboundOrderCompletedDoc.CustomerReturnOrderNumber too long, max 35 chars"));

                (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = p.CustomerReturnOrderNumber;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderSequence != null)
            {
                (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = p.CustomerReturnOrderSequence.Value;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderLinePos != null)
            {
                (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = p.CustomerReturnOrderLinePos.Value;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderLineKitPos != null)
            {
                (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = p.CustomerReturnOrderLineKitPos.Value;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = DBNull.Value;

            if (p.CustomerReturnOrderLineSeq != null)
            {
                (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = p.CustomerReturnOrderLineSeq.Value;
            }
            else
                (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

            trans.HapiTransSeq++;

            fStmt.ExecuteNonQuery();

        }
    }

}
