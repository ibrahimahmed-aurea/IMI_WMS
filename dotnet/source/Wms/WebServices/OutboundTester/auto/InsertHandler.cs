/*
  File           : 

  Description    : Internal classes for inserting inbound data into queue tables.
                   This code was generated, do not edit.

*/
using System;
using System.Text;
using System.Data;
using System.Data.Common;

namespace Imi.Wms.WebServices.ExternalInterface
{
  public class InsertHandler
  {
      public string _Debug()
      {
          return "Generated on   : 2017-09-08 11:55:43\r\n" +
                 "Generated by   : SWG\\aron@SE0133D\r\n" +
                 "Generated in   : C:\\projects\\views\\aron_80M_ss\\dotnet\\source\\CodeGenerators\\wscc\r\n";
      }
  }

  public class BalanceAnswerLineInsert : SegmentImpl
  {

    public BalanceAnswerLineInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_BALANCE_ANSWER ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",WarehouseIdentity");
        s.Append(",OwnerIdentity");
        s.Append(",ClientIdentity");
        s.Append(",ProductNumber");
        s.Append(",ProductionLotIdentity");
        s.Append(",ProductionSubLotIdentity");
        s.Append(",MarketingLotIdentity");
        s.Append(",QualityLotIdentity");
        s.Append(",PackageIdentity");
        s.Append(",InventoryStatusCode");
        s.Append(",FreeQuantity");
        s.Append(",PickLocationQuantity");
        s.Append(",PickedQuantity");
        s.Append(",TopickQuantity");
        s.Append(",CustomerReservedQuantity");
        s.Append(",ReservedForReplenQuantity");
        s.Append(",MessageNumber");
        s.Append(",LastBalanceAnswer");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:WarehouseIdentity");
        s.Append(",:OwnerIdentity");
        s.Append(",:ClientIdentity");
        s.Append(",:ProductNumber");
        s.Append(",:ProductionLotIdentity");
        s.Append(",:ProductionSubLotIdentity");
        s.Append(",:MarketingLotIdentity");
        s.Append(",:QualityLotIdentity");
        s.Append(",:PackageIdentity");
        s.Append(",:InventoryStatusCode");
        s.Append(",:FreeQuantity");
        s.Append(",:PickLocationQuantity");
        s.Append(",:PickedQuantity");
        s.Append(",:TopickQuantity");
        s.Append(",:CustomerReservedQuantity");
        s.Append(",:ReservedForReplenQuantity");
        s.Append(",:MessageNumber");
        s.Append(",:LastBalanceAnswer");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("WarehouseIdentity", 4));
        fStmt.Parameters.Add(StringParam("OwnerIdentity", 35));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("ProductNumber", 35));
        fStmt.Parameters.Add(StringParam("ProductionLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("ProductionSubLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("MarketingLotIdentity", 20));
        fStmt.Parameters.Add(StringParam("QualityLotIdentity", 20));
        fStmt.Parameters.Add(StringParam("PackageIdentity", 17));
        fStmt.Parameters.Add(StringParam("InventoryStatusCode", 8));
        fStmt.Parameters.Add(NumberParam("FreeQuantity", 20, 6));
        fStmt.Parameters.Add(NumberParam("PickLocationQuantity", 20, 6));
        fStmt.Parameters.Add(NumberParam("PickedQuantity", 20, 6));
        fStmt.Parameters.Add(NumberParam("TopickQuantity", 20, 6));
        fStmt.Parameters.Add(NumberParam("CustomerReservedQuantity", 20, 6));
        fStmt.Parameters.Add(NumberParam("ReservedForReplenQuantity", 20, 6));
        fStmt.Parameters.Add(NumberParam("MessageNumber", 14, 0));
        fStmt.Parameters.Add(StringParam("LastBalanceAnswer", 1));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, BalanceAnswerLineDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for BalanceAnswerLineDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter BalanceAnswerLineDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter BalanceAnswerLineDoc.OPCODE not allowed");


        if (p.WarehouseIdentity != null)
        {
            if (p.WarehouseIdentity.Length > 4)
                error.AppendLine("Value for BalanceAnswerLineDoc.WarehouseIdentity too long, max 4 chars");

            (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = p.WarehouseIdentity;
        }
        else
            (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OwnerIdentity != null)
        {
            if (p.OwnerIdentity.Length > 35)
                error.AppendLine("Value for BalanceAnswerLineDoc.OwnerIdentity too long, max 35 chars");

            (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = p.OwnerIdentity;
        }
        else
            (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.ProductNumber != null)
        {
            if (p.ProductNumber.Length > 35)
                error.AppendLine("Value for BalanceAnswerLineDoc.ProductNumber too long, max 35 chars");

            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
        }
        else
            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionLotIdentity != null)
        {
            if (p.ProductionLotIdentity.Length > 40)
                error.AppendLine("Value for BalanceAnswerLineDoc.ProductionLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = p.ProductionLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionSubLotIdentity != null)
        {
            if (p.ProductionSubLotIdentity.Length > 40)
                error.AppendLine("Value for BalanceAnswerLineDoc.ProductionSubLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = p.ProductionSubLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MarketingLotIdentity != null)
        {
            if (p.MarketingLotIdentity.Length > 20)
                error.AppendLine("Value for BalanceAnswerLineDoc.MarketingLotIdentity too long, max 20 chars");

            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = p.MarketingLotIdentity;
        }
        else
            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.QualityLotIdentity != null)
        {
            if (p.QualityLotIdentity.Length > 20)
                error.AppendLine("Value for BalanceAnswerLineDoc.QualityLotIdentity too long, max 20 chars");

            (fStmt.Parameters["QualityLotIdentity"] as IDbDataParameter).Value = p.QualityLotIdentity;
        }
        else
            (fStmt.Parameters["QualityLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackageIdentity != null)
        {
            if (p.PackageIdentity.Length > 17)
                error.AppendLine("Value for BalanceAnswerLineDoc.PackageIdentity too long, max 17 chars");

            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
        }
        else
            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventoryStatusCode != null)
        {
            if (p.InventoryStatusCode.Length > 8)
                error.AppendLine("Value for BalanceAnswerLineDoc.InventoryStatusCode too long, max 8 chars");

            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = p.InventoryStatusCode;
        }
        else
            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FreeQuantity != null)
        {
            (fStmt.Parameters["FreeQuantity"] as IDbDataParameter).Value = p.FreeQuantity;
        }
        else
            (fStmt.Parameters["FreeQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PickLocationQuantity != null)
        {
            (fStmt.Parameters["PickLocationQuantity"] as IDbDataParameter).Value = p.PickLocationQuantity;
        }
        else
            (fStmt.Parameters["PickLocationQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PickedQuantity != null)
        {
            (fStmt.Parameters["PickedQuantity"] as IDbDataParameter).Value = p.PickedQuantity;
        }
        else
            (fStmt.Parameters["PickedQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TopickQuantity != null)
        {
            (fStmt.Parameters["TopickQuantity"] as IDbDataParameter).Value = p.TopickQuantity;
        }
        else
            (fStmt.Parameters["TopickQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReservedQuantity != null)
        {
            (fStmt.Parameters["CustomerReservedQuantity"] as IDbDataParameter).Value = p.CustomerReservedQuantity;
        }
        else
            (fStmt.Parameters["CustomerReservedQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReservedForReplenQuantity != null)
        {
            (fStmt.Parameters["ReservedForReplenQuantity"] as IDbDataParameter).Value = p.ReservedForReplenQuantity;
        }
        else
            (fStmt.Parameters["ReservedForReplenQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MessageNumber != null)
        {
            (fStmt.Parameters["MessageNumber"] as IDbDataParameter).Value = p.MessageNumber;
        }
        else
            (fStmt.Parameters["MessageNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LastBalanceAnswer != null)
        {
            if (p.LastBalanceAnswer.Length > 1)
                error.AppendLine("Value for BalanceAnswerLineDoc.LastBalanceAnswer too long, max 1 chars");

            (fStmt.Parameters["LastBalanceAnswer"] as IDbDataParameter).Value = p.LastBalanceAnswer;
        }
        else
            (fStmt.Parameters["LastBalanceAnswer"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class DeliveryReceiptHeadInsert : SegmentImpl
  {
    private DeliveryReceiptHeadTextInsert aDeliveryReceiptHeadTextInsert;
    private DeliveryReceiptLineInsert aDeliveryReceiptLineInsert;
    private DeliveryReceiptPackingMaterialInsert aDeliveryReceiptPackingMaterialInsert;

    public DeliveryReceiptHeadInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_DLVRY_RECEIPT_HEAD ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",DeliveryIdentity");
        s.Append(",ArrivalDateTime");
        s.Append(",WarehouseIdentity");
        s.Append(",EmployeeIdentity");
        s.Append(",ReceiveType");
        s.Append(",PackingSlipNumber");
        s.Append(",BillOfLadingNumber");
        s.Append(",VehicleIdentity");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:DeliveryIdentity");
        s.Append(",:ArrivalDateTime");
        s.Append(",:WarehouseIdentity");
        s.Append(",:EmployeeIdentity");
        s.Append(",:ReceiveType");
        s.Append(",:PackingSlipNumber");
        s.Append(",:BillOfLadingNumber");
        s.Append(",:VehicleIdentity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(NumberParam("DeliveryIdentity", 8, 0));
        fStmt.Parameters.Add(DateParam("ArrivalDateTime"));
        fStmt.Parameters.Add(StringParam("WarehouseIdentity", 4));
        fStmt.Parameters.Add(StringParam("EmployeeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ReceiveType", 2));
        fStmt.Parameters.Add(StringParam("PackingSlipNumber", 35));
        fStmt.Parameters.Add(StringParam("BillOfLadingNumber", 35));
        fStmt.Parameters.Add(StringParam("VehicleIdentity", 17));

        fStmt.Prepare();

        aDeliveryReceiptHeadTextInsert = new DeliveryReceiptHeadTextInsert(owner);
        aDeliveryReceiptLineInsert = new DeliveryReceiptLineInsert(owner);
        aDeliveryReceiptPackingMaterialInsert = new DeliveryReceiptPackingMaterialInsert(owner);
    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, DeliveryReceiptHeadDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for DeliveryReceiptHeadDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter DeliveryReceiptHeadDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter DeliveryReceiptHeadDoc.OPCODE not allowed");


        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.DeliveryIdentity != null)
        {
            (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = p.DeliveryIdentity;
        }
        else
            (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ArrivalDateTime != null)
        {
            (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = p.ArrivalDateTime;
        }
        else
            (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.WarehouseIdentity != null)
        {
            if (p.WarehouseIdentity.Length > 4)
                error.AppendLine("Value for DeliveryReceiptHeadDoc.WarehouseIdentity too long, max 4 chars");

            (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = p.WarehouseIdentity;
        }
        else
            (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.EmployeeIdentity != null)
        {
            if (p.EmployeeIdentity.Length > 35)
                error.AppendLine("Value for DeliveryReceiptHeadDoc.EmployeeIdentity too long, max 35 chars");

            (fStmt.Parameters["EmployeeIdentity"] as IDbDataParameter).Value = p.EmployeeIdentity;
        }
        else
            (fStmt.Parameters["EmployeeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReceiveType != null)
        {
            if (p.ReceiveType.Length > 2)
                error.AppendLine("Value for DeliveryReceiptHeadDoc.ReceiveType too long, max 2 chars");

            (fStmt.Parameters["ReceiveType"] as IDbDataParameter).Value = p.ReceiveType;
        }
        else
            (fStmt.Parameters["ReceiveType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackingSlipNumber != null)
        {
            if (p.PackingSlipNumber.Length > 35)
                error.AppendLine("Value for DeliveryReceiptHeadDoc.PackingSlipNumber too long, max 35 chars");

            (fStmt.Parameters["PackingSlipNumber"] as IDbDataParameter).Value = p.PackingSlipNumber;
        }
        else
            (fStmt.Parameters["PackingSlipNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.BillOfLadingNumber != null)
        {
            if (p.BillOfLadingNumber.Length > 35)
                error.AppendLine("Value for DeliveryReceiptHeadDoc.BillOfLadingNumber too long, max 35 chars");

            (fStmt.Parameters["BillOfLadingNumber"] as IDbDataParameter).Value = p.BillOfLadingNumber;
        }
        else
            (fStmt.Parameters["BillOfLadingNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VehicleIdentity != null)
        {
            if (p.VehicleIdentity.Length > 17)
                error.AppendLine("Value for DeliveryReceiptHeadDoc.VehicleIdentity too long, max 17 chars");

            (fStmt.Parameters["VehicleIdentity"] as IDbDataParameter).Value = p.VehicleIdentity;
        }
        else
            (fStmt.Parameters["VehicleIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

        if (p.aDeliveryReceiptHeadTextDocs != null)
            foreach (DeliveryReceiptHeadTextDoc c in p.aDeliveryReceiptHeadTextDocs)
                aDeliveryReceiptHeadTextInsert.Process(ref trans, this, c);
        if (p.aDeliveryReceiptLineDocs != null)
            foreach (DeliveryReceiptLineDoc d in p.aDeliveryReceiptLineDocs)
                aDeliveryReceiptLineInsert.Process(ref trans, this, d);
        if (p.aDeliveryReceiptPackingMaterialDocs != null)
            foreach (DeliveryReceiptPackingMaterialDoc e in p.aDeliveryReceiptPackingMaterialDocs)
                aDeliveryReceiptPackingMaterialInsert.Process(ref trans, this, e);
      }
  }

  public class DeliveryReceiptHeadTextInsert : SegmentImpl
  {

    public DeliveryReceiptHeadTextInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_DLVRY_RECEIPT_HEAD_TEXT ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",DeliveryIdentity");
        s.Append(",ArrivalDateTime");
        s.Append(",TextFunction");
        s.Append(",Text");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:DeliveryIdentity");
        s.Append(",:ArrivalDateTime");
        s.Append(",:TextFunction");
        s.Append(",:Text");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(NumberParam("DeliveryIdentity", 8, 0));
        fStmt.Parameters.Add(DateParam("ArrivalDateTime"));
        fStmt.Parameters.Add(StringParam("TextFunction", 3));
        fStmt.Parameters.Add(StringParam("Text", 400));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, DeliveryReceiptHeadTextDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for DeliveryReceiptHeadTextDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter DeliveryReceiptHeadTextDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter DeliveryReceiptHeadTextDoc.OPCODE not allowed");


        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.DeliveryIdentity != null)
        {
            (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = p.DeliveryIdentity;
        }
        else
            (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ArrivalDateTime != null)
        {
            (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = p.ArrivalDateTime;
        }
        else
            (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TextFunction != null)
        {
            if (p.TextFunction.Length > 3)
                error.AppendLine("Value for DeliveryReceiptHeadTextDoc.TextFunction too long, max 3 chars");

            (fStmt.Parameters["TextFunction"] as IDbDataParameter).Value = p.TextFunction;
        }
        else
            (fStmt.Parameters["TextFunction"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Text != null)
        {
            if (p.Text.Length > 400)
                error.AppendLine("Value for DeliveryReceiptHeadTextDoc.Text too long, max 400 chars");

            (fStmt.Parameters["Text"] as IDbDataParameter).Value = p.Text;
        }
        else
            (fStmt.Parameters["Text"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class DeliveryReceiptLineInsert : SegmentImpl
  {
    private DeliveryReceiptLineTextInsert aDeliveryReceiptLineTextInsert;

    public DeliveryReceiptLineInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_DLVRY_RECEIPT_LINE ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",DeliveryIdentity");
        s.Append(",DeliveryidentityLine");
        s.Append(",ArrivalDateTime");
        s.Append(",ProductIdentity");
        s.Append(",PackageIdentity");
        s.Append(",DeliveredQuantity");
        s.Append(",MeasuredQuantity");
        s.Append(",ProductionLotIdentity");
        s.Append(",ProductionSubLotIdentity");
        s.Append(",MarketingLotIdentity");
        s.Append(",QualityLotIdentity");
        s.Append(",PurchaseOrderNumber");
        s.Append(",PurchaseOrderSequence");
        s.Append(",PurchaseOrderLinePosition");
        s.Append(",PurchaseOrderLineSequence");
        s.Append(",PurchaseOrderType");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderSequence");
        s.Append(",CustomerOrderLinePosition");
        s.Append(",CustomerOrderLineKitPosition");
        s.Append(",CustomerOrderLineSequence");
        s.Append(",DespatchadvicenoticeIdentity");
        s.Append(",ItemLoadIdentity");
        s.Append(",ExpiryDate");
        s.Append(",ReturnsFinished");
        s.Append(",DecidedActionCode");
        s.Append(",FromPartyId");
        s.Append(",FromPartyQualifier");
        s.Append(",CustomerReturnOrderNumber");
        s.Append(",CustomerReturnOrderSequence");
        s.Append(",CustomerReturnOrderLinePos");
        s.Append(",CustomerReturnOrderLineKitPos");
        s.Append(",CustomerReturnOrderLineSeq");
        s.Append(",DiscrepancyCode");
        s.Append(",DiscrepancyActionCode");
        s.Append(",ManufacturingDate");
        s.Append(",MeasureQualifier");
        s.Append(",InventoryStatusCode");
        s.Append(",SerialNumber");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:DeliveryIdentity");
        s.Append(",:DeliveryidentityLine");
        s.Append(",:ArrivalDateTime");
        s.Append(",:ProductIdentity");
        s.Append(",:PackageIdentity");
        s.Append(",:DeliveredQuantity");
        s.Append(",:MeasuredQuantity");
        s.Append(",:ProductionLotIdentity");
        s.Append(",:ProductionSubLotIdentity");
        s.Append(",:MarketingLotIdentity");
        s.Append(",:QualityLotIdentity");
        s.Append(",:PurchaseOrderNumber");
        s.Append(",:PurchaseOrderSequence");
        s.Append(",:PurchaseOrderLinePosition");
        s.Append(",:PurchaseOrderLineSequence");
        s.Append(",:PurchaseOrderType");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderSequence");
        s.Append(",:CustomerOrderLinePosition");
        s.Append(",:CustomerOrderLineKitPosition");
        s.Append(",:CustomerOrderLineSequence");
        s.Append(",:DespatchadvicenoticeIdentity");
        s.Append(",:ItemLoadIdentity");
        s.Append(",:ExpiryDate");
        s.Append(",:ReturnsFinished");
        s.Append(",:DecidedActionCode");
        s.Append(",:FromPartyId");
        s.Append(",:FromPartyQualifier");
        s.Append(",:CustomerReturnOrderNumber");
        s.Append(",:CustomerReturnOrderSequence");
        s.Append(",:CustomerReturnOrderLinePos");
        s.Append(",:CustomerReturnOrderLineKitPos");
        s.Append(",:CustomerReturnOrderLineSeq");
        s.Append(",:DiscrepancyCode");
        s.Append(",:DiscrepancyActionCode");
        s.Append(",:ManufacturingDate");
        s.Append(",:MeasureQualifier");
        s.Append(",:InventoryStatusCode");
        s.Append(",:SerialNumber");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(NumberParam("DeliveryIdentity", 8, 0));
        fStmt.Parameters.Add(NumberParam("DeliveryidentityLine", 5, 0));
        fStmt.Parameters.Add(DateParam("ArrivalDateTime"));
        fStmt.Parameters.Add(StringParam("ProductIdentity", 35));
        fStmt.Parameters.Add(StringParam("PackageIdentity", 17));
        fStmt.Parameters.Add(NumberParam("DeliveredQuantity", 20, 6));
        fStmt.Parameters.Add(NumberParam("MeasuredQuantity", 20, 6));
        fStmt.Parameters.Add(StringParam("ProductionLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("ProductionSubLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("MarketingLotIdentity", 20));
        fStmt.Parameters.Add(StringParam("QualityLotIdentity", 20));
        fStmt.Parameters.Add(StringParam("PurchaseOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderLinePosition", 4, 0));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderLineSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("PurchaseOrderType", 2));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLinePosition", 5, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineKitPosition", 2, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("DespatchadvicenoticeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ItemLoadIdentity", 35));
        fStmt.Parameters.Add(DateParam("ExpiryDate"));
        fStmt.Parameters.Add(StringParam("ReturnsFinished", 1));
        fStmt.Parameters.Add(StringParam("DecidedActionCode", 2));
        fStmt.Parameters.Add(StringParam("FromPartyId", 35));
        fStmt.Parameters.Add(StringParam("FromPartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("CustomerReturnOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLinePos", 5, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineKitPos", 2, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineSeq", 3, 0));
        fStmt.Parameters.Add(StringParam("DiscrepancyCode", 3));
        fStmt.Parameters.Add(StringParam("DiscrepancyActionCode", 2));
        fStmt.Parameters.Add(DateParam("ManufacturingDate"));
        fStmt.Parameters.Add(StringParam("MeasureQualifier", 4));
        fStmt.Parameters.Add(StringParam("InventoryStatusCode", 8));
        fStmt.Parameters.Add(StringParam("SerialNumber", 21));

        fStmt.Prepare();

        aDeliveryReceiptLineTextInsert = new DeliveryReceiptLineTextInsert(owner);
    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, DeliveryReceiptLineDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for DeliveryReceiptLineDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter DeliveryReceiptLineDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter DeliveryReceiptLineDoc.OPCODE not allowed");


        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.DeliveryIdentity != null)
        {
            (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = p.DeliveryIdentity;
        }
        else
            (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveryidentityLine != null)
        {
            (fStmt.Parameters["DeliveryidentityLine"] as IDbDataParameter).Value = p.DeliveryidentityLine;
        }
        else
            (fStmt.Parameters["DeliveryidentityLine"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ArrivalDateTime != null)
        {
            (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = p.ArrivalDateTime;
        }
        else
            (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductIdentity != null)
        {
            if (p.ProductIdentity.Length > 35)
                error.AppendLine("Value for DeliveryReceiptLineDoc.ProductIdentity too long, max 35 chars");

            (fStmt.Parameters["ProductIdentity"] as IDbDataParameter).Value = p.ProductIdentity;
        }
        else
            (fStmt.Parameters["ProductIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackageIdentity != null)
        {
            if (p.PackageIdentity.Length > 17)
                error.AppendLine("Value for DeliveryReceiptLineDoc.PackageIdentity too long, max 17 chars");

            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
        }
        else
            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveredQuantity != null)
        {
            (fStmt.Parameters["DeliveredQuantity"] as IDbDataParameter).Value = p.DeliveredQuantity;
        }
        else
            (fStmt.Parameters["DeliveredQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MeasuredQuantity != null)
        {
            (fStmt.Parameters["MeasuredQuantity"] as IDbDataParameter).Value = p.MeasuredQuantity;
        }
        else
            (fStmt.Parameters["MeasuredQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionLotIdentity != null)
        {
            if (p.ProductionLotIdentity.Length > 40)
                error.AppendLine("Value for DeliveryReceiptLineDoc.ProductionLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = p.ProductionLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionSubLotIdentity != null)
        {
            if (p.ProductionSubLotIdentity.Length > 40)
                error.AppendLine("Value for DeliveryReceiptLineDoc.ProductionSubLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = p.ProductionSubLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MarketingLotIdentity != null)
        {
            if (p.MarketingLotIdentity.Length > 20)
                error.AppendLine("Value for DeliveryReceiptLineDoc.MarketingLotIdentity too long, max 20 chars");

            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = p.MarketingLotIdentity;
        }
        else
            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.QualityLotIdentity != null)
        {
            if (p.QualityLotIdentity.Length > 20)
                error.AppendLine("Value for DeliveryReceiptLineDoc.QualityLotIdentity too long, max 20 chars");

            (fStmt.Parameters["QualityLotIdentity"] as IDbDataParameter).Value = p.QualityLotIdentity;
        }
        else
            (fStmt.Parameters["QualityLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderNumber != null)
        {
            if (p.PurchaseOrderNumber.Length > 35)
                error.AppendLine("Value for DeliveryReceiptLineDoc.PurchaseOrderNumber too long, max 35 chars");

            (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = p.PurchaseOrderNumber;
        }
        else
            (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderSequence != null)
        {
            (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = p.PurchaseOrderSequence;
        }
        else
            (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderLinePosition != null)
        {
            (fStmt.Parameters["PurchaseOrderLinePosition"] as IDbDataParameter).Value = p.PurchaseOrderLinePosition;
        }
        else
            (fStmt.Parameters["PurchaseOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderLineSequence != null)
        {
            (fStmt.Parameters["PurchaseOrderLineSequence"] as IDbDataParameter).Value = p.PurchaseOrderLineSequence;
        }
        else
            (fStmt.Parameters["PurchaseOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderType != null)
        {
            if (p.PurchaseOrderType.Length > 2)
                error.AppendLine("Value for DeliveryReceiptLineDoc.PurchaseOrderType too long, max 2 chars");

            (fStmt.Parameters["PurchaseOrderType"] as IDbDataParameter).Value = p.PurchaseOrderType;
        }
        else
            (fStmt.Parameters["PurchaseOrderType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for DeliveryReceiptLineDoc.CustomerOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLinePosition != null)
        {
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = p.CustomerOrderLinePosition;
        }
        else
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLineKitPosition != null)
        {
            (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = p.CustomerOrderLineKitPosition;
        }
        else
            (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLineSequence != null)
        {
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = p.CustomerOrderLineSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DespatchadvicenoticeIdentity != null)
        {
            if (p.DespatchadvicenoticeIdentity.Length > 35)
                error.AppendLine("Value for DeliveryReceiptLineDoc.DespatchadvicenoticeIdentity too long, max 35 chars");

            (fStmt.Parameters["DespatchadvicenoticeIdentity"] as IDbDataParameter).Value = p.DespatchadvicenoticeIdentity;
        }
        else
            (fStmt.Parameters["DespatchadvicenoticeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ItemLoadIdentity != null)
        {
            if (p.ItemLoadIdentity.Length > 35)
                error.AppendLine("Value for DeliveryReceiptLineDoc.ItemLoadIdentity too long, max 35 chars");

            (fStmt.Parameters["ItemLoadIdentity"] as IDbDataParameter).Value = p.ItemLoadIdentity;
        }
        else
            (fStmt.Parameters["ItemLoadIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ExpiryDate != null)
        {
            (fStmt.Parameters["ExpiryDate"] as IDbDataParameter).Value = p.ExpiryDate;
        }
        else
            (fStmt.Parameters["ExpiryDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReturnsFinished != null)
        {
            if (p.ReturnsFinished.Length > 1)
                error.AppendLine("Value for DeliveryReceiptLineDoc.ReturnsFinished too long, max 1 chars");

            (fStmt.Parameters["ReturnsFinished"] as IDbDataParameter).Value = p.ReturnsFinished;
        }
        else
            (fStmt.Parameters["ReturnsFinished"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DecidedActionCode != null)
        {
            if (p.DecidedActionCode.Length > 2)
                error.AppendLine("Value for DeliveryReceiptLineDoc.DecidedActionCode too long, max 2 chars");

            (fStmt.Parameters["DecidedActionCode"] as IDbDataParameter).Value = p.DecidedActionCode;
        }
        else
            (fStmt.Parameters["DecidedActionCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FromPartyId != null)
        {
            if (p.FromPartyId.Length > 35)
                error.AppendLine("Value for DeliveryReceiptLineDoc.FromPartyId too long, max 35 chars");

            (fStmt.Parameters["FromPartyId"] as IDbDataParameter).Value = p.FromPartyId;
        }
        else
            (fStmt.Parameters["FromPartyId"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FromPartyQualifier != null)
        {
            if (p.FromPartyQualifier.Length > 3)
                error.AppendLine("Value for DeliveryReceiptLineDoc.FromPartyQualifier too long, max 3 chars");

            (fStmt.Parameters["FromPartyQualifier"] as IDbDataParameter).Value = p.FromPartyQualifier;
        }
        else
            (fStmt.Parameters["FromPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderNumber != null)
        {
            if (p.CustomerReturnOrderNumber.Length > 35)
                error.AppendLine("Value for DeliveryReceiptLineDoc.CustomerReturnOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = p.CustomerReturnOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderSequence != null)
        {
            (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = p.CustomerReturnOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLinePos != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = p.CustomerReturnOrderLinePos;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLineKitPos != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = p.CustomerReturnOrderLineKitPos;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLineSeq != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = p.CustomerReturnOrderLineSeq;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DiscrepancyCode != null)
        {
            if (p.DiscrepancyCode.Length > 3)
                error.AppendLine("Value for DeliveryReceiptLineDoc.DiscrepancyCode too long, max 3 chars");

            (fStmt.Parameters["DiscrepancyCode"] as IDbDataParameter).Value = p.DiscrepancyCode;
        }
        else
            (fStmt.Parameters["DiscrepancyCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DiscrepancyActionCode != null)
        {
            if (p.DiscrepancyActionCode.Length > 2)
                error.AppendLine("Value for DeliveryReceiptLineDoc.DiscrepancyActionCode too long, max 2 chars");

            (fStmt.Parameters["DiscrepancyActionCode"] as IDbDataParameter).Value = p.DiscrepancyActionCode;
        }
        else
            (fStmt.Parameters["DiscrepancyActionCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ManufacturingDate != null)
        {
            (fStmt.Parameters["ManufacturingDate"] as IDbDataParameter).Value = p.ManufacturingDate;
        }
        else
            (fStmt.Parameters["ManufacturingDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MeasureQualifier != null)
        {
            if (p.MeasureQualifier.Length > 4)
                error.AppendLine("Value for DeliveryReceiptLineDoc.MeasureQualifier too long, max 4 chars");

            (fStmt.Parameters["MeasureQualifier"] as IDbDataParameter).Value = p.MeasureQualifier;
        }
        else
            (fStmt.Parameters["MeasureQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventoryStatusCode != null)
        {
            if (p.InventoryStatusCode.Length > 8)
                error.AppendLine("Value for DeliveryReceiptLineDoc.InventoryStatusCode too long, max 8 chars");

            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = p.InventoryStatusCode;
        }
        else
            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SerialNumber != null)
        {
            if (p.SerialNumber.Length > 21)
                error.AppendLine("Value for DeliveryReceiptLineDoc.SerialNumber too long, max 21 chars");

            (fStmt.Parameters["SerialNumber"] as IDbDataParameter).Value = p.SerialNumber;
        }
        else
            (fStmt.Parameters["SerialNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

        if (p.aDeliveryReceiptLineTextDocs != null)
            foreach (DeliveryReceiptLineTextDoc c in p.aDeliveryReceiptLineTextDocs)
                aDeliveryReceiptLineTextInsert.Process(ref trans, this, c);
      }
  }

  public class DeliveryReceiptLineTextInsert : SegmentImpl
  {

    public DeliveryReceiptLineTextInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_DLVRY_RECEIPT_LINE_TEXT ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",DeliveryIdentity");
        s.Append(",DeliveryidentityLine");
        s.Append(",ArrivalDateTime");
        s.Append(",TextFunction");
        s.Append(",Text");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:DeliveryIdentity");
        s.Append(",:DeliveryidentityLine");
        s.Append(",:ArrivalDateTime");
        s.Append(",:TextFunction");
        s.Append(",:Text");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(NumberParam("DeliveryIdentity", 8, 0));
        fStmt.Parameters.Add(NumberParam("DeliveryidentityLine", 5, 0));
        fStmt.Parameters.Add(DateParam("ArrivalDateTime"));
        fStmt.Parameters.Add(StringParam("TextFunction", 3));
        fStmt.Parameters.Add(StringParam("Text", 400));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, DeliveryReceiptLineTextDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for DeliveryReceiptLineTextDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter DeliveryReceiptLineTextDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter DeliveryReceiptLineTextDoc.OPCODE not allowed");


        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.DeliveryIdentity != null)
        {
            (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = p.DeliveryIdentity;
        }
        else
            (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveryidentityLine != null)
        {
            (fStmt.Parameters["DeliveryidentityLine"] as IDbDataParameter).Value = p.DeliveryidentityLine;
        }
        else
            (fStmt.Parameters["DeliveryidentityLine"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ArrivalDateTime != null)
        {
            (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = p.ArrivalDateTime;
        }
        else
            (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TextFunction != null)
        {
            if (p.TextFunction.Length > 3)
                error.AppendLine("Value for DeliveryReceiptLineTextDoc.TextFunction too long, max 3 chars");

            (fStmt.Parameters["TextFunction"] as IDbDataParameter).Value = p.TextFunction;
        }
        else
            (fStmt.Parameters["TextFunction"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Text != null)
        {
            if (p.Text.Length > 400)
                error.AppendLine("Value for DeliveryReceiptLineTextDoc.Text too long, max 400 chars");

            (fStmt.Parameters["Text"] as IDbDataParameter).Value = p.Text;
        }
        else
            (fStmt.Parameters["Text"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class DeliveryReceiptPackingMaterialInsert : SegmentImpl
  {

    public DeliveryReceiptPackingMaterialInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_DLVRY_RECEIPT_PM ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",DeliveryIdentity");
        s.Append(",ArrivalDateTime");
        s.Append(",PackingMaterialType");
        s.Append(",PackageIdentity");
        s.Append(",DeliveredQuantity");
        s.Append(",VendorIdentity");
        s.Append(",PurchaseOrderType");
        s.Append(",PurchaseOrderNumber");
        s.Append(",PurchaseOrderSequence");
        s.Append(",PurchaseOrderLinePosition");
        s.Append(",PurchaseOrderLineSequence");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderSequence");
        s.Append(",CustomerOrderLinePosition");
        s.Append(",CustomerOrderLineKitPosition");
        s.Append(",CustomerOrderLineSequence");
        s.Append(",FromPartyId");
        s.Append(",FromPartyQualifier");
        s.Append(",CustomerReturnOrderNumber");
        s.Append(",CustomerReturnOrderSequence");
        s.Append(",CustomerReturnOrderLinePos");
        s.Append(",CustomerReturnOrderLineKitPos");
        s.Append(",CustomerReturnOrderLineSeq");
        s.Append(",DiscrepancyCode");
        s.Append(",DiscrepancyActionCode");
        s.Append(",ShipFromPartyId");
        s.Append(",ShipFromPartyQualifier");
        s.Append(",PackingMaterialLine");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:DeliveryIdentity");
        s.Append(",:ArrivalDateTime");
        s.Append(",:PackingMaterialType");
        s.Append(",:PackageIdentity");
        s.Append(",:DeliveredQuantity");
        s.Append(",:VendorIdentity");
        s.Append(",:PurchaseOrderType");
        s.Append(",:PurchaseOrderNumber");
        s.Append(",:PurchaseOrderSequence");
        s.Append(",:PurchaseOrderLinePosition");
        s.Append(",:PurchaseOrderLineSequence");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderSequence");
        s.Append(",:CustomerOrderLinePosition");
        s.Append(",:CustomerOrderLineKitPosition");
        s.Append(",:CustomerOrderLineSequence");
        s.Append(",:FromPartyId");
        s.Append(",:FromPartyQualifier");
        s.Append(",:CustomerReturnOrderNumber");
        s.Append(",:CustomerReturnOrderSequence");
        s.Append(",:CustomerReturnOrderLinePos");
        s.Append(",:CustomerReturnOrderLineKitPos");
        s.Append(",:CustomerReturnOrderLineSeq");
        s.Append(",:DiscrepancyCode");
        s.Append(",:DiscrepancyActionCode");
        s.Append(",:ShipFromPartyId");
        s.Append(",:ShipFromPartyQualifier");
        s.Append(",:PackingMaterialLine");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(NumberParam("DeliveryIdentity", 8, 0));
        fStmt.Parameters.Add(DateParam("ArrivalDateTime"));
        fStmt.Parameters.Add(StringParam("PackingMaterialType", 35));
        fStmt.Parameters.Add(StringParam("PackageIdentity", 17));
        fStmt.Parameters.Add(NumberParam("DeliveredQuantity", 20, 6));
        fStmt.Parameters.Add(StringParam("VendorIdentity", 35));
        fStmt.Parameters.Add(StringParam("PurchaseOrderType", 2));
        fStmt.Parameters.Add(StringParam("PurchaseOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderLinePosition", 4, 0));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderLineSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLinePosition", 5, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineKitPosition", 2, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("FromPartyId", 35));
        fStmt.Parameters.Add(StringParam("FromPartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("CustomerReturnOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLinePos", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineKitPos", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineSeq", 3, 0));
        fStmt.Parameters.Add(StringParam("DiscrepancyCode", 3));
        fStmt.Parameters.Add(StringParam("DiscrepancyActionCode", 2));
        fStmt.Parameters.Add(StringParam("ShipFromPartyId", 35));
        fStmt.Parameters.Add(StringParam("ShipFromPartyQualifier", 3));
        fStmt.Parameters.Add(NumberParam("PackingMaterialLine", 5, 0));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, DeliveryReceiptPackingMaterialDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for DeliveryReceiptPackingMaterialDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter DeliveryReceiptPackingMaterialDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter DeliveryReceiptPackingMaterialDoc.OPCODE not allowed");


        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.DeliveryIdentity != null)
        {
            (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = p.DeliveryIdentity;
        }
        else
            (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ArrivalDateTime != null)
        {
            (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = p.ArrivalDateTime;
        }
        else
            (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackingMaterialType != null)
        {
            if (p.PackingMaterialType.Length > 35)
                error.AppendLine("Value for DeliveryReceiptPackingMaterialDoc.PackingMaterialType too long, max 35 chars");

            (fStmt.Parameters["PackingMaterialType"] as IDbDataParameter).Value = p.PackingMaterialType;
        }
        else
            (fStmt.Parameters["PackingMaterialType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackageIdentity != null)
        {
            if (p.PackageIdentity.Length > 17)
                error.AppendLine("Value for DeliveryReceiptPackingMaterialDoc.PackageIdentity too long, max 17 chars");

            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
        }
        else
            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveredQuantity != null)
        {
            (fStmt.Parameters["DeliveredQuantity"] as IDbDataParameter).Value = p.DeliveredQuantity;
        }
        else
            (fStmt.Parameters["DeliveredQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VendorIdentity != null)
        {
            if (p.VendorIdentity.Length > 35)
                error.AppendLine("Value for DeliveryReceiptPackingMaterialDoc.VendorIdentity too long, max 35 chars");

            (fStmt.Parameters["VendorIdentity"] as IDbDataParameter).Value = p.VendorIdentity;
        }
        else
            (fStmt.Parameters["VendorIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderType != null)
        {
            if (p.PurchaseOrderType.Length > 2)
                error.AppendLine("Value for DeliveryReceiptPackingMaterialDoc.PurchaseOrderType too long, max 2 chars");

            (fStmt.Parameters["PurchaseOrderType"] as IDbDataParameter).Value = p.PurchaseOrderType;
        }
        else
            (fStmt.Parameters["PurchaseOrderType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderNumber != null)
        {
            if (p.PurchaseOrderNumber.Length > 35)
                error.AppendLine("Value for DeliveryReceiptPackingMaterialDoc.PurchaseOrderNumber too long, max 35 chars");

            (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = p.PurchaseOrderNumber;
        }
        else
            (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderSequence != null)
        {
            (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = p.PurchaseOrderSequence;
        }
        else
            (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderLinePosition != null)
        {
            (fStmt.Parameters["PurchaseOrderLinePosition"] as IDbDataParameter).Value = p.PurchaseOrderLinePosition;
        }
        else
            (fStmt.Parameters["PurchaseOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderLineSequence != null)
        {
            (fStmt.Parameters["PurchaseOrderLineSequence"] as IDbDataParameter).Value = p.PurchaseOrderLineSequence;
        }
        else
            (fStmt.Parameters["PurchaseOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for DeliveryReceiptPackingMaterialDoc.CustomerOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLinePosition != null)
        {
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = p.CustomerOrderLinePosition;
        }
        else
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLineKitPosition != null)
        {
            (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = p.CustomerOrderLineKitPosition;
        }
        else
            (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLineSequence != null)
        {
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = p.CustomerOrderLineSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FromPartyId != null)
        {
            if (p.FromPartyId.Length > 35)
                error.AppendLine("Value for DeliveryReceiptPackingMaterialDoc.FromPartyId too long, max 35 chars");

            (fStmt.Parameters["FromPartyId"] as IDbDataParameter).Value = p.FromPartyId;
        }
        else
            (fStmt.Parameters["FromPartyId"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FromPartyQualifier != null)
        {
            if (p.FromPartyQualifier.Length > 3)
                error.AppendLine("Value for DeliveryReceiptPackingMaterialDoc.FromPartyQualifier too long, max 3 chars");

            (fStmt.Parameters["FromPartyQualifier"] as IDbDataParameter).Value = p.FromPartyQualifier;
        }
        else
            (fStmt.Parameters["FromPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderNumber != null)
        {
            if (p.CustomerReturnOrderNumber.Length > 35)
                error.AppendLine("Value for DeliveryReceiptPackingMaterialDoc.CustomerReturnOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = p.CustomerReturnOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderSequence != null)
        {
            (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = p.CustomerReturnOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLinePos != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = p.CustomerReturnOrderLinePos;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLineKitPos != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = p.CustomerReturnOrderLineKitPos;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLineSeq != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = p.CustomerReturnOrderLineSeq;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DiscrepancyCode != null)
        {
            if (p.DiscrepancyCode.Length > 3)
                error.AppendLine("Value for DeliveryReceiptPackingMaterialDoc.DiscrepancyCode too long, max 3 chars");

            (fStmt.Parameters["DiscrepancyCode"] as IDbDataParameter).Value = p.DiscrepancyCode;
        }
        else
            (fStmt.Parameters["DiscrepancyCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DiscrepancyActionCode != null)
        {
            if (p.DiscrepancyActionCode.Length > 2)
                error.AppendLine("Value for DeliveryReceiptPackingMaterialDoc.DiscrepancyActionCode too long, max 2 chars");

            (fStmt.Parameters["DiscrepancyActionCode"] as IDbDataParameter).Value = p.DiscrepancyActionCode;
        }
        else
            (fStmt.Parameters["DiscrepancyActionCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromPartyId != null)
        {
            if (p.ShipFromPartyId.Length > 35)
                error.AppendLine("Value for DeliveryReceiptPackingMaterialDoc.ShipFromPartyId too long, max 35 chars");

            (fStmt.Parameters["ShipFromPartyId"] as IDbDataParameter).Value = p.ShipFromPartyId;
        }
        else
            (fStmt.Parameters["ShipFromPartyId"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromPartyQualifier != null)
        {
            if (p.ShipFromPartyQualifier.Length > 3)
                error.AppendLine("Value for DeliveryReceiptPackingMaterialDoc.ShipFromPartyQualifier too long, max 3 chars");

            (fStmt.Parameters["ShipFromPartyQualifier"] as IDbDataParameter).Value = p.ShipFromPartyQualifier;
        }
        else
            (fStmt.Parameters["ShipFromPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackingMaterialLine != null)
        {
            (fStmt.Parameters["PackingMaterialLine"] as IDbDataParameter).Value = p.PackingMaterialLine;
        }
        else
            (fStmt.Parameters["PackingMaterialLine"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class InspectionReceiptHeadInsert : SegmentImpl
  {
    private InspectionReceiptLineInsert aInspectionReceiptLineInsert;

    public InspectionReceiptHeadInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_INSPECTION_RECEIPT_HEAD ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",WarehouseIdentity");
        s.Append(",EmployeeIdentity");
        s.Append(",ReturnhandleddateTime");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:WarehouseIdentity");
        s.Append(",:EmployeeIdentity");
        s.Append(",:ReturnhandleddateTime");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("WarehouseIdentity", 4));
        fStmt.Parameters.Add(StringParam("EmployeeIdentity", 35));
        fStmt.Parameters.Add(DateParam("ReturnhandleddateTime"));

        fStmt.Prepare();

        aInspectionReceiptLineInsert = new InspectionReceiptLineInsert(owner);
    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, InspectionReceiptHeadDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for InspectionReceiptHeadDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter InspectionReceiptHeadDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter InspectionReceiptHeadDoc.OPCODE not allowed");


        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.WarehouseIdentity != null)
        {
            if (p.WarehouseIdentity.Length > 4)
                error.AppendLine("Value for InspectionReceiptHeadDoc.WarehouseIdentity too long, max 4 chars");

            (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = p.WarehouseIdentity;
        }
        else
            (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.EmployeeIdentity != null)
        {
            if (p.EmployeeIdentity.Length > 35)
                error.AppendLine("Value for InspectionReceiptHeadDoc.EmployeeIdentity too long, max 35 chars");

            (fStmt.Parameters["EmployeeIdentity"] as IDbDataParameter).Value = p.EmployeeIdentity;
        }
        else
            (fStmt.Parameters["EmployeeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReturnhandleddateTime != null)
        {
            (fStmt.Parameters["ReturnhandleddateTime"] as IDbDataParameter).Value = p.ReturnhandleddateTime;
        }
        else
            (fStmt.Parameters["ReturnhandleddateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

        if (p.aInspectionReceiptLineDocs != null)
            foreach (InspectionReceiptLineDoc c in p.aInspectionReceiptLineDocs)
                aInspectionReceiptLineInsert.Process(ref trans, this, c);
      }
  }

  public class InspectionReceiptLineInsert : SegmentImpl
  {
    private InspectionReceiptLinePackingMaterialInsert aInspectionReceiptLinePackingMaterialInsert;

    public InspectionReceiptLineInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_INSPECTION_RECEIPT_LINE ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",WorkOrderIdentity");
        s.Append(",WorkOrderLine");
        s.Append(",WorkOrderLineSeq");
        s.Append(",ProductIdentity");
        s.Append(",PackageIdentity");
        s.Append(",InspectedQuantity");
        s.Append(",DecidedActionCode");
        s.Append(",CustomerReturnOrderNumber");
        s.Append(",CustomerReturnOrderSequence");
        s.Append(",CustomerReturnOrderLinePos");
        s.Append(",CustomerReturnOrderLineKitPos");
        s.Append(",CustomerReturnOrderLineSeq");
        s.Append(",DeliveryIdentity");
        s.Append(",DeliveryidentityLine");
        s.Append(",MeasuredQuantity");
        s.Append(",InventoryStatusCode");
        s.Append(",ProductionLotIdentity");
        s.Append(",ProductionSubLotIdentity");
        s.Append(",MarketingLotIdentity");
        s.Append(",QualityLotIdentity");
        s.Append(",ItemLoadIdentity");
        s.Append(",ExpiryDate");
        s.Append(",FromPartyId");
        s.Append(",FromPartyQualifier");
        s.Append(",ShipToCustomerIdentity");
        s.Append(",ShipToCustomerQualifier");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:WorkOrderIdentity");
        s.Append(",:WorkOrderLine");
        s.Append(",:WorkOrderLineSeq");
        s.Append(",:ProductIdentity");
        s.Append(",:PackageIdentity");
        s.Append(",:InspectedQuantity");
        s.Append(",:DecidedActionCode");
        s.Append(",:CustomerReturnOrderNumber");
        s.Append(",:CustomerReturnOrderSequence");
        s.Append(",:CustomerReturnOrderLinePos");
        s.Append(",:CustomerReturnOrderLineKitPos");
        s.Append(",:CustomerReturnOrderLineSeq");
        s.Append(",:DeliveryIdentity");
        s.Append(",:DeliveryidentityLine");
        s.Append(",:MeasuredQuantity");
        s.Append(",:InventoryStatusCode");
        s.Append(",:ProductionLotIdentity");
        s.Append(",:ProductionSubLotIdentity");
        s.Append(",:MarketingLotIdentity");
        s.Append(",:QualityLotIdentity");
        s.Append(",:ItemLoadIdentity");
        s.Append(",:ExpiryDate");
        s.Append(",:FromPartyId");
        s.Append(",:FromPartyQualifier");
        s.Append(",:ShipToCustomerIdentity");
        s.Append(",:ShipToCustomerQualifier");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("WorkOrderIdentity", 35));
        fStmt.Parameters.Add(NumberParam("WorkOrderLine", 4, 0));
        fStmt.Parameters.Add(NumberParam("WorkOrderLineSeq", 4, 0));
        fStmt.Parameters.Add(StringParam("ProductIdentity", 35));
        fStmt.Parameters.Add(StringParam("PackageIdentity", 17));
        fStmt.Parameters.Add(NumberParam("InspectedQuantity", 20, 6));
        fStmt.Parameters.Add(StringParam("DecidedActionCode", 3));
        fStmt.Parameters.Add(StringParam("CustomerReturnOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLinePos", 4, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineKitPos", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineSeq", 3, 0));
        fStmt.Parameters.Add(NumberParam("DeliveryIdentity", 8, 0));
        fStmt.Parameters.Add(NumberParam("DeliveryidentityLine", 5, 0));
        fStmt.Parameters.Add(NumberParam("MeasuredQuantity", 20, 6));
        fStmt.Parameters.Add(StringParam("InventoryStatusCode", 8));
        fStmt.Parameters.Add(StringParam("ProductionLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("ProductionSubLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("MarketingLotIdentity", 20));
        fStmt.Parameters.Add(StringParam("QualityLotIdentity", 20));
        fStmt.Parameters.Add(StringParam("ItemLoadIdentity", 35));
        fStmt.Parameters.Add(DateParam("ExpiryDate"));
        fStmt.Parameters.Add(StringParam("FromPartyId", 35));
        fStmt.Parameters.Add(StringParam("FromPartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("ShipToCustomerIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomerQualifier", 3));

        fStmt.Prepare();

        aInspectionReceiptLinePackingMaterialInsert = new InspectionReceiptLinePackingMaterialInsert(owner);
    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, InspectionReceiptLineDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for InspectionReceiptLineDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter InspectionReceiptLineDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter InspectionReceiptLineDoc.OPCODE not allowed");


        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.WorkOrderIdentity != null)
        {
            if (p.WorkOrderIdentity.Length > 35)
                error.AppendLine("Value for InspectionReceiptLineDoc.WorkOrderIdentity too long, max 35 chars");

            (fStmt.Parameters["WorkOrderIdentity"] as IDbDataParameter).Value = p.WorkOrderIdentity;
        }
        else
            (fStmt.Parameters["WorkOrderIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.WorkOrderLine != null)
        {
            (fStmt.Parameters["WorkOrderLine"] as IDbDataParameter).Value = p.WorkOrderLine;
        }
        else
            (fStmt.Parameters["WorkOrderLine"] as IDbDataParameter).Value = DBNull.Value;

        if (p.WorkOrderLineSeq != null)
        {
            (fStmt.Parameters["WorkOrderLineSeq"] as IDbDataParameter).Value = p.WorkOrderLineSeq;
        }
        else
            (fStmt.Parameters["WorkOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductIdentity != null)
        {
            if (p.ProductIdentity.Length > 35)
                error.AppendLine("Value for InspectionReceiptLineDoc.ProductIdentity too long, max 35 chars");

            (fStmt.Parameters["ProductIdentity"] as IDbDataParameter).Value = p.ProductIdentity;
        }
        else
            (fStmt.Parameters["ProductIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackageIdentity != null)
        {
            if (p.PackageIdentity.Length > 17)
                error.AppendLine("Value for InspectionReceiptLineDoc.PackageIdentity too long, max 17 chars");

            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
        }
        else
            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InspectedQuantity != null)
        {
            (fStmt.Parameters["InspectedQuantity"] as IDbDataParameter).Value = p.InspectedQuantity;
        }
        else
            (fStmt.Parameters["InspectedQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DecidedActionCode != null)
        {
            if (p.DecidedActionCode.Length > 3)
                error.AppendLine("Value for InspectionReceiptLineDoc.DecidedActionCode too long, max 3 chars");

            (fStmt.Parameters["DecidedActionCode"] as IDbDataParameter).Value = p.DecidedActionCode;
        }
        else
            (fStmt.Parameters["DecidedActionCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderNumber != null)
        {
            if (p.CustomerReturnOrderNumber.Length > 35)
                error.AppendLine("Value for InspectionReceiptLineDoc.CustomerReturnOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = p.CustomerReturnOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderSequence != null)
        {
            (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = p.CustomerReturnOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLinePos != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = p.CustomerReturnOrderLinePos;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLineKitPos != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = p.CustomerReturnOrderLineKitPos;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLineSeq != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = p.CustomerReturnOrderLineSeq;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveryIdentity != null)
        {
            (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = p.DeliveryIdentity;
        }
        else
            (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveryidentityLine != null)
        {
            (fStmt.Parameters["DeliveryidentityLine"] as IDbDataParameter).Value = p.DeliveryidentityLine;
        }
        else
            (fStmt.Parameters["DeliveryidentityLine"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MeasuredQuantity != null)
        {
            (fStmt.Parameters["MeasuredQuantity"] as IDbDataParameter).Value = p.MeasuredQuantity;
        }
        else
            (fStmt.Parameters["MeasuredQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventoryStatusCode != null)
        {
            if (p.InventoryStatusCode.Length > 8)
                error.AppendLine("Value for InspectionReceiptLineDoc.InventoryStatusCode too long, max 8 chars");

            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = p.InventoryStatusCode;
        }
        else
            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionLotIdentity != null)
        {
            if (p.ProductionLotIdentity.Length > 40)
                error.AppendLine("Value for InspectionReceiptLineDoc.ProductionLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = p.ProductionLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionSubLotIdentity != null)
        {
            if (p.ProductionSubLotIdentity.Length > 40)
                error.AppendLine("Value for InspectionReceiptLineDoc.ProductionSubLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = p.ProductionSubLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MarketingLotIdentity != null)
        {
            if (p.MarketingLotIdentity.Length > 20)
                error.AppendLine("Value for InspectionReceiptLineDoc.MarketingLotIdentity too long, max 20 chars");

            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = p.MarketingLotIdentity;
        }
        else
            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.QualityLotIdentity != null)
        {
            if (p.QualityLotIdentity.Length > 20)
                error.AppendLine("Value for InspectionReceiptLineDoc.QualityLotIdentity too long, max 20 chars");

            (fStmt.Parameters["QualityLotIdentity"] as IDbDataParameter).Value = p.QualityLotIdentity;
        }
        else
            (fStmt.Parameters["QualityLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ItemLoadIdentity != null)
        {
            if (p.ItemLoadIdentity.Length > 35)
                error.AppendLine("Value for InspectionReceiptLineDoc.ItemLoadIdentity too long, max 35 chars");

            (fStmt.Parameters["ItemLoadIdentity"] as IDbDataParameter).Value = p.ItemLoadIdentity;
        }
        else
            (fStmt.Parameters["ItemLoadIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ExpiryDate != null)
        {
            (fStmt.Parameters["ExpiryDate"] as IDbDataParameter).Value = p.ExpiryDate;
        }
        else
            (fStmt.Parameters["ExpiryDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FromPartyId != null)
        {
            if (p.FromPartyId.Length > 35)
                error.AppendLine("Value for InspectionReceiptLineDoc.FromPartyId too long, max 35 chars");

            (fStmt.Parameters["FromPartyId"] as IDbDataParameter).Value = p.FromPartyId;
        }
        else
            (fStmt.Parameters["FromPartyId"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FromPartyQualifier != null)
        {
            if (p.FromPartyQualifier.Length > 3)
                error.AppendLine("Value for InspectionReceiptLineDoc.FromPartyQualifier too long, max 3 chars");

            (fStmt.Parameters["FromPartyQualifier"] as IDbDataParameter).Value = p.FromPartyQualifier;
        }
        else
            (fStmt.Parameters["FromPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomerIdentity != null)
        {
            if (p.ShipToCustomerIdentity.Length > 35)
                error.AppendLine("Value for InspectionReceiptLineDoc.ShipToCustomerIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToCustomerIdentity"] as IDbDataParameter).Value = p.ShipToCustomerIdentity;
        }
        else
            (fStmt.Parameters["ShipToCustomerIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomerQualifier != null)
        {
            if (p.ShipToCustomerQualifier.Length > 3)
                error.AppendLine("Value for InspectionReceiptLineDoc.ShipToCustomerQualifier too long, max 3 chars");

            (fStmt.Parameters["ShipToCustomerQualifier"] as IDbDataParameter).Value = p.ShipToCustomerQualifier;
        }
        else
            (fStmt.Parameters["ShipToCustomerQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

        if (p.aInspectionReceiptLinePackingMaterialDocs != null)
            foreach (InspectionReceiptLinePackingMaterialDoc c in p.aInspectionReceiptLinePackingMaterialDocs)
                aInspectionReceiptLinePackingMaterialInsert.Process(ref trans, this, c);
      }
  }

  public class InspectionReceiptLinePackingMaterialInsert : SegmentImpl
  {

    public InspectionReceiptLinePackingMaterialInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_INSPECTION_RECEIPT_LINEPM ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",WorkOrderIdentity");
        s.Append(",WorkOrderLine");
        s.Append(",WorkOrderLineSeq");
        s.Append(",WorkOrderLinePmSeq");
        s.Append(",PackingMaterialIdentity");
        s.Append(",PackageIdentity");
        s.Append(",InspectedPmQuantity");
        s.Append(",DecidedActionCode");
        s.Append(",CustomerReturnOrderNumber");
        s.Append(",CustomerReturnOrderSequence");
        s.Append(",CustomerReturnOrderLinePos");
        s.Append(",CustomerReturnOrderLineKitPos");
        s.Append(",CustomerReturnOrderLineSeq");
        s.Append(",DeliveryIdentity");
        s.Append(",DeliveryidentityLine");
        s.Append(",FromPartyId");
        s.Append(",FromPartyQualifier");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderSequence");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:WorkOrderIdentity");
        s.Append(",:WorkOrderLine");
        s.Append(",:WorkOrderLineSeq");
        s.Append(",:WorkOrderLinePmSeq");
        s.Append(",:PackingMaterialIdentity");
        s.Append(",:PackageIdentity");
        s.Append(",:InspectedPmQuantity");
        s.Append(",:DecidedActionCode");
        s.Append(",:CustomerReturnOrderNumber");
        s.Append(",:CustomerReturnOrderSequence");
        s.Append(",:CustomerReturnOrderLinePos");
        s.Append(",:CustomerReturnOrderLineKitPos");
        s.Append(",:CustomerReturnOrderLineSeq");
        s.Append(",:DeliveryIdentity");
        s.Append(",:DeliveryidentityLine");
        s.Append(",:FromPartyId");
        s.Append(",:FromPartyQualifier");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderSequence");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("WorkOrderIdentity", 35));
        fStmt.Parameters.Add(NumberParam("WorkOrderLine", 4, 0));
        fStmt.Parameters.Add(NumberParam("WorkOrderLineSeq", 4, 0));
        fStmt.Parameters.Add(NumberParam("WorkOrderLinePmSeq", 4, 0));
        fStmt.Parameters.Add(StringParam("PackingMaterialIdentity", 35));
        fStmt.Parameters.Add(StringParam("PackageIdentity", 17));
        fStmt.Parameters.Add(NumberParam("InspectedPmQuantity", 20, 6));
        fStmt.Parameters.Add(StringParam("DecidedActionCode", 3));
        fStmt.Parameters.Add(StringParam("CustomerReturnOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLinePos", 4, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineKitPos", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineSeq", 3, 0));
        fStmt.Parameters.Add(NumberParam("DeliveryIdentity", 8, 0));
        fStmt.Parameters.Add(NumberParam("DeliveryidentityLine", 5, 0));
        fStmt.Parameters.Add(StringParam("FromPartyId", 35));
        fStmt.Parameters.Add(StringParam("FromPartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(StringParam("CustomerOrderSequence", 3));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, InspectionReceiptLinePackingMaterialDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for InspectionReceiptLinePackingMaterialDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter InspectionReceiptLinePackingMaterialDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter InspectionReceiptLinePackingMaterialDoc.OPCODE not allowed");


        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.WorkOrderIdentity != null)
        {
            if (p.WorkOrderIdentity.Length > 35)
                error.AppendLine("Value for InspectionReceiptLinePackingMaterialDoc.WorkOrderIdentity too long, max 35 chars");

            (fStmt.Parameters["WorkOrderIdentity"] as IDbDataParameter).Value = p.WorkOrderIdentity;
        }
        else
            (fStmt.Parameters["WorkOrderIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.WorkOrderLine != null)
        {
            (fStmt.Parameters["WorkOrderLine"] as IDbDataParameter).Value = p.WorkOrderLine;
        }
        else
            (fStmt.Parameters["WorkOrderLine"] as IDbDataParameter).Value = DBNull.Value;

        if (p.WorkOrderLineSeq != null)
        {
            (fStmt.Parameters["WorkOrderLineSeq"] as IDbDataParameter).Value = p.WorkOrderLineSeq;
        }
        else
            (fStmt.Parameters["WorkOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

        if (p.WorkOrderLinePmSeq != null)
        {
            (fStmt.Parameters["WorkOrderLinePmSeq"] as IDbDataParameter).Value = p.WorkOrderLinePmSeq;
        }
        else
            (fStmt.Parameters["WorkOrderLinePmSeq"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackingMaterialIdentity != null)
        {
            if (p.PackingMaterialIdentity.Length > 35)
                error.AppendLine("Value for InspectionReceiptLinePackingMaterialDoc.PackingMaterialIdentity too long, max 35 chars");

            (fStmt.Parameters["PackingMaterialIdentity"] as IDbDataParameter).Value = p.PackingMaterialIdentity;
        }
        else
            (fStmt.Parameters["PackingMaterialIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackageIdentity != null)
        {
            if (p.PackageIdentity.Length > 17)
                error.AppendLine("Value for InspectionReceiptLinePackingMaterialDoc.PackageIdentity too long, max 17 chars");

            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
        }
        else
            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InspectedPmQuantity != null)
        {
            (fStmt.Parameters["InspectedPmQuantity"] as IDbDataParameter).Value = p.InspectedPmQuantity;
        }
        else
            (fStmt.Parameters["InspectedPmQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DecidedActionCode != null)
        {
            if (p.DecidedActionCode.Length > 3)
                error.AppendLine("Value for InspectionReceiptLinePackingMaterialDoc.DecidedActionCode too long, max 3 chars");

            (fStmt.Parameters["DecidedActionCode"] as IDbDataParameter).Value = p.DecidedActionCode;
        }
        else
            (fStmt.Parameters["DecidedActionCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderNumber != null)
        {
            if (p.CustomerReturnOrderNumber.Length > 35)
                error.AppendLine("Value for InspectionReceiptLinePackingMaterialDoc.CustomerReturnOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = p.CustomerReturnOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderSequence != null)
        {
            (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = p.CustomerReturnOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLinePos != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = p.CustomerReturnOrderLinePos;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLineKitPos != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = p.CustomerReturnOrderLineKitPos;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLineSeq != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = p.CustomerReturnOrderLineSeq;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveryIdentity != null)
        {
            (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = p.DeliveryIdentity;
        }
        else
            (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveryidentityLine != null)
        {
            (fStmt.Parameters["DeliveryidentityLine"] as IDbDataParameter).Value = p.DeliveryidentityLine;
        }
        else
            (fStmt.Parameters["DeliveryidentityLine"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FromPartyId != null)
        {
            if (p.FromPartyId.Length > 35)
                error.AppendLine("Value for InspectionReceiptLinePackingMaterialDoc.FromPartyId too long, max 35 chars");

            (fStmt.Parameters["FromPartyId"] as IDbDataParameter).Value = p.FromPartyId;
        }
        else
            (fStmt.Parameters["FromPartyId"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FromPartyQualifier != null)
        {
            if (p.FromPartyQualifier.Length > 3)
                error.AppendLine("Value for InspectionReceiptLinePackingMaterialDoc.FromPartyQualifier too long, max 3 chars");

            (fStmt.Parameters["FromPartyQualifier"] as IDbDataParameter).Value = p.FromPartyQualifier;
        }
        else
            (fStmt.Parameters["FromPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for InspectionReceiptLinePackingMaterialDoc.CustomerOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSequence != null)
        {
            if (p.CustomerOrderSequence.Length > 3)
                error.AppendLine("Value for InspectionReceiptLinePackingMaterialDoc.CustomerOrderSequence too long, max 3 chars");

            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class InventoryChangeLineInsert : SegmentImpl
  {

    public InventoryChangeLineInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_INVENTORY_CHANGE ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",Employeeid");
        s.Append(",TimeStamp");
        s.Append(",ItemLoadIdentity");
        s.Append(",OperationCode");
        s.Append(",InventoryChangeCode");
        s.Append(",InventoryChangeText");
        s.Append(",DespatchadviceIdentity");
        s.Append(",PurchaseOrderNumber");
        s.Append(",PurchaseOrderSequence");
        s.Append(",PurchaseOrderLinePosition");
        s.Append(",PurchaseOrderLineSequence");
        s.Append(",VendorIdentity");
        s.Append(",VendorIdentity2");
        s.Append(",OwnerIdentity");
        s.Append(",OwnerIdentity2");
        s.Append(",ProductNumber");
        s.Append(",ProductNumber2");
        s.Append(",ProductDate");
        s.Append(",ProductDate2");
        s.Append(",PackageIdentity");
        s.Append(",PackageIdentity2");
        s.Append(",Quantity");
        s.Append(",Quantity2");
        s.Append(",MeasuredQty");
        s.Append(",MeasuredQty2");
        s.Append(",InventoryStatusCode");
        s.Append(",InventoryStatusCode2");
        s.Append(",ProductionLotIdentity");
        s.Append(",ProductionLotIdentity2");
        s.Append(",ProductionSubLotIdentity");
        s.Append(",ProductionSublotIdentity2");
        s.Append(",MarketingLotIdentity");
        s.Append(",MarketingLotIdentity2");
        s.Append(",QualityLotIdentity");
        s.Append(",QualityLotIdentity2");
        s.Append(",WarehouseIdentity");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderSequence");
        s.Append(",CustomerOrderLinePosition");
        s.Append(",CustomerOrderLineKitPosition");
        s.Append(",CustomerOrderLineSequence");
        s.Append(",ReasonCode");
        s.Append(",Freetext");
        s.Append(",SerialNumber");
        s.Append(",SerialNumber2");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:Employeeid");
        s.Append(",:TimeStamp");
        s.Append(",:ItemLoadIdentity");
        s.Append(",:OperationCode");
        s.Append(",:InventoryChangeCode");
        s.Append(",:InventoryChangeText");
        s.Append(",:DespatchadviceIdentity");
        s.Append(",:PurchaseOrderNumber");
        s.Append(",:PurchaseOrderSequence");
        s.Append(",:PurchaseOrderLinePosition");
        s.Append(",:PurchaseOrderLineSequence");
        s.Append(",:VendorIdentity");
        s.Append(",:VendorIdentity2");
        s.Append(",:OwnerIdentity");
        s.Append(",:OwnerIdentity2");
        s.Append(",:ProductNumber");
        s.Append(",:ProductNumber2");
        s.Append(",:ProductDate");
        s.Append(",:ProductDate2");
        s.Append(",:PackageIdentity");
        s.Append(",:PackageIdentity2");
        s.Append(",:Quantity");
        s.Append(",:Quantity2");
        s.Append(",:MeasuredQty");
        s.Append(",:MeasuredQty2");
        s.Append(",:InventoryStatusCode");
        s.Append(",:InventoryStatusCode2");
        s.Append(",:ProductionLotIdentity");
        s.Append(",:ProductionLotIdentity2");
        s.Append(",:ProductionSubLotIdentity");
        s.Append(",:ProductionSublotIdentity2");
        s.Append(",:MarketingLotIdentity");
        s.Append(",:MarketingLotIdentity2");
        s.Append(",:QualityLotIdentity");
        s.Append(",:QualityLotIdentity2");
        s.Append(",:WarehouseIdentity");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderSequence");
        s.Append(",:CustomerOrderLinePosition");
        s.Append(",:CustomerOrderLineKitPosition");
        s.Append(",:CustomerOrderLineSequence");
        s.Append(",:ReasonCode");
        s.Append(",:Freetext");
        s.Append(",:SerialNumber");
        s.Append(",:SerialNumber2");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("Employeeid", 35));
        fStmt.Parameters.Add(DateParam("TimeStamp"));
        fStmt.Parameters.Add(StringParam("ItemLoadIdentity", 35));
        fStmt.Parameters.Add(StringParam("OperationCode", 1));
        fStmt.Parameters.Add(StringParam("InventoryChangeCode", 2));
        fStmt.Parameters.Add(StringParam("InventoryChangeText", 35));
        fStmt.Parameters.Add(StringParam("DespatchadviceIdentity", 35));
        fStmt.Parameters.Add(StringParam("PurchaseOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderLinePosition", 6, 0));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderLineSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("VendorIdentity", 35));
        fStmt.Parameters.Add(StringParam("VendorIdentity2", 35));
        fStmt.Parameters.Add(StringParam("OwnerIdentity", 35));
        fStmt.Parameters.Add(StringParam("OwnerIdentity2", 35));
        fStmt.Parameters.Add(StringParam("ProductNumber", 35));
        fStmt.Parameters.Add(StringParam("ProductNumber2", 35));
        fStmt.Parameters.Add(DateParam("ProductDate"));
        fStmt.Parameters.Add(DateParam("ProductDate2"));
        fStmt.Parameters.Add(StringParam("PackageIdentity", 17));
        fStmt.Parameters.Add(StringParam("PackageIdentity2", 17));
        fStmt.Parameters.Add(NumberParam("Quantity", 20, 6));
        fStmt.Parameters.Add(NumberParam("Quantity2", 20, 6));
        fStmt.Parameters.Add(NumberParam("MeasuredQty", 20, 6));
        fStmt.Parameters.Add(NumberParam("MeasuredQty2", 20, 6));
        fStmt.Parameters.Add(StringParam("InventoryStatusCode", 8));
        fStmt.Parameters.Add(StringParam("InventoryStatusCode2", 8));
        fStmt.Parameters.Add(StringParam("ProductionLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("ProductionLotIdentity2", 40));
        fStmt.Parameters.Add(StringParam("ProductionSubLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("ProductionSublotIdentity2", 40));
        fStmt.Parameters.Add(StringParam("MarketingLotIdentity", 20));
        fStmt.Parameters.Add(StringParam("MarketingLotIdentity2", 20));
        fStmt.Parameters.Add(StringParam("QualityLotIdentity", 20));
        fStmt.Parameters.Add(StringParam("QualityLotIdentity2", 20));
        fStmt.Parameters.Add(StringParam("WarehouseIdentity", 4));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLinePosition", 6, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineKitPosition", 2, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("ReasonCode", 6));
        fStmt.Parameters.Add(StringParam("Freetext", 45));
        fStmt.Parameters.Add(StringParam("SerialNumber", 21));
        fStmt.Parameters.Add(StringParam("SerialNumber2", 21));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, InventoryChangeLineDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for InventoryChangeLineDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter InventoryChangeLineDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter InventoryChangeLineDoc.OPCODE not allowed");


        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.EmployeeId != null)
        {
            if (p.EmployeeId.Length > 35)
                error.AppendLine("Value for InventoryChangeLineDoc.EmployeeId too long, max 35 chars");

            (fStmt.Parameters["Employeeid"] as IDbDataParameter).Value = p.EmployeeId;
        }
        else
            (fStmt.Parameters["Employeeid"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TimeStamp != null)
        {
            (fStmt.Parameters["TimeStamp"] as IDbDataParameter).Value = p.TimeStamp;
        }
        else
            (fStmt.Parameters["TimeStamp"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ItemLoadIdentity != null)
        {
            if (p.ItemLoadIdentity.Length > 35)
                error.AppendLine("Value for InventoryChangeLineDoc.ItemLoadIdentity too long, max 35 chars");

            (fStmt.Parameters["ItemLoadIdentity"] as IDbDataParameter).Value = p.ItemLoadIdentity;
        }
        else
            (fStmt.Parameters["ItemLoadIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OperationCode != null)
        {
            if (p.OperationCode.Length > 1)
                error.AppendLine("Value for InventoryChangeLineDoc.OperationCode too long, max 1 chars");

            (fStmt.Parameters["OperationCode"] as IDbDataParameter).Value = p.OperationCode;
        }
        else
            (fStmt.Parameters["OperationCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventoryChangeCode != null)
        {
            if (p.InventoryChangeCode.Length > 2)
                error.AppendLine("Value for InventoryChangeLineDoc.InventoryChangeCode too long, max 2 chars");

            (fStmt.Parameters["InventoryChangeCode"] as IDbDataParameter).Value = p.InventoryChangeCode;
        }
        else
            (fStmt.Parameters["InventoryChangeCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventoryChangeText != null)
        {
            if (p.InventoryChangeText.Length > 35)
                error.AppendLine("Value for InventoryChangeLineDoc.InventoryChangeText too long, max 35 chars");

            (fStmt.Parameters["InventoryChangeText"] as IDbDataParameter).Value = p.InventoryChangeText;
        }
        else
            (fStmt.Parameters["InventoryChangeText"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DespatchadviceIdentity != null)
        {
            if (p.DespatchadviceIdentity.Length > 35)
                error.AppendLine("Value for InventoryChangeLineDoc.DespatchadviceIdentity too long, max 35 chars");

            (fStmt.Parameters["DespatchadviceIdentity"] as IDbDataParameter).Value = p.DespatchadviceIdentity;
        }
        else
            (fStmt.Parameters["DespatchadviceIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderNumber != null)
        {
            if (p.PurchaseOrderNumber.Length > 35)
                error.AppendLine("Value for InventoryChangeLineDoc.PurchaseOrderNumber too long, max 35 chars");

            (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = p.PurchaseOrderNumber;
        }
        else
            (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderSequence != null)
        {
            (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = p.PurchaseOrderSequence;
        }
        else
            (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderLinePosition != null)
        {
            (fStmt.Parameters["PurchaseOrderLinePosition"] as IDbDataParameter).Value = p.PurchaseOrderLinePosition;
        }
        else
            (fStmt.Parameters["PurchaseOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderLineSequence != null)
        {
            (fStmt.Parameters["PurchaseOrderLineSequence"] as IDbDataParameter).Value = p.PurchaseOrderLineSequence;
        }
        else
            (fStmt.Parameters["PurchaseOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VendorIdentity != null)
        {
            if (p.VendorIdentity.Length > 35)
                error.AppendLine("Value for InventoryChangeLineDoc.VendorIdentity too long, max 35 chars");

            (fStmt.Parameters["VendorIdentity"] as IDbDataParameter).Value = p.VendorIdentity;
        }
        else
            (fStmt.Parameters["VendorIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VendorIdentity2 != null)
        {
            if (p.VendorIdentity2.Length > 35)
                error.AppendLine("Value for InventoryChangeLineDoc.VendorIdentity2 too long, max 35 chars");

            (fStmt.Parameters["VendorIdentity2"] as IDbDataParameter).Value = p.VendorIdentity2;
        }
        else
            (fStmt.Parameters["VendorIdentity2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OwnerIdentity != null)
        {
            if (p.OwnerIdentity.Length > 35)
                error.AppendLine("Value for InventoryChangeLineDoc.OwnerIdentity too long, max 35 chars");

            (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = p.OwnerIdentity;
        }
        else
            (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OwnerIdentity2 != null)
        {
            if (p.OwnerIdentity2.Length > 35)
                error.AppendLine("Value for InventoryChangeLineDoc.OwnerIdentity2 too long, max 35 chars");

            (fStmt.Parameters["OwnerIdentity2"] as IDbDataParameter).Value = p.OwnerIdentity2;
        }
        else
            (fStmt.Parameters["OwnerIdentity2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductNumber != null)
        {
            if (p.ProductNumber.Length > 35)
                error.AppendLine("Value for InventoryChangeLineDoc.ProductNumber too long, max 35 chars");

            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
        }
        else
            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductNumber2 != null)
        {
            if (p.ProductNumber2.Length > 35)
                error.AppendLine("Value for InventoryChangeLineDoc.ProductNumber2 too long, max 35 chars");

            (fStmt.Parameters["ProductNumber2"] as IDbDataParameter).Value = p.ProductNumber2;
        }
        else
            (fStmt.Parameters["ProductNumber2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductDate != null)
        {
            (fStmt.Parameters["ProductDate"] as IDbDataParameter).Value = p.ProductDate;
        }
        else
            (fStmt.Parameters["ProductDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductDate2 != null)
        {
            (fStmt.Parameters["ProductDate2"] as IDbDataParameter).Value = p.ProductDate2;
        }
        else
            (fStmt.Parameters["ProductDate2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackageIdentity != null)
        {
            if (p.PackageIdentity.Length > 17)
                error.AppendLine("Value for InventoryChangeLineDoc.PackageIdentity too long, max 17 chars");

            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
        }
        else
            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackageIdentity2 != null)
        {
            if (p.PackageIdentity2.Length > 17)
                error.AppendLine("Value for InventoryChangeLineDoc.PackageIdentity2 too long, max 17 chars");

            (fStmt.Parameters["PackageIdentity2"] as IDbDataParameter).Value = p.PackageIdentity2;
        }
        else
            (fStmt.Parameters["PackageIdentity2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Quantity != null)
        {
            (fStmt.Parameters["Quantity"] as IDbDataParameter).Value = p.Quantity;
        }
        else
            (fStmt.Parameters["Quantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Quantity2 != null)
        {
            (fStmt.Parameters["Quantity2"] as IDbDataParameter).Value = p.Quantity2;
        }
        else
            (fStmt.Parameters["Quantity2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MeasuredQty != null)
        {
            (fStmt.Parameters["MeasuredQty"] as IDbDataParameter).Value = p.MeasuredQty;
        }
        else
            (fStmt.Parameters["MeasuredQty"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MeasuredQty2 != null)
        {
            (fStmt.Parameters["MeasuredQty2"] as IDbDataParameter).Value = p.MeasuredQty2;
        }
        else
            (fStmt.Parameters["MeasuredQty2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventoryStatusCode != null)
        {
            if (p.InventoryStatusCode.Length > 8)
                error.AppendLine("Value for InventoryChangeLineDoc.InventoryStatusCode too long, max 8 chars");

            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = p.InventoryStatusCode;
        }
        else
            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventoryStatusCode2 != null)
        {
            if (p.InventoryStatusCode2.Length > 8)
                error.AppendLine("Value for InventoryChangeLineDoc.InventoryStatusCode2 too long, max 8 chars");

            (fStmt.Parameters["InventoryStatusCode2"] as IDbDataParameter).Value = p.InventoryStatusCode2;
        }
        else
            (fStmt.Parameters["InventoryStatusCode2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionLotIdentity != null)
        {
            if (p.ProductionLotIdentity.Length > 40)
                error.AppendLine("Value for InventoryChangeLineDoc.ProductionLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = p.ProductionLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionLotIdentity2 != null)
        {
            if (p.ProductionLotIdentity2.Length > 40)
                error.AppendLine("Value for InventoryChangeLineDoc.ProductionLotIdentity2 too long, max 40 chars");

            (fStmt.Parameters["ProductionLotIdentity2"] as IDbDataParameter).Value = p.ProductionLotIdentity2;
        }
        else
            (fStmt.Parameters["ProductionLotIdentity2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionSubLotIdentity != null)
        {
            if (p.ProductionSubLotIdentity.Length > 40)
                error.AppendLine("Value for InventoryChangeLineDoc.ProductionSubLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = p.ProductionSubLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionSublotIdentity2 != null)
        {
            if (p.ProductionSublotIdentity2.Length > 40)
                error.AppendLine("Value for InventoryChangeLineDoc.ProductionSublotIdentity2 too long, max 40 chars");

            (fStmt.Parameters["ProductionSublotIdentity2"] as IDbDataParameter).Value = p.ProductionSublotIdentity2;
        }
        else
            (fStmt.Parameters["ProductionSublotIdentity2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MarketingLotIdentity != null)
        {
            if (p.MarketingLotIdentity.Length > 20)
                error.AppendLine("Value for InventoryChangeLineDoc.MarketingLotIdentity too long, max 20 chars");

            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = p.MarketingLotIdentity;
        }
        else
            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MarketingLotIdentity2 != null)
        {
            if (p.MarketingLotIdentity2.Length > 20)
                error.AppendLine("Value for InventoryChangeLineDoc.MarketingLotIdentity2 too long, max 20 chars");

            (fStmt.Parameters["MarketingLotIdentity2"] as IDbDataParameter).Value = p.MarketingLotIdentity2;
        }
        else
            (fStmt.Parameters["MarketingLotIdentity2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.QualityLotIdentity != null)
        {
            if (p.QualityLotIdentity.Length > 20)
                error.AppendLine("Value for InventoryChangeLineDoc.QualityLotIdentity too long, max 20 chars");

            (fStmt.Parameters["QualityLotIdentity"] as IDbDataParameter).Value = p.QualityLotIdentity;
        }
        else
            (fStmt.Parameters["QualityLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.QualityLotIdentity2 != null)
        {
            if (p.QualityLotIdentity2.Length > 20)
                error.AppendLine("Value for InventoryChangeLineDoc.QualityLotIdentity2 too long, max 20 chars");

            (fStmt.Parameters["QualityLotIdentity2"] as IDbDataParameter).Value = p.QualityLotIdentity2;
        }
        else
            (fStmt.Parameters["QualityLotIdentity2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.WarehouseIdentity != null)
        {
            if (p.WarehouseIdentity.Length > 4)
                error.AppendLine("Value for InventoryChangeLineDoc.WarehouseIdentity too long, max 4 chars");

            (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = p.WarehouseIdentity;
        }
        else
            (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for InventoryChangeLineDoc.CustomerOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLinePosition != null)
        {
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = p.CustomerOrderLinePosition;
        }
        else
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLineKitPosition != null)
        {
            (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = p.CustomerOrderLineKitPosition;
        }
        else
            (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLineSequence != null)
        {
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = p.CustomerOrderLineSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReasonCode != null)
        {
            if (p.ReasonCode.Length > 6)
                error.AppendLine("Value for InventoryChangeLineDoc.ReasonCode too long, max 6 chars");

            (fStmt.Parameters["ReasonCode"] as IDbDataParameter).Value = p.ReasonCode;
        }
        else
            (fStmt.Parameters["ReasonCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FreeText != null)
        {
            if (p.FreeText.Length > 45)
                error.AppendLine("Value for InventoryChangeLineDoc.FreeText too long, max 45 chars");

            (fStmt.Parameters["Freetext"] as IDbDataParameter).Value = p.FreeText;
        }
        else
            (fStmt.Parameters["Freetext"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SerialNumber != null)
        {
            if (p.SerialNumber.Length > 21)
                error.AppendLine("Value for InventoryChangeLineDoc.SerialNumber too long, max 21 chars");

            (fStmt.Parameters["SerialNumber"] as IDbDataParameter).Value = p.SerialNumber;
        }
        else
            (fStmt.Parameters["SerialNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SerialNumber2 != null)
        {
            if (p.SerialNumber2.Length > 21)
                error.AppendLine("Value for InventoryChangeLineDoc.SerialNumber2 too long, max 21 chars");

            (fStmt.Parameters["SerialNumber2"] as IDbDataParameter).Value = p.SerialNumber2;
        }
        else
            (fStmt.Parameters["SerialNumber2"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class PickReceiptHeadInsert : SegmentImpl
  {
    private PickReceiptHeadPackingMaterialInsert aPickReceiptHeadPackingMaterialInsert;
    private PickReceiptLineInsert aPickReceiptLineInsert;
    private PickReceiptServiceInsert aPickReceiptServiceInsert;
    private PickReceiptTextInsert aPickReceiptTextInsert;

    public PickReceiptHeadInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_PICK_RECEIPT_HEAD ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderSequence");
        s.Append(",CustomerOrderSubSequence");
        s.Append(",LastOndeparture");
        s.Append(",WarehouseIdentity");
        s.Append(",AssembleToStock");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderSequence");
        s.Append(",:CustomerOrderSubSequence");
        s.Append(",:LastOndeparture");
        s.Append(",:WarehouseIdentity");
        s.Append(",:AssembleToStock");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSubSequence", 4, 0));
        fStmt.Parameters.Add(StringParam("LastOndeparture", 1));
        fStmt.Parameters.Add(StringParam("WarehouseIdentity", 4));
        fStmt.Parameters.Add(StringParam("AssembleToStock", 1));

        fStmt.Prepare();

        aPickReceiptHeadPackingMaterialInsert = new PickReceiptHeadPackingMaterialInsert(owner);
        aPickReceiptLineInsert = new PickReceiptLineInsert(owner);
        aPickReceiptServiceInsert = new PickReceiptServiceInsert(owner);
        aPickReceiptTextInsert = new PickReceiptTextInsert(owner);
    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, PickReceiptHeadDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for PickReceiptHeadDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter PickReceiptHeadDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter PickReceiptHeadDoc.OPCODE not allowed");


        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for PickReceiptHeadDoc.CustomerOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSubSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSubSequence"] as IDbDataParameter).Value = p.CustomerOrderSubSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSubSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LastOndeparture != null)
        {
            if (p.LastOndeparture.Length > 1)
                error.AppendLine("Value for PickReceiptHeadDoc.LastOndeparture too long, max 1 chars");

            (fStmt.Parameters["LastOndeparture"] as IDbDataParameter).Value = p.LastOndeparture;
        }
        else
            (fStmt.Parameters["LastOndeparture"] as IDbDataParameter).Value = DBNull.Value;

        if (p.WarehouseIdentity != null)
        {
            if (p.WarehouseIdentity.Length > 4)
                error.AppendLine("Value for PickReceiptHeadDoc.WarehouseIdentity too long, max 4 chars");

            (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = p.WarehouseIdentity;
        }
        else
            (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.AssembleToStock != null)
        {
            if (p.AssembleToStock.Length > 1)
                error.AppendLine("Value for PickReceiptHeadDoc.AssembleToStock too long, max 1 chars");

            (fStmt.Parameters["AssembleToStock"] as IDbDataParameter).Value = p.AssembleToStock;
        }
        else
            (fStmt.Parameters["AssembleToStock"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

        if (p.aPickReceiptHeadPackingMaterialDocs != null)
            foreach (PickReceiptHeadPackingMaterialDoc c in p.aPickReceiptHeadPackingMaterialDocs)
                aPickReceiptHeadPackingMaterialInsert.Process(ref trans, this, c);
        if (p.aPickReceiptLineDocs != null)
            foreach (PickReceiptLineDoc d in p.aPickReceiptLineDocs)
                aPickReceiptLineInsert.Process(ref trans, this, d);
        if (p.aPickReceiptServiceDocs != null)
            foreach (PickReceiptServiceDoc e in p.aPickReceiptServiceDocs)
                aPickReceiptServiceInsert.Process(ref trans, this, e);
        if (p.aPickReceiptTextDocs != null)
            foreach (PickReceiptTextDoc f in p.aPickReceiptTextDocs)
                aPickReceiptTextInsert.Process(ref trans, this, f);
      }
  }

  public class PickReceiptHeadPackingMaterialInsert : SegmentImpl
  {

    public PickReceiptHeadPackingMaterialInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_PICK_RECEIPT_HEAD_PM ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderSequence");
        s.Append(",CustomerOrderSubSequence");
        s.Append(",PackingMaterialType");
        s.Append(",Quantity");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderSequence");
        s.Append(",:CustomerOrderSubSequence");
        s.Append(",:PackingMaterialType");
        s.Append(",:Quantity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSubSequence", 4, 0));
        fStmt.Parameters.Add(StringParam("PackingMaterialType", 35));
        fStmt.Parameters.Add(NumberParam("Quantity", 20, 6));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, PickReceiptHeadPackingMaterialDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for PickReceiptHeadPackingMaterialDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter PickReceiptHeadPackingMaterialDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter PickReceiptHeadPackingMaterialDoc.OPCODE not allowed");


        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for PickReceiptHeadPackingMaterialDoc.CustomerOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSubSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSubSequence"] as IDbDataParameter).Value = p.CustomerOrderSubSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSubSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackingMaterialType != null)
        {
            if (p.PackingMaterialType.Length > 35)
                error.AppendLine("Value for PickReceiptHeadPackingMaterialDoc.PackingMaterialType too long, max 35 chars");

            (fStmt.Parameters["PackingMaterialType"] as IDbDataParameter).Value = p.PackingMaterialType;
        }
        else
            (fStmt.Parameters["PackingMaterialType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Quantity != null)
        {
            (fStmt.Parameters["Quantity"] as IDbDataParameter).Value = p.Quantity;
        }
        else
            (fStmt.Parameters["Quantity"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class PickReceiptLineInsert : SegmentImpl
  {
    private PickReceiptLineTextInsert aPickReceiptLineTextInsert;
    private PickReceiptLinePackingMaterialInsert aPickReceiptLinePackingMaterialInsert;

    public PickReceiptLineInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_PICK_RECEIPT_LINE ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderSequence");
        s.Append(",CustomerOrderSubSequence");
        s.Append(",CustomerOrderLinePosition");
        s.Append(",CustomerOrderLineKitPosition");
        s.Append(",CustomerOrderLineSequence");
        s.Append(",PickOrderLineIdentity");
        s.Append(",OwnerIdentity");
        s.Append(",ProductIdentity");
        s.Append(",PackageIdentity");
        s.Append(",PickQuantity");
        s.Append(",MeasuredQty");
        s.Append(",RestCode");
        s.Append(",DepartureIdentity");
        s.Append(",DepartureweekDay");
        s.Append(",MarketingLotIdentity");
        s.Append(",QualityLotIdentity");
        s.Append(",FreighterIdentity");
        s.Append(",ShipDate");
        s.Append(",ConsignmentNote");
        s.Append(",PackingSlipIdentity");
        s.Append(",OrderedQuantity");
        s.Append(",UnderQuantity");
        s.Append(",OverQuantity");
        s.Append(",ProductionLotIdentity");
        s.Append(",ProductionSubLotIdentity");
        s.Append(",InventoryStatusCode");
        s.Append(",SerialNumber");
        s.Append(",AssembleToStock");
        s.Append(",ItemLoadIdentity");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderSequence");
        s.Append(",:CustomerOrderSubSequence");
        s.Append(",:CustomerOrderLinePosition");
        s.Append(",:CustomerOrderLineKitPosition");
        s.Append(",:CustomerOrderLineSequence");
        s.Append(",:PickOrderLineIdentity");
        s.Append(",:OwnerIdentity");
        s.Append(",:ProductIdentity");
        s.Append(",:PackageIdentity");
        s.Append(",:PickQuantity");
        s.Append(",:MeasuredQty");
        s.Append(",:RestCode");
        s.Append(",:DepartureIdentity");
        s.Append(",:DepartureweekDay");
        s.Append(",:MarketingLotIdentity");
        s.Append(",:QualityLotIdentity");
        s.Append(",:FreighterIdentity");
        s.Append(",:ShipDate");
        s.Append(",:ConsignmentNote");
        s.Append(",:PackingSlipIdentity");
        s.Append(",:OrderedQuantity");
        s.Append(",:UnderQuantity");
        s.Append(",:OverQuantity");
        s.Append(",:ProductionLotIdentity");
        s.Append(",:ProductionSubLotIdentity");
        s.Append(",:InventoryStatusCode");
        s.Append(",:SerialNumber");
        s.Append(",:AssembleToStock");
        s.Append(",:ItemLoadIdentity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSubSequence", 4, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLinePosition", 5, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineKitPosition", 2, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("PickOrderLineIdentity", 35));
        fStmt.Parameters.Add(StringParam("OwnerIdentity", 35));
        fStmt.Parameters.Add(StringParam("ProductIdentity", 35));
        fStmt.Parameters.Add(StringParam("PackageIdentity", 17));
        fStmt.Parameters.Add(NumberParam("PickQuantity", 20, 6));
        fStmt.Parameters.Add(NumberParam("MeasuredQty", 20, 6));
        fStmt.Parameters.Add(StringParam("RestCode", 3));
        fStmt.Parameters.Add(StringParam("DepartureIdentity", 35));
        fStmt.Parameters.Add(StringParam("DepartureweekDay", 1));
        fStmt.Parameters.Add(StringParam("MarketingLotIdentity", 20));
        fStmt.Parameters.Add(StringParam("QualityLotIdentity", 20));
        fStmt.Parameters.Add(StringParam("FreighterIdentity", 35));
        fStmt.Parameters.Add(DateParam("ShipDate"));
        fStmt.Parameters.Add(StringParam("ConsignmentNote", 35));
        fStmt.Parameters.Add(StringParam("PackingSlipIdentity", 20));
        fStmt.Parameters.Add(NumberParam("OrderedQuantity", 20, 6));
        fStmt.Parameters.Add(NumberParam("UnderQuantity", 20, 6));
        fStmt.Parameters.Add(NumberParam("OverQuantity", 20, 6));
        fStmt.Parameters.Add(StringParam("ProductionLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("ProductionSubLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("InventoryStatusCode", 8));
        fStmt.Parameters.Add(StringParam("SerialNumber", 21));
        fStmt.Parameters.Add(StringParam("AssembleToStock", 1));
        fStmt.Parameters.Add(StringParam("ItemLoadIdentity", 35));

        fStmt.Prepare();

        aPickReceiptLineTextInsert = new PickReceiptLineTextInsert(owner);
        aPickReceiptLinePackingMaterialInsert = new PickReceiptLinePackingMaterialInsert(owner);
    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, PickReceiptLineDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for PickReceiptLineDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter PickReceiptLineDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter PickReceiptLineDoc.OPCODE not allowed");


        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for PickReceiptLineDoc.CustomerOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSubSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSubSequence"] as IDbDataParameter).Value = p.CustomerOrderSubSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSubSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLinePosition != null)
        {
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = p.CustomerOrderLinePosition;
        }
        else
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLineKitPosition != null)
        {
            (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = p.CustomerOrderLineKitPosition;
        }
        else
            (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLineSequence != null)
        {
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = p.CustomerOrderLineSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PickOrderLineIdentity != null)
        {
            if (p.PickOrderLineIdentity.Length > 35)
                error.AppendLine("Value for PickReceiptLineDoc.PickOrderLineIdentity too long, max 35 chars");

            (fStmt.Parameters["PickOrderLineIdentity"] as IDbDataParameter).Value = p.PickOrderLineIdentity;
        }
        else
            (fStmt.Parameters["PickOrderLineIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OwnerIdentity != null)
        {
            if (p.OwnerIdentity.Length > 35)
                error.AppendLine("Value for PickReceiptLineDoc.OwnerIdentity too long, max 35 chars");

            (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = p.OwnerIdentity;
        }
        else
            (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductIdentity != null)
        {
            if (p.ProductIdentity.Length > 35)
                error.AppendLine("Value for PickReceiptLineDoc.ProductIdentity too long, max 35 chars");

            (fStmt.Parameters["ProductIdentity"] as IDbDataParameter).Value = p.ProductIdentity;
        }
        else
            (fStmt.Parameters["ProductIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackageIdentity != null)
        {
            if (p.PackageIdentity.Length > 17)
                error.AppendLine("Value for PickReceiptLineDoc.PackageIdentity too long, max 17 chars");

            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
        }
        else
            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PickQuantity != null)
        {
            (fStmt.Parameters["PickQuantity"] as IDbDataParameter).Value = p.PickQuantity;
        }
        else
            (fStmt.Parameters["PickQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MeasuredQty != null)
        {
            (fStmt.Parameters["MeasuredQty"] as IDbDataParameter).Value = p.MeasuredQty;
        }
        else
            (fStmt.Parameters["MeasuredQty"] as IDbDataParameter).Value = DBNull.Value;

        if (p.RestCode != null)
        {
            if (p.RestCode.Length > 3)
                error.AppendLine("Value for PickReceiptLineDoc.RestCode too long, max 3 chars");

            (fStmt.Parameters["RestCode"] as IDbDataParameter).Value = p.RestCode;
        }
        else
            (fStmt.Parameters["RestCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DepartureIdentity != null)
        {
            if (p.DepartureIdentity.Length > 35)
                error.AppendLine("Value for PickReceiptLineDoc.DepartureIdentity too long, max 35 chars");

            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = p.DepartureIdentity;
        }
        else
            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DepartureWeekday != null)
        {
            if (p.DepartureWeekday.Length > 1)
                error.AppendLine("Value for PickReceiptLineDoc.DepartureWeekday too long, max 1 chars");

            (fStmt.Parameters["DepartureweekDay"] as IDbDataParameter).Value = p.DepartureWeekday;
        }
        else
            (fStmt.Parameters["DepartureweekDay"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MarketingLotIdentity != null)
        {
            if (p.MarketingLotIdentity.Length > 20)
                error.AppendLine("Value for PickReceiptLineDoc.MarketingLotIdentity too long, max 20 chars");

            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = p.MarketingLotIdentity;
        }
        else
            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.QualityLotIdentity != null)
        {
            if (p.QualityLotIdentity.Length > 20)
                error.AppendLine("Value for PickReceiptLineDoc.QualityLotIdentity too long, max 20 chars");

            (fStmt.Parameters["QualityLotIdentity"] as IDbDataParameter).Value = p.QualityLotIdentity;
        }
        else
            (fStmt.Parameters["QualityLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FreighterIdentity != null)
        {
            if (p.FreighterIdentity.Length > 35)
                error.AppendLine("Value for PickReceiptLineDoc.FreighterIdentity too long, max 35 chars");

            (fStmt.Parameters["FreighterIdentity"] as IDbDataParameter).Value = p.FreighterIdentity;
        }
        else
            (fStmt.Parameters["FreighterIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipDate != null)
        {
            (fStmt.Parameters["ShipDate"] as IDbDataParameter).Value = p.ShipDate;
        }
        else
            (fStmt.Parameters["ShipDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ConsignmentNote != null)
        {
            if (p.ConsignmentNote.Length > 35)
                error.AppendLine("Value for PickReceiptLineDoc.ConsignmentNote too long, max 35 chars");

            (fStmt.Parameters["ConsignmentNote"] as IDbDataParameter).Value = p.ConsignmentNote;
        }
        else
            (fStmt.Parameters["ConsignmentNote"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackingSlipIdentity != null)
        {
            if (p.PackingSlipIdentity.Length > 20)
                error.AppendLine("Value for PickReceiptLineDoc.PackingSlipIdentity too long, max 20 chars");

            (fStmt.Parameters["PackingSlipIdentity"] as IDbDataParameter).Value = p.PackingSlipIdentity;
        }
        else
            (fStmt.Parameters["PackingSlipIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OrderedQuantity != null)
        {
            (fStmt.Parameters["OrderedQuantity"] as IDbDataParameter).Value = p.OrderedQuantity;
        }
        else
            (fStmt.Parameters["OrderedQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.UnderQuantity != null)
        {
            (fStmt.Parameters["UnderQuantity"] as IDbDataParameter).Value = p.UnderQuantity;
        }
        else
            (fStmt.Parameters["UnderQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OverQuantity != null)
        {
            (fStmt.Parameters["OverQuantity"] as IDbDataParameter).Value = p.OverQuantity;
        }
        else
            (fStmt.Parameters["OverQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionLotIdentity != null)
        {
            if (p.ProductionLotIdentity.Length > 40)
                error.AppendLine("Value for PickReceiptLineDoc.ProductionLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = p.ProductionLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionSubLotIdentity != null)
        {
            if (p.ProductionSubLotIdentity.Length > 40)
                error.AppendLine("Value for PickReceiptLineDoc.ProductionSubLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = p.ProductionSubLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventoryStatusCode != null)
        {
            if (p.InventoryStatusCode.Length > 8)
                error.AppendLine("Value for PickReceiptLineDoc.InventoryStatusCode too long, max 8 chars");

            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = p.InventoryStatusCode;
        }
        else
            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SerialNumber != null)
        {
            if (p.SerialNumber.Length > 21)
                error.AppendLine("Value for PickReceiptLineDoc.SerialNumber too long, max 21 chars");

            (fStmt.Parameters["SerialNumber"] as IDbDataParameter).Value = p.SerialNumber;
        }
        else
            (fStmt.Parameters["SerialNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.AssembleToStock != null)
        {
            if (p.AssembleToStock.Length > 1)
                error.AppendLine("Value for PickReceiptLineDoc.AssembleToStock too long, max 1 chars");

            (fStmt.Parameters["AssembleToStock"] as IDbDataParameter).Value = p.AssembleToStock;
        }
        else
            (fStmt.Parameters["AssembleToStock"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ItemLoadIdentity != null)
        {
            if (p.ItemLoadIdentity.Length > 35)
                error.AppendLine("Value for PickReceiptLineDoc.ItemLoadIdentity too long, max 35 chars");

            (fStmt.Parameters["ItemLoadIdentity"] as IDbDataParameter).Value = p.ItemLoadIdentity;
        }
        else
            (fStmt.Parameters["ItemLoadIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

        if (p.aPickReceiptLineTextDocs != null)
            foreach (PickReceiptLineTextDoc c in p.aPickReceiptLineTextDocs)
                aPickReceiptLineTextInsert.Process(ref trans, this, c);
        if (p.aPickReceiptLinePackingMaterialDocs != null)
            foreach (PickReceiptLinePackingMaterialDoc d in p.aPickReceiptLinePackingMaterialDocs)
                aPickReceiptLinePackingMaterialInsert.Process(ref trans, this, d);
      }
  }

  public class PickReceiptLineTextInsert : SegmentImpl
  {

    public PickReceiptLineTextInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_PICK_RECEIPT_LINE_TEXT ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderSequence");
        s.Append(",CustomerOrderSubSequence");
        s.Append(",CustomerOrderLinePosition");
        s.Append(",CustomerOrderLineKitPosition");
        s.Append(",CustomerOrderLineSequence");
        s.Append(",PickOrderLineIdentity");
        s.Append(",TextFunction");
        s.Append(",Text");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderSequence");
        s.Append(",:CustomerOrderSubSequence");
        s.Append(",:CustomerOrderLinePosition");
        s.Append(",:CustomerOrderLineKitPosition");
        s.Append(",:CustomerOrderLineSequence");
        s.Append(",:PickOrderLineIdentity");
        s.Append(",:TextFunction");
        s.Append(",:Text");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSubSequence", 4, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLinePosition", 5, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineKitPosition", 2, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("PickOrderLineIdentity", 35));
        fStmt.Parameters.Add(StringParam("TextFunction", 3));
        fStmt.Parameters.Add(StringParam("Text", 400));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, PickReceiptLineTextDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for PickReceiptLineTextDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter PickReceiptLineTextDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter PickReceiptLineTextDoc.OPCODE not allowed");


        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for PickReceiptLineTextDoc.CustomerOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSubSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSubSequence"] as IDbDataParameter).Value = p.CustomerOrderSubSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSubSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLinePosition != null)
        {
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = p.CustomerOrderLinePosition;
        }
        else
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLineKitPosition != null)
        {
            (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = p.CustomerOrderLineKitPosition;
        }
        else
            (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLineSequence != null)
        {
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = p.CustomerOrderLineSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PickOrderLineIdentity != null)
        {
            if (p.PickOrderLineIdentity.Length > 35)
                error.AppendLine("Value for PickReceiptLineTextDoc.PickOrderLineIdentity too long, max 35 chars");

            (fStmt.Parameters["PickOrderLineIdentity"] as IDbDataParameter).Value = p.PickOrderLineIdentity;
        }
        else
            (fStmt.Parameters["PickOrderLineIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TextFunction != null)
        {
            if (p.TextFunction.Length > 3)
                error.AppendLine("Value for PickReceiptLineTextDoc.TextFunction too long, max 3 chars");

            (fStmt.Parameters["TextFunction"] as IDbDataParameter).Value = p.TextFunction;
        }
        else
            (fStmt.Parameters["TextFunction"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Text != null)
        {
            if (p.Text.Length > 400)
                error.AppendLine("Value for PickReceiptLineTextDoc.Text too long, max 400 chars");

            (fStmt.Parameters["Text"] as IDbDataParameter).Value = p.Text;
        }
        else
            (fStmt.Parameters["Text"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class PickReceiptLinePackingMaterialInsert : SegmentImpl
  {

    public PickReceiptLinePackingMaterialInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_PICK_RECEIPT_LINE_PM ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderSequence");
        s.Append(",CustomerOrderSubSequence");
        s.Append(",CustomerOrderLinePosition");
        s.Append(",CustomerOrderLineKitPosition");
        s.Append(",CustomerOrderLineSequence");
        s.Append(",PickOrderLineIdentity");
        s.Append(",PackingMaterialType");
        s.Append(",Quantity");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderSequence");
        s.Append(",:CustomerOrderSubSequence");
        s.Append(",:CustomerOrderLinePosition");
        s.Append(",:CustomerOrderLineKitPosition");
        s.Append(",:CustomerOrderLineSequence");
        s.Append(",:PickOrderLineIdentity");
        s.Append(",:PackingMaterialType");
        s.Append(",:Quantity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSubSequence", 4, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLinePosition", 5, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineKitPosition", 2, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("PickOrderLineIdentity", 35));
        fStmt.Parameters.Add(StringParam("PackingMaterialType", 35));
        fStmt.Parameters.Add(NumberParam("Quantity", 20, 6));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, PickReceiptLinePackingMaterialDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for PickReceiptLinePackingMaterialDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter PickReceiptLinePackingMaterialDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter PickReceiptLinePackingMaterialDoc.OPCODE not allowed");


        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for PickReceiptLinePackingMaterialDoc.CustomerOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSubSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSubSequence"] as IDbDataParameter).Value = p.CustomerOrderSubSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSubSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLinePosition != null)
        {
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = p.CustomerOrderLinePosition;
        }
        else
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLineKitPosition != null)
        {
            (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = p.CustomerOrderLineKitPosition;
        }
        else
            (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLineSequence != null)
        {
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = p.CustomerOrderLineSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PickOrderLineIdentity != null)
        {
            if (p.PickOrderLineIdentity.Length > 35)
                error.AppendLine("Value for PickReceiptLinePackingMaterialDoc.PickOrderLineIdentity too long, max 35 chars");

            (fStmt.Parameters["PickOrderLineIdentity"] as IDbDataParameter).Value = p.PickOrderLineIdentity;
        }
        else
            (fStmt.Parameters["PickOrderLineIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackingMaterialType != null)
        {
            if (p.PackingMaterialType.Length > 35)
                error.AppendLine("Value for PickReceiptLinePackingMaterialDoc.PackingMaterialType too long, max 35 chars");

            (fStmt.Parameters["PackingMaterialType"] as IDbDataParameter).Value = p.PackingMaterialType;
        }
        else
            (fStmt.Parameters["PackingMaterialType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Quantity != null)
        {
            (fStmt.Parameters["Quantity"] as IDbDataParameter).Value = p.Quantity;
        }
        else
            (fStmt.Parameters["Quantity"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class PickReceiptServiceInsert : SegmentImpl
  {

    public PickReceiptServiceInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_PICK_RECEIPT_SERVICE ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderSequence");
        s.Append(",CustomerOrderSubSequence");
        s.Append(",ServiceQualifier");
        s.Append(",ServiceCode");
        s.Append(",ServiceQty");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderSequence");
        s.Append(",:CustomerOrderSubSequence");
        s.Append(",:ServiceQualifier");
        s.Append(",:ServiceCode");
        s.Append(",:ServiceQty");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSubSequence", 4, 0));
        fStmt.Parameters.Add(StringParam("ServiceQualifier", 3));
        fStmt.Parameters.Add(StringParam("ServiceCode", 17));
        fStmt.Parameters.Add(NumberParam("ServiceQty", 20, 6));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, PickReceiptServiceDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for PickReceiptServiceDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter PickReceiptServiceDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter PickReceiptServiceDoc.OPCODE not allowed");


        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for PickReceiptServiceDoc.CustomerOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSubSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSubSequence"] as IDbDataParameter).Value = p.CustomerOrderSubSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSubSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ServiceQualifier != null)
        {
            if (p.ServiceQualifier.Length > 3)
                error.AppendLine("Value for PickReceiptServiceDoc.ServiceQualifier too long, max 3 chars");

            (fStmt.Parameters["ServiceQualifier"] as IDbDataParameter).Value = p.ServiceQualifier;
        }
        else
            (fStmt.Parameters["ServiceQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ServiceCode != null)
        {
            if (p.ServiceCode.Length > 17)
                error.AppendLine("Value for PickReceiptServiceDoc.ServiceCode too long, max 17 chars");

            (fStmt.Parameters["ServiceCode"] as IDbDataParameter).Value = p.ServiceCode;
        }
        else
            (fStmt.Parameters["ServiceCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ServiceQty != null)
        {
            (fStmt.Parameters["ServiceQty"] as IDbDataParameter).Value = p.ServiceQty;
        }
        else
            (fStmt.Parameters["ServiceQty"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class PickReceiptTextInsert : SegmentImpl
  {

    public PickReceiptTextInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_PICK_RECEIPT_TEXT ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderSequence");
        s.Append(",CustomerOrderSubSequence");
        s.Append(",TextFunction");
        s.Append(",Text");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderSequence");
        s.Append(",:CustomerOrderSubSequence");
        s.Append(",:TextFunction");
        s.Append(",:Text");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSubSequence", 4, 0));
        fStmt.Parameters.Add(StringParam("TextFunction", 3));
        fStmt.Parameters.Add(StringParam("Text", 400));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, PickReceiptTextDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for PickReceiptTextDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter PickReceiptTextDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter PickReceiptTextDoc.OPCODE not allowed");


        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for PickReceiptTextDoc.CustomerOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSubSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSubSequence"] as IDbDataParameter).Value = p.CustomerOrderSubSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSubSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TextFunction != null)
        {
            if (p.TextFunction.Length > 3)
                error.AppendLine("Value for PickReceiptTextDoc.TextFunction too long, max 3 chars");

            (fStmt.Parameters["TextFunction"] as IDbDataParameter).Value = p.TextFunction;
        }
        else
            (fStmt.Parameters["TextFunction"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Text != null)
        {
            if (p.Text.Length > 400)
                error.AppendLine("Value for PickReceiptTextDoc.Text too long, max 400 chars");

            (fStmt.Parameters["Text"] as IDbDataParameter).Value = p.Text;
        }
        else
            (fStmt.Parameters["Text"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class ReturnedPackingMaterialHeadInsert : SegmentImpl
  {
    private ReturnedPackingMaterialLineInsert aReturnedPackingMaterialLineInsert;

    public ReturnedPackingMaterialHeadInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_RETURNED_PM_HEAD ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));

        fStmt.Prepare();

        aReturnedPackingMaterialLineInsert = new ReturnedPackingMaterialLineInsert(owner);
    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ReturnedPackingMaterialHeadDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ReturnedPackingMaterialHeadDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ReturnedPackingMaterialHeadDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter ReturnedPackingMaterialHeadDoc.OPCODE not allowed");


        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

        if (p.aReturnedPackingMaterialLineDocs != null)
            foreach (ReturnedPackingMaterialLineDoc c in p.aReturnedPackingMaterialLineDocs)
                aReturnedPackingMaterialLineInsert.Process(ref trans, this, c);
      }
  }

  public class ReturnedPackingMaterialLineInsert : SegmentImpl
  {

    public ReturnedPackingMaterialLineInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_RETURNED_PM_LINE ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ReturnedPackingMaterialLineDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ReturnedPackingMaterialLineDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ReturnedPackingMaterialLineDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter ReturnedPackingMaterialLineDoc.OPCODE not allowed");


        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class ReturnReceiptHeadInsert : SegmentImpl
  {
    private ReturnReceiptHeadPackingMaterialInsert aReturnReceiptHeadPackingMaterialInsert;
    private ReturnReceiptLineInsert aReturnReceiptLineInsert;

    public ReturnReceiptHeadInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_RETURN_RECEIPT_HEAD ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",ReturnOrderNumber");
        s.Append(",ReturnOrderSequence");
        s.Append(",ReturnOrderSubSequence");
        s.Append(",WarehouseIdentity");
        s.Append(",ShipDate");
        s.Append(",SpontaneousReturn");
        s.Append(",VendorIdentity");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:ReturnOrderNumber");
        s.Append(",:ReturnOrderSequence");
        s.Append(",:ReturnOrderSubSequence");
        s.Append(",:WarehouseIdentity");
        s.Append(",:ShipDate");
        s.Append(",:SpontaneousReturn");
        s.Append(",:VendorIdentity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("ReturnOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("ReturnOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("ReturnOrderSubSequence", 2, 0));
        fStmt.Parameters.Add(StringParam("WarehouseIdentity", 4));
        fStmt.Parameters.Add(DateParam("ShipDate"));
        fStmt.Parameters.Add(StringParam("SpontaneousReturn", 1));
        fStmt.Parameters.Add(StringParam("VendorIdentity", 35));

        fStmt.Prepare();

        aReturnReceiptHeadPackingMaterialInsert = new ReturnReceiptHeadPackingMaterialInsert(owner);
        aReturnReceiptLineInsert = new ReturnReceiptLineInsert(owner);
    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ReturnReceiptHeadDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ReturnReceiptHeadDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ReturnReceiptHeadDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter ReturnReceiptHeadDoc.OPCODE not allowed");


        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.ReturnOrderNumber != null)
        {
            if (p.ReturnOrderNumber.Length > 35)
                error.AppendLine("Value for ReturnReceiptHeadDoc.ReturnOrderNumber too long, max 35 chars");

            (fStmt.Parameters["ReturnOrderNumber"] as IDbDataParameter).Value = p.ReturnOrderNumber;
        }
        else
            (fStmt.Parameters["ReturnOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReturnOrderSequence != null)
        {
            (fStmt.Parameters["ReturnOrderSequence"] as IDbDataParameter).Value = p.ReturnOrderSequence;
        }
        else
            (fStmt.Parameters["ReturnOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReturnOrderSubSequence != null)
        {
            (fStmt.Parameters["ReturnOrderSubSequence"] as IDbDataParameter).Value = p.ReturnOrderSubSequence;
        }
        else
            (fStmt.Parameters["ReturnOrderSubSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.WarehouseIdentity != null)
        {
            if (p.WarehouseIdentity.Length > 4)
                error.AppendLine("Value for ReturnReceiptHeadDoc.WarehouseIdentity too long, max 4 chars");

            (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = p.WarehouseIdentity;
        }
        else
            (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipDate != null)
        {
            (fStmt.Parameters["ShipDate"] as IDbDataParameter).Value = p.ShipDate;
        }
        else
            (fStmt.Parameters["ShipDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SpontaneousReturn != null)
        {
            if (p.SpontaneousReturn.Length > 1)
                error.AppendLine("Value for ReturnReceiptHeadDoc.SpontaneousReturn too long, max 1 chars");

            (fStmt.Parameters["SpontaneousReturn"] as IDbDataParameter).Value = p.SpontaneousReturn;
        }
        else
            (fStmt.Parameters["SpontaneousReturn"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VendorIdentity != null)
        {
            if (p.VendorIdentity.Length > 35)
                error.AppendLine("Value for ReturnReceiptHeadDoc.VendorIdentity too long, max 35 chars");

            (fStmt.Parameters["VendorIdentity"] as IDbDataParameter).Value = p.VendorIdentity;
        }
        else
            (fStmt.Parameters["VendorIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

        if (p.aReturnReceiptHeadPackingMaterialDocs != null)
            foreach (ReturnReceiptHeadPackingMaterialDoc c in p.aReturnReceiptHeadPackingMaterialDocs)
                aReturnReceiptHeadPackingMaterialInsert.Process(ref trans, this, c);
        if (p.aReturnReceiptLineDocs != null)
            foreach (ReturnReceiptLineDoc d in p.aReturnReceiptLineDocs)
                aReturnReceiptLineInsert.Process(ref trans, this, d);
      }
  }

  public class ReturnReceiptHeadPackingMaterialInsert : SegmentImpl
  {

    public ReturnReceiptHeadPackingMaterialInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_RETURN_RECEIPT_HEAD_PM ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",ReturnOrderNumber");
        s.Append(",ReturnOrderSequence");
        s.Append(",ReturnOrderSubSequence");
        s.Append(",ShipDate");
        s.Append(",ProductIdentity");
        s.Append(",PickQuantity");
        s.Append(",SpontaneousReturn");
        s.Append(",WarehouseIdentity");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:ReturnOrderNumber");
        s.Append(",:ReturnOrderSequence");
        s.Append(",:ReturnOrderSubSequence");
        s.Append(",:ShipDate");
        s.Append(",:ProductIdentity");
        s.Append(",:PickQuantity");
        s.Append(",:SpontaneousReturn");
        s.Append(",:WarehouseIdentity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("ReturnOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("ReturnOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("ReturnOrderSubSequence", 2, 0));
        fStmt.Parameters.Add(DateParam("ShipDate"));
        fStmt.Parameters.Add(StringParam("ProductIdentity", 35));
        fStmt.Parameters.Add(NumberParam("PickQuantity", 20, 6));
        fStmt.Parameters.Add(StringParam("SpontaneousReturn", 1));
        fStmt.Parameters.Add(StringParam("WarehouseIdentity", 4));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ReturnReceiptHeadPackingMaterialDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ReturnReceiptHeadPackingMaterialDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ReturnReceiptHeadPackingMaterialDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter ReturnReceiptHeadPackingMaterialDoc.OPCODE not allowed");


        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.ReturnOrderNumber != null)
        {
            if (p.ReturnOrderNumber.Length > 35)
                error.AppendLine("Value for ReturnReceiptHeadPackingMaterialDoc.ReturnOrderNumber too long, max 35 chars");

            (fStmt.Parameters["ReturnOrderNumber"] as IDbDataParameter).Value = p.ReturnOrderNumber;
        }
        else
            (fStmt.Parameters["ReturnOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReturnOrderSequence != null)
        {
            (fStmt.Parameters["ReturnOrderSequence"] as IDbDataParameter).Value = p.ReturnOrderSequence;
        }
        else
            (fStmt.Parameters["ReturnOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReturnOrderSubSequence != null)
        {
            (fStmt.Parameters["ReturnOrderSubSequence"] as IDbDataParameter).Value = p.ReturnOrderSubSequence;
        }
        else
            (fStmt.Parameters["ReturnOrderSubSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipDate != null)
        {
            (fStmt.Parameters["ShipDate"] as IDbDataParameter).Value = p.ShipDate;
        }
        else
            (fStmt.Parameters["ShipDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductIdentity != null)
        {
            if (p.ProductIdentity.Length > 35)
                error.AppendLine("Value for ReturnReceiptHeadPackingMaterialDoc.ProductIdentity too long, max 35 chars");

            (fStmt.Parameters["ProductIdentity"] as IDbDataParameter).Value = p.ProductIdentity;
        }
        else
            (fStmt.Parameters["ProductIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PickQuantity != null)
        {
            (fStmt.Parameters["PickQuantity"] as IDbDataParameter).Value = p.PickQuantity;
        }
        else
            (fStmt.Parameters["PickQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SpontaneousReturn != null)
        {
            if (p.SpontaneousReturn.Length > 1)
                error.AppendLine("Value for ReturnReceiptHeadPackingMaterialDoc.SpontaneousReturn too long, max 1 chars");

            (fStmt.Parameters["SpontaneousReturn"] as IDbDataParameter).Value = p.SpontaneousReturn;
        }
        else
            (fStmt.Parameters["SpontaneousReturn"] as IDbDataParameter).Value = DBNull.Value;

        if (p.WarehouseIdentity != null)
        {
            if (p.WarehouseIdentity.Length > 4)
                error.AppendLine("Value for ReturnReceiptHeadPackingMaterialDoc.WarehouseIdentity too long, max 4 chars");

            (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = p.WarehouseIdentity;
        }
        else
            (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class ReturnReceiptLineInsert : SegmentImpl
  {

    public ReturnReceiptLineInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_RETURN_RECEIPT_LINE ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",ReturnOrderNumber");
        s.Append(",ReturnOrderSequence");
        s.Append(",ReturnOrderSubSequence");
        s.Append(",ShipDate");
        s.Append(",ReturnOrderLinePosition");
        s.Append(",ReturnOrderLineSequence");
        s.Append(",ProductIdentity");
        s.Append(",PackageIdentity");
        s.Append(",ProductionLotIdentity");
        s.Append(",ProductionSubLotIdentity");
        s.Append(",MarketingLotIdentity");
        s.Append(",PickQuantity");
        s.Append(",Qtyback");
        s.Append(",Qtycancel");
        s.Append(",QtySurplusPick");
        s.Append(",InventoryStatusCode");
        s.Append(",MeasuredQty");
        s.Append(",OwnerIdentity");
        s.Append(",SerialNumber");
        s.Append(",PickOrderLineIdentity");
        s.Append(",ItemLoadIdentity");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:ReturnOrderNumber");
        s.Append(",:ReturnOrderSequence");
        s.Append(",:ReturnOrderSubSequence");
        s.Append(",:ShipDate");
        s.Append(",:ReturnOrderLinePosition");
        s.Append(",:ReturnOrderLineSequence");
        s.Append(",:ProductIdentity");
        s.Append(",:PackageIdentity");
        s.Append(",:ProductionLotIdentity");
        s.Append(",:ProductionSubLotIdentity");
        s.Append(",:MarketingLotIdentity");
        s.Append(",:PickQuantity");
        s.Append(",:Qtyback");
        s.Append(",:Qtycancel");
        s.Append(",:QtySurplusPick");
        s.Append(",:InventoryStatusCode");
        s.Append(",:MeasuredQty");
        s.Append(",:OwnerIdentity");
        s.Append(",:SerialNumber");
        s.Append(",:PickOrderLineIdentity");
        s.Append(",:ItemLoadIdentity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("ReturnOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("ReturnOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("ReturnOrderSubSequence", 2, 0));
        fStmt.Parameters.Add(DateParam("ShipDate"));
        fStmt.Parameters.Add(NumberParam("ReturnOrderLinePosition", 5, 0));
        fStmt.Parameters.Add(NumberParam("ReturnOrderLineSequence", 5, 0));
        fStmt.Parameters.Add(StringParam("ProductIdentity", 35));
        fStmt.Parameters.Add(StringParam("PackageIdentity", 17));
        fStmt.Parameters.Add(StringParam("ProductionLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("ProductionSubLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("MarketingLotIdentity", 20));
        fStmt.Parameters.Add(NumberParam("PickQuantity", 20, 6));
        fStmt.Parameters.Add(NumberParam("Qtyback", 20, 6));
        fStmt.Parameters.Add(NumberParam("Qtycancel", 20, 6));
        fStmt.Parameters.Add(NumberParam("QtySurplusPick", 20, 6));
        fStmt.Parameters.Add(StringParam("InventoryStatusCode", 8));
        fStmt.Parameters.Add(NumberParam("MeasuredQty", 20, 6));
        fStmt.Parameters.Add(StringParam("OwnerIdentity", 35));
        fStmt.Parameters.Add(StringParam("SerialNumber", 21));
        fStmt.Parameters.Add(StringParam("PickOrderLineIdentity", 35));
        fStmt.Parameters.Add(StringParam("ItemLoadIdentity", 35));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ReturnReceiptLineDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ReturnReceiptLineDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ReturnReceiptLineDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter ReturnReceiptLineDoc.OPCODE not allowed");


        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.ReturnOrderNumber != null)
        {
            if (p.ReturnOrderNumber.Length > 35)
                error.AppendLine("Value for ReturnReceiptLineDoc.ReturnOrderNumber too long, max 35 chars");

            (fStmt.Parameters["ReturnOrderNumber"] as IDbDataParameter).Value = p.ReturnOrderNumber;
        }
        else
            (fStmt.Parameters["ReturnOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReturnOrderSequence != null)
        {
            (fStmt.Parameters["ReturnOrderSequence"] as IDbDataParameter).Value = p.ReturnOrderSequence;
        }
        else
            (fStmt.Parameters["ReturnOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReturnOrderSubSequence != null)
        {
            (fStmt.Parameters["ReturnOrderSubSequence"] as IDbDataParameter).Value = p.ReturnOrderSubSequence;
        }
        else
            (fStmt.Parameters["ReturnOrderSubSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipDate != null)
        {
            (fStmt.Parameters["ShipDate"] as IDbDataParameter).Value = p.ShipDate;
        }
        else
            (fStmt.Parameters["ShipDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReturnOrderLinePosition != null)
        {
            (fStmt.Parameters["ReturnOrderLinePosition"] as IDbDataParameter).Value = p.ReturnOrderLinePosition;
        }
        else
            (fStmt.Parameters["ReturnOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReturnOrderLineSequence != null)
        {
            (fStmt.Parameters["ReturnOrderLineSequence"] as IDbDataParameter).Value = p.ReturnOrderLineSequence;
        }
        else
            (fStmt.Parameters["ReturnOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductIdentity != null)
        {
            if (p.ProductIdentity.Length > 35)
                error.AppendLine("Value for ReturnReceiptLineDoc.ProductIdentity too long, max 35 chars");

            (fStmt.Parameters["ProductIdentity"] as IDbDataParameter).Value = p.ProductIdentity;
        }
        else
            (fStmt.Parameters["ProductIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackageIdentity != null)
        {
            if (p.PackageIdentity.Length > 17)
                error.AppendLine("Value for ReturnReceiptLineDoc.PackageIdentity too long, max 17 chars");

            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
        }
        else
            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionLotIdentity != null)
        {
            if (p.ProductionLotIdentity.Length > 40)
                error.AppendLine("Value for ReturnReceiptLineDoc.ProductionLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = p.ProductionLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionSubLotIdentity != null)
        {
            if (p.ProductionSubLotIdentity.Length > 40)
                error.AppendLine("Value for ReturnReceiptLineDoc.ProductionSubLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = p.ProductionSubLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MarketingLotIdentity != null)
        {
            if (p.MarketingLotIdentity.Length > 20)
                error.AppendLine("Value for ReturnReceiptLineDoc.MarketingLotIdentity too long, max 20 chars");

            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = p.MarketingLotIdentity;
        }
        else
            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PickQuantity != null)
        {
            (fStmt.Parameters["PickQuantity"] as IDbDataParameter).Value = p.PickQuantity;
        }
        else
            (fStmt.Parameters["PickQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Qtyback != null)
        {
            (fStmt.Parameters["Qtyback"] as IDbDataParameter).Value = p.Qtyback;
        }
        else
            (fStmt.Parameters["Qtyback"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Qtycancel != null)
        {
            (fStmt.Parameters["Qtycancel"] as IDbDataParameter).Value = p.Qtycancel;
        }
        else
            (fStmt.Parameters["Qtycancel"] as IDbDataParameter).Value = DBNull.Value;

        if (p.QtySurplusPick != null)
        {
            (fStmt.Parameters["QtySurplusPick"] as IDbDataParameter).Value = p.QtySurplusPick;
        }
        else
            (fStmt.Parameters["QtySurplusPick"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventoryStatusCode != null)
        {
            if (p.InventoryStatusCode.Length > 8)
                error.AppendLine("Value for ReturnReceiptLineDoc.InventoryStatusCode too long, max 8 chars");

            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = p.InventoryStatusCode;
        }
        else
            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MeasuredQty != null)
        {
            (fStmt.Parameters["MeasuredQty"] as IDbDataParameter).Value = p.MeasuredQty;
        }
        else
            (fStmt.Parameters["MeasuredQty"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OwnerIdentity != null)
        {
            if (p.OwnerIdentity.Length > 35)
                error.AppendLine("Value for ReturnReceiptLineDoc.OwnerIdentity too long, max 35 chars");

            (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = p.OwnerIdentity;
        }
        else
            (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SerialNumber != null)
        {
            if (p.SerialNumber.Length > 21)
                error.AppendLine("Value for ReturnReceiptLineDoc.SerialNumber too long, max 21 chars");

            (fStmt.Parameters["SerialNumber"] as IDbDataParameter).Value = p.SerialNumber;
        }
        else
            (fStmt.Parameters["SerialNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PickOrderLineIdentity != null)
        {
            if (p.PickOrderLineIdentity.Length > 35)
                error.AppendLine("Value for ReturnReceiptLineDoc.PickOrderLineIdentity too long, max 35 chars");

            (fStmt.Parameters["PickOrderLineIdentity"] as IDbDataParameter).Value = p.PickOrderLineIdentity;
        }
        else
            (fStmt.Parameters["PickOrderLineIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ItemLoadIdentity != null)
        {
            if (p.ItemLoadIdentity.Length > 35)
                error.AppendLine("Value for ReturnReceiptLineDoc.ItemLoadIdentity too long, max 35 chars");

            (fStmt.Parameters["ItemLoadIdentity"] as IDbDataParameter).Value = p.ItemLoadIdentity;
        }
        else
            (fStmt.Parameters["ItemLoadIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class ASNHeadInsert : SegmentImpl
  {
    private ASNLoadCarrierInsert aASNLoadCarrierInsert;
    private ASNHeadTextInsert aASNHeadTextInsert;
    private ASNLineInsert aASNLineInsert;

    public ASNHeadInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_SHIPMENT_REPORT_HEAD ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",ASNIdentity");
        s.Append(",ASNSequenceNumber");
        s.Append(",ShipFromPartyNodeIdentity");
        s.Append(",ClientIdentity");
        s.Append(",ASNLevel");
        s.Append(",ShipDateTime");
        s.Append(",DocumentDateTime");
        s.Append(",DeliveryWindowFirst");
        s.Append(",DeliveryWindowLast");
        s.Append(",ScheduledArrivalDateTime");
        s.Append(",ShipFromPartyIdentity");
        s.Append(",ShipFromPartyQualifier");
        s.Append(",ShipToPartyNodeIdentity");
        s.Append(",ShipToPartyIdentity");
        s.Append(",ShipToPartyQualifier");
        s.Append(",ForwarderIdentity");
        s.Append(",Instructions");
        s.Append(",NumberOfLoadCarriers");
        s.Append(",VehicleIdentity");
        s.Append(",EstimatedVolume");
        s.Append(",VolumeUOMIdentity");
        s.Append(",BillOfLadingNumber");
        s.Append(",PackingSlipNumber");
        s.Append(",ShippedFromWarehouseIdentity");
        s.Append(",ShippedOnDepartureIdentity");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:ASNIdentity");
        s.Append(",:ASNSequenceNumber");
        s.Append(",:ShipFromPartyNodeIdentity");
        s.Append(",:ClientIdentity");
        s.Append(",:ASNLevel");
        s.Append(",:ShipDateTime");
        s.Append(",:DocumentDateTime");
        s.Append(",:DeliveryWindowFirst");
        s.Append(",:DeliveryWindowLast");
        s.Append(",:ScheduledArrivalDateTime");
        s.Append(",:ShipFromPartyIdentity");
        s.Append(",:ShipFromPartyQualifier");
        s.Append(",:ShipToPartyNodeIdentity");
        s.Append(",:ShipToPartyIdentity");
        s.Append(",:ShipToPartyQualifier");
        s.Append(",:ForwarderIdentity");
        s.Append(",:Instructions");
        s.Append(",:NumberOfLoadCarriers");
        s.Append(",:VehicleIdentity");
        s.Append(",:EstimatedVolume");
        s.Append(",:VolumeUOMIdentity");
        s.Append(",:BillOfLadingNumber");
        s.Append(",:PackingSlipNumber");
        s.Append(",:ShippedFromWarehouseIdentity");
        s.Append(",:ShippedOnDepartureIdentity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ASNIdentity", 35));
        fStmt.Parameters.Add(NumberParam("ASNSequenceNumber", 3, 0));
        fStmt.Parameters.Add(StringParam("ShipFromPartyNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("ASNLevel", 1));
        fStmt.Parameters.Add(DateParam("ShipDateTime"));
        fStmt.Parameters.Add(DateParam("DocumentDateTime"));
        fStmt.Parameters.Add(DateParam("DeliveryWindowFirst"));
        fStmt.Parameters.Add(DateParam("DeliveryWindowLast"));
        fStmt.Parameters.Add(DateParam("ScheduledArrivalDateTime"));
        fStmt.Parameters.Add(StringParam("ShipFromPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipFromPartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("ShipToPartyNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToPartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("ForwarderIdentity", 35));
        fStmt.Parameters.Add(StringParam("Instructions", 400));
        fStmt.Parameters.Add(NumberParam("NumberOfLoadCarriers", 8, 0));
        fStmt.Parameters.Add(StringParam("VehicleIdentity", 17));
        fStmt.Parameters.Add(NumberParam("EstimatedVolume", 19, 9));
        fStmt.Parameters.Add(StringParam("VolumeUOMIdentity", 17));
        fStmt.Parameters.Add(StringParam("BillOfLadingNumber", 35));
        fStmt.Parameters.Add(StringParam("PackingSlipNumber", 35));
        fStmt.Parameters.Add(StringParam("ShippedFromWarehouseIdentity", 4));
        fStmt.Parameters.Add(StringParam("ShippedOnDepartureIdentity", 35));

        fStmt.Prepare();

        aASNLoadCarrierInsert = new ASNLoadCarrierInsert(owner);
        aASNHeadTextInsert = new ASNHeadTextInsert(owner);
        aASNLineInsert = new ASNLineInsert(owner);
    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ASNHeadDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ASNHeadDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ASNHeadDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter ASNHeadDoc.OPCODE not allowed");


        if (p.ASNIdentity != null)
        {
            if (p.ASNIdentity.Length > 35)
                error.AppendLine("Value for ASNHeadDoc.ASNIdentity too long, max 35 chars");

            (fStmt.Parameters["ASNIdentity"] as IDbDataParameter).Value = p.ASNIdentity;
        }
        else
            (fStmt.Parameters["ASNIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ASNSequenceNumber != null)
        {
            (fStmt.Parameters["ASNSequenceNumber"] as IDbDataParameter).Value = p.ASNSequenceNumber;
        }
        else
            (fStmt.Parameters["ASNSequenceNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromPartyNodeIdentity != null)
        {
            if (p.ShipFromPartyNodeIdentity.Length > 35)
                error.AppendLine("Value for ASNHeadDoc.ShipFromPartyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipFromPartyNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.ASNLevel != null)
        {
            if (p.ASNLevel.Length > 1)
                error.AppendLine("Value for ASNHeadDoc.ASNLevel too long, max 1 chars");

            (fStmt.Parameters["ASNLevel"] as IDbDataParameter).Value = p.ASNLevel;
        }
        else
            (fStmt.Parameters["ASNLevel"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipDateTime != null)
        {
            (fStmt.Parameters["ShipDateTime"] as IDbDataParameter).Value = p.ShipDateTime;
        }
        else
            (fStmt.Parameters["ShipDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DocumentDateTime != null)
        {
            (fStmt.Parameters["DocumentDateTime"] as IDbDataParameter).Value = p.DocumentDateTime;
        }
        else
            (fStmt.Parameters["DocumentDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveryWindowFirst != null)
        {
            (fStmt.Parameters["DeliveryWindowFirst"] as IDbDataParameter).Value = p.DeliveryWindowFirst;
        }
        else
            (fStmt.Parameters["DeliveryWindowFirst"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveryWindowLast != null)
        {
            (fStmt.Parameters["DeliveryWindowLast"] as IDbDataParameter).Value = p.DeliveryWindowLast;
        }
        else
            (fStmt.Parameters["DeliveryWindowLast"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ScheduledArrivalDateTime != null)
        {
            (fStmt.Parameters["ScheduledArrivalDateTime"] as IDbDataParameter).Value = p.ScheduledArrivalDateTime;
        }
        else
            (fStmt.Parameters["ScheduledArrivalDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromPartyIdentity != null)
        {
            if (p.ShipFromPartyIdentity.Length > 35)
                error.AppendLine("Value for ASNHeadDoc.ShipFromPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = p.ShipFromPartyIdentity;
        }
        else
            (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromPartyQualifier != null)
        {
            if (p.ShipFromPartyQualifier.Length > 3)
                error.AppendLine("Value for ASNHeadDoc.ShipFromPartyQualifier too long, max 3 chars");

            (fStmt.Parameters["ShipFromPartyQualifier"] as IDbDataParameter).Value = p.ShipFromPartyQualifier;
        }
        else
            (fStmt.Parameters["ShipFromPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyNodeIdentity != null)
        {
            if (p.ShipToPartyNodeIdentity.Length > 35)
                error.AppendLine("Value for ASNHeadDoc.ShipToPartyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipToPartyNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyIdentity != null)
        {
            if (p.ShipToPartyIdentity.Length > 35)
                error.AppendLine("Value for ASNHeadDoc.ShipToPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = p.ShipToPartyIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyQualifier != null)
        {
            if (p.ShipToPartyQualifier.Length > 3)
                error.AppendLine("Value for ASNHeadDoc.ShipToPartyQualifier too long, max 3 chars");

            (fStmt.Parameters["ShipToPartyQualifier"] as IDbDataParameter).Value = p.ShipToPartyQualifier;
        }
        else
            (fStmt.Parameters["ShipToPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ForwarderIdentity != null)
        {
            if (p.ForwarderIdentity.Length > 35)
                error.AppendLine("Value for ASNHeadDoc.ForwarderIdentity too long, max 35 chars");

            (fStmt.Parameters["ForwarderIdentity"] as IDbDataParameter).Value = p.ForwarderIdentity;
        }
        else
            (fStmt.Parameters["ForwarderIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Instructions != null)
        {
            if (p.Instructions.Length > 400)
                error.AppendLine("Value for ASNHeadDoc.Instructions too long, max 400 chars");

            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = p.Instructions;
        }
        else
            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = DBNull.Value;

        if (p.NumberOfLoadCarriers != null)
        {
            (fStmt.Parameters["NumberOfLoadCarriers"] as IDbDataParameter).Value = p.NumberOfLoadCarriers;
        }
        else
            (fStmt.Parameters["NumberOfLoadCarriers"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VehicleIdentity != null)
        {
            if (p.VehicleIdentity.Length > 17)
                error.AppendLine("Value for ASNHeadDoc.VehicleIdentity too long, max 17 chars");

            (fStmt.Parameters["VehicleIdentity"] as IDbDataParameter).Value = p.VehicleIdentity;
        }
        else
            (fStmt.Parameters["VehicleIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.EstimatedVolume != null)
        {
            (fStmt.Parameters["EstimatedVolume"] as IDbDataParameter).Value = p.EstimatedVolume;
        }
        else
            (fStmt.Parameters["EstimatedVolume"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VolumeUOMIdentity != null)
        {
            if (p.VolumeUOMIdentity.Length > 17)
                error.AppendLine("Value for ASNHeadDoc.VolumeUOMIdentity too long, max 17 chars");

            (fStmt.Parameters["VolumeUOMIdentity"] as IDbDataParameter).Value = p.VolumeUOMIdentity;
        }
        else
            (fStmt.Parameters["VolumeUOMIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.BillOfLadingNumber != null)
        {
            if (p.BillOfLadingNumber.Length > 35)
                error.AppendLine("Value for ASNHeadDoc.BillOfLadingNumber too long, max 35 chars");

            (fStmt.Parameters["BillOfLadingNumber"] as IDbDataParameter).Value = p.BillOfLadingNumber;
        }
        else
            (fStmt.Parameters["BillOfLadingNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackingSlipNumber != null)
        {
            if (p.PackingSlipNumber.Length > 35)
                error.AppendLine("Value for ASNHeadDoc.PackingSlipNumber too long, max 35 chars");

            (fStmt.Parameters["PackingSlipNumber"] as IDbDataParameter).Value = p.PackingSlipNumber;
        }
        else
            (fStmt.Parameters["PackingSlipNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShippedFromWarehouseIdentity != null)
        {
            if (p.ShippedFromWarehouseIdentity.Length > 4)
                error.AppendLine("Value for ASNHeadDoc.ShippedFromWarehouseIdentity too long, max 4 chars");

            (fStmt.Parameters["ShippedFromWarehouseIdentity"] as IDbDataParameter).Value = p.ShippedFromWarehouseIdentity;
        }
        else
            (fStmt.Parameters["ShippedFromWarehouseIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShippedOnDepartureIdentity != null)
        {
            if (p.ShippedOnDepartureIdentity.Length > 35)
                error.AppendLine("Value for ASNHeadDoc.ShippedOnDepartureIdentity too long, max 35 chars");

            (fStmt.Parameters["ShippedOnDepartureIdentity"] as IDbDataParameter).Value = p.ShippedOnDepartureIdentity;
        }
        else
            (fStmt.Parameters["ShippedOnDepartureIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

        if (p.aASNLoadCarrierDocs != null)
            foreach (ASNLoadCarrierDoc c in p.aASNLoadCarrierDocs)
                aASNLoadCarrierInsert.Process(ref trans, this, c);
        if (p.aASNHeadTextDocs != null)
            foreach (ASNHeadTextDoc d in p.aASNHeadTextDocs)
                aASNHeadTextInsert.Process(ref trans, this, d);
        if (p.aASNLineDocs != null)
            foreach (ASNLineDoc e in p.aASNLineDocs)
                aASNLineInsert.Process(ref trans, this, e);
      }
  }

  public class ASNLoadCarrierInsert : SegmentImpl
  {

    public ASNLoadCarrierInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_SHIPMENT_REPORT_CARRIER ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",ASNIdentity");
        s.Append(",ASNSequenceNumber");
        s.Append(",ShipFromPartyNodeIdentity");
        s.Append(",LoadCarrierIdentity");
        s.Append(",LoadCarrierQualifier");
        s.Append(",ClientIdentity");
        s.Append(",LoadCarrierType");
        s.Append(",ExternalLoadCarrierType");
        s.Append(",ParentLoadCarrierIdentity");
        s.Append(",ProductTransportIdentity");
        s.Append(",ShipFromPartyIdentity");
        s.Append(",ShipToPartyNodeIdentity");
        s.Append(",ShipToPartyIdentity");
        s.Append(",ShipToPartyQualifier");
        s.Append(",ShipToCustomerNodeIdentity");
        s.Append(",ShipToCustomerIdentity");
        s.Append(",ShipToCustomerQualifier");
        s.Append(",Instructions");
        s.Append(",TotalWeight");
        s.Append(",WeightUOMIdentity");
        s.Append(",TotalVolume");
        s.Append(",VolumeUOMIdentity");
        s.Append(",TotalHeight");
        s.Append(",HeightUOMIdentity");
        s.Append(",FirstPlannedDeliveryDtm");
        s.Append(",LastPlannedDeliveryDtm");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:ASNIdentity");
        s.Append(",:ASNSequenceNumber");
        s.Append(",:ShipFromPartyNodeIdentity");
        s.Append(",:LoadCarrierIdentity");
        s.Append(",:LoadCarrierQualifier");
        s.Append(",:ClientIdentity");
        s.Append(",:LoadCarrierType");
        s.Append(",:ExternalLoadCarrierType");
        s.Append(",:ParentLoadCarrierIdentity");
        s.Append(",:ProductTransportIdentity");
        s.Append(",:ShipFromPartyIdentity");
        s.Append(",:ShipToPartyNodeIdentity");
        s.Append(",:ShipToPartyIdentity");
        s.Append(",:ShipToPartyQualifier");
        s.Append(",:ShipToCustomerNodeIdentity");
        s.Append(",:ShipToCustomerIdentity");
        s.Append(",:ShipToCustomerQualifier");
        s.Append(",:Instructions");
        s.Append(",:TotalWeight");
        s.Append(",:WeightUOMIdentity");
        s.Append(",:TotalVolume");
        s.Append(",:VolumeUOMIdentity");
        s.Append(",:TotalHeight");
        s.Append(",:HeightUOMIdentity");
        s.Append(",:FirstPlannedDeliveryDtm");
        s.Append(",:LastPlannedDeliveryDtm");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ASNIdentity", 35));
        fStmt.Parameters.Add(NumberParam("ASNSequenceNumber", 3, 0));
        fStmt.Parameters.Add(StringParam("ShipFromPartyNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("LoadCarrierIdentity", 35));
        fStmt.Parameters.Add(StringParam("LoadCarrierQualifier", 4));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("LoadCarrierType", 20));
        fStmt.Parameters.Add(StringParam("ExternalLoadCarrierType", 20));
        fStmt.Parameters.Add(StringParam("ParentLoadCarrierIdentity", 35));
        fStmt.Parameters.Add(StringParam("ProductTransportIdentity", 5));
        fStmt.Parameters.Add(StringParam("ShipFromPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToPartyNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToPartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("ShipToCustomerNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomerIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomerQualifier", 3));
        fStmt.Parameters.Add(StringParam("Instructions", 400));
        fStmt.Parameters.Add(NumberParam("TotalWeight", 16, 6));
        fStmt.Parameters.Add(StringParam("WeightUOMIdentity", 17));
        fStmt.Parameters.Add(NumberParam("TotalVolume", 19, 9));
        fStmt.Parameters.Add(StringParam("VolumeUOMIdentity", 17));
        fStmt.Parameters.Add(NumberParam("TotalHeight", 9, 4));
        fStmt.Parameters.Add(StringParam("HeightUOMIdentity", 17));
        fStmt.Parameters.Add(DateParam("FirstPlannedDeliveryDtm"));
        fStmt.Parameters.Add(DateParam("LastPlannedDeliveryDtm"));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ASNLoadCarrierDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ASNLoadCarrierDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ASNLoadCarrierDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter ASNLoadCarrierDoc.OPCODE not allowed");


        if (p.ASNIdentity != null)
        {
            if (p.ASNIdentity.Length > 35)
                error.AppendLine("Value for ASNLoadCarrierDoc.ASNIdentity too long, max 35 chars");

            (fStmt.Parameters["ASNIdentity"] as IDbDataParameter).Value = p.ASNIdentity;
        }
        else
            (fStmt.Parameters["ASNIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ASNSequenceNumber != null)
        {
            (fStmt.Parameters["ASNSequenceNumber"] as IDbDataParameter).Value = p.ASNSequenceNumber;
        }
        else
            (fStmt.Parameters["ASNSequenceNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromPartyNodeIdentity != null)
        {
            if (p.ShipFromPartyNodeIdentity.Length > 35)
                error.AppendLine("Value for ASNLoadCarrierDoc.ShipFromPartyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipFromPartyNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LoadCarrierIdentity != null)
        {
            if (p.LoadCarrierIdentity.Length > 35)
                error.AppendLine("Value for ASNLoadCarrierDoc.LoadCarrierIdentity too long, max 35 chars");

            (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = p.LoadCarrierIdentity;
        }
        else
            (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LoadCarrierQualifier != null)
        {
            if (p.LoadCarrierQualifier.Length > 4)
                error.AppendLine("Value for ASNLoadCarrierDoc.LoadCarrierQualifier too long, max 4 chars");

            (fStmt.Parameters["LoadCarrierQualifier"] as IDbDataParameter).Value = p.LoadCarrierQualifier;
        }
        else
            (fStmt.Parameters["LoadCarrierQualifier"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.LoadCarrierType != null)
        {
            if (p.LoadCarrierType.Length > 20)
                error.AppendLine("Value for ASNLoadCarrierDoc.LoadCarrierType too long, max 20 chars");

            (fStmt.Parameters["LoadCarrierType"] as IDbDataParameter).Value = p.LoadCarrierType;
        }
        else
            (fStmt.Parameters["LoadCarrierType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ExternalLoadCarrierType != null)
        {
            if (p.ExternalLoadCarrierType.Length > 20)
                error.AppendLine("Value for ASNLoadCarrierDoc.ExternalLoadCarrierType too long, max 20 chars");

            (fStmt.Parameters["ExternalLoadCarrierType"] as IDbDataParameter).Value = p.ExternalLoadCarrierType;
        }
        else
            (fStmt.Parameters["ExternalLoadCarrierType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ParentLoadCarrierIdentity != null)
        {
            if (p.ParentLoadCarrierIdentity.Length > 35)
                error.AppendLine("Value for ASNLoadCarrierDoc.ParentLoadCarrierIdentity too long, max 35 chars");

            (fStmt.Parameters["ParentLoadCarrierIdentity"] as IDbDataParameter).Value = p.ParentLoadCarrierIdentity;
        }
        else
            (fStmt.Parameters["ParentLoadCarrierIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductTransportIdentity != null)
        {
            if (p.ProductTransportIdentity.Length > 5)
                error.AppendLine("Value for ASNLoadCarrierDoc.ProductTransportIdentity too long, max 5 chars");

            (fStmt.Parameters["ProductTransportIdentity"] as IDbDataParameter).Value = p.ProductTransportIdentity;
        }
        else
            (fStmt.Parameters["ProductTransportIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromPartyIdentity != null)
        {
            if (p.ShipFromPartyIdentity.Length > 35)
                error.AppendLine("Value for ASNLoadCarrierDoc.ShipFromPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = p.ShipFromPartyIdentity;
        }
        else
            (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyNodeIdentity != null)
        {
            if (p.ShipToPartyNodeIdentity.Length > 35)
                error.AppendLine("Value for ASNLoadCarrierDoc.ShipToPartyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipToPartyNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyIdentity != null)
        {
            if (p.ShipToPartyIdentity.Length > 35)
                error.AppendLine("Value for ASNLoadCarrierDoc.ShipToPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = p.ShipToPartyIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyQualifier != null)
        {
            if (p.ShipToPartyQualifier.Length > 3)
                error.AppendLine("Value for ASNLoadCarrierDoc.ShipToPartyQualifier too long, max 3 chars");

            (fStmt.Parameters["ShipToPartyQualifier"] as IDbDataParameter).Value = p.ShipToPartyQualifier;
        }
        else
            (fStmt.Parameters["ShipToPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomerNodeIdentity != null)
        {
            if (p.ShipToCustomerNodeIdentity.Length > 35)
                error.AppendLine("Value for ASNLoadCarrierDoc.ShipToCustomerNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToCustomerNodeIdentity"] as IDbDataParameter).Value = p.ShipToCustomerNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipToCustomerNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomerIdentity != null)
        {
            if (p.ShipToCustomerIdentity.Length > 35)
                error.AppendLine("Value for ASNLoadCarrierDoc.ShipToCustomerIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToCustomerIdentity"] as IDbDataParameter).Value = p.ShipToCustomerIdentity;
        }
        else
            (fStmt.Parameters["ShipToCustomerIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomerQualifier != null)
        {
            if (p.ShipToCustomerQualifier.Length > 3)
                error.AppendLine("Value for ASNLoadCarrierDoc.ShipToCustomerQualifier too long, max 3 chars");

            (fStmt.Parameters["ShipToCustomerQualifier"] as IDbDataParameter).Value = p.ShipToCustomerQualifier;
        }
        else
            (fStmt.Parameters["ShipToCustomerQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Instructions != null)
        {
            if (p.Instructions.Length > 400)
                error.AppendLine("Value for ASNLoadCarrierDoc.Instructions too long, max 400 chars");

            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = p.Instructions;
        }
        else
            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TotalWeight != null)
        {
            (fStmt.Parameters["TotalWeight"] as IDbDataParameter).Value = p.TotalWeight;
        }
        else
            (fStmt.Parameters["TotalWeight"] as IDbDataParameter).Value = DBNull.Value;

        if (p.WeightUOMIdentity != null)
        {
            if (p.WeightUOMIdentity.Length > 17)
                error.AppendLine("Value for ASNLoadCarrierDoc.WeightUOMIdentity too long, max 17 chars");

            (fStmt.Parameters["WeightUOMIdentity"] as IDbDataParameter).Value = p.WeightUOMIdentity;
        }
        else
            (fStmt.Parameters["WeightUOMIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TotalVolume != null)
        {
            (fStmt.Parameters["TotalVolume"] as IDbDataParameter).Value = p.TotalVolume;
        }
        else
            (fStmt.Parameters["TotalVolume"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VolumeUOMIdentity != null)
        {
            if (p.VolumeUOMIdentity.Length > 17)
                error.AppendLine("Value for ASNLoadCarrierDoc.VolumeUOMIdentity too long, max 17 chars");

            (fStmt.Parameters["VolumeUOMIdentity"] as IDbDataParameter).Value = p.VolumeUOMIdentity;
        }
        else
            (fStmt.Parameters["VolumeUOMIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TotalHeight != null)
        {
            (fStmt.Parameters["TotalHeight"] as IDbDataParameter).Value = p.TotalHeight;
        }
        else
            (fStmt.Parameters["TotalHeight"] as IDbDataParameter).Value = DBNull.Value;

        if (p.HeightUOMIdentity != null)
        {
            if (p.HeightUOMIdentity.Length > 17)
                error.AppendLine("Value for ASNLoadCarrierDoc.HeightUOMIdentity too long, max 17 chars");

            (fStmt.Parameters["HeightUOMIdentity"] as IDbDataParameter).Value = p.HeightUOMIdentity;
        }
        else
            (fStmt.Parameters["HeightUOMIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FirstPlannedDeliveryDtm != null)
        {
            (fStmt.Parameters["FirstPlannedDeliveryDtm"] as IDbDataParameter).Value = p.FirstPlannedDeliveryDtm;
        }
        else
            (fStmt.Parameters["FirstPlannedDeliveryDtm"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LastPlannedDeliveryDtm != null)
        {
            (fStmt.Parameters["LastPlannedDeliveryDtm"] as IDbDataParameter).Value = p.LastPlannedDeliveryDtm;
        }
        else
            (fStmt.Parameters["LastPlannedDeliveryDtm"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class ASNHeadTextInsert : SegmentImpl
  {

    public ASNHeadTextInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_SHIPMENT_REPORT_HEAD_TEXT ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",ASNIdentity");
        s.Append(",ASNSequenceNumber");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderSequence");
        s.Append(",TextFunction");
        s.Append(",Text");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:ASNIdentity");
        s.Append(",:ASNSequenceNumber");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderSequence");
        s.Append(",:TextFunction");
        s.Append(",:Text");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ASNIdentity", 35));
        fStmt.Parameters.Add(NumberParam("ASNSequenceNumber", 3, 0));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("TextFunction", 3));
        fStmt.Parameters.Add(StringParam("Text", 400));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ASNHeadTextDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ASNHeadTextDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ASNHeadTextDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter ASNHeadTextDoc.OPCODE not allowed");


        if (p.ASNIdentity != null)
        {
            if (p.ASNIdentity.Length > 35)
                error.AppendLine("Value for ASNHeadTextDoc.ASNIdentity too long, max 35 chars");

            (fStmt.Parameters["ASNIdentity"] as IDbDataParameter).Value = p.ASNIdentity;
        }
        else
            (fStmt.Parameters["ASNIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ASNSequenceNumber != null)
        {
            (fStmt.Parameters["ASNSequenceNumber"] as IDbDataParameter).Value = p.ASNSequenceNumber;
        }
        else
            (fStmt.Parameters["ASNSequenceNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for ASNHeadTextDoc.CustomerOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TextFunction != null)
        {
            if (p.TextFunction.Length > 3)
                error.AppendLine("Value for ASNHeadTextDoc.TextFunction too long, max 3 chars");

            (fStmt.Parameters["TextFunction"] as IDbDataParameter).Value = p.TextFunction;
        }
        else
            (fStmt.Parameters["TextFunction"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Text != null)
        {
            if (p.Text.Length > 400)
                error.AppendLine("Value for ASNHeadTextDoc.Text too long, max 400 chars");

            (fStmt.Parameters["Text"] as IDbDataParameter).Value = p.Text;
        }
        else
            (fStmt.Parameters["Text"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class ASNLineInsert : SegmentImpl
  {
    private ASNLineTextInsert aASNLineTextInsert;

    public ASNLineInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_SHIPMENT_REPORT_LINE ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",ASNIdentity");
        s.Append(",ASNSequenceNumber");
        s.Append(",ShipFromPartyNodeIdentity");
        s.Append(",ASNLineNumber");
        s.Append(",ASNLineSequenceNumber");
        s.Append(",LoadCarrierIdentity");
        s.Append(",ClientIdentity");
        s.Append(",ShipFromPartyIdentity");
        s.Append(",ShipToPartyNodeIdentity");
        s.Append(",ShipToPartyIdentity");
        s.Append(",ShipToPartyQualifier");
        s.Append(",ShipToCustomerNodeIdentity");
        s.Append(",ShipToCustomerIdentity");
        s.Append(",ShipToCustomerQualifier");
        s.Append(",SellToCustomerIdentity");
        s.Append(",SellToCustomerQualifier");
        s.Append(",OwnerIdentity");
        s.Append(",OwnerIdentityAtShipToCustomer");
        s.Append(",VendorIdentity");
        s.Append(",VendorPartyNodeIdentity");
        s.Append(",ProductNumber");
        s.Append(",ProductDescription");
        s.Append(",ProductNumberType");
        s.Append(",AlternativeProductNumber");
        s.Append(",AlternativeProductDescription");
        s.Append(",ProductDate");
        s.Append(",ExpiryDate");
        s.Append(",ManufacturingDate");
        s.Append(",VendorProductNumber");
        s.Append(",PurchasePrice");
        s.Append(",PackageIdentity");
        s.Append(",ProductionLotIdentity");
        s.Append(",ProductionSubLotIdentity");
        s.Append(",ManufacturingUnit");
        s.Append(",MarketingLotIdentity");
        s.Append(",SerialNumber");
        s.Append(",StorageLot");
        s.Append(",ShippedQuantity");
        s.Append(",MeasuredQuantity");
        s.Append(",MeasureQualifier");
        s.Append(",Volume");
        s.Append(",VolumeUOMIdentity");
        s.Append(",Weight");
        s.Append(",WeightUOMIdentity");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderSequence");
        s.Append(",CustomerOrderLinePosition");
        s.Append(",CustomerOrderLineSequence");
        s.Append(",CustomerOrderLineKitPosition");
        s.Append(",OriginalPurchaseOrderNumber");
        s.Append(",OriginalPurchaseOrderSequence");
        s.Append(",OriginalPurchaseOrderLinePos");
        s.Append(",OriginalPurchaseOrderLineSeq");
        s.Append(",OriginalCustomerReference");
        s.Append(",InventoryStatusCode");
        s.Append(",InventoryStatusDays");
        s.Append(",InventorystatusKey");
        s.Append(",InventorystatusText");
        s.Append(",InventorystatusAlarmDate");
        s.Append(",Instructions");
        s.Append(",PredefinedItemLoadIdentity");
        s.Append(",ProductNumberShipFromPartner");
        s.Append(",ProductNumberShipToPartner");
        s.Append(",GlobalProductNumber");
        s.Append(",PackingMaterial");
        s.Append(",CustomerOrderType");
        s.Append(",PurchaseOrderNumber");
        s.Append(",PurchaseOrderSequence");
        s.Append(",PurchaseOrderLinePos");
        s.Append(",PurchaseOrderLineSeq");
        s.Append(",StockedProductNumber");
        s.Append(",GlobalStockedProductNumber");
        s.Append(",FromPartyIdentity");
        s.Append(",FromPartyQualifier");
        s.Append(",CustomerReturnOrderNumber");
        s.Append(",CustomerReturnOrderSequence");
        s.Append(",CustomerReturnOrderLinePos");
        s.Append(",CustomerReturnOrderLineKitPos");
        s.Append(",CustomerReturnOrderLineSeq");
        s.Append(",ActionCode");
        s.Append(",ActionCodeRequirement");
        s.Append(",ReasonCode");
        s.Append(",ReasonText");
        s.Append(",ShipToVendorIdentity");
        s.Append(",ShipToVendorQualifier");
        s.Append(",DiscrepancyQuantity");
        s.Append(",DiscrepancyCode");
        s.Append(",DiscrepancyText");
        s.Append(",QuantityUpperTolerance");
        s.Append(",CatchMeasureLowerTolerance");
        s.Append(",CatchMeasureUpperTolerance");
        s.Append(",ReserveForAssembly");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:ASNIdentity");
        s.Append(",:ASNSequenceNumber");
        s.Append(",:ShipFromPartyNodeIdentity");
        s.Append(",:ASNLineNumber");
        s.Append(",:ASNLineSequenceNumber");
        s.Append(",:LoadCarrierIdentity");
        s.Append(",:ClientIdentity");
        s.Append(",:ShipFromPartyIdentity");
        s.Append(",:ShipToPartyNodeIdentity");
        s.Append(",:ShipToPartyIdentity");
        s.Append(",:ShipToPartyQualifier");
        s.Append(",:ShipToCustomerNodeIdentity");
        s.Append(",:ShipToCustomerIdentity");
        s.Append(",:ShipToCustomerQualifier");
        s.Append(",:SellToCustomerIdentity");
        s.Append(",:SellToCustomerQualifier");
        s.Append(",:OwnerIdentity");
        s.Append(",:OwnerIdentityAtShipToCustomer");
        s.Append(",:VendorIdentity");
        s.Append(",:VendorPartyNodeIdentity");
        s.Append(",:ProductNumber");
        s.Append(",:ProductDescription");
        s.Append(",:ProductNumberType");
        s.Append(",:AlternativeProductNumber");
        s.Append(",:AlternativeProductDescription");
        s.Append(",:ProductDate");
        s.Append(",:ExpiryDate");
        s.Append(",:ManufacturingDate");
        s.Append(",:VendorProductNumber");
        s.Append(",:PurchasePrice");
        s.Append(",:PackageIdentity");
        s.Append(",:ProductionLotIdentity");
        s.Append(",:ProductionSubLotIdentity");
        s.Append(",:ManufacturingUnit");
        s.Append(",:MarketingLotIdentity");
        s.Append(",:SerialNumber");
        s.Append(",:StorageLot");
        s.Append(",:ShippedQuantity");
        s.Append(",:MeasuredQuantity");
        s.Append(",:MeasureQualifier");
        s.Append(",:Volume");
        s.Append(",:VolumeUOMIdentity");
        s.Append(",:Weight");
        s.Append(",:WeightUOMIdentity");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderSequence");
        s.Append(",:CustomerOrderLinePosition");
        s.Append(",:CustomerOrderLineSequence");
        s.Append(",:CustomerOrderLineKitPosition");
        s.Append(",:OriginalPurchaseOrderNumber");
        s.Append(",:OriginalPurchaseOrderSequence");
        s.Append(",:OriginalPurchaseOrderLinePos");
        s.Append(",:OriginalPurchaseOrderLineSeq");
        s.Append(",:OriginalCustomerReference");
        s.Append(",:InventoryStatusCode");
        s.Append(",:InventoryStatusDays");
        s.Append(",:InventorystatusKey");
        s.Append(",:InventorystatusText");
        s.Append(",:InventorystatusAlarmDate");
        s.Append(",:Instructions");
        s.Append(",:PredefinedItemLoadIdentity");
        s.Append(",:ProductNumberShipFromPartner");
        s.Append(",:ProductNumberShipToPartner");
        s.Append(",:GlobalProductNumber");
        s.Append(",:PackingMaterial");
        s.Append(",:CustomerOrderType");
        s.Append(",:PurchaseOrderNumber");
        s.Append(",:PurchaseOrderSequence");
        s.Append(",:PurchaseOrderLinePos");
        s.Append(",:PurchaseOrderLineSeq");
        s.Append(",:StockedProductNumber");
        s.Append(",:GlobalStockedProductNumber");
        s.Append(",:FromPartyIdentity");
        s.Append(",:FromPartyQualifier");
        s.Append(",:CustomerReturnOrderNumber");
        s.Append(",:CustomerReturnOrderSequence");
        s.Append(",:CustomerReturnOrderLinePos");
        s.Append(",:CustomerReturnOrderLineKitPos");
        s.Append(",:CustomerReturnOrderLineSeq");
        s.Append(",:ActionCode");
        s.Append(",:ActionCodeRequirement");
        s.Append(",:ReasonCode");
        s.Append(",:ReasonText");
        s.Append(",:ShipToVendorIdentity");
        s.Append(",:ShipToVendorQualifier");
        s.Append(",:DiscrepancyQuantity");
        s.Append(",:DiscrepancyCode");
        s.Append(",:DiscrepancyText");
        s.Append(",:QuantityUpperTolerance");
        s.Append(",:CatchMeasureLowerTolerance");
        s.Append(",:CatchMeasureUpperTolerance");
        s.Append(",:ReserveForAssembly");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ASNIdentity", 35));
        fStmt.Parameters.Add(NumberParam("ASNSequenceNumber", 3, 0));
        fStmt.Parameters.Add(StringParam("ShipFromPartyNodeIdentity", 35));
        fStmt.Parameters.Add(NumberParam("ASNLineNumber", 5, 0));
        fStmt.Parameters.Add(NumberParam("ASNLineSequenceNumber", 3, 0));
        fStmt.Parameters.Add(StringParam("LoadCarrierIdentity", 35));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("ShipFromPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToPartyNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToPartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("ShipToCustomerNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomerIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomerQualifier", 3));
        fStmt.Parameters.Add(StringParam("SellToCustomerIdentity", 35));
        fStmt.Parameters.Add(StringParam("SellToCustomerQualifier", 3));
        fStmt.Parameters.Add(StringParam("OwnerIdentity", 35));
        fStmt.Parameters.Add(StringParam("OwnerIdentityAtShipToCustomer", 35));
        fStmt.Parameters.Add(StringParam("VendorIdentity", 35));
        fStmt.Parameters.Add(StringParam("VendorPartyNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ProductNumber", 35));
        fStmt.Parameters.Add(StringParam("ProductDescription", 256));
        fStmt.Parameters.Add(StringParam("ProductNumberType", 1));
        fStmt.Parameters.Add(StringParam("AlternativeProductNumber", 35));
        fStmt.Parameters.Add(StringParam("AlternativeProductDescription", 256));
        fStmt.Parameters.Add(DateParam("ProductDate"));
        fStmt.Parameters.Add(DateParam("ExpiryDate"));
        fStmt.Parameters.Add(DateParam("ManufacturingDate"));
        fStmt.Parameters.Add(StringParam("VendorProductNumber", 35));
        fStmt.Parameters.Add(NumberParam("PurchasePrice", 22, 7));
        fStmt.Parameters.Add(StringParam("PackageIdentity", 17));
        fStmt.Parameters.Add(StringParam("ProductionLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("ProductionSubLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("ManufacturingUnit", 20));
        fStmt.Parameters.Add(StringParam("MarketingLotIdentity", 20));
        fStmt.Parameters.Add(StringParam("SerialNumber", 21));
        fStmt.Parameters.Add(StringParam("StorageLot", 20));
        fStmt.Parameters.Add(NumberParam("ShippedQuantity", 20, 6));
        fStmt.Parameters.Add(NumberParam("MeasuredQuantity", 20, 6));
        fStmt.Parameters.Add(StringParam("MeasureQualifier", 4));
        fStmt.Parameters.Add(NumberParam("Volume", 16, 6));
        fStmt.Parameters.Add(StringParam("VolumeUOMIdentity", 17));
        fStmt.Parameters.Add(NumberParam("Weight", 16, 6));
        fStmt.Parameters.Add(StringParam("WeightUOMIdentity", 17));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLinePosition", 5, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineKitPosition", 2, 0));
        fStmt.Parameters.Add(StringParam("OriginalPurchaseOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("OriginalPurchaseOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("OriginalPurchaseOrderLinePos", 16, 0));
        fStmt.Parameters.Add(NumberParam("OriginalPurchaseOrderLineSeq", 3, 0));
        fStmt.Parameters.Add(StringParam("OriginalCustomerReference", 35));
        fStmt.Parameters.Add(StringParam("InventoryStatusCode", 8));
        fStmt.Parameters.Add(NumberParam("InventoryStatusDays", 5, 0));
        fStmt.Parameters.Add(StringParam("InventorystatusKey", 12));
        fStmt.Parameters.Add(StringParam("InventorystatusText", 200));
        fStmt.Parameters.Add(DateParam("InventorystatusAlarmDate"));
        fStmt.Parameters.Add(StringParam("Instructions", 400));
        fStmt.Parameters.Add(StringParam("PredefinedItemLoadIdentity", 35));
        fStmt.Parameters.Add(StringParam("ProductNumberShipFromPartner", 35));
        fStmt.Parameters.Add(StringParam("ProductNumberShipToPartner", 35));
        fStmt.Parameters.Add(StringParam("GlobalProductNumber", 35));
        fStmt.Parameters.Add(StringParam("PackingMaterial", 1));
        fStmt.Parameters.Add(StringParam("CustomerOrderType", 2));
        fStmt.Parameters.Add(StringParam("PurchaseOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderLinePos", 4, 0));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderLineSeq", 3, 0));
        fStmt.Parameters.Add(StringParam("StockedProductNumber", 35));
        fStmt.Parameters.Add(StringParam("GlobalStockedProductNumber", 20));
        fStmt.Parameters.Add(StringParam("FromPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("FromPartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("CustomerReturnOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLinePos", 5, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineKitPos", 2, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineSeq", 3, 0));
        fStmt.Parameters.Add(StringParam("ActionCode", 2));
        fStmt.Parameters.Add(StringParam("ActionCodeRequirement", 1));
        fStmt.Parameters.Add(StringParam("ReasonCode", 2));
        fStmt.Parameters.Add(StringParam("ReasonText", 400));
        fStmt.Parameters.Add(StringParam("ShipToVendorIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToVendorQualifier", 3));
        fStmt.Parameters.Add(NumberParam("DiscrepancyQuantity", 20, 6));
        fStmt.Parameters.Add(StringParam("DiscrepancyCode", 3));
        fStmt.Parameters.Add(StringParam("DiscrepancyText", 35));
        fStmt.Parameters.Add(NumberParam("QuantityUpperTolerance", 20, 6));
        fStmt.Parameters.Add(NumberParam("CatchMeasureLowerTolerance", 20, 6));
        fStmt.Parameters.Add(NumberParam("CatchMeasureUpperTolerance", 20, 6));
        fStmt.Parameters.Add(StringParam("ReserveForAssembly", 1));

        fStmt.Prepare();

        aASNLineTextInsert = new ASNLineTextInsert(owner);
    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ASNLineDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ASNLineDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ASNLineDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter ASNLineDoc.OPCODE not allowed");


        if (p.ASNIdentity != null)
        {
            if (p.ASNIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.ASNIdentity too long, max 35 chars");

            (fStmt.Parameters["ASNIdentity"] as IDbDataParameter).Value = p.ASNIdentity;
        }
        else
            (fStmt.Parameters["ASNIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ASNSequenceNumber != null)
        {
            (fStmt.Parameters["ASNSequenceNumber"] as IDbDataParameter).Value = p.ASNSequenceNumber;
        }
        else
            (fStmt.Parameters["ASNSequenceNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromPartyNodeIdentity != null)
        {
            if (p.ShipFromPartyNodeIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.ShipFromPartyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipFromPartyNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ASNLineNumber != null)
        {
            (fStmt.Parameters["ASNLineNumber"] as IDbDataParameter).Value = p.ASNLineNumber;
        }
        else
            (fStmt.Parameters["ASNLineNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ASNLineSequenceNumber != null)
        {
            (fStmt.Parameters["ASNLineSequenceNumber"] as IDbDataParameter).Value = p.ASNLineSequenceNumber;
        }
        else
            (fStmt.Parameters["ASNLineSequenceNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LoadCarrierIdentity != null)
        {
            if (p.LoadCarrierIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.LoadCarrierIdentity too long, max 35 chars");

            (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = p.LoadCarrierIdentity;
        }
        else
            (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.ShipFromPartyIdentity != null)
        {
            if (p.ShipFromPartyIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.ShipFromPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = p.ShipFromPartyIdentity;
        }
        else
            (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyNodeIdentity != null)
        {
            if (p.ShipToPartyNodeIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.ShipToPartyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipToPartyNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyIdentity != null)
        {
            if (p.ShipToPartyIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.ShipToPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = p.ShipToPartyIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyQualifier != null)
        {
            if (p.ShipToPartyQualifier.Length > 3)
                error.AppendLine("Value for ASNLineDoc.ShipToPartyQualifier too long, max 3 chars");

            (fStmt.Parameters["ShipToPartyQualifier"] as IDbDataParameter).Value = p.ShipToPartyQualifier;
        }
        else
            (fStmt.Parameters["ShipToPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomerNodeIdentity != null)
        {
            if (p.ShipToCustomerNodeIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.ShipToCustomerNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToCustomerNodeIdentity"] as IDbDataParameter).Value = p.ShipToCustomerNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipToCustomerNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomerIdentity != null)
        {
            if (p.ShipToCustomerIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.ShipToCustomerIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToCustomerIdentity"] as IDbDataParameter).Value = p.ShipToCustomerIdentity;
        }
        else
            (fStmt.Parameters["ShipToCustomerIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomerQualifier != null)
        {
            if (p.ShipToCustomerQualifier.Length > 3)
                error.AppendLine("Value for ASNLineDoc.ShipToCustomerQualifier too long, max 3 chars");

            (fStmt.Parameters["ShipToCustomerQualifier"] as IDbDataParameter).Value = p.ShipToCustomerQualifier;
        }
        else
            (fStmt.Parameters["ShipToCustomerQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SellToCustomerIdentity != null)
        {
            if (p.SellToCustomerIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.SellToCustomerIdentity too long, max 35 chars");

            (fStmt.Parameters["SellToCustomerIdentity"] as IDbDataParameter).Value = p.SellToCustomerIdentity;
        }
        else
            (fStmt.Parameters["SellToCustomerIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SellToCustomerQualifier != null)
        {
            if (p.SellToCustomerQualifier.Length > 3)
                error.AppendLine("Value for ASNLineDoc.SellToCustomerQualifier too long, max 3 chars");

            (fStmt.Parameters["SellToCustomerQualifier"] as IDbDataParameter).Value = p.SellToCustomerQualifier;
        }
        else
            (fStmt.Parameters["SellToCustomerQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OwnerIdentity != null)
        {
            if (p.OwnerIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.OwnerIdentity too long, max 35 chars");

            (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = p.OwnerIdentity;
        }
        else
            (fStmt.Parameters["OwnerIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OwnerIdentityAtShipToCustomer != null)
        {
            if (p.OwnerIdentityAtShipToCustomer.Length > 35)
                error.AppendLine("Value for ASNLineDoc.OwnerIdentityAtShipToCustomer too long, max 35 chars");

            (fStmt.Parameters["OwnerIdentityAtShipToCustomer"] as IDbDataParameter).Value = p.OwnerIdentityAtShipToCustomer;
        }
        else
            (fStmt.Parameters["OwnerIdentityAtShipToCustomer"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VendorIdentity != null)
        {
            if (p.VendorIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.VendorIdentity too long, max 35 chars");

            (fStmt.Parameters["VendorIdentity"] as IDbDataParameter).Value = p.VendorIdentity;
        }
        else
            (fStmt.Parameters["VendorIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VendorPartyNodeIdentity != null)
        {
            if (p.VendorPartyNodeIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.VendorPartyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["VendorPartyNodeIdentity"] as IDbDataParameter).Value = p.VendorPartyNodeIdentity;
        }
        else
            (fStmt.Parameters["VendorPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductNumber != null)
        {
            if (p.ProductNumber.Length > 35)
                error.AppendLine("Value for ASNLineDoc.ProductNumber too long, max 35 chars");

            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
        }
        else
            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductDescription != null)
        {
            if (p.ProductDescription.Length > 256)
                error.AppendLine("Value for ASNLineDoc.ProductDescription too long, max 256 chars");

            (fStmt.Parameters["ProductDescription"] as IDbDataParameter).Value = p.ProductDescription;
        }
        else
            (fStmt.Parameters["ProductDescription"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductNumberType != null)
        {
            if (p.ProductNumberType.Length > 1)
                error.AppendLine("Value for ASNLineDoc.ProductNumberType too long, max 1 chars");

            (fStmt.Parameters["ProductNumberType"] as IDbDataParameter).Value = p.ProductNumberType;
        }
        else
            (fStmt.Parameters["ProductNumberType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.AlternativeProductNumber != null)
        {
            if (p.AlternativeProductNumber.Length > 35)
                error.AppendLine("Value for ASNLineDoc.AlternativeProductNumber too long, max 35 chars");

            (fStmt.Parameters["AlternativeProductNumber"] as IDbDataParameter).Value = p.AlternativeProductNumber;
        }
        else
            (fStmt.Parameters["AlternativeProductNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.AlternativeProductDescription != null)
        {
            if (p.AlternativeProductDescription.Length > 256)
                error.AppendLine("Value for ASNLineDoc.AlternativeProductDescription too long, max 256 chars");

            (fStmt.Parameters["AlternativeProductDescription"] as IDbDataParameter).Value = p.AlternativeProductDescription;
        }
        else
            (fStmt.Parameters["AlternativeProductDescription"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductDate != null)
        {
            (fStmt.Parameters["ProductDate"] as IDbDataParameter).Value = p.ProductDate;
        }
        else
            (fStmt.Parameters["ProductDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ExpiryDate != null)
        {
            (fStmt.Parameters["ExpiryDate"] as IDbDataParameter).Value = p.ExpiryDate;
        }
        else
            (fStmt.Parameters["ExpiryDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ManufacturingDate != null)
        {
            (fStmt.Parameters["ManufacturingDate"] as IDbDataParameter).Value = p.ManufacturingDate;
        }
        else
            (fStmt.Parameters["ManufacturingDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VendorProductNumber != null)
        {
            if (p.VendorProductNumber.Length > 35)
                error.AppendLine("Value for ASNLineDoc.VendorProductNumber too long, max 35 chars");

            (fStmt.Parameters["VendorProductNumber"] as IDbDataParameter).Value = p.VendorProductNumber;
        }
        else
            (fStmt.Parameters["VendorProductNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchasePrice != null)
        {
            (fStmt.Parameters["PurchasePrice"] as IDbDataParameter).Value = p.PurchasePrice;
        }
        else
            (fStmt.Parameters["PurchasePrice"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackageIdentity != null)
        {
            if (p.PackageIdentity.Length > 17)
                error.AppendLine("Value for ASNLineDoc.PackageIdentity too long, max 17 chars");

            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
        }
        else
            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionLotIdentity != null)
        {
            if (p.ProductionLotIdentity.Length > 40)
                error.AppendLine("Value for ASNLineDoc.ProductionLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = p.ProductionLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionSubLotIdentity != null)
        {
            if (p.ProductionSubLotIdentity.Length > 40)
                error.AppendLine("Value for ASNLineDoc.ProductionSubLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = p.ProductionSubLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ManufacturingUnit != null)
        {
            if (p.ManufacturingUnit.Length > 20)
                error.AppendLine("Value for ASNLineDoc.ManufacturingUnit too long, max 20 chars");

            (fStmt.Parameters["ManufacturingUnit"] as IDbDataParameter).Value = p.ManufacturingUnit;
        }
        else
            (fStmt.Parameters["ManufacturingUnit"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MarketingLotIdentity != null)
        {
            if (p.MarketingLotIdentity.Length > 20)
                error.AppendLine("Value for ASNLineDoc.MarketingLotIdentity too long, max 20 chars");

            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = p.MarketingLotIdentity;
        }
        else
            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SerialNumber != null)
        {
            if (p.SerialNumber.Length > 21)
                error.AppendLine("Value for ASNLineDoc.SerialNumber too long, max 21 chars");

            (fStmt.Parameters["SerialNumber"] as IDbDataParameter).Value = p.SerialNumber;
        }
        else
            (fStmt.Parameters["SerialNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.StorageLot != null)
        {
            if (p.StorageLot.Length > 20)
                error.AppendLine("Value for ASNLineDoc.StorageLot too long, max 20 chars");

            (fStmt.Parameters["StorageLot"] as IDbDataParameter).Value = p.StorageLot;
        }
        else
            (fStmt.Parameters["StorageLot"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShippedQuantity != null)
        {
            (fStmt.Parameters["ShippedQuantity"] as IDbDataParameter).Value = p.ShippedQuantity;
        }
        else
            (fStmt.Parameters["ShippedQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MeasuredQuantity != null)
        {
            (fStmt.Parameters["MeasuredQuantity"] as IDbDataParameter).Value = p.MeasuredQuantity;
        }
        else
            (fStmt.Parameters["MeasuredQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MeasureQualifier != null)
        {
            if (p.MeasureQualifier.Length > 4)
                error.AppendLine("Value for ASNLineDoc.MeasureQualifier too long, max 4 chars");

            (fStmt.Parameters["MeasureQualifier"] as IDbDataParameter).Value = p.MeasureQualifier;
        }
        else
            (fStmt.Parameters["MeasureQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Volume != null)
        {
            (fStmt.Parameters["Volume"] as IDbDataParameter).Value = p.Volume;
        }
        else
            (fStmt.Parameters["Volume"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VolumeUOMIdentity != null)
        {
            if (p.VolumeUOMIdentity.Length > 17)
                error.AppendLine("Value for ASNLineDoc.VolumeUOMIdentity too long, max 17 chars");

            (fStmt.Parameters["VolumeUOMIdentity"] as IDbDataParameter).Value = p.VolumeUOMIdentity;
        }
        else
            (fStmt.Parameters["VolumeUOMIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Weight != null)
        {
            (fStmt.Parameters["Weight"] as IDbDataParameter).Value = p.Weight;
        }
        else
            (fStmt.Parameters["Weight"] as IDbDataParameter).Value = DBNull.Value;

        if (p.WeightUOMIdentity != null)
        {
            if (p.WeightUOMIdentity.Length > 17)
                error.AppendLine("Value for ASNLineDoc.WeightUOMIdentity too long, max 17 chars");

            (fStmt.Parameters["WeightUOMIdentity"] as IDbDataParameter).Value = p.WeightUOMIdentity;
        }
        else
            (fStmt.Parameters["WeightUOMIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for ASNLineDoc.CustomerOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLinePosition != null)
        {
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = p.CustomerOrderLinePosition;
        }
        else
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLineSequence != null)
        {
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = p.CustomerOrderLineSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLineKitPosition != null)
        {
            (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = p.CustomerOrderLineKitPosition;
        }
        else
            (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OriginalPurchaseOrderNumber != null)
        {
            if (p.OriginalPurchaseOrderNumber.Length > 35)
                error.AppendLine("Value for ASNLineDoc.OriginalPurchaseOrderNumber too long, max 35 chars");

            (fStmt.Parameters["OriginalPurchaseOrderNumber"] as IDbDataParameter).Value = p.OriginalPurchaseOrderNumber;
        }
        else
            (fStmt.Parameters["OriginalPurchaseOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OriginalPurchaseOrderSequence != null)
        {
            (fStmt.Parameters["OriginalPurchaseOrderSequence"] as IDbDataParameter).Value = p.OriginalPurchaseOrderSequence;
        }
        else
            (fStmt.Parameters["OriginalPurchaseOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OriginalPurchaseOrderLinePos != null)
        {
            (fStmt.Parameters["OriginalPurchaseOrderLinePos"] as IDbDataParameter).Value = p.OriginalPurchaseOrderLinePos;
        }
        else
            (fStmt.Parameters["OriginalPurchaseOrderLinePos"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OriginalPurchaseOrderLineSeq != null)
        {
            (fStmt.Parameters["OriginalPurchaseOrderLineSeq"] as IDbDataParameter).Value = p.OriginalPurchaseOrderLineSeq;
        }
        else
            (fStmt.Parameters["OriginalPurchaseOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OriginalCustomerReference != null)
        {
            if (p.OriginalCustomerReference.Length > 35)
                error.AppendLine("Value for ASNLineDoc.OriginalCustomerReference too long, max 35 chars");

            (fStmt.Parameters["OriginalCustomerReference"] as IDbDataParameter).Value = p.OriginalCustomerReference;
        }
        else
            (fStmt.Parameters["OriginalCustomerReference"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventoryStatusCode != null)
        {
            if (p.InventoryStatusCode.Length > 8)
                error.AppendLine("Value for ASNLineDoc.InventoryStatusCode too long, max 8 chars");

            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = p.InventoryStatusCode;
        }
        else
            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventoryStatusDays != null)
        {
            (fStmt.Parameters["InventoryStatusDays"] as IDbDataParameter).Value = p.InventoryStatusDays;
        }
        else
            (fStmt.Parameters["InventoryStatusDays"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventorystatusKey != null)
        {
            if (p.InventorystatusKey.Length > 12)
                error.AppendLine("Value for ASNLineDoc.InventorystatusKey too long, max 12 chars");

            (fStmt.Parameters["InventorystatusKey"] as IDbDataParameter).Value = p.InventorystatusKey;
        }
        else
            (fStmt.Parameters["InventorystatusKey"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventorystatusText != null)
        {
            if (p.InventorystatusText.Length > 200)
                error.AppendLine("Value for ASNLineDoc.InventorystatusText too long, max 200 chars");

            (fStmt.Parameters["InventorystatusText"] as IDbDataParameter).Value = p.InventorystatusText;
        }
        else
            (fStmt.Parameters["InventorystatusText"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventorystatusAlarmDate != null)
        {
            (fStmt.Parameters["InventorystatusAlarmDate"] as IDbDataParameter).Value = p.InventorystatusAlarmDate;
        }
        else
            (fStmt.Parameters["InventorystatusAlarmDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Instructions != null)
        {
            if (p.Instructions.Length > 400)
                error.AppendLine("Value for ASNLineDoc.Instructions too long, max 400 chars");

            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = p.Instructions;
        }
        else
            (fStmt.Parameters["Instructions"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PredefinedItemLoadIdentity != null)
        {
            if (p.PredefinedItemLoadIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.PredefinedItemLoadIdentity too long, max 35 chars");

            (fStmt.Parameters["PredefinedItemLoadIdentity"] as IDbDataParameter).Value = p.PredefinedItemLoadIdentity;
        }
        else
            (fStmt.Parameters["PredefinedItemLoadIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductNumberShipFromPartner != null)
        {
            if (p.ProductNumberShipFromPartner.Length > 35)
                error.AppendLine("Value for ASNLineDoc.ProductNumberShipFromPartner too long, max 35 chars");

            (fStmt.Parameters["ProductNumberShipFromPartner"] as IDbDataParameter).Value = p.ProductNumberShipFromPartner;
        }
        else
            (fStmt.Parameters["ProductNumberShipFromPartner"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductNumberShipToPartner != null)
        {
            if (p.ProductNumberShipToPartner.Length > 35)
                error.AppendLine("Value for ASNLineDoc.ProductNumberShipToPartner too long, max 35 chars");

            (fStmt.Parameters["ProductNumberShipToPartner"] as IDbDataParameter).Value = p.ProductNumberShipToPartner;
        }
        else
            (fStmt.Parameters["ProductNumberShipToPartner"] as IDbDataParameter).Value = DBNull.Value;

        if (p.GlobalProductNumber != null)
        {
            if (p.GlobalProductNumber.Length > 35)
                error.AppendLine("Value for ASNLineDoc.GlobalProductNumber too long, max 35 chars");

            (fStmt.Parameters["GlobalProductNumber"] as IDbDataParameter).Value = p.GlobalProductNumber;
        }
        else
            (fStmt.Parameters["GlobalProductNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackingMaterial != null)
        {
            if (p.PackingMaterial.Length > 1)
                error.AppendLine("Value for ASNLineDoc.PackingMaterial too long, max 1 chars");

            (fStmt.Parameters["PackingMaterial"] as IDbDataParameter).Value = p.PackingMaterial;
        }
        else
            (fStmt.Parameters["PackingMaterial"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderType != null)
        {
            if (p.CustomerOrderType.Length > 2)
                error.AppendLine("Value for ASNLineDoc.CustomerOrderType too long, max 2 chars");

            (fStmt.Parameters["CustomerOrderType"] as IDbDataParameter).Value = p.CustomerOrderType;
        }
        else
            (fStmt.Parameters["CustomerOrderType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderNumber != null)
        {
            if (p.PurchaseOrderNumber.Length > 35)
                error.AppendLine("Value for ASNLineDoc.PurchaseOrderNumber too long, max 35 chars");

            (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = p.PurchaseOrderNumber;
        }
        else
            (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderSequence != null)
        {
            (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = p.PurchaseOrderSequence;
        }
        else
            (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderLinePos != null)
        {
            (fStmt.Parameters["PurchaseOrderLinePos"] as IDbDataParameter).Value = p.PurchaseOrderLinePos;
        }
        else
            (fStmt.Parameters["PurchaseOrderLinePos"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderLineSeq != null)
        {
            (fStmt.Parameters["PurchaseOrderLineSeq"] as IDbDataParameter).Value = p.PurchaseOrderLineSeq;
        }
        else
            (fStmt.Parameters["PurchaseOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

        if (p.StockedProductNumber != null)
        {
            if (p.StockedProductNumber.Length > 35)
                error.AppendLine("Value for ASNLineDoc.StockedProductNumber too long, max 35 chars");

            (fStmt.Parameters["StockedProductNumber"] as IDbDataParameter).Value = p.StockedProductNumber;
        }
        else
            (fStmt.Parameters["StockedProductNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.GlobalStockedProductNumber != null)
        {
            if (p.GlobalStockedProductNumber.Length > 20)
                error.AppendLine("Value for ASNLineDoc.GlobalStockedProductNumber too long, max 20 chars");

            (fStmt.Parameters["GlobalStockedProductNumber"] as IDbDataParameter).Value = p.GlobalStockedProductNumber;
        }
        else
            (fStmt.Parameters["GlobalStockedProductNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FromPartyIdentity != null)
        {
            if (p.FromPartyIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.FromPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["FromPartyIdentity"] as IDbDataParameter).Value = p.FromPartyIdentity;
        }
        else
            (fStmt.Parameters["FromPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FromPartyQualifier != null)
        {
            if (p.FromPartyQualifier.Length > 3)
                error.AppendLine("Value for ASNLineDoc.FromPartyQualifier too long, max 3 chars");

            (fStmt.Parameters["FromPartyQualifier"] as IDbDataParameter).Value = p.FromPartyQualifier;
        }
        else
            (fStmt.Parameters["FromPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderNumber != null)
        {
            if (p.CustomerReturnOrderNumber.Length > 35)
                error.AppendLine("Value for ASNLineDoc.CustomerReturnOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = p.CustomerReturnOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderSequence != null)
        {
            (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = p.CustomerReturnOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLinePos != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = p.CustomerReturnOrderLinePos;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLineKitPos != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = p.CustomerReturnOrderLineKitPos;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLineSeq != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = p.CustomerReturnOrderLineSeq;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ActionCode != null)
        {
            if (p.ActionCode.Length > 2)
                error.AppendLine("Value for ASNLineDoc.ActionCode too long, max 2 chars");

            (fStmt.Parameters["ActionCode"] as IDbDataParameter).Value = p.ActionCode;
        }
        else
            (fStmt.Parameters["ActionCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ActionCodeRequirement != null)
        {
            if (p.ActionCodeRequirement.Length > 1)
                error.AppendLine("Value for ASNLineDoc.ActionCodeRequirement too long, max 1 chars");

            (fStmt.Parameters["ActionCodeRequirement"] as IDbDataParameter).Value = p.ActionCodeRequirement;
        }
        else
            (fStmt.Parameters["ActionCodeRequirement"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReasonCode != null)
        {
            if (p.ReasonCode.Length > 2)
                error.AppendLine("Value for ASNLineDoc.ReasonCode too long, max 2 chars");

            (fStmt.Parameters["ReasonCode"] as IDbDataParameter).Value = p.ReasonCode;
        }
        else
            (fStmt.Parameters["ReasonCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReasonText != null)
        {
            if (p.ReasonText.Length > 400)
                error.AppendLine("Value for ASNLineDoc.ReasonText too long, max 400 chars");

            (fStmt.Parameters["ReasonText"] as IDbDataParameter).Value = p.ReasonText;
        }
        else
            (fStmt.Parameters["ReasonText"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToVendorIdentity != null)
        {
            if (p.ShipToVendorIdentity.Length > 35)
                error.AppendLine("Value for ASNLineDoc.ShipToVendorIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToVendorIdentity"] as IDbDataParameter).Value = p.ShipToVendorIdentity;
        }
        else
            (fStmt.Parameters["ShipToVendorIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToVendorQualifier != null)
        {
            if (p.ShipToVendorQualifier.Length > 3)
                error.AppendLine("Value for ASNLineDoc.ShipToVendorQualifier too long, max 3 chars");

            (fStmt.Parameters["ShipToVendorQualifier"] as IDbDataParameter).Value = p.ShipToVendorQualifier;
        }
        else
            (fStmt.Parameters["ShipToVendorQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DiscrepancyQuantity != null)
        {
            (fStmt.Parameters["DiscrepancyQuantity"] as IDbDataParameter).Value = p.DiscrepancyQuantity;
        }
        else
            (fStmt.Parameters["DiscrepancyQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DiscrepancyCode != null)
        {
            if (p.DiscrepancyCode.Length > 3)
                error.AppendLine("Value for ASNLineDoc.DiscrepancyCode too long, max 3 chars");

            (fStmt.Parameters["DiscrepancyCode"] as IDbDataParameter).Value = p.DiscrepancyCode;
        }
        else
            (fStmt.Parameters["DiscrepancyCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DiscrepancyText != null)
        {
            if (p.DiscrepancyText.Length > 35)
                error.AppendLine("Value for ASNLineDoc.DiscrepancyText too long, max 35 chars");

            (fStmt.Parameters["DiscrepancyText"] as IDbDataParameter).Value = p.DiscrepancyText;
        }
        else
            (fStmt.Parameters["DiscrepancyText"] as IDbDataParameter).Value = DBNull.Value;

        if (p.QuantityUpperTolerance != null)
        {
            (fStmt.Parameters["QuantityUpperTolerance"] as IDbDataParameter).Value = p.QuantityUpperTolerance;
        }
        else
            (fStmt.Parameters["QuantityUpperTolerance"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CatchMeasureLowerTolerance != null)
        {
            (fStmt.Parameters["CatchMeasureLowerTolerance"] as IDbDataParameter).Value = p.CatchMeasureLowerTolerance;
        }
        else
            (fStmt.Parameters["CatchMeasureLowerTolerance"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CatchMeasureUpperTolerance != null)
        {
            (fStmt.Parameters["CatchMeasureUpperTolerance"] as IDbDataParameter).Value = p.CatchMeasureUpperTolerance;
        }
        else
            (fStmt.Parameters["CatchMeasureUpperTolerance"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReserveForAssembly != null)
        {
            if (p.ReserveForAssembly.Length > 1)
                error.AppendLine("Value for ASNLineDoc.ReserveForAssembly too long, max 1 chars");

            (fStmt.Parameters["ReserveForAssembly"] as IDbDataParameter).Value = p.ReserveForAssembly;
        }
        else
            (fStmt.Parameters["ReserveForAssembly"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

        if (p.aASNLineTextDocs != null)
            foreach (ASNLineTextDoc c in p.aASNLineTextDocs)
                aASNLineTextInsert.Process(ref trans, this, c);
      }
  }

  public class ASNLineTextInsert : SegmentImpl
  {

    public ASNLineTextInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_SHIPMENT_REPORT_LINE_TEXT ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",ASNIdentity");
        s.Append(",ASNSequenceNumber");
        s.Append(",ASNLineNumber");
        s.Append(",ASNLineSequenceNumber");
        s.Append(",TextFunction");
        s.Append(",Text");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:ASNIdentity");
        s.Append(",:ASNSequenceNumber");
        s.Append(",:ASNLineNumber");
        s.Append(",:ASNLineSequenceNumber");
        s.Append(",:TextFunction");
        s.Append(",:Text");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ASNIdentity", 35));
        fStmt.Parameters.Add(NumberParam("ASNSequenceNumber", 3, 0));
        fStmt.Parameters.Add(NumberParam("ASNLineNumber", 5, 0));
        fStmt.Parameters.Add(NumberParam("ASNLineSequenceNumber", 3, 0));
        fStmt.Parameters.Add(StringParam("TextFunction", 3));
        fStmt.Parameters.Add(StringParam("Text", 400));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ASNLineTextDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ASNLineTextDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ASNLineTextDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter ASNLineTextDoc.OPCODE not allowed");


        if (p.ASNIdentity != null)
        {
            if (p.ASNIdentity.Length > 35)
                error.AppendLine("Value for ASNLineTextDoc.ASNIdentity too long, max 35 chars");

            (fStmt.Parameters["ASNIdentity"] as IDbDataParameter).Value = p.ASNIdentity;
        }
        else
            (fStmt.Parameters["ASNIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ASNSequenceNumber != null)
        {
            (fStmt.Parameters["ASNSequenceNumber"] as IDbDataParameter).Value = p.ASNSequenceNumber;
        }
        else
            (fStmt.Parameters["ASNSequenceNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ASNLineNumber != null)
        {
            (fStmt.Parameters["ASNLineNumber"] as IDbDataParameter).Value = p.ASNLineNumber;
        }
        else
            (fStmt.Parameters["ASNLineNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ASNLineSequenceNumber != null)
        {
            (fStmt.Parameters["ASNLineSequenceNumber"] as IDbDataParameter).Value = p.ASNLineSequenceNumber;
        }
        else
            (fStmt.Parameters["ASNLineSequenceNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TextFunction != null)
        {
            if (p.TextFunction.Length > 3)
                error.AppendLine("Value for ASNLineTextDoc.TextFunction too long, max 3 chars");

            (fStmt.Parameters["TextFunction"] as IDbDataParameter).Value = p.TextFunction;
        }
        else
            (fStmt.Parameters["TextFunction"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Text != null)
        {
            if (p.Text.Length > 400)
                error.AppendLine("Value for ASNLineTextDoc.Text too long, max 400 chars");

            (fStmt.Parameters["Text"] as IDbDataParameter).Value = p.Text;
        }
        else
            (fStmt.Parameters["Text"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class ConfirmationOfReceiptHeadInsert : SegmentImpl
  {
    private ConfirmationOfReceiptLoadCarrierInsert aConfirmationOfReceiptLoadCarrierInsert;
    private ConfirmationOfReceiptLineInsert aConfirmationOfReceiptLineInsert;

    public ConfirmationOfReceiptHeadInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_CONF_OF_RECEIPT_HEAD ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",AcknowledgeInboundAsnIdentity");
        s.Append(",ArrivalDateTime");
        s.Append(",ShipToPartyNodeIdentity");
        s.Append(",ShipToPartyIdentity");
        s.Append(",ShipToPartyQualifier");
        s.Append(",ShipFromPartyNodeIdentity");
        s.Append(",ShipFromPartyIdentity");
        s.Append(",ShipFromPartyQualifier");
        s.Append(",InboundAsnIdentity");
        s.Append(",InboundAsnSequenceNumber");
        s.Append(",ClientIdentity");
        s.Append(",ForwarderIdentity");
        s.Append(",ReceiptType");
        s.Append(",PackingSlipNumber");
        s.Append(",BillOfLadingNumber");
        s.Append(",VehicleIdentity");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:AcknowledgeInboundAsnIdentity");
        s.Append(",:ArrivalDateTime");
        s.Append(",:ShipToPartyNodeIdentity");
        s.Append(",:ShipToPartyIdentity");
        s.Append(",:ShipToPartyQualifier");
        s.Append(",:ShipFromPartyNodeIdentity");
        s.Append(",:ShipFromPartyIdentity");
        s.Append(",:ShipFromPartyQualifier");
        s.Append(",:InboundAsnIdentity");
        s.Append(",:InboundAsnSequenceNumber");
        s.Append(",:ClientIdentity");
        s.Append(",:ForwarderIdentity");
        s.Append(",:ReceiptType");
        s.Append(",:PackingSlipNumber");
        s.Append(",:BillOfLadingNumber");
        s.Append(",:VehicleIdentity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("AcknowledgeInboundAsnIdentity", 35));
        fStmt.Parameters.Add(DateParam("ArrivalDateTime"));
        fStmt.Parameters.Add(StringParam("ShipToPartyNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToPartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("ShipFromPartyNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipFromPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipFromPartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("InboundAsnIdentity", 35));
        fStmt.Parameters.Add(NumberParam("InboundAsnSequenceNumber", 3, 0));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("ForwarderIdentity", 35));
        fStmt.Parameters.Add(StringParam("ReceiptType", 2));
        fStmt.Parameters.Add(StringParam("PackingSlipNumber", 35));
        fStmt.Parameters.Add(StringParam("BillOfLadingNumber", 35));
        fStmt.Parameters.Add(StringParam("VehicleIdentity", 17));

        fStmt.Prepare();

        aConfirmationOfReceiptLoadCarrierInsert = new ConfirmationOfReceiptLoadCarrierInsert(owner);
        aConfirmationOfReceiptLineInsert = new ConfirmationOfReceiptLineInsert(owner);
    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ConfirmationOfReceiptHeadDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ConfirmationOfReceiptHeadDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ConfirmationOfReceiptHeadDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter ConfirmationOfReceiptHeadDoc.OPCODE not allowed");


        if (p.AcknowledgeInboundAsnIdentity != null)
        {
            if (p.AcknowledgeInboundAsnIdentity.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptHeadDoc.AcknowledgeInboundAsnIdentity too long, max 35 chars");

            (fStmt.Parameters["AcknowledgeInboundAsnIdentity"] as IDbDataParameter).Value = p.AcknowledgeInboundAsnIdentity;
        }
        else
            (fStmt.Parameters["AcknowledgeInboundAsnIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ArrivalDateTime != null)
        {
            (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = p.ArrivalDateTime;
        }
        else
            (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyNodeIdentity != null)
        {
            if (p.ShipToPartyNodeIdentity.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptHeadDoc.ShipToPartyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipToPartyNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyIdentity != null)
        {
            if (p.ShipToPartyIdentity.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptHeadDoc.ShipToPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = p.ShipToPartyIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyQualifier != null)
        {
            if (p.ShipToPartyQualifier.Length > 3)
                error.AppendLine("Value for ConfirmationOfReceiptHeadDoc.ShipToPartyQualifier too long, max 3 chars");

            (fStmt.Parameters["ShipToPartyQualifier"] as IDbDataParameter).Value = p.ShipToPartyQualifier;
        }
        else
            (fStmt.Parameters["ShipToPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromPartyNodeIdentity != null)
        {
            if (p.ShipFromPartyNodeIdentity.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptHeadDoc.ShipFromPartyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipFromPartyNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromPartyIdentity != null)
        {
            if (p.ShipFromPartyIdentity.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptHeadDoc.ShipFromPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = p.ShipFromPartyIdentity;
        }
        else
            (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromPartyQualifier != null)
        {
            if (p.ShipFromPartyQualifier.Length > 3)
                error.AppendLine("Value for ConfirmationOfReceiptHeadDoc.ShipFromPartyQualifier too long, max 3 chars");

            (fStmt.Parameters["ShipFromPartyQualifier"] as IDbDataParameter).Value = p.ShipFromPartyQualifier;
        }
        else
            (fStmt.Parameters["ShipFromPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InboundAsnIdentity != null)
        {
            if (p.InboundAsnIdentity.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptHeadDoc.InboundAsnIdentity too long, max 35 chars");

            (fStmt.Parameters["InboundAsnIdentity"] as IDbDataParameter).Value = p.InboundAsnIdentity;
        }
        else
            (fStmt.Parameters["InboundAsnIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InboundAsnSequenceNumber != null)
        {
            (fStmt.Parameters["InboundAsnSequenceNumber"] as IDbDataParameter).Value = p.InboundAsnSequenceNumber;
        }
        else
            (fStmt.Parameters["InboundAsnSequenceNumber"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.ForwarderIdentity != null)
        {
            if (p.ForwarderIdentity.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptHeadDoc.ForwarderIdentity too long, max 35 chars");

            (fStmt.Parameters["ForwarderIdentity"] as IDbDataParameter).Value = p.ForwarderIdentity;
        }
        else
            (fStmt.Parameters["ForwarderIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReceiptType != null)
        {
            if (p.ReceiptType.Length > 2)
                error.AppendLine("Value for ConfirmationOfReceiptHeadDoc.ReceiptType too long, max 2 chars");

            (fStmt.Parameters["ReceiptType"] as IDbDataParameter).Value = p.ReceiptType;
        }
        else
            (fStmt.Parameters["ReceiptType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackingSlipNumber != null)
        {
            if (p.PackingSlipNumber.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptHeadDoc.PackingSlipNumber too long, max 35 chars");

            (fStmt.Parameters["PackingSlipNumber"] as IDbDataParameter).Value = p.PackingSlipNumber;
        }
        else
            (fStmt.Parameters["PackingSlipNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.BillOfLadingNumber != null)
        {
            if (p.BillOfLadingNumber.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptHeadDoc.BillOfLadingNumber too long, max 35 chars");

            (fStmt.Parameters["BillOfLadingNumber"] as IDbDataParameter).Value = p.BillOfLadingNumber;
        }
        else
            (fStmt.Parameters["BillOfLadingNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VehicleIdentity != null)
        {
            if (p.VehicleIdentity.Length > 17)
                error.AppendLine("Value for ConfirmationOfReceiptHeadDoc.VehicleIdentity too long, max 17 chars");

            (fStmt.Parameters["VehicleIdentity"] as IDbDataParameter).Value = p.VehicleIdentity;
        }
        else
            (fStmt.Parameters["VehicleIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

        if (p.aConfirmationOfReceiptLoadCarrierDocs != null)
            foreach (ConfirmationOfReceiptLoadCarrierDoc c in p.aConfirmationOfReceiptLoadCarrierDocs)
                aConfirmationOfReceiptLoadCarrierInsert.Process(ref trans, this, c);
        if (p.aConfirmationOfReceiptLineDocs != null)
            foreach (ConfirmationOfReceiptLineDoc d in p.aConfirmationOfReceiptLineDocs)
                aConfirmationOfReceiptLineInsert.Process(ref trans, this, d);
      }
  }

  public class ConfirmationOfReceiptLoadCarrierInsert : SegmentImpl
  {

    public ConfirmationOfReceiptLoadCarrierInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_CONF_OF_RECEIPT_CARRIER ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",AcknowledgeInboundAsnIdentity");
        s.Append(",LoadCarrierIdentity");
        s.Append(",ParentLoadCarrierIdentity");
        s.Append(",LoadCarrierQualifier");
        s.Append(",ArrivalDateTime");
        s.Append(",ShipToPartyNodeIdentity");
        s.Append(",ShipToPartyIdentity");
        s.Append(",ShipToPartyQualifier");
        s.Append(",ShipFromPartyNodeIdentity");
        s.Append(",ShipFromPartyIdentity");
        s.Append(",ShipFromPartyQualifier");
        s.Append(",InboundAsnIdentity");
        s.Append(",InboundAsnSequenceNumber");
        s.Append(",DeliveryIdentity");
        s.Append(",ClientIdentity");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:AcknowledgeInboundAsnIdentity");
        s.Append(",:LoadCarrierIdentity");
        s.Append(",:ParentLoadCarrierIdentity");
        s.Append(",:LoadCarrierQualifier");
        s.Append(",:ArrivalDateTime");
        s.Append(",:ShipToPartyNodeIdentity");
        s.Append(",:ShipToPartyIdentity");
        s.Append(",:ShipToPartyQualifier");
        s.Append(",:ShipFromPartyNodeIdentity");
        s.Append(",:ShipFromPartyIdentity");
        s.Append(",:ShipFromPartyQualifier");
        s.Append(",:InboundAsnIdentity");
        s.Append(",:InboundAsnSequenceNumber");
        s.Append(",:DeliveryIdentity");
        s.Append(",:ClientIdentity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("AcknowledgeInboundAsnIdentity", 35));
        fStmt.Parameters.Add(StringParam("LoadCarrierIdentity", 35));
        fStmt.Parameters.Add(StringParam("ParentLoadCarrierIdentity", 35));
        fStmt.Parameters.Add(StringParam("LoadCarrierQualifier", 4));
        fStmt.Parameters.Add(DateParam("ArrivalDateTime"));
        fStmt.Parameters.Add(StringParam("ShipToPartyNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToPartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("ShipFromPartyNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipFromPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipFromPartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("InboundAsnIdentity", 35));
        fStmt.Parameters.Add(NumberParam("InboundAsnSequenceNumber", 3, 0));
        fStmt.Parameters.Add(NumberParam("DeliveryIdentity", 8, 0));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ConfirmationOfReceiptLoadCarrierDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ConfirmationOfReceiptLoadCarrierDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ConfirmationOfReceiptLoadCarrierDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter ConfirmationOfReceiptLoadCarrierDoc.OPCODE not allowed");


        if (p.AcknowledgeInboundAsnIdentity != null)
        {
            if (p.AcknowledgeInboundAsnIdentity.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptLoadCarrierDoc.AcknowledgeInboundAsnIdentity too long, max 35 chars");

            (fStmt.Parameters["AcknowledgeInboundAsnIdentity"] as IDbDataParameter).Value = p.AcknowledgeInboundAsnIdentity;
        }
        else
            (fStmt.Parameters["AcknowledgeInboundAsnIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LoadCarrierIdentity != null)
        {
            if (p.LoadCarrierIdentity.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptLoadCarrierDoc.LoadCarrierIdentity too long, max 35 chars");

            (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = p.LoadCarrierIdentity;
        }
        else
            (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ParentLoadCarrierIdentity != null)
        {
            if (p.ParentLoadCarrierIdentity.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptLoadCarrierDoc.ParentLoadCarrierIdentity too long, max 35 chars");

            (fStmt.Parameters["ParentLoadCarrierIdentity"] as IDbDataParameter).Value = p.ParentLoadCarrierIdentity;
        }
        else
            (fStmt.Parameters["ParentLoadCarrierIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LoadCarrierQualifier != null)
        {
            if (p.LoadCarrierQualifier.Length > 4)
                error.AppendLine("Value for ConfirmationOfReceiptLoadCarrierDoc.LoadCarrierQualifier too long, max 4 chars");

            (fStmt.Parameters["LoadCarrierQualifier"] as IDbDataParameter).Value = p.LoadCarrierQualifier;
        }
        else
            (fStmt.Parameters["LoadCarrierQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ArrivalDateTime != null)
        {
            (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = p.ArrivalDateTime;
        }
        else
            (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyNodeIdentity != null)
        {
            if (p.ShipToPartyNodeIdentity.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptLoadCarrierDoc.ShipToPartyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipToPartyNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyIdentity != null)
        {
            if (p.ShipToPartyIdentity.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptLoadCarrierDoc.ShipToPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = p.ShipToPartyIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyQualifier != null)
        {
            if (p.ShipToPartyQualifier.Length > 3)
                error.AppendLine("Value for ConfirmationOfReceiptLoadCarrierDoc.ShipToPartyQualifier too long, max 3 chars");

            (fStmt.Parameters["ShipToPartyQualifier"] as IDbDataParameter).Value = p.ShipToPartyQualifier;
        }
        else
            (fStmt.Parameters["ShipToPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromPartyNodeIdentity != null)
        {
            if (p.ShipFromPartyNodeIdentity.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptLoadCarrierDoc.ShipFromPartyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipFromPartyNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromPartyIdentity != null)
        {
            if (p.ShipFromPartyIdentity.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptLoadCarrierDoc.ShipFromPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = p.ShipFromPartyIdentity;
        }
        else
            (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromPartyQualifier != null)
        {
            if (p.ShipFromPartyQualifier.Length > 3)
                error.AppendLine("Value for ConfirmationOfReceiptLoadCarrierDoc.ShipFromPartyQualifier too long, max 3 chars");

            (fStmt.Parameters["ShipFromPartyQualifier"] as IDbDataParameter).Value = p.ShipFromPartyQualifier;
        }
        else
            (fStmt.Parameters["ShipFromPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InboundAsnIdentity != null)
        {
            if (p.InboundAsnIdentity.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptLoadCarrierDoc.InboundAsnIdentity too long, max 35 chars");

            (fStmt.Parameters["InboundAsnIdentity"] as IDbDataParameter).Value = p.InboundAsnIdentity;
        }
        else
            (fStmt.Parameters["InboundAsnIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InboundAsnSequenceNumber != null)
        {
            (fStmt.Parameters["InboundAsnSequenceNumber"] as IDbDataParameter).Value = p.InboundAsnSequenceNumber;
        }
        else
            (fStmt.Parameters["InboundAsnSequenceNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveryIdentity != null)
        {
            (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = p.DeliveryIdentity;
        }
        else
            (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class ConfirmationOfReceiptLineInsert : SegmentImpl
  {

    public ConfirmationOfReceiptLineInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_CONF_OF_RECEIPT_LINE ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",AcknowledgeInboundAsnIdentity");
        s.Append(",AcknowledgeInboundAsnLinenum");
        s.Append(",ArrivalDateTime");
        s.Append(",ShipFromPartyNodeIdentity");
        s.Append(",ShipFromPartyIdentity");
        s.Append(",ShipFromPartyQualifier");
        s.Append(",InboundAsnIdentity");
        s.Append(",InboundAsnSequenceNumber");
        s.Append(",InboundAsnLineNumber");
        s.Append(",InboundAsnLineSequenceNumber");
        s.Append(",ProductNumber");
        s.Append(",ClientIdentity");
        s.Append(",AsnLineQuantity");
        s.Append(",ArrivedQuantity");
        s.Append(",ReceiptQuantity");
        s.Append(",PackageIdentity");
        s.Append(",ProductionLotIdentity");
        s.Append(",ProductionSubLotIdentity");
        s.Append(",SerialNumber");
        s.Append(",DeliveryIdentity");
        s.Append(",LoadCarrierIdentity");
        s.Append(",PurchaseOrderNumber");
        s.Append(",PurchaseOrderSequence");
        s.Append(",PurchaseOrderLinePos");
        s.Append(",PurchaseOrderLineSeq");
        s.Append(",CustomerOrderType");
        s.Append(",ExpiryDate");
        s.Append(",ManufacturingDate");
        s.Append(",InventoryStatusCode");
        s.Append(",MeasuredQuantity");
        s.Append(",MeasureQualifier");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderSequence");
        s.Append(",CustomerOrderLinePosition");
        s.Append(",CustomerOrderLineKitPosition");
        s.Append(",CustomerOrderLineSequence");
        s.Append(",ReturnsFinished");
        s.Append(",DecidedActionCode");
        s.Append(",FromPartyId");
        s.Append(",FromPartyQualifier");
        s.Append(",CustomerReturnOrderNumber");
        s.Append(",CustomerReturnOrderSequence");
        s.Append(",CustomerReturnOrderLinePos");
        s.Append(",CustomerReturnOrderLineKitPos");
        s.Append(",CustomerReturnOrderLineSeq");
        s.Append(",DiscrepancyCode");
        s.Append(",DiscrepancyActionCode");
        s.Append(",MarketingLotIdentity");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:AcknowledgeInboundAsnIdentity");
        s.Append(",:AcknowledgeInboundAsnLinenum");
        s.Append(",:ArrivalDateTime");
        s.Append(",:ShipFromPartyNodeIdentity");
        s.Append(",:ShipFromPartyIdentity");
        s.Append(",:ShipFromPartyQualifier");
        s.Append(",:InboundAsnIdentity");
        s.Append(",:InboundAsnSequenceNumber");
        s.Append(",:InboundAsnLineNumber");
        s.Append(",:InboundAsnLineSequenceNumber");
        s.Append(",:ProductNumber");
        s.Append(",:ClientIdentity");
        s.Append(",:AsnLineQuantity");
        s.Append(",:ArrivedQuantity");
        s.Append(",:ReceiptQuantity");
        s.Append(",:PackageIdentity");
        s.Append(",:ProductionLotIdentity");
        s.Append(",:ProductionSubLotIdentity");
        s.Append(",:SerialNumber");
        s.Append(",:DeliveryIdentity");
        s.Append(",:LoadCarrierIdentity");
        s.Append(",:PurchaseOrderNumber");
        s.Append(",:PurchaseOrderSequence");
        s.Append(",:PurchaseOrderLinePos");
        s.Append(",:PurchaseOrderLineSeq");
        s.Append(",:CustomerOrderType");
        s.Append(",:ExpiryDate");
        s.Append(",:ManufacturingDate");
        s.Append(",:InventoryStatusCode");
        s.Append(",:MeasuredQuantity");
        s.Append(",:MeasureQualifier");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderSequence");
        s.Append(",:CustomerOrderLinePosition");
        s.Append(",:CustomerOrderLineKitPosition");
        s.Append(",:CustomerOrderLineSequence");
        s.Append(",:ReturnsFinished");
        s.Append(",:DecidedActionCode");
        s.Append(",:FromPartyId");
        s.Append(",:FromPartyQualifier");
        s.Append(",:CustomerReturnOrderNumber");
        s.Append(",:CustomerReturnOrderSequence");
        s.Append(",:CustomerReturnOrderLinePos");
        s.Append(",:CustomerReturnOrderLineKitPos");
        s.Append(",:CustomerReturnOrderLineSeq");
        s.Append(",:DiscrepancyCode");
        s.Append(",:DiscrepancyActionCode");
        s.Append(",:MarketingLotIdentity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("AcknowledgeInboundAsnIdentity", 35));
        fStmt.Parameters.Add(NumberParam("AcknowledgeInboundAsnLinenum", 5, 0));
        fStmt.Parameters.Add(DateParam("ArrivalDateTime"));
        fStmt.Parameters.Add(StringParam("ShipFromPartyNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipFromPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipFromPartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("InboundAsnIdentity", 35));
        fStmt.Parameters.Add(NumberParam("InboundAsnSequenceNumber", 3, 0));
        fStmt.Parameters.Add(NumberParam("InboundAsnLineNumber", 5, 0));
        fStmt.Parameters.Add(NumberParam("InboundAsnLineSequenceNumber", 3, 0));
        fStmt.Parameters.Add(StringParam("ProductNumber", 35));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(NumberParam("AsnLineQuantity", 20, 6));
        fStmt.Parameters.Add(NumberParam("ArrivedQuantity", 20, 6));
        fStmt.Parameters.Add(NumberParam("ReceiptQuantity", 20, 6));
        fStmt.Parameters.Add(StringParam("PackageIdentity", 17));
        fStmt.Parameters.Add(StringParam("ProductionLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("ProductionSubLotIdentity", 40));
        fStmt.Parameters.Add(StringParam("SerialNumber", 21));
        fStmt.Parameters.Add(NumberParam("DeliveryIdentity", 8, 0));
        fStmt.Parameters.Add(StringParam("LoadCarrierIdentity", 35));
        fStmt.Parameters.Add(StringParam("PurchaseOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderLinePos", 4, 0));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderLineSeq", 3, 0));
        fStmt.Parameters.Add(StringParam("CustomerOrderType", 2));
        fStmt.Parameters.Add(DateParam("ExpiryDate"));
        fStmt.Parameters.Add(DateParam("ManufacturingDate"));
        fStmt.Parameters.Add(StringParam("InventoryStatusCode", 8));
        fStmt.Parameters.Add(NumberParam("MeasuredQuantity", 20, 6));
        fStmt.Parameters.Add(StringParam("MeasureQualifier", 4));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLinePosition", 5, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineKitPosition", 2, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("ReturnsFinished", 1));
        fStmt.Parameters.Add(StringParam("DecidedActionCode", 2));
        fStmt.Parameters.Add(StringParam("FromPartyId", 35));
        fStmt.Parameters.Add(StringParam("FromPartyQualifier", 3));
        fStmt.Parameters.Add(StringParam("CustomerReturnOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLinePos", 5, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineKitPos", 2, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineSeq", 3, 0));
        fStmt.Parameters.Add(StringParam("DiscrepancyCode", 3));
        fStmt.Parameters.Add(StringParam("DiscrepancyActionCode", 2));
        fStmt.Parameters.Add(StringParam("MarketingLotIdentity", 20));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ConfirmationOfReceiptLineDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ConfirmationOfReceiptLineDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ConfirmationOfReceiptLineDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter ConfirmationOfReceiptLineDoc.OPCODE not allowed");


        if (p.AcknowledgeInboundAsnIdentity != null)
        {
            if (p.AcknowledgeInboundAsnIdentity.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptLineDoc.AcknowledgeInboundAsnIdentity too long, max 35 chars");

            (fStmt.Parameters["AcknowledgeInboundAsnIdentity"] as IDbDataParameter).Value = p.AcknowledgeInboundAsnIdentity;
        }
        else
            (fStmt.Parameters["AcknowledgeInboundAsnIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.AcknowledgeInboundAsnLinenum != null)
        {
            (fStmt.Parameters["AcknowledgeInboundAsnLinenum"] as IDbDataParameter).Value = p.AcknowledgeInboundAsnLinenum;
        }
        else
            (fStmt.Parameters["AcknowledgeInboundAsnLinenum"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ArrivalDateTime != null)
        {
            (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = p.ArrivalDateTime;
        }
        else
            (fStmt.Parameters["ArrivalDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromPartyNodeIdentity != null)
        {
            if (p.ShipFromPartyNodeIdentity.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptLineDoc.ShipFromPartyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipFromPartyNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromPartyIdentity != null)
        {
            if (p.ShipFromPartyIdentity.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptLineDoc.ShipFromPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = p.ShipFromPartyIdentity;
        }
        else
            (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromPartyQualifier != null)
        {
            if (p.ShipFromPartyQualifier.Length > 3)
                error.AppendLine("Value for ConfirmationOfReceiptLineDoc.ShipFromPartyQualifier too long, max 3 chars");

            (fStmt.Parameters["ShipFromPartyQualifier"] as IDbDataParameter).Value = p.ShipFromPartyQualifier;
        }
        else
            (fStmt.Parameters["ShipFromPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InboundAsnIdentity != null)
        {
            if (p.InboundAsnIdentity.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptLineDoc.InboundAsnIdentity too long, max 35 chars");

            (fStmt.Parameters["InboundAsnIdentity"] as IDbDataParameter).Value = p.InboundAsnIdentity;
        }
        else
            (fStmt.Parameters["InboundAsnIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InboundAsnSequenceNumber != null)
        {
            (fStmt.Parameters["InboundAsnSequenceNumber"] as IDbDataParameter).Value = p.InboundAsnSequenceNumber;
        }
        else
            (fStmt.Parameters["InboundAsnSequenceNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InboundAsnLineNumber != null)
        {
            (fStmt.Parameters["InboundAsnLineNumber"] as IDbDataParameter).Value = p.InboundAsnLineNumber;
        }
        else
            (fStmt.Parameters["InboundAsnLineNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InboundAsnLineSequenceNumber != null)
        {
            (fStmt.Parameters["InboundAsnLineSequenceNumber"] as IDbDataParameter).Value = p.InboundAsnLineSequenceNumber;
        }
        else
            (fStmt.Parameters["InboundAsnLineSequenceNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductNumber != null)
        {
            if (p.ProductNumber.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptLineDoc.ProductNumber too long, max 35 chars");

            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
        }
        else
            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.AsnLineQuantity != null)
        {
            (fStmt.Parameters["AsnLineQuantity"] as IDbDataParameter).Value = p.AsnLineQuantity;
        }
        else
            (fStmt.Parameters["AsnLineQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ArrivedQuantity != null)
        {
            (fStmt.Parameters["ArrivedQuantity"] as IDbDataParameter).Value = p.ArrivedQuantity;
        }
        else
            (fStmt.Parameters["ArrivedQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReceiptQuantity != null)
        {
            (fStmt.Parameters["ReceiptQuantity"] as IDbDataParameter).Value = p.ReceiptQuantity;
        }
        else
            (fStmt.Parameters["ReceiptQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PackageIdentity != null)
        {
            if (p.PackageIdentity.Length > 17)
                error.AppendLine("Value for ConfirmationOfReceiptLineDoc.PackageIdentity too long, max 17 chars");

            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = p.PackageIdentity;
        }
        else
            (fStmt.Parameters["PackageIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionLotIdentity != null)
        {
            if (p.ProductionLotIdentity.Length > 40)
                error.AppendLine("Value for ConfirmationOfReceiptLineDoc.ProductionLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = p.ProductionLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductionSubLotIdentity != null)
        {
            if (p.ProductionSubLotIdentity.Length > 40)
                error.AppendLine("Value for ConfirmationOfReceiptLineDoc.ProductionSubLotIdentity too long, max 40 chars");

            (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = p.ProductionSubLotIdentity;
        }
        else
            (fStmt.Parameters["ProductionSubLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.SerialNumber != null)
        {
            if (p.SerialNumber.Length > 21)
                error.AppendLine("Value for ConfirmationOfReceiptLineDoc.SerialNumber too long, max 21 chars");

            (fStmt.Parameters["SerialNumber"] as IDbDataParameter).Value = p.SerialNumber;
        }
        else
            (fStmt.Parameters["SerialNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveryIdentity != null)
        {
            (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = p.DeliveryIdentity;
        }
        else
            (fStmt.Parameters["DeliveryIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LoadCarrierIdentity != null)
        {
            if (p.LoadCarrierIdentity.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptLineDoc.LoadCarrierIdentity too long, max 35 chars");

            (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = p.LoadCarrierIdentity;
        }
        else
            (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderNumber != null)
        {
            if (p.PurchaseOrderNumber.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptLineDoc.PurchaseOrderNumber too long, max 35 chars");

            (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = p.PurchaseOrderNumber;
        }
        else
            (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderSequence != null)
        {
            (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = p.PurchaseOrderSequence;
        }
        else
            (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderLinePos != null)
        {
            (fStmt.Parameters["PurchaseOrderLinePos"] as IDbDataParameter).Value = p.PurchaseOrderLinePos;
        }
        else
            (fStmt.Parameters["PurchaseOrderLinePos"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderLineSeq != null)
        {
            (fStmt.Parameters["PurchaseOrderLineSeq"] as IDbDataParameter).Value = p.PurchaseOrderLineSeq;
        }
        else
            (fStmt.Parameters["PurchaseOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderType != null)
        {
            if (p.CustomerOrderType.Length > 2)
                error.AppendLine("Value for ConfirmationOfReceiptLineDoc.CustomerOrderType too long, max 2 chars");

            (fStmt.Parameters["CustomerOrderType"] as IDbDataParameter).Value = p.CustomerOrderType;
        }
        else
            (fStmt.Parameters["CustomerOrderType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ExpiryDate != null)
        {
            (fStmt.Parameters["ExpiryDate"] as IDbDataParameter).Value = p.ExpiryDate;
        }
        else
            (fStmt.Parameters["ExpiryDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ManufacturingDate != null)
        {
            (fStmt.Parameters["ManufacturingDate"] as IDbDataParameter).Value = p.ManufacturingDate;
        }
        else
            (fStmt.Parameters["ManufacturingDate"] as IDbDataParameter).Value = DBNull.Value;

        if (p.InventoryStatusCode != null)
        {
            if (p.InventoryStatusCode.Length > 8)
                error.AppendLine("Value for ConfirmationOfReceiptLineDoc.InventoryStatusCode too long, max 8 chars");

            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = p.InventoryStatusCode;
        }
        else
            (fStmt.Parameters["InventoryStatusCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MeasuredQuantity != null)
        {
            (fStmt.Parameters["MeasuredQuantity"] as IDbDataParameter).Value = p.MeasuredQuantity;
        }
        else
            (fStmt.Parameters["MeasuredQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MeasureQualifier != null)
        {
            if (p.MeasureQualifier.Length > 4)
                error.AppendLine("Value for ConfirmationOfReceiptLineDoc.MeasureQualifier too long, max 4 chars");

            (fStmt.Parameters["MeasureQualifier"] as IDbDataParameter).Value = p.MeasureQualifier;
        }
        else
            (fStmt.Parameters["MeasureQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptLineDoc.CustomerOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLinePosition != null)
        {
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = p.CustomerOrderLinePosition;
        }
        else
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLineKitPosition != null)
        {
            (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = p.CustomerOrderLineKitPosition;
        }
        else
            (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLineSequence != null)
        {
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = p.CustomerOrderLineSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReturnsFinished != null)
        {
            if (p.ReturnsFinished.Length > 1)
                error.AppendLine("Value for ConfirmationOfReceiptLineDoc.ReturnsFinished too long, max 1 chars");

            (fStmt.Parameters["ReturnsFinished"] as IDbDataParameter).Value = p.ReturnsFinished;
        }
        else
            (fStmt.Parameters["ReturnsFinished"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DecidedActionCode != null)
        {
            if (p.DecidedActionCode.Length > 2)
                error.AppendLine("Value for ConfirmationOfReceiptLineDoc.DecidedActionCode too long, max 2 chars");

            (fStmt.Parameters["DecidedActionCode"] as IDbDataParameter).Value = p.DecidedActionCode;
        }
        else
            (fStmt.Parameters["DecidedActionCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FromPartyId != null)
        {
            if (p.FromPartyId.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptLineDoc.FromPartyId too long, max 35 chars");

            (fStmt.Parameters["FromPartyId"] as IDbDataParameter).Value = p.FromPartyId;
        }
        else
            (fStmt.Parameters["FromPartyId"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FromPartyQualifier != null)
        {
            if (p.FromPartyQualifier.Length > 3)
                error.AppendLine("Value for ConfirmationOfReceiptLineDoc.FromPartyQualifier too long, max 3 chars");

            (fStmt.Parameters["FromPartyQualifier"] as IDbDataParameter).Value = p.FromPartyQualifier;
        }
        else
            (fStmt.Parameters["FromPartyQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderNumber != null)
        {
            if (p.CustomerReturnOrderNumber.Length > 35)
                error.AppendLine("Value for ConfirmationOfReceiptLineDoc.CustomerReturnOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = p.CustomerReturnOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderSequence != null)
        {
            (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = p.CustomerReturnOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLinePos != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = p.CustomerReturnOrderLinePos;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLineKitPos != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = p.CustomerReturnOrderLineKitPos;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLineSeq != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = p.CustomerReturnOrderLineSeq;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DiscrepancyCode != null)
        {
            if (p.DiscrepancyCode.Length > 3)
                error.AppendLine("Value for ConfirmationOfReceiptLineDoc.DiscrepancyCode too long, max 3 chars");

            (fStmt.Parameters["DiscrepancyCode"] as IDbDataParameter).Value = p.DiscrepancyCode;
        }
        else
            (fStmt.Parameters["DiscrepancyCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DiscrepancyActionCode != null)
        {
            if (p.DiscrepancyActionCode.Length > 2)
                error.AppendLine("Value for ConfirmationOfReceiptLineDoc.DiscrepancyActionCode too long, max 2 chars");

            (fStmt.Parameters["DiscrepancyActionCode"] as IDbDataParameter).Value = p.DiscrepancyActionCode;
        }
        else
            (fStmt.Parameters["DiscrepancyActionCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.MarketingLotIdentity != null)
        {
            if (p.MarketingLotIdentity.Length > 20)
                error.AppendLine("Value for ConfirmationOfReceiptLineDoc.MarketingLotIdentity too long, max 20 chars");

            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = p.MarketingLotIdentity;
        }
        else
            (fStmt.Parameters["MarketingLotIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class InboundOrderCompletedInsert : SegmentImpl
  {

    public InboundOrderCompletedInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_INB_ORDER_COMPLETED ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",ClientIdentity");
        s.Append(",WarehouseIdentity");
        s.Append(",EmployeeIdentity");
        s.Append(",PurchaseOrderNumber");
        s.Append(",PurchaseOrderSequence");
        s.Append(",PurchaseOrderLinePosition");
        s.Append(",PurchaseOrderLineSequence");
        s.Append(",CustomerReturnOrderNumber");
        s.Append(",CustomerReturnOrderSequence");
        s.Append(",CustomerReturnOrderLinePos");
        s.Append(",CustomerReturnOrderLineKitPos");
        s.Append(",CustomerReturnOrderLineSeq");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:ClientIdentity");
        s.Append(",:WarehouseIdentity");
        s.Append(",:EmployeeIdentity");
        s.Append(",:PurchaseOrderNumber");
        s.Append(",:PurchaseOrderSequence");
        s.Append(",:PurchaseOrderLinePosition");
        s.Append(",:PurchaseOrderLineSequence");
        s.Append(",:CustomerReturnOrderNumber");
        s.Append(",:CustomerReturnOrderSequence");
        s.Append(",:CustomerReturnOrderLinePos");
        s.Append(",:CustomerReturnOrderLineKitPos");
        s.Append(",:CustomerReturnOrderLineSeq");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("WarehouseIdentity", 4));
        fStmt.Parameters.Add(StringParam("EmployeeIdentity", 35));
        fStmt.Parameters.Add(StringParam("PurchaseOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderLinePosition", 4, 0));
        fStmt.Parameters.Add(NumberParam("PurchaseOrderLineSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("CustomerReturnOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLinePos", 5, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineKitPos", 2, 0));
        fStmt.Parameters.Add(NumberParam("CustomerReturnOrderLineSeq", 3, 0));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, InboundOrderCompletedDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for InboundOrderCompletedDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter InboundOrderCompletedDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter InboundOrderCompletedDoc.OPCODE not allowed");


        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.WarehouseIdentity != null)
        {
            if (p.WarehouseIdentity.Length > 4)
                error.AppendLine("Value for InboundOrderCompletedDoc.WarehouseIdentity too long, max 4 chars");

            (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = p.WarehouseIdentity;
        }
        else
            (fStmt.Parameters["WarehouseIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.EmployeeIdentity != null)
        {
            if (p.EmployeeIdentity.Length > 35)
                error.AppendLine("Value for InboundOrderCompletedDoc.EmployeeIdentity too long, max 35 chars");

            (fStmt.Parameters["EmployeeIdentity"] as IDbDataParameter).Value = p.EmployeeIdentity;
        }
        else
            (fStmt.Parameters["EmployeeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderNumber != null)
        {
            if (p.PurchaseOrderNumber.Length > 35)
                error.AppendLine("Value for InboundOrderCompletedDoc.PurchaseOrderNumber too long, max 35 chars");

            (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = p.PurchaseOrderNumber;
        }
        else
            (fStmt.Parameters["PurchaseOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderSequence != null)
        {
            (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = p.PurchaseOrderSequence;
        }
        else
            (fStmt.Parameters["PurchaseOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderLinePosition != null)
        {
            (fStmt.Parameters["PurchaseOrderLinePosition"] as IDbDataParameter).Value = p.PurchaseOrderLinePosition;
        }
        else
            (fStmt.Parameters["PurchaseOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PurchaseOrderLineSequence != null)
        {
            (fStmt.Parameters["PurchaseOrderLineSequence"] as IDbDataParameter).Value = p.PurchaseOrderLineSequence;
        }
        else
            (fStmt.Parameters["PurchaseOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderNumber != null)
        {
            if (p.CustomerReturnOrderNumber.Length > 35)
                error.AppendLine("Value for InboundOrderCompletedDoc.CustomerReturnOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = p.CustomerReturnOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderSequence != null)
        {
            (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = p.CustomerReturnOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLinePos != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = p.CustomerReturnOrderLinePos;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLinePos"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLineKitPos != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = p.CustomerReturnOrderLineKitPos;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLineKitPos"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerReturnOrderLineSeq != null)
        {
            (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = p.CustomerReturnOrderLineSeq;
        }
        else
            (fStmt.Parameters["CustomerReturnOrderLineSeq"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class TransportInstructionInsert : SegmentImpl
  {
    private TRIConsignmentInsert aTRIConsignmentInsert;

    public TransportInstructionInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_TRPINSTR ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",DepartureIdentity");
        s.Append(",Route_id");
        s.Append(",Deliverymeth_id");
        s.Append(",ShipDateTime");
        s.Append(",Departure_dtm");
        s.Append(",ShipFromPartyIdentity");
        s.Append(",ShipFromParty_Name");
        s.Append(",ShipFromParty_Name2");
        s.Append(",ShipFromParty_Name3");
        s.Append(",ShipFromParty_Name4");
        s.Append(",ShipFromParty_Name5");
        s.Append(",ShipFromParty_Adr");
        s.Append(",ShipFromParty_Adr2");
        s.Append(",ShipFromParty_Adr3");
        s.Append(",ShipFromParty_Adr4");
        s.Append(",ShipFromParty_PostCode");
        s.Append(",ShipFromParty_City");
        s.Append(",ShipFromParty_Country");
        s.Append(",ShipFromParty_CountryCode");
        s.Append(",ShipFromPartyNodeIdentity");
        s.Append(",FreighterIdentity");
        s.Append(",FreName");
        s.Append(",Fre_Adr");
        s.Append(",Fre_PostCode");
        s.Append(",Fre_City");
        s.Append(",Fre_Country");
        s.Append(",Fre_CountryCode");
        s.Append(",Fre_Georef");
        s.Append(",ShipFromCompanyIdentity");
        s.Append(",ShipFromCompany_Name");
        s.Append(",ShipFromCompany_Name2");
        s.Append(",ShipFromCompany_Name3");
        s.Append(",ShipFromCompany_Name4");
        s.Append(",ShipFromCompany_Name5");
        s.Append(",ShipFromCompany_Adr");
        s.Append(",ShipFromCompany_Adr2");
        s.Append(",ShipFromCompany_Adr3");
        s.Append(",ShipFromCompany_Adr4");
        s.Append(",Shipfromcompany_PostCode");
        s.Append(",ShipFromCompany_City");
        s.Append(",ShipFromCompany_Country");
        s.Append(",ShipFromCompany_CountryCode");
        s.Append(",ShipFromCompanyNodeIdentity");
        s.Append(",ShipFromCompany_Phone");
        s.Append(",ShipFromCompany_Email");
        s.Append(",ShipFromCompany_ContactName");
        s.Append(",ShipFromCompany_TypeOfGoods");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:DepartureIdentity");
        s.Append(",:Route_id");
        s.Append(",:Deliverymeth_id");
        s.Append(",:ShipDateTime");
        s.Append(",:Departure_dtm");
        s.Append(",:ShipFromPartyIdentity");
        s.Append(",:ShipFromParty_Name");
        s.Append(",:ShipFromParty_Name2");
        s.Append(",:ShipFromParty_Name3");
        s.Append(",:ShipFromParty_Name4");
        s.Append(",:ShipFromParty_Name5");
        s.Append(",:ShipFromParty_Adr");
        s.Append(",:ShipFromParty_Adr2");
        s.Append(",:ShipFromParty_Adr3");
        s.Append(",:ShipFromParty_Adr4");
        s.Append(",:ShipFromParty_PostCode");
        s.Append(",:ShipFromParty_City");
        s.Append(",:ShipFromParty_Country");
        s.Append(",:ShipFromParty_CountryCode");
        s.Append(",:ShipFromPartyNodeIdentity");
        s.Append(",:FreighterIdentity");
        s.Append(",:FreName");
        s.Append(",:Fre_Adr");
        s.Append(",:Fre_PostCode");
        s.Append(",:Fre_City");
        s.Append(",:Fre_Country");
        s.Append(",:Fre_CountryCode");
        s.Append(",:Fre_Georef");
        s.Append(",:ShipFromCompanyIdentity");
        s.Append(",:ShipFromCompany_Name");
        s.Append(",:ShipFromCompany_Name2");
        s.Append(",:ShipFromCompany_Name3");
        s.Append(",:ShipFromCompany_Name4");
        s.Append(",:ShipFromCompany_Name5");
        s.Append(",:ShipFromCompany_Adr");
        s.Append(",:ShipFromCompany_Adr2");
        s.Append(",:ShipFromCompany_Adr3");
        s.Append(",:ShipFromCompany_Adr4");
        s.Append(",:Shipfromcompany_PostCode");
        s.Append(",:ShipFromCompany_City");
        s.Append(",:ShipFromCompany_Country");
        s.Append(",:ShipFromCompany_CountryCode");
        s.Append(",:ShipFromCompanyNodeIdentity");
        s.Append(",:ShipFromCompany_Phone");
        s.Append(",:ShipFromCompany_Email");
        s.Append(",:ShipFromCompany_ContactName");
        s.Append(",:ShipFromCompany_TypeOfGoods");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("DepartureIdentity", 35));
        fStmt.Parameters.Add(StringParam("Route_id", 17));
        fStmt.Parameters.Add(StringParam("Deliverymeth_id", 17));
        fStmt.Parameters.Add(DateParam("ShipDateTime"));
        fStmt.Parameters.Add(DateParam("Departure_dtm"));
        fStmt.Parameters.Add(StringParam("ShipFromPartyIdentity", 4));
        fStmt.Parameters.Add(StringParam("ShipFromParty_Name", 175));
        fStmt.Parameters.Add(StringParam("ShipFromParty_Name2", 35));
        fStmt.Parameters.Add(StringParam("ShipFromParty_Name3", 35));
        fStmt.Parameters.Add(StringParam("ShipFromParty_Name4", 35));
        fStmt.Parameters.Add(StringParam("ShipFromParty_Name5", 35));
        fStmt.Parameters.Add(StringParam("ShipFromParty_Adr", 140));
        fStmt.Parameters.Add(StringParam("ShipFromParty_Adr2", 35));
        fStmt.Parameters.Add(StringParam("ShipFromParty_Adr3", 35));
        fStmt.Parameters.Add(StringParam("ShipFromParty_Adr4", 35));
        fStmt.Parameters.Add(StringParam("ShipFromParty_PostCode", 12));
        fStmt.Parameters.Add(StringParam("ShipFromParty_City", 35));
        fStmt.Parameters.Add(StringParam("ShipFromParty_Country", 35));
        fStmt.Parameters.Add(StringParam("ShipFromParty_CountryCode", 6));
        fStmt.Parameters.Add(StringParam("ShipFromPartyNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("FreighterIdentity", 35));
        fStmt.Parameters.Add(StringParam("FreName", 175));
        fStmt.Parameters.Add(StringParam("Fre_Adr", 140));
        fStmt.Parameters.Add(StringParam("Fre_PostCode", 12));
        fStmt.Parameters.Add(StringParam("Fre_City", 35));
        fStmt.Parameters.Add(StringParam("Fre_Country", 35));
        fStmt.Parameters.Add(StringParam("Fre_CountryCode", 6));
        fStmt.Parameters.Add(StringParam("Fre_Georef", 35));
        fStmt.Parameters.Add(StringParam("ShipFromCompanyIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_Name", 175));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_Name2", 35));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_Name3", 35));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_Name4", 35));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_Name5", 35));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_Adr", 140));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_Adr2", 35));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_Adr3", 35));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_Adr4", 35));
        fStmt.Parameters.Add(StringParam("Shipfromcompany_PostCode", 12));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_City", 35));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_Country", 35));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_CountryCode", 6));
        fStmt.Parameters.Add(StringParam("ShipFromCompanyNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_Phone", 35));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_Email", 50));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_ContactName", 35));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_TypeOfGoods", 35));

        fStmt.Prepare();

        aTRIConsignmentInsert = new TRIConsignmentInsert(owner);
    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, TransportInstructionDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for TransportInstructionDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter TransportInstructionDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter TransportInstructionDoc.OPCODE not allowed");


        if (p.DepartureIdentity != null)
        {
            if (p.DepartureIdentity.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.DepartureIdentity too long, max 35 chars");

            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = p.DepartureIdentity;
        }
        else
            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Route_id != null)
        {
            if (p.Route_id.Length > 17)
                error.AppendLine("Value for TransportInstructionDoc.Route_id too long, max 17 chars");

            (fStmt.Parameters["Route_id"] as IDbDataParameter).Value = p.Route_id;
        }
        else
            (fStmt.Parameters["Route_id"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Deliverymeth_id != null)
        {
            if (p.Deliverymeth_id.Length > 17)
                error.AppendLine("Value for TransportInstructionDoc.Deliverymeth_id too long, max 17 chars");

            (fStmt.Parameters["Deliverymeth_id"] as IDbDataParameter).Value = p.Deliverymeth_id;
        }
        else
            (fStmt.Parameters["Deliverymeth_id"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipDateTime != null)
        {
            (fStmt.Parameters["ShipDateTime"] as IDbDataParameter).Value = p.ShipDateTime;
        }
        else
            (fStmt.Parameters["ShipDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Departure_dtm != null)
        {
            (fStmt.Parameters["Departure_dtm"] as IDbDataParameter).Value = p.Departure_dtm;
        }
        else
            (fStmt.Parameters["Departure_dtm"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromPartyIdentity != null)
        {
            if (p.ShipFromPartyIdentity.Length > 4)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromPartyIdentity too long, max 4 chars");

            (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = p.ShipFromPartyIdentity;
        }
        else
            (fStmt.Parameters["ShipFromPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromParty_Name != null)
        {
            if (p.ShipFromParty_Name.Length > 175)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromParty_Name too long, max 175 chars");

            (fStmt.Parameters["ShipFromParty_Name"] as IDbDataParameter).Value = p.ShipFromParty_Name;
        }
        else
            (fStmt.Parameters["ShipFromParty_Name"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromParty_Name2 != null)
        {
            if (p.ShipFromParty_Name2.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromParty_Name2 too long, max 35 chars");

            (fStmt.Parameters["ShipFromParty_Name2"] as IDbDataParameter).Value = p.ShipFromParty_Name2;
        }
        else
            (fStmt.Parameters["ShipFromParty_Name2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromParty_Name3 != null)
        {
            if (p.ShipFromParty_Name3.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromParty_Name3 too long, max 35 chars");

            (fStmt.Parameters["ShipFromParty_Name3"] as IDbDataParameter).Value = p.ShipFromParty_Name3;
        }
        else
            (fStmt.Parameters["ShipFromParty_Name3"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromParty_Name4 != null)
        {
            if (p.ShipFromParty_Name4.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromParty_Name4 too long, max 35 chars");

            (fStmt.Parameters["ShipFromParty_Name4"] as IDbDataParameter).Value = p.ShipFromParty_Name4;
        }
        else
            (fStmt.Parameters["ShipFromParty_Name4"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromParty_Name5 != null)
        {
            if (p.ShipFromParty_Name5.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromParty_Name5 too long, max 35 chars");

            (fStmt.Parameters["ShipFromParty_Name5"] as IDbDataParameter).Value = p.ShipFromParty_Name5;
        }
        else
            (fStmt.Parameters["ShipFromParty_Name5"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromParty_Adr != null)
        {
            if (p.ShipFromParty_Adr.Length > 140)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromParty_Adr too long, max 140 chars");

            (fStmt.Parameters["ShipFromParty_Adr"] as IDbDataParameter).Value = p.ShipFromParty_Adr;
        }
        else
            (fStmt.Parameters["ShipFromParty_Adr"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromParty_Adr2 != null)
        {
            if (p.ShipFromParty_Adr2.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromParty_Adr2 too long, max 35 chars");

            (fStmt.Parameters["ShipFromParty_Adr2"] as IDbDataParameter).Value = p.ShipFromParty_Adr2;
        }
        else
            (fStmt.Parameters["ShipFromParty_Adr2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromParty_Adr3 != null)
        {
            if (p.ShipFromParty_Adr3.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromParty_Adr3 too long, max 35 chars");

            (fStmt.Parameters["ShipFromParty_Adr3"] as IDbDataParameter).Value = p.ShipFromParty_Adr3;
        }
        else
            (fStmt.Parameters["ShipFromParty_Adr3"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromParty_Adr4 != null)
        {
            if (p.ShipFromParty_Adr4.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromParty_Adr4 too long, max 35 chars");

            (fStmt.Parameters["ShipFromParty_Adr4"] as IDbDataParameter).Value = p.ShipFromParty_Adr4;
        }
        else
            (fStmt.Parameters["ShipFromParty_Adr4"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromParty_PostCode != null)
        {
            if (p.ShipFromParty_PostCode.Length > 12)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromParty_PostCode too long, max 12 chars");

            (fStmt.Parameters["ShipFromParty_PostCode"] as IDbDataParameter).Value = p.ShipFromParty_PostCode;
        }
        else
            (fStmt.Parameters["ShipFromParty_PostCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromParty_City != null)
        {
            if (p.ShipFromParty_City.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromParty_City too long, max 35 chars");

            (fStmt.Parameters["ShipFromParty_City"] as IDbDataParameter).Value = p.ShipFromParty_City;
        }
        else
            (fStmt.Parameters["ShipFromParty_City"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromParty_Country != null)
        {
            if (p.ShipFromParty_Country.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromParty_Country too long, max 35 chars");

            (fStmt.Parameters["ShipFromParty_Country"] as IDbDataParameter).Value = p.ShipFromParty_Country;
        }
        else
            (fStmt.Parameters["ShipFromParty_Country"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromParty_CountryCode != null)
        {
            if (p.ShipFromParty_CountryCode.Length > 6)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromParty_CountryCode too long, max 6 chars");

            (fStmt.Parameters["ShipFromParty_CountryCode"] as IDbDataParameter).Value = p.ShipFromParty_CountryCode;
        }
        else
            (fStmt.Parameters["ShipFromParty_CountryCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromPartyNodeIdentity != null)
        {
            if (p.ShipFromPartyNodeIdentity.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromPartyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipFromPartyNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipFromPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FreighterIdentity != null)
        {
            if (p.FreighterIdentity.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.FreighterIdentity too long, max 35 chars");

            (fStmt.Parameters["FreighterIdentity"] as IDbDataParameter).Value = p.FreighterIdentity;
        }
        else
            (fStmt.Parameters["FreighterIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FreName != null)
        {
            if (p.FreName.Length > 175)
                error.AppendLine("Value for TransportInstructionDoc.FreName too long, max 175 chars");

            (fStmt.Parameters["FreName"] as IDbDataParameter).Value = p.FreName;
        }
        else
            (fStmt.Parameters["FreName"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fre_Adr != null)
        {
            if (p.Fre_Adr.Length > 140)
                error.AppendLine("Value for TransportInstructionDoc.Fre_Adr too long, max 140 chars");

            (fStmt.Parameters["Fre_Adr"] as IDbDataParameter).Value = p.Fre_Adr;
        }
        else
            (fStmt.Parameters["Fre_Adr"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fre_PostCode != null)
        {
            if (p.Fre_PostCode.Length > 12)
                error.AppendLine("Value for TransportInstructionDoc.Fre_PostCode too long, max 12 chars");

            (fStmt.Parameters["Fre_PostCode"] as IDbDataParameter).Value = p.Fre_PostCode;
        }
        else
            (fStmt.Parameters["Fre_PostCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fre_City != null)
        {
            if (p.Fre_City.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.Fre_City too long, max 35 chars");

            (fStmt.Parameters["Fre_City"] as IDbDataParameter).Value = p.Fre_City;
        }
        else
            (fStmt.Parameters["Fre_City"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fre_Country != null)
        {
            if (p.Fre_Country.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.Fre_Country too long, max 35 chars");

            (fStmt.Parameters["Fre_Country"] as IDbDataParameter).Value = p.Fre_Country;
        }
        else
            (fStmt.Parameters["Fre_Country"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fre_CountryCode != null)
        {
            if (p.Fre_CountryCode.Length > 6)
                error.AppendLine("Value for TransportInstructionDoc.Fre_CountryCode too long, max 6 chars");

            (fStmt.Parameters["Fre_CountryCode"] as IDbDataParameter).Value = p.Fre_CountryCode;
        }
        else
            (fStmt.Parameters["Fre_CountryCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fre_Georef != null)
        {
            if (p.Fre_Georef.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.Fre_Georef too long, max 35 chars");

            (fStmt.Parameters["Fre_Georef"] as IDbDataParameter).Value = p.Fre_Georef;
        }
        else
            (fStmt.Parameters["Fre_Georef"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompanyIdentity != null)
        {
            if (p.ShipFromCompanyIdentity.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromCompanyIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompanyIdentity"] as IDbDataParameter).Value = p.ShipFromCompanyIdentity;
        }
        else
            (fStmt.Parameters["ShipFromCompanyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_Name != null)
        {
            if (p.ShipFromCompany_Name.Length > 175)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromCompany_Name too long, max 175 chars");

            (fStmt.Parameters["ShipFromCompany_Name"] as IDbDataParameter).Value = p.ShipFromCompany_Name;
        }
        else
            (fStmt.Parameters["ShipFromCompany_Name"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_Name2 != null)
        {
            if (p.ShipFromCompany_Name2.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromCompany_Name2 too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompany_Name2"] as IDbDataParameter).Value = p.ShipFromCompany_Name2;
        }
        else
            (fStmt.Parameters["ShipFromCompany_Name2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_Name3 != null)
        {
            if (p.ShipFromCompany_Name3.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromCompany_Name3 too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompany_Name3"] as IDbDataParameter).Value = p.ShipFromCompany_Name3;
        }
        else
            (fStmt.Parameters["ShipFromCompany_Name3"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_Name4 != null)
        {
            if (p.ShipFromCompany_Name4.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromCompany_Name4 too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompany_Name4"] as IDbDataParameter).Value = p.ShipFromCompany_Name4;
        }
        else
            (fStmt.Parameters["ShipFromCompany_Name4"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_Name5 != null)
        {
            if (p.ShipFromCompany_Name5.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromCompany_Name5 too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompany_Name5"] as IDbDataParameter).Value = p.ShipFromCompany_Name5;
        }
        else
            (fStmt.Parameters["ShipFromCompany_Name5"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_Adr != null)
        {
            if (p.ShipFromCompany_Adr.Length > 140)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromCompany_Adr too long, max 140 chars");

            (fStmt.Parameters["ShipFromCompany_Adr"] as IDbDataParameter).Value = p.ShipFromCompany_Adr;
        }
        else
            (fStmt.Parameters["ShipFromCompany_Adr"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_Adr2 != null)
        {
            if (p.ShipFromCompany_Adr2.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromCompany_Adr2 too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompany_Adr2"] as IDbDataParameter).Value = p.ShipFromCompany_Adr2;
        }
        else
            (fStmt.Parameters["ShipFromCompany_Adr2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_Adr3 != null)
        {
            if (p.ShipFromCompany_Adr3.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromCompany_Adr3 too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompany_Adr3"] as IDbDataParameter).Value = p.ShipFromCompany_Adr3;
        }
        else
            (fStmt.Parameters["ShipFromCompany_Adr3"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_Adr4 != null)
        {
            if (p.ShipFromCompany_Adr4.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromCompany_Adr4 too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompany_Adr4"] as IDbDataParameter).Value = p.ShipFromCompany_Adr4;
        }
        else
            (fStmt.Parameters["ShipFromCompany_Adr4"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Shipfromcompany_PostCode != null)
        {
            if (p.Shipfromcompany_PostCode.Length > 12)
                error.AppendLine("Value for TransportInstructionDoc.Shipfromcompany_PostCode too long, max 12 chars");

            (fStmt.Parameters["Shipfromcompany_PostCode"] as IDbDataParameter).Value = p.Shipfromcompany_PostCode;
        }
        else
            (fStmt.Parameters["Shipfromcompany_PostCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_City != null)
        {
            if (p.ShipFromCompany_City.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromCompany_City too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompany_City"] as IDbDataParameter).Value = p.ShipFromCompany_City;
        }
        else
            (fStmt.Parameters["ShipFromCompany_City"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_Country != null)
        {
            if (p.ShipFromCompany_Country.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromCompany_Country too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompany_Country"] as IDbDataParameter).Value = p.ShipFromCompany_Country;
        }
        else
            (fStmt.Parameters["ShipFromCompany_Country"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_CountryCode != null)
        {
            if (p.ShipFromCompany_CountryCode.Length > 6)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromCompany_CountryCode too long, max 6 chars");

            (fStmt.Parameters["ShipFromCompany_CountryCode"] as IDbDataParameter).Value = p.ShipFromCompany_CountryCode;
        }
        else
            (fStmt.Parameters["ShipFromCompany_CountryCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompanyNodeIdentity != null)
        {
            if (p.ShipFromCompanyNodeIdentity.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromCompanyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompanyNodeIdentity"] as IDbDataParameter).Value = p.ShipFromCompanyNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipFromCompanyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_Phone != null)
        {
            if (p.ShipFromCompany_Phone.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromCompany_Phone too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompany_Phone"] as IDbDataParameter).Value = p.ShipFromCompany_Phone;
        }
        else
            (fStmt.Parameters["ShipFromCompany_Phone"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_Email != null)
        {
            if (p.ShipFromCompany_Email.Length > 50)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromCompany_Email too long, max 50 chars");

            (fStmt.Parameters["ShipFromCompany_Email"] as IDbDataParameter).Value = p.ShipFromCompany_Email;
        }
        else
            (fStmt.Parameters["ShipFromCompany_Email"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_ContactName != null)
        {
            if (p.ShipFromCompany_ContactName.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromCompany_ContactName too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompany_ContactName"] as IDbDataParameter).Value = p.ShipFromCompany_ContactName;
        }
        else
            (fStmt.Parameters["ShipFromCompany_ContactName"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_TypeOfGoods != null)
        {
            if (p.ShipFromCompany_TypeOfGoods.Length > 35)
                error.AppendLine("Value for TransportInstructionDoc.ShipFromCompany_TypeOfGoods too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompany_TypeOfGoods"] as IDbDataParameter).Value = p.ShipFromCompany_TypeOfGoods;
        }
        else
            (fStmt.Parameters["ShipFromCompany_TypeOfGoods"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

        if (p.aTRIConsignmentDocs != null)
            foreach (TRIConsignmentDoc c in p.aTRIConsignmentDocs)
                aTRIConsignmentInsert.Process(ref trans, this, c);
      }
  }

  public class TRIConsignmentInsert : SegmentImpl
  {
    private TRIPartyInsert aTRIPartyInsert;
    private TRILoadCarrierInsert aTRILoadCarrierInsert;

    public TRIConsignmentInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_TRPINSTR_CONSIGNMENT ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",DepartureIdentity");
        s.Append(",Consignment_id");
        s.Append(",ClientIdentity");
        s.Append(",ShipToPartyIdentity");
        s.Append(",ShipToPartyNodeIdentity");
        s.Append(",Fre_ConsignmentIdentity");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:DepartureIdentity");
        s.Append(",:Consignment_id");
        s.Append(",:ClientIdentity");
        s.Append(",:ShipToPartyIdentity");
        s.Append(",:ShipToPartyNodeIdentity");
        s.Append(",:Fre_ConsignmentIdentity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("DepartureIdentity", 35));
        fStmt.Parameters.Add(StringParam("Consignment_id", 35));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("ShipToPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToPartyNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("Fre_ConsignmentIdentity", 35));

        fStmt.Prepare();

        aTRIPartyInsert = new TRIPartyInsert(owner);
        aTRILoadCarrierInsert = new TRILoadCarrierInsert(owner);
    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, TRIConsignmentDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for TRIConsignmentDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter TRIConsignmentDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter TRIConsignmentDoc.OPCODE not allowed");


        if (p.DepartureIdentity != null)
        {
            if (p.DepartureIdentity.Length > 35)
                error.AppendLine("Value for TRIConsignmentDoc.DepartureIdentity too long, max 35 chars");

            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = p.DepartureIdentity;
        }
        else
            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Consignment_id != null)
        {
            if (p.Consignment_id.Length > 35)
                error.AppendLine("Value for TRIConsignmentDoc.Consignment_id too long, max 35 chars");

            (fStmt.Parameters["Consignment_id"] as IDbDataParameter).Value = p.Consignment_id;
        }
        else
            (fStmt.Parameters["Consignment_id"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.ShipToPartyIdentity != null)
        {
            if (p.ShipToPartyIdentity.Length > 35)
                error.AppendLine("Value for TRIConsignmentDoc.ShipToPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = p.ShipToPartyIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyNodeIdentity != null)
        {
            if (p.ShipToPartyNodeIdentity.Length > 35)
                error.AppendLine("Value for TRIConsignmentDoc.ShipToPartyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipToPartyNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fre_ConsignmentIdentity != null)
        {
            if (p.Fre_ConsignmentIdentity.Length > 35)
                error.AppendLine("Value for TRIConsignmentDoc.Fre_ConsignmentIdentity too long, max 35 chars");

            (fStmt.Parameters["Fre_ConsignmentIdentity"] as IDbDataParameter).Value = p.Fre_ConsignmentIdentity;
        }
        else
            (fStmt.Parameters["Fre_ConsignmentIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

        if (p.aTRIPartyDocs != null)
            foreach (TRIPartyDoc c in p.aTRIPartyDocs)
                aTRIPartyInsert.Process(ref trans, this, c);
        if (p.aTRILoadCarrierDocs != null)
            foreach (TRILoadCarrierDoc d in p.aTRILoadCarrierDocs)
                aTRILoadCarrierInsert.Process(ref trans, this, d);
      }
  }

  public class TRIPartyInsert : SegmentImpl
  {

    public TRIPartyInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_TRPINSTR_PARTY ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",DepartureIdentity");
        s.Append(",Consignment_id");
        s.Append(",ClientIdentity");
        s.Append(",ShipToPartyIdentity");
        s.Append(",ShipToPartyNodeIdentity");
        s.Append(",Arrival_dtm");
        s.Append(",ShipToParty_Name");
        s.Append(",ShipToParty_Name2");
        s.Append(",ShipToParty_Name3");
        s.Append(",ShipToParty_Name4");
        s.Append(",ShipToParty_Name5");
        s.Append(",ShipToParty_Adr");
        s.Append(",ShipToParty_Adr2");
        s.Append(",ShipToParty_Adr3");
        s.Append(",ShipToParty_Adr4");
        s.Append(",ShipToParty_PostCode");
        s.Append(",ShipToParty_City");
        s.Append(",ShipToParty_Country");
        s.Append(",ShipToParty_CountryCode");
        s.Append(",ShipToParty_Phone");
        s.Append(",ShipToParty_Email");
        s.Append(",ShipToParty_ContactName");
        s.Append(",ShipFromCompanyIdentity");
        s.Append(",ShipFromCompany_Name");
        s.Append(",ShipFromCompany_Name2");
        s.Append(",ShipFromCompany_Name3");
        s.Append(",ShipFromCompany_Name4");
        s.Append(",ShipFromCompany_Name5");
        s.Append(",ShipFromCompany_Adr");
        s.Append(",ShipFromCompany_Adr2");
        s.Append(",ShipFromCompany_Adr3");
        s.Append(",ShipFromCompany_Adr4");
        s.Append(",Shipfromcompany_PostCode");
        s.Append(",ShipFromCompany_City");
        s.Append(",ShipFromCompany_Country");
        s.Append(",ShipFromCompany_CountryCode");
        s.Append(",ShipFromCompanyNodeIdentity");
        s.Append(",ShipFromCompany_Phone");
        s.Append(",ShipFromCompany_Email");
        s.Append(",ShipFromCompany_ContactName");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:DepartureIdentity");
        s.Append(",:Consignment_id");
        s.Append(",:ClientIdentity");
        s.Append(",:ShipToPartyIdentity");
        s.Append(",:ShipToPartyNodeIdentity");
        s.Append(",:Arrival_dtm");
        s.Append(",:ShipToParty_Name");
        s.Append(",:ShipToParty_Name2");
        s.Append(",:ShipToParty_Name3");
        s.Append(",:ShipToParty_Name4");
        s.Append(",:ShipToParty_Name5");
        s.Append(",:ShipToParty_Adr");
        s.Append(",:ShipToParty_Adr2");
        s.Append(",:ShipToParty_Adr3");
        s.Append(",:ShipToParty_Adr4");
        s.Append(",:ShipToParty_PostCode");
        s.Append(",:ShipToParty_City");
        s.Append(",:ShipToParty_Country");
        s.Append(",:ShipToParty_CountryCode");
        s.Append(",:ShipToParty_Phone");
        s.Append(",:ShipToParty_Email");
        s.Append(",:ShipToParty_ContactName");
        s.Append(",:ShipFromCompanyIdentity");
        s.Append(",:ShipFromCompany_Name");
        s.Append(",:ShipFromCompany_Name2");
        s.Append(",:ShipFromCompany_Name3");
        s.Append(",:ShipFromCompany_Name4");
        s.Append(",:ShipFromCompany_Name5");
        s.Append(",:ShipFromCompany_Adr");
        s.Append(",:ShipFromCompany_Adr2");
        s.Append(",:ShipFromCompany_Adr3");
        s.Append(",:ShipFromCompany_Adr4");
        s.Append(",:Shipfromcompany_PostCode");
        s.Append(",:ShipFromCompany_City");
        s.Append(",:ShipFromCompany_Country");
        s.Append(",:ShipFromCompany_CountryCode");
        s.Append(",:ShipFromCompanyNodeIdentity");
        s.Append(",:ShipFromCompany_Phone");
        s.Append(",:ShipFromCompany_Email");
        s.Append(",:ShipFromCompany_ContactName");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("DepartureIdentity", 35));
        fStmt.Parameters.Add(StringParam("Consignment_id", 35));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("ShipToPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToPartyNodeIdentity", 35));
        fStmt.Parameters.Add(DateParam("Arrival_dtm"));
        fStmt.Parameters.Add(StringParam("ShipToParty_Name", 175));
        fStmt.Parameters.Add(StringParam("ShipToParty_Name2", 35));
        fStmt.Parameters.Add(StringParam("ShipToParty_Name3", 35));
        fStmt.Parameters.Add(StringParam("ShipToParty_Name4", 35));
        fStmt.Parameters.Add(StringParam("ShipToParty_Name5", 35));
        fStmt.Parameters.Add(StringParam("ShipToParty_Adr", 140));
        fStmt.Parameters.Add(StringParam("ShipToParty_Adr2", 35));
        fStmt.Parameters.Add(StringParam("ShipToParty_Adr3", 35));
        fStmt.Parameters.Add(StringParam("ShipToParty_Adr4", 35));
        fStmt.Parameters.Add(StringParam("ShipToParty_PostCode", 12));
        fStmt.Parameters.Add(StringParam("ShipToParty_City", 35));
        fStmt.Parameters.Add(StringParam("ShipToParty_Country", 35));
        fStmt.Parameters.Add(StringParam("ShipToParty_CountryCode", 6));
        fStmt.Parameters.Add(StringParam("ShipToParty_Phone", 35));
        fStmt.Parameters.Add(StringParam("ShipToParty_Email", 50));
        fStmt.Parameters.Add(StringParam("ShipToParty_ContactName", 35));
        fStmt.Parameters.Add(StringParam("ShipFromCompanyIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_Name", 175));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_Name2", 35));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_Name3", 35));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_Name4", 35));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_Name5", 35));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_Adr", 140));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_Adr2", 35));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_Adr3", 35));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_Adr4", 35));
        fStmt.Parameters.Add(StringParam("Shipfromcompany_PostCode", 12));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_City", 35));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_Country", 35));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_CountryCode", 6));
        fStmt.Parameters.Add(StringParam("ShipFromCompanyNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_Phone", 35));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_Email", 50));
        fStmt.Parameters.Add(StringParam("ShipFromCompany_ContactName", 35));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, TRIPartyDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for TRIPartyDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter TRIPartyDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter TRIPartyDoc.OPCODE not allowed");


        if (p.DepartureIdentity != null)
        {
            if (p.DepartureIdentity.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.DepartureIdentity too long, max 35 chars");

            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = p.DepartureIdentity;
        }
        else
            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Consignment_id != null)
        {
            if (p.Consignment_id.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.Consignment_id too long, max 35 chars");

            (fStmt.Parameters["Consignment_id"] as IDbDataParameter).Value = p.Consignment_id;
        }
        else
            (fStmt.Parameters["Consignment_id"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.ShipToPartyIdentity != null)
        {
            if (p.ShipToPartyIdentity.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.ShipToPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = p.ShipToPartyIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyNodeIdentity != null)
        {
            if (p.ShipToPartyNodeIdentity.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.ShipToPartyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipToPartyNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Arrival_dtm != null)
        {
            (fStmt.Parameters["Arrival_dtm"] as IDbDataParameter).Value = p.Arrival_dtm;
        }
        else
            (fStmt.Parameters["Arrival_dtm"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToParty_Name != null)
        {
            if (p.ShipToParty_Name.Length > 175)
                error.AppendLine("Value for TRIPartyDoc.ShipToParty_Name too long, max 175 chars");

            (fStmt.Parameters["ShipToParty_Name"] as IDbDataParameter).Value = p.ShipToParty_Name;
        }
        else
            (fStmt.Parameters["ShipToParty_Name"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToParty_Name2 != null)
        {
            if (p.ShipToParty_Name2.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.ShipToParty_Name2 too long, max 35 chars");

            (fStmt.Parameters["ShipToParty_Name2"] as IDbDataParameter).Value = p.ShipToParty_Name2;
        }
        else
            (fStmt.Parameters["ShipToParty_Name2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToParty_Name3 != null)
        {
            if (p.ShipToParty_Name3.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.ShipToParty_Name3 too long, max 35 chars");

            (fStmt.Parameters["ShipToParty_Name3"] as IDbDataParameter).Value = p.ShipToParty_Name3;
        }
        else
            (fStmt.Parameters["ShipToParty_Name3"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToParty_Name4 != null)
        {
            if (p.ShipToParty_Name4.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.ShipToParty_Name4 too long, max 35 chars");

            (fStmt.Parameters["ShipToParty_Name4"] as IDbDataParameter).Value = p.ShipToParty_Name4;
        }
        else
            (fStmt.Parameters["ShipToParty_Name4"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToParty_Name5 != null)
        {
            if (p.ShipToParty_Name5.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.ShipToParty_Name5 too long, max 35 chars");

            (fStmt.Parameters["ShipToParty_Name5"] as IDbDataParameter).Value = p.ShipToParty_Name5;
        }
        else
            (fStmt.Parameters["ShipToParty_Name5"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToParty_Adr != null)
        {
            if (p.ShipToParty_Adr.Length > 140)
                error.AppendLine("Value for TRIPartyDoc.ShipToParty_Adr too long, max 140 chars");

            (fStmt.Parameters["ShipToParty_Adr"] as IDbDataParameter).Value = p.ShipToParty_Adr;
        }
        else
            (fStmt.Parameters["ShipToParty_Adr"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToParty_Adr2 != null)
        {
            if (p.ShipToParty_Adr2.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.ShipToParty_Adr2 too long, max 35 chars");

            (fStmt.Parameters["ShipToParty_Adr2"] as IDbDataParameter).Value = p.ShipToParty_Adr2;
        }
        else
            (fStmt.Parameters["ShipToParty_Adr2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToParty_Adr3 != null)
        {
            if (p.ShipToParty_Adr3.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.ShipToParty_Adr3 too long, max 35 chars");

            (fStmt.Parameters["ShipToParty_Adr3"] as IDbDataParameter).Value = p.ShipToParty_Adr3;
        }
        else
            (fStmt.Parameters["ShipToParty_Adr3"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToParty_Adr4 != null)
        {
            if (p.ShipToParty_Adr4.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.ShipToParty_Adr4 too long, max 35 chars");

            (fStmt.Parameters["ShipToParty_Adr4"] as IDbDataParameter).Value = p.ShipToParty_Adr4;
        }
        else
            (fStmt.Parameters["ShipToParty_Adr4"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToParty_PostCode != null)
        {
            if (p.ShipToParty_PostCode.Length > 12)
                error.AppendLine("Value for TRIPartyDoc.ShipToParty_PostCode too long, max 12 chars");

            (fStmt.Parameters["ShipToParty_PostCode"] as IDbDataParameter).Value = p.ShipToParty_PostCode;
        }
        else
            (fStmt.Parameters["ShipToParty_PostCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToParty_City != null)
        {
            if (p.ShipToParty_City.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.ShipToParty_City too long, max 35 chars");

            (fStmt.Parameters["ShipToParty_City"] as IDbDataParameter).Value = p.ShipToParty_City;
        }
        else
            (fStmt.Parameters["ShipToParty_City"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToParty_Country != null)
        {
            if (p.ShipToParty_Country.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.ShipToParty_Country too long, max 35 chars");

            (fStmt.Parameters["ShipToParty_Country"] as IDbDataParameter).Value = p.ShipToParty_Country;
        }
        else
            (fStmt.Parameters["ShipToParty_Country"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToParty_CountryCode != null)
        {
            if (p.ShipToParty_CountryCode.Length > 6)
                error.AppendLine("Value for TRIPartyDoc.ShipToParty_CountryCode too long, max 6 chars");

            (fStmt.Parameters["ShipToParty_CountryCode"] as IDbDataParameter).Value = p.ShipToParty_CountryCode;
        }
        else
            (fStmt.Parameters["ShipToParty_CountryCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToParty_Phone != null)
        {
            if (p.ShipToParty_Phone.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.ShipToParty_Phone too long, max 35 chars");

            (fStmt.Parameters["ShipToParty_Phone"] as IDbDataParameter).Value = p.ShipToParty_Phone;
        }
        else
            (fStmt.Parameters["ShipToParty_Phone"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToParty_Email != null)
        {
            if (p.ShipToParty_Email.Length > 50)
                error.AppendLine("Value for TRIPartyDoc.ShipToParty_Email too long, max 50 chars");

            (fStmt.Parameters["ShipToParty_Email"] as IDbDataParameter).Value = p.ShipToParty_Email;
        }
        else
            (fStmt.Parameters["ShipToParty_Email"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToParty_ContactName != null)
        {
            if (p.ShipToParty_ContactName.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.ShipToParty_ContactName too long, max 35 chars");

            (fStmt.Parameters["ShipToParty_ContactName"] as IDbDataParameter).Value = p.ShipToParty_ContactName;
        }
        else
            (fStmt.Parameters["ShipToParty_ContactName"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompanyIdentity != null)
        {
            if (p.ShipFromCompanyIdentity.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.ShipFromCompanyIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompanyIdentity"] as IDbDataParameter).Value = p.ShipFromCompanyIdentity;
        }
        else
            (fStmt.Parameters["ShipFromCompanyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_Name != null)
        {
            if (p.ShipFromCompany_Name.Length > 175)
                error.AppendLine("Value for TRIPartyDoc.ShipFromCompany_Name too long, max 175 chars");

            (fStmt.Parameters["ShipFromCompany_Name"] as IDbDataParameter).Value = p.ShipFromCompany_Name;
        }
        else
            (fStmt.Parameters["ShipFromCompany_Name"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_Name2 != null)
        {
            if (p.ShipFromCompany_Name2.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.ShipFromCompany_Name2 too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompany_Name2"] as IDbDataParameter).Value = p.ShipFromCompany_Name2;
        }
        else
            (fStmt.Parameters["ShipFromCompany_Name2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_Name3 != null)
        {
            if (p.ShipFromCompany_Name3.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.ShipFromCompany_Name3 too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompany_Name3"] as IDbDataParameter).Value = p.ShipFromCompany_Name3;
        }
        else
            (fStmt.Parameters["ShipFromCompany_Name3"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_Name4 != null)
        {
            if (p.ShipFromCompany_Name4.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.ShipFromCompany_Name4 too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompany_Name4"] as IDbDataParameter).Value = p.ShipFromCompany_Name4;
        }
        else
            (fStmt.Parameters["ShipFromCompany_Name4"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_Name5 != null)
        {
            if (p.ShipFromCompany_Name5.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.ShipFromCompany_Name5 too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompany_Name5"] as IDbDataParameter).Value = p.ShipFromCompany_Name5;
        }
        else
            (fStmt.Parameters["ShipFromCompany_Name5"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_Adr != null)
        {
            if (p.ShipFromCompany_Adr.Length > 140)
                error.AppendLine("Value for TRIPartyDoc.ShipFromCompany_Adr too long, max 140 chars");

            (fStmt.Parameters["ShipFromCompany_Adr"] as IDbDataParameter).Value = p.ShipFromCompany_Adr;
        }
        else
            (fStmt.Parameters["ShipFromCompany_Adr"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_Adr2 != null)
        {
            if (p.ShipFromCompany_Adr2.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.ShipFromCompany_Adr2 too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompany_Adr2"] as IDbDataParameter).Value = p.ShipFromCompany_Adr2;
        }
        else
            (fStmt.Parameters["ShipFromCompany_Adr2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_Adr3 != null)
        {
            if (p.ShipFromCompany_Adr3.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.ShipFromCompany_Adr3 too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompany_Adr3"] as IDbDataParameter).Value = p.ShipFromCompany_Adr3;
        }
        else
            (fStmt.Parameters["ShipFromCompany_Adr3"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_Adr4 != null)
        {
            if (p.ShipFromCompany_Adr4.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.ShipFromCompany_Adr4 too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompany_Adr4"] as IDbDataParameter).Value = p.ShipFromCompany_Adr4;
        }
        else
            (fStmt.Parameters["ShipFromCompany_Adr4"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Shipfromcompany_PostCode != null)
        {
            if (p.Shipfromcompany_PostCode.Length > 12)
                error.AppendLine("Value for TRIPartyDoc.Shipfromcompany_PostCode too long, max 12 chars");

            (fStmt.Parameters["Shipfromcompany_PostCode"] as IDbDataParameter).Value = p.Shipfromcompany_PostCode;
        }
        else
            (fStmt.Parameters["Shipfromcompany_PostCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_City != null)
        {
            if (p.ShipFromCompany_City.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.ShipFromCompany_City too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompany_City"] as IDbDataParameter).Value = p.ShipFromCompany_City;
        }
        else
            (fStmt.Parameters["ShipFromCompany_City"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_Country != null)
        {
            if (p.ShipFromCompany_Country.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.ShipFromCompany_Country too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompany_Country"] as IDbDataParameter).Value = p.ShipFromCompany_Country;
        }
        else
            (fStmt.Parameters["ShipFromCompany_Country"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_CountryCode != null)
        {
            if (p.ShipFromCompany_CountryCode.Length > 6)
                error.AppendLine("Value for TRIPartyDoc.ShipFromCompany_CountryCode too long, max 6 chars");

            (fStmt.Parameters["ShipFromCompany_CountryCode"] as IDbDataParameter).Value = p.ShipFromCompany_CountryCode;
        }
        else
            (fStmt.Parameters["ShipFromCompany_CountryCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompanyNodeIdentity != null)
        {
            if (p.ShipFromCompanyNodeIdentity.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.ShipFromCompanyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompanyNodeIdentity"] as IDbDataParameter).Value = p.ShipFromCompanyNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipFromCompanyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_Phone != null)
        {
            if (p.ShipFromCompany_Phone.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.ShipFromCompany_Phone too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompany_Phone"] as IDbDataParameter).Value = p.ShipFromCompany_Phone;
        }
        else
            (fStmt.Parameters["ShipFromCompany_Phone"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_Email != null)
        {
            if (p.ShipFromCompany_Email.Length > 50)
                error.AppendLine("Value for TRIPartyDoc.ShipFromCompany_Email too long, max 50 chars");

            (fStmt.Parameters["ShipFromCompany_Email"] as IDbDataParameter).Value = p.ShipFromCompany_Email;
        }
        else
            (fStmt.Parameters["ShipFromCompany_Email"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompany_ContactName != null)
        {
            if (p.ShipFromCompany_ContactName.Length > 35)
                error.AppendLine("Value for TRIPartyDoc.ShipFromCompany_ContactName too long, max 35 chars");

            (fStmt.Parameters["ShipFromCompany_ContactName"] as IDbDataParameter).Value = p.ShipFromCompany_ContactName;
        }
        else
            (fStmt.Parameters["ShipFromCompany_ContactName"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class TRILoadCarrierInsert : SegmentImpl
  {
    private TRIProductInsert aTRIProductInsert;

    public TRILoadCarrierInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_TRPINSTR_CAR ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",DepartureIdentity");
        s.Append(",Consignment_id");
        s.Append(",ClientIdentity");
        s.Append(",ShipToPartyIdentity");
        s.Append(",ShipToPartyNodeIdentity");
        s.Append(",LoadCarrierIdentity");
        s.Append(",LoadCarrierQualifier");
        s.Append(",LoadCarrierType");
        s.Append(",ExternalLoadCarrierType");
        s.Append(",ParentLoadCarrierIdentity");
        s.Append(",NetWeight");
        s.Append(",NetVolume");
        s.Append(",TotalWeight");
        s.Append(",TotalVolume");
        s.Append(",BottomArea");
        s.Append(",LoadingMeter");
        s.Append(",Piknopaks");
        s.Append(",ProductTransportIdentity");
        s.Append(",Fre_Party_Id");
        s.Append(",Fre_Party_Name");
        s.Append(",Fre_Party_Name2");
        s.Append(",Fre_Party_Name3");
        s.Append(",Fre_Party_Name4");
        s.Append(",Fre_Party_Name5");
        s.Append(",Fre_Party_Adr");
        s.Append(",Fre_Party_Adr2");
        s.Append(",Fre_Party_Adr3");
        s.Append(",Fre_Party_Adr4");
        s.Append(",Fre_Party_PostCode");
        s.Append(",Fre_Party_City");
        s.Append(",Fre_Party_Country");
        s.Append(",Fre_Party_CountryCode");
        s.Append(",Fre_Party_Georef");
        s.Append(",Freight_payment_code");
        s.Append(",Fre_Customer_Name_other");
        s.Append(",NumberOfLoadCarriers");
        s.Append(",Numberofconsignmentpackages");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderSequence");
        s.Append(",ShippingInstruction");
        s.Append(",TransportInstruction");
        s.Append(",Fre_Customer_Id");
        s.Append(",Fre_Customer_Id_Eur");
        s.Append(",ASNIdentity");
        s.Append(",ASNIdentitySequence");
        s.Append(",ShipFromCompanyIdentity");
        s.Append(",ShipToCustomerIdentity");
        s.Append(",ShipToCustomer_Name");
        s.Append(",ShipToCustomer_Name2");
        s.Append(",ShipToCustomer_Name3");
        s.Append(",ShipToCustomer_Name4");
        s.Append(",ShipToCustomer_Name5");
        s.Append(",ShipToCustomer_Adr");
        s.Append(",ShipToCustomer_Adr2");
        s.Append(",ShipToCustomer_Adr3");
        s.Append(",ShipToCustomer_Adr4");
        s.Append(",ShipToCustomer_PostCode");
        s.Append(",ShipToCustomer_City");
        s.Append(",ShipToCustomer_Country");
        s.Append(",ShipToCustomer_CountryCode");
        s.Append(",ShipToCustomerNodeIdentity");
        s.Append(",ShipToCustomer_Phone");
        s.Append(",ShipToCustomer_Email");
        s.Append(",ShipToCustomer_ContactName");
        s.Append(",VehicleIdentity");
        s.Append(",VLUIdentity");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:DepartureIdentity");
        s.Append(",:Consignment_id");
        s.Append(",:ClientIdentity");
        s.Append(",:ShipToPartyIdentity");
        s.Append(",:ShipToPartyNodeIdentity");
        s.Append(",:LoadCarrierIdentity");
        s.Append(",:LoadCarrierQualifier");
        s.Append(",:LoadCarrierType");
        s.Append(",:ExternalLoadCarrierType");
        s.Append(",:ParentLoadCarrierIdentity");
        s.Append(",:NetWeight");
        s.Append(",:NetVolume");
        s.Append(",:TotalWeight");
        s.Append(",:TotalVolume");
        s.Append(",:BottomArea");
        s.Append(",:LoadingMeter");
        s.Append(",:Piknopaks");
        s.Append(",:ProductTransportIdentity");
        s.Append(",:Fre_Party_Id");
        s.Append(",:Fre_Party_Name");
        s.Append(",:Fre_Party_Name2");
        s.Append(",:Fre_Party_Name3");
        s.Append(",:Fre_Party_Name4");
        s.Append(",:Fre_Party_Name5");
        s.Append(",:Fre_Party_Adr");
        s.Append(",:Fre_Party_Adr2");
        s.Append(",:Fre_Party_Adr3");
        s.Append(",:Fre_Party_Adr4");
        s.Append(",:Fre_Party_PostCode");
        s.Append(",:Fre_Party_City");
        s.Append(",:Fre_Party_Country");
        s.Append(",:Fre_Party_CountryCode");
        s.Append(",:Fre_Party_Georef");
        s.Append(",:Freight_payment_code");
        s.Append(",:Fre_Customer_Name_other");
        s.Append(",:NumberOfLoadCarriers");
        s.Append(",:Numberofconsignmentpackages");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderSequence");
        s.Append(",:ShippingInstruction");
        s.Append(",:TransportInstruction");
        s.Append(",:Fre_Customer_Id");
        s.Append(",:Fre_Customer_Id_Eur");
        s.Append(",:ASNIdentity");
        s.Append(",:ASNIdentitySequence");
        s.Append(",:ShipFromCompanyIdentity");
        s.Append(",:ShipToCustomerIdentity");
        s.Append(",:ShipToCustomer_Name");
        s.Append(",:ShipToCustomer_Name2");
        s.Append(",:ShipToCustomer_Name3");
        s.Append(",:ShipToCustomer_Name4");
        s.Append(",:ShipToCustomer_Name5");
        s.Append(",:ShipToCustomer_Adr");
        s.Append(",:ShipToCustomer_Adr2");
        s.Append(",:ShipToCustomer_Adr3");
        s.Append(",:ShipToCustomer_Adr4");
        s.Append(",:ShipToCustomer_PostCode");
        s.Append(",:ShipToCustomer_City");
        s.Append(",:ShipToCustomer_Country");
        s.Append(",:ShipToCustomer_CountryCode");
        s.Append(",:ShipToCustomerNodeIdentity");
        s.Append(",:ShipToCustomer_Phone");
        s.Append(",:ShipToCustomer_Email");
        s.Append(",:ShipToCustomer_ContactName");
        s.Append(",:VehicleIdentity");
        s.Append(",:VLUIdentity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("DepartureIdentity", 35));
        fStmt.Parameters.Add(StringParam("Consignment_id", 35));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("ShipToPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToPartyNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("LoadCarrierIdentity", 35));
        fStmt.Parameters.Add(StringParam("LoadCarrierQualifier", 4));
        fStmt.Parameters.Add(StringParam("LoadCarrierType", 3));
        fStmt.Parameters.Add(StringParam("ExternalLoadCarrierType", 20));
        fStmt.Parameters.Add(StringParam("ParentLoadCarrierIdentity", 35));
        fStmt.Parameters.Add(NumberParam("NetWeight", 16, 6));
        fStmt.Parameters.Add(NumberParam("NetVolume", 16, 6));
        fStmt.Parameters.Add(NumberParam("TotalWeight", 16, 6));
        fStmt.Parameters.Add(NumberParam("TotalVolume", 16, 6));
        fStmt.Parameters.Add(NumberParam("BottomArea", 10, 6));
        fStmt.Parameters.Add(NumberParam("LoadingMeter", 16, 6));
        fStmt.Parameters.Add(NumberParam("Piknopaks", 6, 0));
        fStmt.Parameters.Add(StringParam("ProductTransportIdentity", 5));
        fStmt.Parameters.Add(StringParam("Fre_Party_Id", 35));
        fStmt.Parameters.Add(StringParam("Fre_Party_Name", 175));
        fStmt.Parameters.Add(StringParam("Fre_Party_Name2", 35));
        fStmt.Parameters.Add(StringParam("Fre_Party_Name3", 35));
        fStmt.Parameters.Add(StringParam("Fre_Party_Name4", 35));
        fStmt.Parameters.Add(StringParam("Fre_Party_Name5", 35));
        fStmt.Parameters.Add(StringParam("Fre_Party_Adr", 140));
        fStmt.Parameters.Add(StringParam("Fre_Party_Adr2", 35));
        fStmt.Parameters.Add(StringParam("Fre_Party_Adr3", 35));
        fStmt.Parameters.Add(StringParam("Fre_Party_Adr4", 35));
        fStmt.Parameters.Add(StringParam("Fre_Party_PostCode", 12));
        fStmt.Parameters.Add(StringParam("Fre_Party_City", 35));
        fStmt.Parameters.Add(StringParam("Fre_Party_Country", 35));
        fStmt.Parameters.Add(StringParam("Fre_Party_CountryCode", 6));
        fStmt.Parameters.Add(StringParam("Fre_Party_Georef", 35));
        fStmt.Parameters.Add(StringParam("Freight_payment_code", 1));
        fStmt.Parameters.Add(StringParam("Fre_Customer_Name_other", 35));
        fStmt.Parameters.Add(NumberParam("NumberOfLoadCarriers", 6, 0));
        fStmt.Parameters.Add(NumberParam("Numberofconsignmentpackages", 6, 0));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("ShippingInstruction", 400));
        fStmt.Parameters.Add(StringParam("TransportInstruction", 400));
        fStmt.Parameters.Add(StringParam("Fre_Customer_Id", 35));
        fStmt.Parameters.Add(StringParam("Fre_Customer_Id_Eur", 35));
        fStmt.Parameters.Add(StringParam("ASNIdentity", 35));
        fStmt.Parameters.Add(NumberParam("ASNIdentitySequence", 3, 0));
        fStmt.Parameters.Add(StringParam("ShipFromCompanyIdentity", 17));
        fStmt.Parameters.Add(StringParam("ShipToCustomerIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomer_Name", 175));
        fStmt.Parameters.Add(StringParam("ShipToCustomer_Name2", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomer_Name3", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomer_Name4", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomer_Name5", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomer_Adr", 140));
        fStmt.Parameters.Add(StringParam("ShipToCustomer_Adr2", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomer_Adr3", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomer_Adr4", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomer_PostCode", 12));
        fStmt.Parameters.Add(StringParam("ShipToCustomer_City", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomer_Country", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomer_CountryCode", 6));
        fStmt.Parameters.Add(StringParam("ShipToCustomerNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomer_Phone", 35));
        fStmt.Parameters.Add(StringParam("ShipToCustomer_Email", 50));
        fStmt.Parameters.Add(StringParam("ShipToCustomer_ContactName", 35));
        fStmt.Parameters.Add(StringParam("VehicleIdentity", 35));
        fStmt.Parameters.Add(StringParam("VLUIdentity", 35));

        fStmt.Prepare();

        aTRIProductInsert = new TRIProductInsert(owner);
    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, TRILoadCarrierDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for TRILoadCarrierDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter TRILoadCarrierDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter TRILoadCarrierDoc.OPCODE not allowed");


        if (p.DepartureIdentity != null)
        {
            if (p.DepartureIdentity.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.DepartureIdentity too long, max 35 chars");

            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = p.DepartureIdentity;
        }
        else
            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Consignment_id != null)
        {
            if (p.Consignment_id.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.Consignment_id too long, max 35 chars");

            (fStmt.Parameters["Consignment_id"] as IDbDataParameter).Value = p.Consignment_id;
        }
        else
            (fStmt.Parameters["Consignment_id"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.ShipToPartyIdentity != null)
        {
            if (p.ShipToPartyIdentity.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.ShipToPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = p.ShipToPartyIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyNodeIdentity != null)
        {
            if (p.ShipToPartyNodeIdentity.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.ShipToPartyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipToPartyNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LoadCarrierIdentity != null)
        {
            if (p.LoadCarrierIdentity.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.LoadCarrierIdentity too long, max 35 chars");

            (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = p.LoadCarrierIdentity;
        }
        else
            (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LoadCarrierQualifier != null)
        {
            if (p.LoadCarrierQualifier.Length > 4)
                error.AppendLine("Value for TRILoadCarrierDoc.LoadCarrierQualifier too long, max 4 chars");

            (fStmt.Parameters["LoadCarrierQualifier"] as IDbDataParameter).Value = p.LoadCarrierQualifier;
        }
        else
            (fStmt.Parameters["LoadCarrierQualifier"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LoadCarrierType != null)
        {
            if (p.LoadCarrierType.Length > 3)
                error.AppendLine("Value for TRILoadCarrierDoc.LoadCarrierType too long, max 3 chars");

            (fStmt.Parameters["LoadCarrierType"] as IDbDataParameter).Value = p.LoadCarrierType;
        }
        else
            (fStmt.Parameters["LoadCarrierType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ExternalLoadCarrierType != null)
        {
            if (p.ExternalLoadCarrierType.Length > 20)
                error.AppendLine("Value for TRILoadCarrierDoc.ExternalLoadCarrierType too long, max 20 chars");

            (fStmt.Parameters["ExternalLoadCarrierType"] as IDbDataParameter).Value = p.ExternalLoadCarrierType;
        }
        else
            (fStmt.Parameters["ExternalLoadCarrierType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ParentLoadCarrierIdentity != null)
        {
            if (p.ParentLoadCarrierIdentity.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.ParentLoadCarrierIdentity too long, max 35 chars");

            (fStmt.Parameters["ParentLoadCarrierIdentity"] as IDbDataParameter).Value = p.ParentLoadCarrierIdentity;
        }
        else
            (fStmt.Parameters["ParentLoadCarrierIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.NetWeight != null)
        {
            (fStmt.Parameters["NetWeight"] as IDbDataParameter).Value = p.NetWeight;
        }
        else
            (fStmt.Parameters["NetWeight"] as IDbDataParameter).Value = DBNull.Value;

        if (p.NetVolume != null)
        {
            (fStmt.Parameters["NetVolume"] as IDbDataParameter).Value = p.NetVolume;
        }
        else
            (fStmt.Parameters["NetVolume"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TotalWeight != null)
        {
            (fStmt.Parameters["TotalWeight"] as IDbDataParameter).Value = p.TotalWeight;
        }
        else
            (fStmt.Parameters["TotalWeight"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TotalVolume != null)
        {
            (fStmt.Parameters["TotalVolume"] as IDbDataParameter).Value = p.TotalVolume;
        }
        else
            (fStmt.Parameters["TotalVolume"] as IDbDataParameter).Value = DBNull.Value;

        if (p.BottomArea != null)
        {
            (fStmt.Parameters["BottomArea"] as IDbDataParameter).Value = p.BottomArea;
        }
        else
            (fStmt.Parameters["BottomArea"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LoadingMeter != null)
        {
            (fStmt.Parameters["LoadingMeter"] as IDbDataParameter).Value = p.LoadingMeter;
        }
        else
            (fStmt.Parameters["LoadingMeter"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Piknopaks != null)
        {
            (fStmt.Parameters["Piknopaks"] as IDbDataParameter).Value = p.Piknopaks;
        }
        else
            (fStmt.Parameters["Piknopaks"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductTransportIdentity != null)
        {
            if (p.ProductTransportIdentity.Length > 5)
                error.AppendLine("Value for TRILoadCarrierDoc.ProductTransportIdentity too long, max 5 chars");

            (fStmt.Parameters["ProductTransportIdentity"] as IDbDataParameter).Value = p.ProductTransportIdentity;
        }
        else
            (fStmt.Parameters["ProductTransportIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fre_Party_Id != null)
        {
            if (p.Fre_Party_Id.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.Fre_Party_Id too long, max 35 chars");

            (fStmt.Parameters["Fre_Party_Id"] as IDbDataParameter).Value = p.Fre_Party_Id;
        }
        else
            (fStmt.Parameters["Fre_Party_Id"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fre_Party_Name != null)
        {
            if (p.Fre_Party_Name.Length > 175)
                error.AppendLine("Value for TRILoadCarrierDoc.Fre_Party_Name too long, max 175 chars");

            (fStmt.Parameters["Fre_Party_Name"] as IDbDataParameter).Value = p.Fre_Party_Name;
        }
        else
            (fStmt.Parameters["Fre_Party_Name"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fre_Party_Name2 != null)
        {
            if (p.Fre_Party_Name2.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.Fre_Party_Name2 too long, max 35 chars");

            (fStmt.Parameters["Fre_Party_Name2"] as IDbDataParameter).Value = p.Fre_Party_Name2;
        }
        else
            (fStmt.Parameters["Fre_Party_Name2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fre_Party_Name3 != null)
        {
            if (p.Fre_Party_Name3.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.Fre_Party_Name3 too long, max 35 chars");

            (fStmt.Parameters["Fre_Party_Name3"] as IDbDataParameter).Value = p.Fre_Party_Name3;
        }
        else
            (fStmt.Parameters["Fre_Party_Name3"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fre_Party_Name4 != null)
        {
            if (p.Fre_Party_Name4.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.Fre_Party_Name4 too long, max 35 chars");

            (fStmt.Parameters["Fre_Party_Name4"] as IDbDataParameter).Value = p.Fre_Party_Name4;
        }
        else
            (fStmt.Parameters["Fre_Party_Name4"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fre_Party_Name5 != null)
        {
            if (p.Fre_Party_Name5.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.Fre_Party_Name5 too long, max 35 chars");

            (fStmt.Parameters["Fre_Party_Name5"] as IDbDataParameter).Value = p.Fre_Party_Name5;
        }
        else
            (fStmt.Parameters["Fre_Party_Name5"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fre_Party_Adr != null)
        {
            if (p.Fre_Party_Adr.Length > 140)
                error.AppendLine("Value for TRILoadCarrierDoc.Fre_Party_Adr too long, max 140 chars");

            (fStmt.Parameters["Fre_Party_Adr"] as IDbDataParameter).Value = p.Fre_Party_Adr;
        }
        else
            (fStmt.Parameters["Fre_Party_Adr"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fre_Party_Adr2 != null)
        {
            if (p.Fre_Party_Adr2.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.Fre_Party_Adr2 too long, max 35 chars");

            (fStmt.Parameters["Fre_Party_Adr2"] as IDbDataParameter).Value = p.Fre_Party_Adr2;
        }
        else
            (fStmt.Parameters["Fre_Party_Adr2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fre_Party_Adr3 != null)
        {
            if (p.Fre_Party_Adr3.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.Fre_Party_Adr3 too long, max 35 chars");

            (fStmt.Parameters["Fre_Party_Adr3"] as IDbDataParameter).Value = p.Fre_Party_Adr3;
        }
        else
            (fStmt.Parameters["Fre_Party_Adr3"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fre_Party_Adr4 != null)
        {
            if (p.Fre_Party_Adr4.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.Fre_Party_Adr4 too long, max 35 chars");

            (fStmt.Parameters["Fre_Party_Adr4"] as IDbDataParameter).Value = p.Fre_Party_Adr4;
        }
        else
            (fStmt.Parameters["Fre_Party_Adr4"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fre_Party_PostCode != null)
        {
            if (p.Fre_Party_PostCode.Length > 12)
                error.AppendLine("Value for TRILoadCarrierDoc.Fre_Party_PostCode too long, max 12 chars");

            (fStmt.Parameters["Fre_Party_PostCode"] as IDbDataParameter).Value = p.Fre_Party_PostCode;
        }
        else
            (fStmt.Parameters["Fre_Party_PostCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fre_Party_City != null)
        {
            if (p.Fre_Party_City.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.Fre_Party_City too long, max 35 chars");

            (fStmt.Parameters["Fre_Party_City"] as IDbDataParameter).Value = p.Fre_Party_City;
        }
        else
            (fStmt.Parameters["Fre_Party_City"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fre_Party_Country != null)
        {
            if (p.Fre_Party_Country.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.Fre_Party_Country too long, max 35 chars");

            (fStmt.Parameters["Fre_Party_Country"] as IDbDataParameter).Value = p.Fre_Party_Country;
        }
        else
            (fStmt.Parameters["Fre_Party_Country"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fre_Party_CountryCode != null)
        {
            if (p.Fre_Party_CountryCode.Length > 6)
                error.AppendLine("Value for TRILoadCarrierDoc.Fre_Party_CountryCode too long, max 6 chars");

            (fStmt.Parameters["Fre_Party_CountryCode"] as IDbDataParameter).Value = p.Fre_Party_CountryCode;
        }
        else
            (fStmt.Parameters["Fre_Party_CountryCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fre_Party_Georef != null)
        {
            if (p.Fre_Party_Georef.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.Fre_Party_Georef too long, max 35 chars");

            (fStmt.Parameters["Fre_Party_Georef"] as IDbDataParameter).Value = p.Fre_Party_Georef;
        }
        else
            (fStmt.Parameters["Fre_Party_Georef"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Freight_payment_code != null)
        {
            if (p.Freight_payment_code.Length > 1)
                error.AppendLine("Value for TRILoadCarrierDoc.Freight_payment_code too long, max 1 chars");

            (fStmt.Parameters["Freight_payment_code"] as IDbDataParameter).Value = p.Freight_payment_code;
        }
        else
            (fStmt.Parameters["Freight_payment_code"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fre_Customer_Name_other != null)
        {
            if (p.Fre_Customer_Name_other.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.Fre_Customer_Name_other too long, max 35 chars");

            (fStmt.Parameters["Fre_Customer_Name_other"] as IDbDataParameter).Value = p.Fre_Customer_Name_other;
        }
        else
            (fStmt.Parameters["Fre_Customer_Name_other"] as IDbDataParameter).Value = DBNull.Value;

        if (p.NumberOfLoadCarriers != null)
        {
            (fStmt.Parameters["NumberOfLoadCarriers"] as IDbDataParameter).Value = p.NumberOfLoadCarriers;
        }
        else
            (fStmt.Parameters["NumberOfLoadCarriers"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Numberofconsignmentpackages != null)
        {
            (fStmt.Parameters["Numberofconsignmentpackages"] as IDbDataParameter).Value = p.Numberofconsignmentpackages;
        }
        else
            (fStmt.Parameters["Numberofconsignmentpackages"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.CustomerOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShippingInstruction != null)
        {
            if (p.ShippingInstruction.Length > 400)
                error.AppendLine("Value for TRILoadCarrierDoc.ShippingInstruction too long, max 400 chars");

            (fStmt.Parameters["ShippingInstruction"] as IDbDataParameter).Value = p.ShippingInstruction;
        }
        else
            (fStmt.Parameters["ShippingInstruction"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TransportInstruction != null)
        {
            if (p.TransportInstruction.Length > 400)
                error.AppendLine("Value for TRILoadCarrierDoc.TransportInstruction too long, max 400 chars");

            (fStmt.Parameters["TransportInstruction"] as IDbDataParameter).Value = p.TransportInstruction;
        }
        else
            (fStmt.Parameters["TransportInstruction"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fre_Customer_Id != null)
        {
            if (p.Fre_Customer_Id.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.Fre_Customer_Id too long, max 35 chars");

            (fStmt.Parameters["Fre_Customer_Id"] as IDbDataParameter).Value = p.Fre_Customer_Id;
        }
        else
            (fStmt.Parameters["Fre_Customer_Id"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Fre_Customer_Id_Eur != null)
        {
            if (p.Fre_Customer_Id_Eur.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.Fre_Customer_Id_Eur too long, max 35 chars");

            (fStmt.Parameters["Fre_Customer_Id_Eur"] as IDbDataParameter).Value = p.Fre_Customer_Id_Eur;
        }
        else
            (fStmt.Parameters["Fre_Customer_Id_Eur"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ASNIdentity != null)
        {
            if (p.ASNIdentity.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.ASNIdentity too long, max 35 chars");

            (fStmt.Parameters["ASNIdentity"] as IDbDataParameter).Value = p.ASNIdentity;
        }
        else
            (fStmt.Parameters["ASNIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ASNIdentitySequence != null)
        {
            (fStmt.Parameters["ASNIdentitySequence"] as IDbDataParameter).Value = p.ASNIdentitySequence;
        }
        else
            (fStmt.Parameters["ASNIdentitySequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipFromCompanyIdentity != null)
        {
            if (p.ShipFromCompanyIdentity.Length > 17)
                error.AppendLine("Value for TRILoadCarrierDoc.ShipFromCompanyIdentity too long, max 17 chars");

            (fStmt.Parameters["ShipFromCompanyIdentity"] as IDbDataParameter).Value = p.ShipFromCompanyIdentity;
        }
        else
            (fStmt.Parameters["ShipFromCompanyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomerIdentity != null)
        {
            if (p.ShipToCustomerIdentity.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.ShipToCustomerIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToCustomerIdentity"] as IDbDataParameter).Value = p.ShipToCustomerIdentity;
        }
        else
            (fStmt.Parameters["ShipToCustomerIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomer_Name != null)
        {
            if (p.ShipToCustomer_Name.Length > 175)
                error.AppendLine("Value for TRILoadCarrierDoc.ShipToCustomer_Name too long, max 175 chars");

            (fStmt.Parameters["ShipToCustomer_Name"] as IDbDataParameter).Value = p.ShipToCustomer_Name;
        }
        else
            (fStmt.Parameters["ShipToCustomer_Name"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomer_Name2 != null)
        {
            if (p.ShipToCustomer_Name2.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.ShipToCustomer_Name2 too long, max 35 chars");

            (fStmt.Parameters["ShipToCustomer_Name2"] as IDbDataParameter).Value = p.ShipToCustomer_Name2;
        }
        else
            (fStmt.Parameters["ShipToCustomer_Name2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomer_Name3 != null)
        {
            if (p.ShipToCustomer_Name3.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.ShipToCustomer_Name3 too long, max 35 chars");

            (fStmt.Parameters["ShipToCustomer_Name3"] as IDbDataParameter).Value = p.ShipToCustomer_Name3;
        }
        else
            (fStmt.Parameters["ShipToCustomer_Name3"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomer_Name4 != null)
        {
            if (p.ShipToCustomer_Name4.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.ShipToCustomer_Name4 too long, max 35 chars");

            (fStmt.Parameters["ShipToCustomer_Name4"] as IDbDataParameter).Value = p.ShipToCustomer_Name4;
        }
        else
            (fStmt.Parameters["ShipToCustomer_Name4"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomer_Name5 != null)
        {
            if (p.ShipToCustomer_Name5.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.ShipToCustomer_Name5 too long, max 35 chars");

            (fStmt.Parameters["ShipToCustomer_Name5"] as IDbDataParameter).Value = p.ShipToCustomer_Name5;
        }
        else
            (fStmt.Parameters["ShipToCustomer_Name5"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomer_Adr != null)
        {
            if (p.ShipToCustomer_Adr.Length > 140)
                error.AppendLine("Value for TRILoadCarrierDoc.ShipToCustomer_Adr too long, max 140 chars");

            (fStmt.Parameters["ShipToCustomer_Adr"] as IDbDataParameter).Value = p.ShipToCustomer_Adr;
        }
        else
            (fStmt.Parameters["ShipToCustomer_Adr"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomer_Adr2 != null)
        {
            if (p.ShipToCustomer_Adr2.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.ShipToCustomer_Adr2 too long, max 35 chars");

            (fStmt.Parameters["ShipToCustomer_Adr2"] as IDbDataParameter).Value = p.ShipToCustomer_Adr2;
        }
        else
            (fStmt.Parameters["ShipToCustomer_Adr2"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomer_Adr3 != null)
        {
            if (p.ShipToCustomer_Adr3.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.ShipToCustomer_Adr3 too long, max 35 chars");

            (fStmt.Parameters["ShipToCustomer_Adr3"] as IDbDataParameter).Value = p.ShipToCustomer_Adr3;
        }
        else
            (fStmt.Parameters["ShipToCustomer_Adr3"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomer_Adr4 != null)
        {
            if (p.ShipToCustomer_Adr4.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.ShipToCustomer_Adr4 too long, max 35 chars");

            (fStmt.Parameters["ShipToCustomer_Adr4"] as IDbDataParameter).Value = p.ShipToCustomer_Adr4;
        }
        else
            (fStmt.Parameters["ShipToCustomer_Adr4"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomer_PostCode != null)
        {
            if (p.ShipToCustomer_PostCode.Length > 12)
                error.AppendLine("Value for TRILoadCarrierDoc.ShipToCustomer_PostCode too long, max 12 chars");

            (fStmt.Parameters["ShipToCustomer_PostCode"] as IDbDataParameter).Value = p.ShipToCustomer_PostCode;
        }
        else
            (fStmt.Parameters["ShipToCustomer_PostCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomer_City != null)
        {
            if (p.ShipToCustomer_City.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.ShipToCustomer_City too long, max 35 chars");

            (fStmt.Parameters["ShipToCustomer_City"] as IDbDataParameter).Value = p.ShipToCustomer_City;
        }
        else
            (fStmt.Parameters["ShipToCustomer_City"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomer_Country != null)
        {
            if (p.ShipToCustomer_Country.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.ShipToCustomer_Country too long, max 35 chars");

            (fStmt.Parameters["ShipToCustomer_Country"] as IDbDataParameter).Value = p.ShipToCustomer_Country;
        }
        else
            (fStmt.Parameters["ShipToCustomer_Country"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomer_CountryCode != null)
        {
            if (p.ShipToCustomer_CountryCode.Length > 6)
                error.AppendLine("Value for TRILoadCarrierDoc.ShipToCustomer_CountryCode too long, max 6 chars");

            (fStmt.Parameters["ShipToCustomer_CountryCode"] as IDbDataParameter).Value = p.ShipToCustomer_CountryCode;
        }
        else
            (fStmt.Parameters["ShipToCustomer_CountryCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomerNodeIdentity != null)
        {
            if (p.ShipToCustomerNodeIdentity.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.ShipToCustomerNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToCustomerNodeIdentity"] as IDbDataParameter).Value = p.ShipToCustomerNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipToCustomerNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomer_Phone != null)
        {
            if (p.ShipToCustomer_Phone.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.ShipToCustomer_Phone too long, max 35 chars");

            (fStmt.Parameters["ShipToCustomer_Phone"] as IDbDataParameter).Value = p.ShipToCustomer_Phone;
        }
        else
            (fStmt.Parameters["ShipToCustomer_Phone"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomer_Email != null)
        {
            if (p.ShipToCustomer_Email.Length > 50)
                error.AppendLine("Value for TRILoadCarrierDoc.ShipToCustomer_Email too long, max 50 chars");

            (fStmt.Parameters["ShipToCustomer_Email"] as IDbDataParameter).Value = p.ShipToCustomer_Email;
        }
        else
            (fStmt.Parameters["ShipToCustomer_Email"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToCustomer_ContactName != null)
        {
            if (p.ShipToCustomer_ContactName.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.ShipToCustomer_ContactName too long, max 35 chars");

            (fStmt.Parameters["ShipToCustomer_ContactName"] as IDbDataParameter).Value = p.ShipToCustomer_ContactName;
        }
        else
            (fStmt.Parameters["ShipToCustomer_ContactName"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VehicleIdentity != null)
        {
            if (p.VehicleIdentity.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.VehicleIdentity too long, max 35 chars");

            (fStmt.Parameters["VehicleIdentity"] as IDbDataParameter).Value = p.VehicleIdentity;
        }
        else
            (fStmt.Parameters["VehicleIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VLUIdentity != null)
        {
            if (p.VLUIdentity.Length > 35)
                error.AppendLine("Value for TRILoadCarrierDoc.VLUIdentity too long, max 35 chars");

            (fStmt.Parameters["VLUIdentity"] as IDbDataParameter).Value = p.VLUIdentity;
        }
        else
            (fStmt.Parameters["VLUIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

        if (p.aTRIProductDocs != null)
            foreach (TRIProductDoc c in p.aTRIProductDocs)
                aTRIProductInsert.Process(ref trans, this, c);
      }
  }

  public class TRIProductInsert : SegmentImpl
  {
    private TRIProductCodeInsert aTRIProductCodeInsert;

    public TRIProductInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_TRPINSTR_ART ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",DepartureIdentity");
        s.Append(",Consignment_id");
        s.Append(",ClientIdentity");
        s.Append(",ShipToPartyIdentity");
        s.Append(",ShipToPartyNodeIdentity");
        s.Append(",LoadCarrierIdentity");
        s.Append(",ProductIdentity");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:DepartureIdentity");
        s.Append(",:Consignment_id");
        s.Append(",:ClientIdentity");
        s.Append(",:ShipToPartyIdentity");
        s.Append(",:ShipToPartyNodeIdentity");
        s.Append(",:LoadCarrierIdentity");
        s.Append(",:ProductIdentity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("DepartureIdentity", 35));
        fStmt.Parameters.Add(StringParam("Consignment_id", 35));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("ShipToPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToPartyNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("LoadCarrierIdentity", 35));
        fStmt.Parameters.Add(StringParam("ProductIdentity", 35));

        fStmt.Prepare();

        aTRIProductCodeInsert = new TRIProductCodeInsert(owner);
    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, TRIProductDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for TRIProductDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter TRIProductDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter TRIProductDoc.OPCODE not allowed");


        if (p.DepartureIdentity != null)
        {
            if (p.DepartureIdentity.Length > 35)
                error.AppendLine("Value for TRIProductDoc.DepartureIdentity too long, max 35 chars");

            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = p.DepartureIdentity;
        }
        else
            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Consignment_id != null)
        {
            if (p.Consignment_id.Length > 35)
                error.AppendLine("Value for TRIProductDoc.Consignment_id too long, max 35 chars");

            (fStmt.Parameters["Consignment_id"] as IDbDataParameter).Value = p.Consignment_id;
        }
        else
            (fStmt.Parameters["Consignment_id"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.ShipToPartyIdentity != null)
        {
            if (p.ShipToPartyIdentity.Length > 35)
                error.AppendLine("Value for TRIProductDoc.ShipToPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = p.ShipToPartyIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyNodeIdentity != null)
        {
            if (p.ShipToPartyNodeIdentity.Length > 35)
                error.AppendLine("Value for TRIProductDoc.ShipToPartyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipToPartyNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LoadCarrierIdentity != null)
        {
            if (p.LoadCarrierIdentity.Length > 35)
                error.AppendLine("Value for TRIProductDoc.LoadCarrierIdentity too long, max 35 chars");

            (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = p.LoadCarrierIdentity;
        }
        else
            (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductIdentity != null)
        {
            if (p.ProductIdentity.Length > 35)
                error.AppendLine("Value for TRIProductDoc.ProductIdentity too long, max 35 chars");

            (fStmt.Parameters["ProductIdentity"] as IDbDataParameter).Value = p.ProductIdentity;
        }
        else
            (fStmt.Parameters["ProductIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

        if (p.aTRIProductCodeDocs != null)
            foreach (TRIProductCodeDoc c in p.aTRIProductCodeDocs)
                aTRIProductCodeInsert.Process(ref trans, this, c);
      }
  }

  public class TRIProductCodeInsert : SegmentImpl
  {

    public TRIProductCodeInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_TRPINSTR_ARTCOD ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",DepartureIdentity");
        s.Append(",Consignment_id");
        s.Append(",ClientIdentity");
        s.Append(",ShipToPartyIdentity");
        s.Append(",ShipToPartyNodeIdentity");
        s.Append(",LoadCarrierIdentity");
        s.Append(",ProductIdentity");
        s.Append(",Type");
        s.Append(",Description");
        s.Append(",Code");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:DepartureIdentity");
        s.Append(",:Consignment_id");
        s.Append(",:ClientIdentity");
        s.Append(",:ShipToPartyIdentity");
        s.Append(",:ShipToPartyNodeIdentity");
        s.Append(",:LoadCarrierIdentity");
        s.Append(",:ProductIdentity");
        s.Append(",:Type");
        s.Append(",:Description");
        s.Append(",:Code");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("DepartureIdentity", 35));
        fStmt.Parameters.Add(StringParam("Consignment_id", 35));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("ShipToPartyIdentity", 35));
        fStmt.Parameters.Add(StringParam("ShipToPartyNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("LoadCarrierIdentity", 35));
        fStmt.Parameters.Add(StringParam("ProductIdentity", 35));
        fStmt.Parameters.Add(StringParam("Type", 17));
        fStmt.Parameters.Add(StringParam("Description", 255));
        fStmt.Parameters.Add(StringParam("Code", 255));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, TRIProductCodeDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for TRIProductCodeDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter TRIProductCodeDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter TRIProductCodeDoc.OPCODE not allowed");


        if (p.DepartureIdentity != null)
        {
            if (p.DepartureIdentity.Length > 35)
                error.AppendLine("Value for TRIProductCodeDoc.DepartureIdentity too long, max 35 chars");

            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = p.DepartureIdentity;
        }
        else
            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Consignment_id != null)
        {
            if (p.Consignment_id.Length > 35)
                error.AppendLine("Value for TRIProductCodeDoc.Consignment_id too long, max 35 chars");

            (fStmt.Parameters["Consignment_id"] as IDbDataParameter).Value = p.Consignment_id;
        }
        else
            (fStmt.Parameters["Consignment_id"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.ShipToPartyIdentity != null)
        {
            if (p.ShipToPartyIdentity.Length > 35)
                error.AppendLine("Value for TRIProductCodeDoc.ShipToPartyIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = p.ShipToPartyIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ShipToPartyNodeIdentity != null)
        {
            if (p.ShipToPartyNodeIdentity.Length > 35)
                error.AppendLine("Value for TRIProductCodeDoc.ShipToPartyNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = p.ShipToPartyNodeIdentity;
        }
        else
            (fStmt.Parameters["ShipToPartyNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LoadCarrierIdentity != null)
        {
            if (p.LoadCarrierIdentity.Length > 35)
                error.AppendLine("Value for TRIProductCodeDoc.LoadCarrierIdentity too long, max 35 chars");

            (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = p.LoadCarrierIdentity;
        }
        else
            (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductIdentity != null)
        {
            if (p.ProductIdentity.Length > 35)
                error.AppendLine("Value for TRIProductCodeDoc.ProductIdentity too long, max 35 chars");

            (fStmt.Parameters["ProductIdentity"] as IDbDataParameter).Value = p.ProductIdentity;
        }
        else
            (fStmt.Parameters["ProductIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Type != null)
        {
            if (p.Type.Length > 17)
                error.AppendLine("Value for TRIProductCodeDoc.Type too long, max 17 chars");

            (fStmt.Parameters["Type"] as IDbDataParameter).Value = p.Type;
        }
        else
            (fStmt.Parameters["Type"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Description != null)
        {
            if (p.Description.Length > 255)
                error.AppendLine("Value for TRIProductCodeDoc.Description too long, max 255 chars");

            (fStmt.Parameters["Description"] as IDbDataParameter).Value = p.Description;
        }
        else
            (fStmt.Parameters["Description"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Code != null)
        {
            if (p.Code.Length > 255)
                error.AppendLine("Value for TRIProductCodeDoc.Code too long, max 255 chars");

            (fStmt.Parameters["Code"] as IDbDataParameter).Value = p.Code;
        }
        else
            (fStmt.Parameters["Code"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class TransportPlanHeadInsert : SegmentImpl
  {
    private TransportPlanLineInsert aTransportPlanLineInsert;

    public TransportPlanHeadInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_TRANSPORT_PLAN_HEAD ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",TransportOrderNo");
        s.Append(",ClientIdentity");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderSequence");
        s.Append(",Custypid");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:TransportOrderNo");
        s.Append(",:ClientIdentity");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderSequence");
        s.Append(",:Custypid");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("TransportOrderNo", 35));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("Custypid", 8));

        fStmt.Prepare();

        aTransportPlanLineInsert = new TransportPlanLineInsert(owner);
    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, TransportPlanHeadDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for TransportPlanHeadDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter TransportPlanHeadDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter TransportPlanHeadDoc.OPCODE not allowed");


        if (p.TransportOrderNo != null)
        {
            if (p.TransportOrderNo.Length > 35)
                error.AppendLine("Value for TransportPlanHeadDoc.TransportOrderNo too long, max 35 chars");

            (fStmt.Parameters["TransportOrderNo"] as IDbDataParameter).Value = p.TransportOrderNo;
        }
        else
            (fStmt.Parameters["TransportOrderNo"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for TransportPlanHeadDoc.CustomerOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Custypid != null)
        {
            if (p.Custypid.Length > 8)
                error.AppendLine("Value for TransportPlanHeadDoc.Custypid too long, max 8 chars");

            (fStmt.Parameters["Custypid"] as IDbDataParameter).Value = p.Custypid;
        }
        else
            (fStmt.Parameters["Custypid"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

        if (p.aTransportPlanLineDocs != null)
            foreach (TransportPlanLineDoc c in p.aTransportPlanLineDocs)
                aTransportPlanLineInsert.Process(ref trans, this, c);
      }
  }

  public class TransportPlanLineInsert : SegmentImpl
  {

    public TransportPlanLineInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_TRANSPORT_PLAN_LINE ( ");
        s.Append(" HAPIRCV_ID");
        s.Append(",OPCODE");
        s.Append(",TransportOrderNo");
        s.Append(",ClientIdentity");
        s.Append(",CustomerOrderNumber");
        s.Append(",CustomerOrderSequence");
        s.Append(",CustomerOrderLinePosition");
        s.Append(",CustomerOrderLineKitPosition");
        s.Append(",CustomerOrderLineSequence");
        s.Append(",CustomerOrderLineType");
        s.Append(",LoadCarrierIdentity");
        s.Append(",LoadCarrierType");
        s.Append(",PalletPackage");
        s.Append(",LoadCarrierEnclosed");
        s.Append(",LoadCarrierVolume");
        s.Append(",LoadCarrierWeight");
        s.Append(",LoadCarrierHeight");
        s.Append(",ProductNumber");
        s.Append(",OrderedQuantity");
        s.Append(",Volume");
        s.Append(",Weight");
        s.Append(",Height");

        s.Append(" ) values ( ");

        s.Append(" :HAPIRCV_ID");
        s.Append(",:OPCODE");
        s.Append(",:TransportOrderNo");
        s.Append(",:ClientIdentity");
        s.Append(",:CustomerOrderNumber");
        s.Append(",:CustomerOrderSequence");
        s.Append(",:CustomerOrderLinePosition");
        s.Append(",:CustomerOrderLineKitPosition");
        s.Append(",:CustomerOrderLineSequence");
        s.Append(",:CustomerOrderLineType");
        s.Append(",:LoadCarrierIdentity");
        s.Append(",:LoadCarrierType");
        s.Append(",:PalletPackage");
        s.Append(",:LoadCarrierEnclosed");
        s.Append(",:LoadCarrierVolume");
        s.Append(",:LoadCarrierWeight");
        s.Append(",:LoadCarrierHeight");
        s.Append(",:ProductNumber");
        s.Append(",:OrderedQuantity");
        s.Append(",:Volume");
        s.Append(",:Weight");
        s.Append(",:Height");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("HAPIRCV_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("TransportOrderNo", 35));
        fStmt.Parameters.Add(StringParam("ClientIdentity", 17));
        fStmt.Parameters.Add(StringParam("CustomerOrderNumber", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 3, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLinePosition", 5, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineKitPosition", 2, 0));
        fStmt.Parameters.Add(NumberParam("CustomerOrderLineSequence", 3, 0));
        fStmt.Parameters.Add(StringParam("CustomerOrderLineType", 1));
        fStmt.Parameters.Add(StringParam("LoadCarrierIdentity", 35));
        fStmt.Parameters.Add(StringParam("LoadCarrierType", 3));
        fStmt.Parameters.Add(StringParam("PalletPackage", 1));
        fStmt.Parameters.Add(StringParam("LoadCarrierEnclosed", 1));
        fStmt.Parameters.Add(NumberParam("LoadCarrierVolume", 19, 9));
        fStmt.Parameters.Add(NumberParam("LoadCarrierWeight", 16, 6));
        fStmt.Parameters.Add(NumberParam("LoadCarrierHeight", 9, 4));
        fStmt.Parameters.Add(StringParam("ProductNumber", 35));
        fStmt.Parameters.Add(NumberParam("OrderedQuantity", 20, 6));
        fStmt.Parameters.Add(NumberParam("Volume", 19, 9));
        fStmt.Parameters.Add(NumberParam("Weight", 16, 6));
        fStmt.Parameters.Add(NumberParam("Height", 9, 4));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, TransportPlanLineDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["HAPIRCV_ID"] as IDbDataParameter).Value = StringValue(trans.HapiTransId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for TransportPlanLineDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter TransportPlanLineDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter TransportPlanLineDoc.OPCODE not allowed");


        if (p.TransportOrderNo != null)
        {
            if (p.TransportOrderNo.Length > 35)
                error.AppendLine("Value for TransportPlanLineDoc.TransportOrderNo too long, max 35 chars");

            (fStmt.Parameters["TransportOrderNo"] as IDbDataParameter).Value = p.TransportOrderNo;
        }
        else
            (fStmt.Parameters["TransportOrderNo"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["ClientIdentity"] as IDbDataParameter).Value = StringValue(trans.CompanyId);

        if (p.CustomerOrderNumber != null)
        {
            if (p.CustomerOrderNumber.Length > 35)
                error.AppendLine("Value for TransportPlanLineDoc.CustomerOrderNumber too long, max 35 chars");

            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = p.CustomerOrderNumber;
        }
        else
            (fStmt.Parameters["CustomerOrderNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLinePosition != null)
        {
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = p.CustomerOrderLinePosition;
        }
        else
            (fStmt.Parameters["CustomerOrderLinePosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLineKitPosition != null)
        {
            (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = p.CustomerOrderLineKitPosition;
        }
        else
            (fStmt.Parameters["CustomerOrderLineKitPosition"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLineSequence != null)
        {
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = p.CustomerOrderLineSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderLineSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderLineType != null)
        {
            if (p.CustomerOrderLineType.Length > 1)
                error.AppendLine("Value for TransportPlanLineDoc.CustomerOrderLineType too long, max 1 chars");

            (fStmt.Parameters["CustomerOrderLineType"] as IDbDataParameter).Value = p.CustomerOrderLineType;
        }
        else
            (fStmt.Parameters["CustomerOrderLineType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LoadCarrierIdentity != null)
        {
            if (p.LoadCarrierIdentity.Length > 35)
                error.AppendLine("Value for TransportPlanLineDoc.LoadCarrierIdentity too long, max 35 chars");

            (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = p.LoadCarrierIdentity;
        }
        else
            (fStmt.Parameters["LoadCarrierIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LoadCarrierType != null)
        {
            if (p.LoadCarrierType.Length > 3)
                error.AppendLine("Value for TransportPlanLineDoc.LoadCarrierType too long, max 3 chars");

            (fStmt.Parameters["LoadCarrierType"] as IDbDataParameter).Value = p.LoadCarrierType;
        }
        else
            (fStmt.Parameters["LoadCarrierType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PalletPackage != null)
        {
            if (p.PalletPackage.Length > 1)
                error.AppendLine("Value for TransportPlanLineDoc.PalletPackage too long, max 1 chars");

            (fStmt.Parameters["PalletPackage"] as IDbDataParameter).Value = p.PalletPackage;
        }
        else
            (fStmt.Parameters["PalletPackage"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LoadCarrierEnclosed != null)
        {
            if (p.LoadCarrierEnclosed.Length > 1)
                error.AppendLine("Value for TransportPlanLineDoc.LoadCarrierEnclosed too long, max 1 chars");

            (fStmt.Parameters["LoadCarrierEnclosed"] as IDbDataParameter).Value = p.LoadCarrierEnclosed;
        }
        else
            (fStmt.Parameters["LoadCarrierEnclosed"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LoadCarrierVolume != null)
        {
            (fStmt.Parameters["LoadCarrierVolume"] as IDbDataParameter).Value = p.LoadCarrierVolume;
        }
        else
            (fStmt.Parameters["LoadCarrierVolume"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LoadCarrierWeight != null)
        {
            (fStmt.Parameters["LoadCarrierWeight"] as IDbDataParameter).Value = p.LoadCarrierWeight;
        }
        else
            (fStmt.Parameters["LoadCarrierWeight"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LoadCarrierHeight != null)
        {
            (fStmt.Parameters["LoadCarrierHeight"] as IDbDataParameter).Value = p.LoadCarrierHeight;
        }
        else
            (fStmt.Parameters["LoadCarrierHeight"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductNumber != null)
        {
            if (p.ProductNumber.Length > 35)
                error.AppendLine("Value for TransportPlanLineDoc.ProductNumber too long, max 35 chars");

            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = p.ProductNumber;
        }
        else
            (fStmt.Parameters["ProductNumber"] as IDbDataParameter).Value = DBNull.Value;

        if (p.OrderedQuantity != null)
        {
            (fStmt.Parameters["OrderedQuantity"] as IDbDataParameter).Value = p.OrderedQuantity;
        }
        else
            (fStmt.Parameters["OrderedQuantity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Volume != null)
        {
            (fStmt.Parameters["Volume"] as IDbDataParameter).Value = p.Volume;
        }
        else
            (fStmt.Parameters["Volume"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Weight != null)
        {
            (fStmt.Parameters["Weight"] as IDbDataParameter).Value = p.Weight;
        }
        else
            (fStmt.Parameters["Weight"] as IDbDataParameter).Value = DBNull.Value;

        if (p.Height != null)
        {
            (fStmt.Parameters["Height"] as IDbDataParameter).Value = p.Height;
        }
        else
            (fStmt.Parameters["Height"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.HapiTransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

}
