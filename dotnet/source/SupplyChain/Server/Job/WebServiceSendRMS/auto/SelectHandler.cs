/*
  File           : 

  Description    : Internal classes for getting outbound data from queue tables.
                   This code was generated, do not edit.

*/
using System;
using System.Text;
using System.Data;
using System.Collections;
using Imi.Framework.Job.Data;

namespace Imi.Wms.WebServices.ExternalInterface
{
  public class SelectHandler
  {
    public string _Debug()
    {
      return "Generated on   : 2017-09-08 11:58:09\r\n" +
             "Generated by   : SWG\\aron@SE0133D\r\n" +
             "Generated in   : C:\\projects\\views\\aron_80M_ss\\dotnet\\source\\CodeGenerators\\wscc\r\n";
    }
  }

  public class DepartureSelect
  {
    private Database db;

    public DepartureSelect(Database db)
    {
      this.db = db;

    }

    public DepartureDoc Process( System.String MsgOutId )
    {
      ArrayList l = InternalProcess( MsgOutId );

      if ( l.Count == 1 )
        return (DepartureDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String MsgOutId )
    {
      ArrayList aDepartureDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " MSG_OUT_DEPARTURE.DEPARTUREIDENTITY" +
               ",MSG_OUT_DEPARTURE.DEPARTUREIDENTITYREFERENCE" +
               ",MSG_OUT_DEPARTURE.FROMNODEIDENTITY" +
               ",MSG_OUT_DEPARTURE.DELIVERYMETHOD" +
               ",MSG_OUT_DEPARTURE.ROUTEIDENTITY" +
               ",MSG_OUT_DEPARTURE.ROUTEDESCRIPTION" +
               ",MSG_OUT_DEPARTURE.CUSTOMERORDERRELEASEDATETIME" +
               ",MSG_OUT_DEPARTURE.CUSTOMERORDERSTOPDATETIME" +
               ",MSG_OUT_DEPARTURE.TRANSITSTOPDATETIME" +
               ",MSG_OUT_DEPARTURE.PLANNEDDEPARTUREDATETIME" +
               ",MSG_OUT_DEPARTURE.CHECKPRODUCTTRANSPORTTYPE" +
               ",MSG_OUT_DEPARTURE.VEHICLEIDENTITY" +
        " from   MSG_OUT_DEPARTURE" +
        " where  MSG_OUT_DEPARTURE.MSG_OUT_ID = '" + MsgOutId + "'" );

      while ( r.Read() )
      {
        DepartureDoc aDepartureDoc = new DepartureDoc();

        aDepartureDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aDepartureDoc.DepartureIdentity = null;
        else
        {
          aDepartureDoc.DepartureIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aDepartureDoc.DepartureIdentityReference = null;
        else
        {
          aDepartureDoc.DepartureIdentityReference = r.GetString( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aDepartureDoc.FromNodeIdentity = null;
        else
        {
          aDepartureDoc.FromNodeIdentity = r.GetString( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aDepartureDoc.DeliveryMethod = null;
        else
        {
          aDepartureDoc.DeliveryMethod = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aDepartureDoc.RouteIdentity = null;
        else
        {
          aDepartureDoc.RouteIdentity = r.GetString( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aDepartureDoc.RouteDescription = null;
        else
        {
          aDepartureDoc.RouteDescription = r.GetString( 5 );
        }

        if ( r.IsDBNull( 6 ) )
          aDepartureDoc.CustomerOrderReleaseDateTime = null;
        else
        {
          aDepartureDoc.CustomerOrderReleaseDateTime = DateTime.SpecifyKind(r.GetDateTime( 6 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 7 ) )
          aDepartureDoc.CustomerOrderStopDateTime = null;
        else
        {
          aDepartureDoc.CustomerOrderStopDateTime = DateTime.SpecifyKind(r.GetDateTime( 7 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 8 ) )
          aDepartureDoc.TransitStopDateTime = null;
        else
        {
          aDepartureDoc.TransitStopDateTime = DateTime.SpecifyKind(r.GetDateTime( 8 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 9 ) )
          aDepartureDoc.PlannedDepartureDateTime = null;
        else
        {
          aDepartureDoc.PlannedDepartureDateTime = DateTime.SpecifyKind(r.GetDateTime( 9 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 10 ) )
          aDepartureDoc.CheckProductTransportType = null;
        else
        {
          aDepartureDoc.CheckProductTransportType = r.GetString( 10 );
        }

        if ( r.IsDBNull( 11 ) )
          aDepartureDoc.VehicleIdentity = null;
        else
        {
          aDepartureDoc.VehicleIdentity = r.GetString( 11 );
        }

        aDepartureDocList.Add( aDepartureDoc );
      }

      r.Close();


      return aDepartureDocList;
    }
  }

  public class DepartureNodeSelect
  {
    private Database db;

    public DepartureNodeSelect(Database db)
    {
      this.db = db;

    }

    public DepartureNodeDoc Process( System.String MsgOutId )
    {
      ArrayList l = InternalProcess( MsgOutId );

      if ( l.Count == 1 )
        return (DepartureNodeDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String MsgOutId )
    {
      ArrayList aDepartureNodeDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " MSG_OUT_DEPARTURE_NODE.DEPARTUREIDENTITY" +
               ",MSG_OUT_DEPARTURE_NODE.SEQNUM" +
               ",MSG_OUT_DEPARTURE_NODE.TONODEIDENTITY" +
               ",MSG_OUT_DEPARTURE_NODE.ESTIMATEDARRIVALDATETIME" +
               ",MSG_OUT_DEPARTURE_NODE.RECEIVETRANSITGOODS" +
        " from   MSG_OUT_DEPARTURE_NODE" +
        " where  MSG_OUT_DEPARTURE_NODE.MSG_OUT_ID = '" + MsgOutId + "'" );

      while ( r.Read() )
      {
        DepartureNodeDoc aDepartureNodeDoc = new DepartureNodeDoc();

        aDepartureNodeDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aDepartureNodeDoc.DepartureIdentity = null;
        else
        {
          aDepartureNodeDoc.DepartureIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aDepartureNodeDoc.SEQNUM = null;
        else
        {
          aDepartureNodeDoc.SEQNUM = r.GetInt32( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aDepartureNodeDoc.ToNodeIdentity = null;
        else
        {
          aDepartureNodeDoc.ToNodeIdentity = r.GetString( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aDepartureNodeDoc.EstimatedArrivalDateTime = null;
        else
        {
          aDepartureNodeDoc.EstimatedArrivalDateTime = DateTime.SpecifyKind(r.GetDateTime( 3 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 4 ) )
          aDepartureNodeDoc.ReceiveTransitGoods = null;
        else
        {
          aDepartureNodeDoc.ReceiveTransitGoods = r.GetString( 4 );
        }

        aDepartureNodeDocList.Add( aDepartureNodeDoc );
      }

      r.Close();


      return aDepartureNodeDocList;
    }
  }

  public class DepartureTransportTypeSelect
  {
    private Database db;

    public DepartureTransportTypeSelect(Database db)
    {
      this.db = db;

    }

    public DepartureTransportTypeDoc Process( System.String MsgOutId )
    {
      ArrayList l = InternalProcess( MsgOutId );

      if ( l.Count == 1 )
        return (DepartureTransportTypeDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String MsgOutId )
    {
      ArrayList aDepartureTransportTypeDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " MSG_OUT_DEPARTURE_TRP.DEPARTUREIDENTITY" +
               ",MSG_OUT_DEPARTURE_TRP.PRODUCTTRANSPORTIDENTITY" +
        " from   MSG_OUT_DEPARTURE_TRP" +
        " where  MSG_OUT_DEPARTURE_TRP.MSG_OUT_ID = '" + MsgOutId + "'" );

      while ( r.Read() )
      {
        DepartureTransportTypeDoc aDepartureTransportTypeDoc = new DepartureTransportTypeDoc();

        aDepartureTransportTypeDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aDepartureTransportTypeDoc.DepartureIdentity = null;
        else
        {
          aDepartureTransportTypeDoc.DepartureIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aDepartureTransportTypeDoc.ProductTransportIdentity = null;
        else
        {
          aDepartureTransportTypeDoc.ProductTransportIdentity = r.GetString( 1 );
        }

        aDepartureTransportTypeDocList.Add( aDepartureTransportTypeDoc );
      }

      r.Close();


      return aDepartureTransportTypeDocList;
    }
  }

  public class DepartureLoadSelect
  {
    private Database db;

    public DepartureLoadSelect(Database db)
    {
      this.db = db;

    }

    public DepartureLoadDoc Process( System.String MsgOutId )
    {
      ArrayList l = InternalProcess( MsgOutId );

      if ( l.Count == 1 )
        return (DepartureLoadDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String MsgOutId )
    {
      ArrayList aDepartureLoadDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " MSG_OUT_DEPLOAD.DEPARTURELOADIDENTITY" +
               ",MSG_OUT_DEPLOAD.CUSTOMERORDERSEQUENCE" +
               ",MSG_OUT_DEPLOAD.DEPARTUREIDENTITY" +
               ",MSG_OUT_DEPLOAD.ROUTEIDENTITY" +
               ",MSG_OUT_DEPLOAD.ROUTEDESCRIPTION" +
               ",MSG_OUT_DEPLOAD.CUSTOMERORDERRELEASEDATETIME" +
               ",MSG_OUT_DEPLOAD.CUSTOMERORDERSTOPDATETIME" +
               ",MSG_OUT_DEPLOAD.PLANNEDDEPARTUREDATETIME" +
               ",MSG_OUT_DEPLOAD.ESTIMATEDARRIVALDATETIME" +
               ",MSG_OUT_DEPLOAD.LASTCHAINDEPARTUREIDENTITY" +
               ",MSG_OUT_DEPLOAD.WHYNODEPARTUREMESSAGE" +
        " from   MSG_OUT_DEPLOAD" +
        " where  MSG_OUT_DEPLOAD.MSG_OUT_ID = '" + MsgOutId + "'" );

      while ( r.Read() )
      {
        DepartureLoadDoc aDepartureLoadDoc = new DepartureLoadDoc();

        aDepartureLoadDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aDepartureLoadDoc.DepartureLoadIdentity = null;
        else
        {
          aDepartureLoadDoc.DepartureLoadIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aDepartureLoadDoc.CustomerOrderSequence = null;
        else
        {
          aDepartureLoadDoc.CustomerOrderSequence = Convert.ToDouble( r.GetDecimal( 1 ) );
        }

        if ( r.IsDBNull( 2 ) )
          aDepartureLoadDoc.DepartureIdentity = null;
        else
        {
          aDepartureLoadDoc.DepartureIdentity = r.GetString( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aDepartureLoadDoc.RouteIdentity = null;
        else
        {
          aDepartureLoadDoc.RouteIdentity = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aDepartureLoadDoc.RouteDescription = null;
        else
        {
          aDepartureLoadDoc.RouteDescription = r.GetString( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aDepartureLoadDoc.CustomerOrderReleaseDateTime = null;
        else
        {
          aDepartureLoadDoc.CustomerOrderReleaseDateTime = DateTime.SpecifyKind(r.GetDateTime( 5 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 6 ) )
          aDepartureLoadDoc.CustomerOrderStopDateTime = null;
        else
        {
          aDepartureLoadDoc.CustomerOrderStopDateTime = DateTime.SpecifyKind(r.GetDateTime( 6 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 7 ) )
          aDepartureLoadDoc.PlannedDepartureDateTime = null;
        else
        {
          aDepartureLoadDoc.PlannedDepartureDateTime = DateTime.SpecifyKind(r.GetDateTime( 7 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 8 ) )
          aDepartureLoadDoc.EstimatedArrivalDateTime = null;
        else
        {
          aDepartureLoadDoc.EstimatedArrivalDateTime = DateTime.SpecifyKind(r.GetDateTime( 8 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 9 ) )
          aDepartureLoadDoc.LastChainDepartureIdentity = null;
        else
        {
          aDepartureLoadDoc.LastChainDepartureIdentity = r.GetString( 9 );
        }

        if ( r.IsDBNull( 10 ) )
          aDepartureLoadDoc.WhyNoDepartureMessage = null;
        else
        {
          aDepartureLoadDoc.WhyNoDepartureMessage = r.GetString( 10 );
        }

        aDepartureLoadDocList.Add( aDepartureLoadDoc );
      }

      r.Close();


      return aDepartureLoadDocList;
    }
  }

  public class ModifyDepartureLoadSelect
  {
    private Database db;

    public ModifyDepartureLoadSelect(Database db)
    {
      this.db = db;

    }

    public ModifyDepartureLoadDoc Process( System.String MsgOutId )
    {
      ArrayList l = InternalProcess( MsgOutId );

      if ( l.Count == 1 )
        return (ModifyDepartureLoadDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String MsgOutId )
    {
      ArrayList aModifyDepartureLoadDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " MSG_OUT_MODIFY_DEPLOAD.DEPARTURELOADIDENTITY" +
               ",MSG_OUT_MODIFY_DEPLOAD.FROMNODEIDENTITY" +
               ",MSG_OUT_MODIFY_DEPLOAD.DEPARTUREIDENTITY" +
               ",MSG_OUT_MODIFY_DEPLOAD.ROUTEIDENTITY" +
               ",MSG_OUT_MODIFY_DEPLOAD.ROUTEDESCRIPTION" +
               ",MSG_OUT_MODIFY_DEPLOAD.CUSTOMERORDERRELEASEDATETIME" +
               ",MSG_OUT_MODIFY_DEPLOAD.CUSTOMERORDERSTOPDATETIME" +
               ",MSG_OUT_MODIFY_DEPLOAD.PLANNEDDEPARTUREDATETIME" +
               ",MSG_OUT_MODIFY_DEPLOAD.ESTIMATEDARRIVALDATETIME" +
        " from   MSG_OUT_MODIFY_DEPLOAD" +
        " where  MSG_OUT_MODIFY_DEPLOAD.MSG_OUT_ID = '" + MsgOutId + "'" );

      while ( r.Read() )
      {
        ModifyDepartureLoadDoc aModifyDepartureLoadDoc = new ModifyDepartureLoadDoc();

        aModifyDepartureLoadDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aModifyDepartureLoadDoc.DepartureLoadIdentity = null;
        else
        {
          aModifyDepartureLoadDoc.DepartureLoadIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aModifyDepartureLoadDoc.FromNodeIdentity = null;
        else
        {
          aModifyDepartureLoadDoc.FromNodeIdentity = r.GetString( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aModifyDepartureLoadDoc.DepartureIdentity = null;
        else
        {
          aModifyDepartureLoadDoc.DepartureIdentity = r.GetString( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aModifyDepartureLoadDoc.RouteIdentity = null;
        else
        {
          aModifyDepartureLoadDoc.RouteIdentity = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aModifyDepartureLoadDoc.RouteDescription = null;
        else
        {
          aModifyDepartureLoadDoc.RouteDescription = r.GetString( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aModifyDepartureLoadDoc.CustomerOrderReleaseDateTime = null;
        else
        {
          aModifyDepartureLoadDoc.CustomerOrderReleaseDateTime = DateTime.SpecifyKind(r.GetDateTime( 5 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 6 ) )
          aModifyDepartureLoadDoc.CustomerOrderStopDateTime = null;
        else
        {
          aModifyDepartureLoadDoc.CustomerOrderStopDateTime = DateTime.SpecifyKind(r.GetDateTime( 6 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 7 ) )
          aModifyDepartureLoadDoc.PlannedDepartureDateTime = null;
        else
        {
          aModifyDepartureLoadDoc.PlannedDepartureDateTime = DateTime.SpecifyKind(r.GetDateTime( 7 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 8 ) )
          aModifyDepartureLoadDoc.EstimatedArrivalDateTime = null;
        else
        {
          aModifyDepartureLoadDoc.EstimatedArrivalDateTime = DateTime.SpecifyKind(r.GetDateTime( 8 ), DateTimeKind.Local);
        }

        aModifyDepartureLoadDocList.Add( aModifyDepartureLoadDoc );
      }

      r.Close();


      return aModifyDepartureLoadDocList;
    }
  }

  public class RemoveDepartureSelect
  {
    private Database db;

    public RemoveDepartureSelect(Database db)
    {
      this.db = db;

    }

    public RemoveDepartureDoc Process( System.String MsgOutId )
    {
      ArrayList l = InternalProcess( MsgOutId );

      if ( l.Count == 1 )
        return (RemoveDepartureDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String MsgOutId )
    {
      ArrayList aRemoveDepartureDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " MSG_OUT_REMOVE_DEP.DEPARTUREIDENTITY" +
        " from   MSG_OUT_REMOVE_DEP" +
        " where  MSG_OUT_REMOVE_DEP.MSG_OUT_ID = '" + MsgOutId + "'" );

      while ( r.Read() )
      {
        RemoveDepartureDoc aRemoveDepartureDoc = new RemoveDepartureDoc();

        aRemoveDepartureDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aRemoveDepartureDoc.DepartureIdentity = null;
        else
        {
          aRemoveDepartureDoc.DepartureIdentity = r.GetString( 0 );
        }

        aRemoveDepartureDocList.Add( aRemoveDepartureDoc );
      }

      r.Close();


      return aRemoveDepartureDocList;
    }
  }

  public class RemoveDepartureNodeSelect
  {
    private Database db;

    public RemoveDepartureNodeSelect(Database db)
    {
      this.db = db;

    }

    public RemoveDepartureNodeDoc Process( System.String MsgOutId )
    {
      ArrayList l = InternalProcess( MsgOutId );

      if ( l.Count == 1 )
        return (RemoveDepartureNodeDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String MsgOutId )
    {
      ArrayList aRemoveDepartureNodeDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " MSG_OUT_REMOVE_DEP_NODE.DEPARTUREIDENTITY" +
               ",MSG_OUT_REMOVE_DEP_NODE.SEQNUM" +
        " from   MSG_OUT_REMOVE_DEP_NODE" +
        " where  MSG_OUT_REMOVE_DEP_NODE.MSG_OUT_ID = '" + MsgOutId + "'" );

      while ( r.Read() )
      {
        RemoveDepartureNodeDoc aRemoveDepartureNodeDoc = new RemoveDepartureNodeDoc();

        aRemoveDepartureNodeDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aRemoveDepartureNodeDoc.DepartureIdentity = null;
        else
        {
          aRemoveDepartureNodeDoc.DepartureIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aRemoveDepartureNodeDoc.SEQNUM = null;
        else
        {
          aRemoveDepartureNodeDoc.SEQNUM = r.GetInt32( 1 );
        }

        aRemoveDepartureNodeDocList.Add( aRemoveDepartureNodeDoc );
      }

      r.Close();


      return aRemoveDepartureNodeDocList;
    }
  }

  public class RemoveDepartureTransportTypeSelect
  {
    private Database db;

    public RemoveDepartureTransportTypeSelect(Database db)
    {
      this.db = db;

    }

    public RemoveDepartureTransportTypeDoc Process( System.String MsgOutId )
    {
      ArrayList l = InternalProcess( MsgOutId );

      if ( l.Count == 1 )
        return (RemoveDepartureTransportTypeDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String MsgOutId )
    {
      ArrayList aRemoveDepartureTransportTypeDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " MSG_OUT_REMOVE_DEP_TRP.DEPARTUREIDENTITY" +
               ",MSG_OUT_REMOVE_DEP_TRP.PRODUCTTRANSPORTIDENTITY" +
        " from   MSG_OUT_REMOVE_DEP_TRP" +
        " where  MSG_OUT_REMOVE_DEP_TRP.MSG_OUT_ID = '" + MsgOutId + "'" );

      while ( r.Read() )
      {
        RemoveDepartureTransportTypeDoc aRemoveDepartureTransportTypeDoc = new RemoveDepartureTransportTypeDoc();

        aRemoveDepartureTransportTypeDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aRemoveDepartureTransportTypeDoc.DepartureIdentity = null;
        else
        {
          aRemoveDepartureTransportTypeDoc.DepartureIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aRemoveDepartureTransportTypeDoc.ProductTransportIdentity = null;
        else
        {
          aRemoveDepartureTransportTypeDoc.ProductTransportIdentity = r.GetString( 1 );
        }

        aRemoveDepartureTransportTypeDocList.Add( aRemoveDepartureTransportTypeDoc );
      }

      r.Close();


      return aRemoveDepartureTransportTypeDocList;
    }
  }

  public class ConfirmSelect
  {
    private Database db;

    public ConfirmSelect(Database db)
    {
      this.db = db;

    }

    public ConfirmDoc Process( System.String MsgOutId )
    {
      ArrayList l = InternalProcess( MsgOutId );

      if ( l.Count == 1 )
        return (ConfirmDoc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String MsgOutId )
    {
      ArrayList aConfirmDocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " MSG_OUT_CONFIRM.TRANSACTION_ID" +
               ",MSG_OUT_CONFIRM.TRANSACTION_STATUS" +
               ",MSG_OUT_CONFIRM.ERRCODE" +
               ",MSG_OUT_CONFIRM.ERRMSG" +
        " from   MSG_OUT_CONFIRM" +
        " where  MSG_OUT_CONFIRM.MSG_OUT_ID = '" + MsgOutId + "'" );

      while ( r.Read() )
      {
        ConfirmDoc aConfirmDoc = new ConfirmDoc();

        aConfirmDoc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aConfirmDoc.TransactionId = null;
        else
        {
          aConfirmDoc.TransactionId = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aConfirmDoc.TransactionStatus = null;
        else
        {
          aConfirmDoc.TransactionStatus = r.GetString( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aConfirmDoc.ErrCode = null;
        else
        {
          aConfirmDoc.ErrCode = r.GetString( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aConfirmDoc.ErrMsg = null;
        else
        {
          aConfirmDoc.ErrMsg = r.GetString( 3 );
        }

        aConfirmDocList.Add( aConfirmDoc );
      }

      r.Close();


      return aConfirmDocList;
    }
  }

  public class GeneratedComparer
  {
  }
}
