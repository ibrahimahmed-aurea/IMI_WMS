/*
  File           : 

  Description    : Internal classes for inserting inbound data into queue tables.
                   This code was generated, do not edit.

*/
using System;
using System.Text;
using System.Data;
using System.Data.Common;

namespace Imi.Wms.WebServices.OutboundTesterRMS
{
  public class InsertHandler
  {
      public string _Debug()
      {
          return "Generated on   : 2017-09-08 11:58:11\r\n" +
                 "Generated by   : SWG\\aron@SE0133D\r\n" +
                 "Generated in   : C:\\projects\\views\\aron_80M_ss\\dotnet\\source\\CodeGenerators\\wscc\r\n";
      }
  }

  public class DepartureInsert : SegmentImpl
  {

    public DepartureInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_MSG_OUT_DEPARTURE ( ");
        s.Append(" MSG_IN_ID");
        s.Append(",OPCODE");
        s.Append(",DepartureIdentity");
        s.Append(",DepartureIdentityReference");
        s.Append(",FromNodeIdentity");
        s.Append(",DeliveryMethod");
        s.Append(",RouteIdentity");
        s.Append(",RouteDescription");
        s.Append(",CustomerOrderReleaseDateTime");
        s.Append(",CustomerOrderStopDateTime");
        s.Append(",TransitStopDateTime");
        s.Append(",PlannedDepartureDateTime");
        s.Append(",CheckProductTransportType");
        s.Append(",VehicleIdentity");

        s.Append(" ) values ( ");

        s.Append(" :MSG_IN_ID");
        s.Append(",:OPCODE");
        s.Append(",:DepartureIdentity");
        s.Append(",:DepartureIdentityReference");
        s.Append(",:FromNodeIdentity");
        s.Append(",:DeliveryMethod");
        s.Append(",:RouteIdentity");
        s.Append(",:RouteDescription");
        s.Append(",:CustomerOrderReleaseDateTime");
        s.Append(",:CustomerOrderStopDateTime");
        s.Append(",:TransitStopDateTime");
        s.Append(",:PlannedDepartureDateTime");
        s.Append(",:CheckProductTransportType");
        s.Append(",:VehicleIdentity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("MSG_IN_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("DepartureIdentity", 35));
        fStmt.Parameters.Add(StringParam("DepartureIdentityReference", 35));
        fStmt.Parameters.Add(StringParam("FromNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("DeliveryMethod", 17));
        fStmt.Parameters.Add(StringParam("RouteIdentity", 17));
        fStmt.Parameters.Add(StringParam("RouteDescription", 35));
        fStmt.Parameters.Add(DateParam("CustomerOrderReleaseDateTime"));
        fStmt.Parameters.Add(DateParam("CustomerOrderStopDateTime"));
        fStmt.Parameters.Add(DateParam("TransitStopDateTime"));
        fStmt.Parameters.Add(DateParam("PlannedDepartureDateTime"));
        fStmt.Parameters.Add(StringParam("CheckProductTransportType", 1));
        fStmt.Parameters.Add(StringParam("VehicleIdentity", 35));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, DepartureDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["MSG_IN_ID"] as IDbDataParameter).Value = StringValue(trans.MsgInId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for DepartureDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter DepartureDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter DepartureDoc.OPCODE not allowed");


        if (p.DepartureIdentity != null)
        {
            if (p.DepartureIdentity.Length > 35)
                error.AppendLine("Value for DepartureDoc.DepartureIdentity too long, max 35 chars");

            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = p.DepartureIdentity;
        }
        else
            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DepartureIdentityReference != null)
        {
            if (p.DepartureIdentityReference.Length > 35)
                error.AppendLine("Value for DepartureDoc.DepartureIdentityReference too long, max 35 chars");

            (fStmt.Parameters["DepartureIdentityReference"] as IDbDataParameter).Value = p.DepartureIdentityReference;
        }
        else
            (fStmt.Parameters["DepartureIdentityReference"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FromNodeIdentity != null)
        {
            if (p.FromNodeIdentity.Length > 35)
                error.AppendLine("Value for DepartureDoc.FromNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["FromNodeIdentity"] as IDbDataParameter).Value = p.FromNodeIdentity;
        }
        else
            (fStmt.Parameters["FromNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DeliveryMethod != null)
        {
            if (p.DeliveryMethod.Length > 17)
                error.AppendLine("Value for DepartureDoc.DeliveryMethod too long, max 17 chars");

            (fStmt.Parameters["DeliveryMethod"] as IDbDataParameter).Value = p.DeliveryMethod;
        }
        else
            (fStmt.Parameters["DeliveryMethod"] as IDbDataParameter).Value = DBNull.Value;

        if (p.RouteIdentity != null)
        {
            if (p.RouteIdentity.Length > 17)
                error.AppendLine("Value for DepartureDoc.RouteIdentity too long, max 17 chars");

            (fStmt.Parameters["RouteIdentity"] as IDbDataParameter).Value = p.RouteIdentity;
        }
        else
            (fStmt.Parameters["RouteIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.RouteDescription != null)
        {
            if (p.RouteDescription.Length > 35)
                error.AppendLine("Value for DepartureDoc.RouteDescription too long, max 35 chars");

            (fStmt.Parameters["RouteDescription"] as IDbDataParameter).Value = p.RouteDescription;
        }
        else
            (fStmt.Parameters["RouteDescription"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderReleaseDateTime != null)
        {
            (fStmt.Parameters["CustomerOrderReleaseDateTime"] as IDbDataParameter).Value = p.CustomerOrderReleaseDateTime;
        }
        else
            (fStmt.Parameters["CustomerOrderReleaseDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderStopDateTime != null)
        {
            (fStmt.Parameters["CustomerOrderStopDateTime"] as IDbDataParameter).Value = p.CustomerOrderStopDateTime;
        }
        else
            (fStmt.Parameters["CustomerOrderStopDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TransitStopDateTime != null)
        {
            (fStmt.Parameters["TransitStopDateTime"] as IDbDataParameter).Value = p.TransitStopDateTime;
        }
        else
            (fStmt.Parameters["TransitStopDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PlannedDepartureDateTime != null)
        {
            (fStmt.Parameters["PlannedDepartureDateTime"] as IDbDataParameter).Value = p.PlannedDepartureDateTime;
        }
        else
            (fStmt.Parameters["PlannedDepartureDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CheckProductTransportType != null)
        {
            if (p.CheckProductTransportType.Length > 1)
                error.AppendLine("Value for DepartureDoc.CheckProductTransportType too long, max 1 chars");

            (fStmt.Parameters["CheckProductTransportType"] as IDbDataParameter).Value = p.CheckProductTransportType;
        }
        else
            (fStmt.Parameters["CheckProductTransportType"] as IDbDataParameter).Value = DBNull.Value;

        if (p.VehicleIdentity != null)
        {
            if (p.VehicleIdentity.Length > 35)
                error.AppendLine("Value for DepartureDoc.VehicleIdentity too long, max 35 chars");

            (fStmt.Parameters["VehicleIdentity"] as IDbDataParameter).Value = p.VehicleIdentity;
        }
        else
            (fStmt.Parameters["VehicleIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.TransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class DepartureNodeInsert : SegmentImpl
  {

    public DepartureNodeInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_MSG_OUT_DEPARTURE_NODE ( ");
        s.Append(" MSG_IN_ID");
        s.Append(",OPCODE");
        s.Append(",DepartureIdentity");
        s.Append(",SEQNUM");
        s.Append(",ToNodeIdentity");
        s.Append(",EstimatedArrivalDateTime");
        s.Append(",ReceiveTransitGoods");

        s.Append(" ) values ( ");

        s.Append(" :MSG_IN_ID");
        s.Append(",:OPCODE");
        s.Append(",:DepartureIdentity");
        s.Append(",:SEQNUM");
        s.Append(",:ToNodeIdentity");
        s.Append(",:EstimatedArrivalDateTime");
        s.Append(",:ReceiveTransitGoods");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("MSG_IN_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("DepartureIdentity", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 5, 0));
        fStmt.Parameters.Add(StringParam("ToNodeIdentity", 35));
        fStmt.Parameters.Add(DateParam("EstimatedArrivalDateTime"));
        fStmt.Parameters.Add(StringParam("ReceiveTransitGoods", 1));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, DepartureNodeDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["MSG_IN_ID"] as IDbDataParameter).Value = StringValue(trans.MsgInId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for DepartureNodeDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter DepartureNodeDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter DepartureNodeDoc.OPCODE not allowed");


        if (p.DepartureIdentity != null)
        {
            if (p.DepartureIdentity.Length > 35)
                error.AppendLine("Value for DepartureNodeDoc.DepartureIdentity too long, max 35 chars");

            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = p.DepartureIdentity;
        }
        else
            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.TransSeq);

        if (p.ToNodeIdentity != null)
        {
            if (p.ToNodeIdentity.Length > 35)
                error.AppendLine("Value for DepartureNodeDoc.ToNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["ToNodeIdentity"] as IDbDataParameter).Value = p.ToNodeIdentity;
        }
        else
            (fStmt.Parameters["ToNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.EstimatedArrivalDateTime != null)
        {
            (fStmt.Parameters["EstimatedArrivalDateTime"] as IDbDataParameter).Value = p.EstimatedArrivalDateTime;
        }
        else
            (fStmt.Parameters["EstimatedArrivalDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ReceiveTransitGoods != null)
        {
            if (p.ReceiveTransitGoods.Length > 1)
                error.AppendLine("Value for DepartureNodeDoc.ReceiveTransitGoods too long, max 1 chars");

            (fStmt.Parameters["ReceiveTransitGoods"] as IDbDataParameter).Value = p.ReceiveTransitGoods;
        }
        else
            (fStmt.Parameters["ReceiveTransitGoods"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.TransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class DepartureTransportTypeInsert : SegmentImpl
  {

    public DepartureTransportTypeInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_MSG_OUT_DEPARTURE_TRP ( ");
        s.Append(" MSG_IN_ID");
        s.Append(",OPCODE");
        s.Append(",DepartureIdentity");
        s.Append(",ProductTransportIdentity");

        s.Append(" ) values ( ");

        s.Append(" :MSG_IN_ID");
        s.Append(",:OPCODE");
        s.Append(",:DepartureIdentity");
        s.Append(",:ProductTransportIdentity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("MSG_IN_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("DepartureIdentity", 35));
        fStmt.Parameters.Add(StringParam("ProductTransportIdentity", 5));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, DepartureTransportTypeDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["MSG_IN_ID"] as IDbDataParameter).Value = StringValue(trans.MsgInId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for DepartureTransportTypeDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter DepartureTransportTypeDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter DepartureTransportTypeDoc.OPCODE not allowed");


        if (p.DepartureIdentity != null)
        {
            if (p.DepartureIdentity.Length > 35)
                error.AppendLine("Value for DepartureTransportTypeDoc.DepartureIdentity too long, max 35 chars");

            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = p.DepartureIdentity;
        }
        else
            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductTransportIdentity != null)
        {
            if (p.ProductTransportIdentity.Length > 5)
                error.AppendLine("Value for DepartureTransportTypeDoc.ProductTransportIdentity too long, max 5 chars");

            (fStmt.Parameters["ProductTransportIdentity"] as IDbDataParameter).Value = p.ProductTransportIdentity;
        }
        else
            (fStmt.Parameters["ProductTransportIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.TransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class DepartureLoadInsert : SegmentImpl
  {

    public DepartureLoadInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_MSG_OUT_DEPLOAD ( ");
        s.Append(" MSG_IN_ID");
        s.Append(",OPCODE");
        s.Append(",DepartureLoadIdentity");
        s.Append(",CustomerOrderSequence");
        s.Append(",DepartureIdentity");
        s.Append(",RouteIdentity");
        s.Append(",RouteDescription");
        s.Append(",CustomerOrderReleaseDateTime");
        s.Append(",CustomerOrderStopDateTime");
        s.Append(",PlannedDepartureDateTime");
        s.Append(",EstimatedArrivalDateTime");
        s.Append(",LastChainDepartureIdentity");
        s.Append(",WhyNoDepartureMessage");

        s.Append(" ) values ( ");

        s.Append(" :MSG_IN_ID");
        s.Append(",:OPCODE");
        s.Append(",:DepartureLoadIdentity");
        s.Append(",:CustomerOrderSequence");
        s.Append(",:DepartureIdentity");
        s.Append(",:RouteIdentity");
        s.Append(",:RouteDescription");
        s.Append(",:CustomerOrderReleaseDateTime");
        s.Append(",:CustomerOrderStopDateTime");
        s.Append(",:PlannedDepartureDateTime");
        s.Append(",:EstimatedArrivalDateTime");
        s.Append(",:LastChainDepartureIdentity");
        s.Append(",:WhyNoDepartureMessage");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("MSG_IN_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("DepartureLoadIdentity", 35));
        fStmt.Parameters.Add(NumberParam("CustomerOrderSequence", 10, 0));
        fStmt.Parameters.Add(StringParam("DepartureIdentity", 35));
        fStmt.Parameters.Add(StringParam("RouteIdentity", 17));
        fStmt.Parameters.Add(StringParam("RouteDescription", 35));
        fStmt.Parameters.Add(DateParam("CustomerOrderReleaseDateTime"));
        fStmt.Parameters.Add(DateParam("CustomerOrderStopDateTime"));
        fStmt.Parameters.Add(DateParam("PlannedDepartureDateTime"));
        fStmt.Parameters.Add(DateParam("EstimatedArrivalDateTime"));
        fStmt.Parameters.Add(StringParam("LastChainDepartureIdentity", 35));
        fStmt.Parameters.Add(StringParam("WhyNoDepartureMessage", 2000));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, DepartureLoadDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["MSG_IN_ID"] as IDbDataParameter).Value = StringValue(trans.MsgInId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for DepartureLoadDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter DepartureLoadDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter DepartureLoadDoc.OPCODE not allowed");


        if (p.DepartureLoadIdentity != null)
        {
            if (p.DepartureLoadIdentity.Length > 35)
                error.AppendLine("Value for DepartureLoadDoc.DepartureLoadIdentity too long, max 35 chars");

            (fStmt.Parameters["DepartureLoadIdentity"] as IDbDataParameter).Value = p.DepartureLoadIdentity;
        }
        else
            (fStmt.Parameters["DepartureLoadIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderSequence != null)
        {
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = p.CustomerOrderSequence;
        }
        else
            (fStmt.Parameters["CustomerOrderSequence"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DepartureIdentity != null)
        {
            if (p.DepartureIdentity.Length > 35)
                error.AppendLine("Value for DepartureLoadDoc.DepartureIdentity too long, max 35 chars");

            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = p.DepartureIdentity;
        }
        else
            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.RouteIdentity != null)
        {
            if (p.RouteIdentity.Length > 17)
                error.AppendLine("Value for DepartureLoadDoc.RouteIdentity too long, max 17 chars");

            (fStmt.Parameters["RouteIdentity"] as IDbDataParameter).Value = p.RouteIdentity;
        }
        else
            (fStmt.Parameters["RouteIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.RouteDescription != null)
        {
            if (p.RouteDescription.Length > 35)
                error.AppendLine("Value for DepartureLoadDoc.RouteDescription too long, max 35 chars");

            (fStmt.Parameters["RouteDescription"] as IDbDataParameter).Value = p.RouteDescription;
        }
        else
            (fStmt.Parameters["RouteDescription"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderReleaseDateTime != null)
        {
            (fStmt.Parameters["CustomerOrderReleaseDateTime"] as IDbDataParameter).Value = p.CustomerOrderReleaseDateTime;
        }
        else
            (fStmt.Parameters["CustomerOrderReleaseDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderStopDateTime != null)
        {
            (fStmt.Parameters["CustomerOrderStopDateTime"] as IDbDataParameter).Value = p.CustomerOrderStopDateTime;
        }
        else
            (fStmt.Parameters["CustomerOrderStopDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PlannedDepartureDateTime != null)
        {
            (fStmt.Parameters["PlannedDepartureDateTime"] as IDbDataParameter).Value = p.PlannedDepartureDateTime;
        }
        else
            (fStmt.Parameters["PlannedDepartureDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.EstimatedArrivalDateTime != null)
        {
            (fStmt.Parameters["EstimatedArrivalDateTime"] as IDbDataParameter).Value = p.EstimatedArrivalDateTime;
        }
        else
            (fStmt.Parameters["EstimatedArrivalDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.LastChainDepartureIdentity != null)
        {
            if (p.LastChainDepartureIdentity.Length > 35)
                error.AppendLine("Value for DepartureLoadDoc.LastChainDepartureIdentity too long, max 35 chars");

            (fStmt.Parameters["LastChainDepartureIdentity"] as IDbDataParameter).Value = p.LastChainDepartureIdentity;
        }
        else
            (fStmt.Parameters["LastChainDepartureIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.WhyNoDepartureMessage != null)
        {
            if (p.WhyNoDepartureMessage.Length > 2000)
                error.AppendLine("Value for DepartureLoadDoc.WhyNoDepartureMessage too long, max 2000 chars");

            (fStmt.Parameters["WhyNoDepartureMessage"] as IDbDataParameter).Value = p.WhyNoDepartureMessage;
        }
        else
            (fStmt.Parameters["WhyNoDepartureMessage"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.TransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class ModifyDepartureLoadInsert : SegmentImpl
  {

    public ModifyDepartureLoadInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_MSG_OUT_MODIFY_DEPLOAD ( ");
        s.Append(" MSG_IN_ID");
        s.Append(",OPCODE");
        s.Append(",DepartureLoadIdentity");
        s.Append(",FromNodeIdentity");
        s.Append(",DepartureIdentity");
        s.Append(",RouteIdentity");
        s.Append(",RouteDescription");
        s.Append(",CustomerOrderReleaseDateTime");
        s.Append(",CustomerOrderStopDateTime");
        s.Append(",PlannedDepartureDateTime");
        s.Append(",EstimatedArrivalDateTime");

        s.Append(" ) values ( ");

        s.Append(" :MSG_IN_ID");
        s.Append(",:OPCODE");
        s.Append(",:DepartureLoadIdentity");
        s.Append(",:FromNodeIdentity");
        s.Append(",:DepartureIdentity");
        s.Append(",:RouteIdentity");
        s.Append(",:RouteDescription");
        s.Append(",:CustomerOrderReleaseDateTime");
        s.Append(",:CustomerOrderStopDateTime");
        s.Append(",:PlannedDepartureDateTime");
        s.Append(",:EstimatedArrivalDateTime");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("MSG_IN_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("DepartureLoadIdentity", 35));
        fStmt.Parameters.Add(StringParam("FromNodeIdentity", 35));
        fStmt.Parameters.Add(StringParam("DepartureIdentity", 35));
        fStmt.Parameters.Add(StringParam("RouteIdentity", 17));
        fStmt.Parameters.Add(StringParam("RouteDescription", 35));
        fStmt.Parameters.Add(DateParam("CustomerOrderReleaseDateTime"));
        fStmt.Parameters.Add(DateParam("CustomerOrderStopDateTime"));
        fStmt.Parameters.Add(DateParam("PlannedDepartureDateTime"));
        fStmt.Parameters.Add(DateParam("EstimatedArrivalDateTime"));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ModifyDepartureLoadDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["MSG_IN_ID"] as IDbDataParameter).Value = StringValue(trans.MsgInId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ModifyDepartureLoadDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ModifyDepartureLoadDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter ModifyDepartureLoadDoc.OPCODE not allowed");


        if (p.DepartureLoadIdentity != null)
        {
            if (p.DepartureLoadIdentity.Length > 35)
                error.AppendLine("Value for ModifyDepartureLoadDoc.DepartureLoadIdentity too long, max 35 chars");

            (fStmt.Parameters["DepartureLoadIdentity"] as IDbDataParameter).Value = p.DepartureLoadIdentity;
        }
        else
            (fStmt.Parameters["DepartureLoadIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.FromNodeIdentity != null)
        {
            if (p.FromNodeIdentity.Length > 35)
                error.AppendLine("Value for ModifyDepartureLoadDoc.FromNodeIdentity too long, max 35 chars");

            (fStmt.Parameters["FromNodeIdentity"] as IDbDataParameter).Value = p.FromNodeIdentity;
        }
        else
            (fStmt.Parameters["FromNodeIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.DepartureIdentity != null)
        {
            if (p.DepartureIdentity.Length > 35)
                error.AppendLine("Value for ModifyDepartureLoadDoc.DepartureIdentity too long, max 35 chars");

            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = p.DepartureIdentity;
        }
        else
            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.RouteIdentity != null)
        {
            if (p.RouteIdentity.Length > 17)
                error.AppendLine("Value for ModifyDepartureLoadDoc.RouteIdentity too long, max 17 chars");

            (fStmt.Parameters["RouteIdentity"] as IDbDataParameter).Value = p.RouteIdentity;
        }
        else
            (fStmt.Parameters["RouteIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.RouteDescription != null)
        {
            if (p.RouteDescription.Length > 35)
                error.AppendLine("Value for ModifyDepartureLoadDoc.RouteDescription too long, max 35 chars");

            (fStmt.Parameters["RouteDescription"] as IDbDataParameter).Value = p.RouteDescription;
        }
        else
            (fStmt.Parameters["RouteDescription"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderReleaseDateTime != null)
        {
            (fStmt.Parameters["CustomerOrderReleaseDateTime"] as IDbDataParameter).Value = p.CustomerOrderReleaseDateTime;
        }
        else
            (fStmt.Parameters["CustomerOrderReleaseDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.CustomerOrderStopDateTime != null)
        {
            (fStmt.Parameters["CustomerOrderStopDateTime"] as IDbDataParameter).Value = p.CustomerOrderStopDateTime;
        }
        else
            (fStmt.Parameters["CustomerOrderStopDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.PlannedDepartureDateTime != null)
        {
            (fStmt.Parameters["PlannedDepartureDateTime"] as IDbDataParameter).Value = p.PlannedDepartureDateTime;
        }
        else
            (fStmt.Parameters["PlannedDepartureDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (p.EstimatedArrivalDateTime != null)
        {
            (fStmt.Parameters["EstimatedArrivalDateTime"] as IDbDataParameter).Value = p.EstimatedArrivalDateTime;
        }
        else
            (fStmt.Parameters["EstimatedArrivalDateTime"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.TransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class RemoveDepartureInsert : SegmentImpl
  {

    public RemoveDepartureInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_MSG_OUT_REMOVE_DEP ( ");
        s.Append(" MSG_IN_ID");
        s.Append(",OPCODE");
        s.Append(",DepartureIdentity");

        s.Append(" ) values ( ");

        s.Append(" :MSG_IN_ID");
        s.Append(",:OPCODE");
        s.Append(",:DepartureIdentity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("MSG_IN_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("DepartureIdentity", 35));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, RemoveDepartureDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["MSG_IN_ID"] as IDbDataParameter).Value = StringValue(trans.MsgInId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for RemoveDepartureDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter RemoveDepartureDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter RemoveDepartureDoc.OPCODE not allowed");


        if (p.DepartureIdentity != null)
        {
            if (p.DepartureIdentity.Length > 35)
                error.AppendLine("Value for RemoveDepartureDoc.DepartureIdentity too long, max 35 chars");

            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = p.DepartureIdentity;
        }
        else
            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.TransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class RemoveDepartureNodeInsert : SegmentImpl
  {

    public RemoveDepartureNodeInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_MSG_OUT_REMOVE_DEP_NODE ( ");
        s.Append(" MSG_IN_ID");
        s.Append(",OPCODE");
        s.Append(",DepartureIdentity");
        s.Append(",SEQNUM");

        s.Append(" ) values ( ");

        s.Append(" :MSG_IN_ID");
        s.Append(",:OPCODE");
        s.Append(",:DepartureIdentity");
        s.Append(",:SEQNUM");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("MSG_IN_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("DepartureIdentity", 35));
        fStmt.Parameters.Add(NumberParam("SEQNUM", 5, 0));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, RemoveDepartureNodeDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["MSG_IN_ID"] as IDbDataParameter).Value = StringValue(trans.MsgInId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for RemoveDepartureNodeDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter RemoveDepartureNodeDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter RemoveDepartureNodeDoc.OPCODE not allowed");


        if (p.DepartureIdentity != null)
        {
            if (p.DepartureIdentity.Length > 35)
                error.AppendLine("Value for RemoveDepartureNodeDoc.DepartureIdentity too long, max 35 chars");

            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = p.DepartureIdentity;
        }
        else
            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = DBNull.Value;

        (fStmt.Parameters["SEQNUM"] as IDbDataParameter).Value = NumberValue(trans.TransSeq);

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.TransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class RemoveDepartureTransportTypeInsert : SegmentImpl
  {

    public RemoveDepartureTransportTypeInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_MSG_OUT_REMOVE_DEP_TRP ( ");
        s.Append(" MSG_IN_ID");
        s.Append(",OPCODE");
        s.Append(",DepartureIdentity");
        s.Append(",ProductTransportIdentity");

        s.Append(" ) values ( ");

        s.Append(" :MSG_IN_ID");
        s.Append(",:OPCODE");
        s.Append(",:DepartureIdentity");
        s.Append(",:ProductTransportIdentity");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("MSG_IN_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("DepartureIdentity", 35));
        fStmt.Parameters.Add(StringParam("ProductTransportIdentity", 5));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, RemoveDepartureTransportTypeDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["MSG_IN_ID"] as IDbDataParameter).Value = StringValue(trans.MsgInId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for RemoveDepartureTransportTypeDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter RemoveDepartureTransportTypeDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter RemoveDepartureTransportTypeDoc.OPCODE not allowed");


        if (p.DepartureIdentity != null)
        {
            if (p.DepartureIdentity.Length > 35)
                error.AppendLine("Value for RemoveDepartureTransportTypeDoc.DepartureIdentity too long, max 35 chars");

            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = p.DepartureIdentity;
        }
        else
            (fStmt.Parameters["DepartureIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ProductTransportIdentity != null)
        {
            if (p.ProductTransportIdentity.Length > 5)
                error.AppendLine("Value for RemoveDepartureTransportTypeDoc.ProductTransportIdentity too long, max 5 chars");

            (fStmt.Parameters["ProductTransportIdentity"] as IDbDataParameter).Value = p.ProductTransportIdentity;
        }
        else
            (fStmt.Parameters["ProductTransportIdentity"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.TransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

  public class ConfirmInsert : SegmentImpl
  {

    public ConfirmInsert(WSBase owner)
        : base(owner)
    {
        StringBuilder s = new StringBuilder("insert into EXT_MSG_OUT_CONFIRM ( ");
        s.Append(" MSG_IN_ID");
        s.Append(",OPCODE");
        s.Append(",Transaction_id");
        s.Append(",Transaction_Status");
        s.Append(",ErrCode");
        s.Append(",Errmsg");

        s.Append(" ) values ( ");

        s.Append(" :MSG_IN_ID");
        s.Append(",:OPCODE");
        s.Append(",:Transaction_id");
        s.Append(",:Transaction_Status");
        s.Append(",:ErrCode");
        s.Append(",:Errmsg");

        s.Append(" )");

        fStmt.CommandText = s.ToString();

        fStmt.Parameters.Add(StringParam("MSG_IN_ID", 35));
        fStmt.Parameters.Add(StringParam("OPCODE", 1));
        fStmt.Parameters.Add(StringParam("Transaction_id", 35));
        fStmt.Parameters.Add(StringParam("Transaction_Status", 1));
        fStmt.Parameters.Add(StringParam("ErrCode", 12));
        fStmt.Parameters.Add(StringParam("Errmsg", 1024));

        fStmt.Prepare();

    }

    public void Process(ref MessageTransaction trans, SegmentImpl parent, ConfirmDoc p)
    {
        StringBuilder error = new StringBuilder();

        if (p == null)
        {
            // No data is available - abort
            throw new NullReferenceException("Failed to process message " + p.GetType() + ". Message structure is empty (null).");
        }

        fStmt.Transaction = trans.Transaction;

        (fStmt.Parameters["MSG_IN_ID"] as IDbDataParameter).Value = StringValue(trans.MsgInId);

        if (p.OPCODE != null)
        {
            if (p.OPCODE.Length > 1)
                error.AppendLine("Value for ConfirmDoc.OPCODE too long, max 1 chars");

            if (p.OPCODE.Length == 0)
                error.AppendLine("Zero length for mandatory parameter ConfirmDoc.OPCODE not allowed");

            (fStmt.Parameters["OPCODE"] as IDbDataParameter).Value = p.OPCODE;
        }
        else
            error.AppendLine("Null value for mandatory parameter ConfirmDoc.OPCODE not allowed");


        if (p.TransactionId != null)
        {
            if (p.TransactionId.Length > 35)
                error.AppendLine("Value for ConfirmDoc.TransactionId too long, max 35 chars");

            (fStmt.Parameters["Transaction_id"] as IDbDataParameter).Value = p.TransactionId;
        }
        else
            (fStmt.Parameters["Transaction_id"] as IDbDataParameter).Value = DBNull.Value;

        if (p.TransactionStatus != null)
        {
            if (p.TransactionStatus.Length > 1)
                error.AppendLine("Value for ConfirmDoc.TransactionStatus too long, max 1 chars");

            (fStmt.Parameters["Transaction_Status"] as IDbDataParameter).Value = p.TransactionStatus;
        }
        else
            (fStmt.Parameters["Transaction_Status"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ErrCode != null)
        {
            if (p.ErrCode.Length > 12)
                error.AppendLine("Value for ConfirmDoc.ErrCode too long, max 12 chars");

            (fStmt.Parameters["ErrCode"] as IDbDataParameter).Value = p.ErrCode;
        }
        else
            (fStmt.Parameters["ErrCode"] as IDbDataParameter).Value = DBNull.Value;

        if (p.ErrMsg != null)
        {
            if (p.ErrMsg.Length > 1024)
                error.AppendLine("Value for ConfirmDoc.ErrMsg too long, max 1024 chars");

            (fStmt.Parameters["Errmsg"] as IDbDataParameter).Value = p.ErrMsg;
        }
        else
            (fStmt.Parameters["Errmsg"] as IDbDataParameter).Value = DBNull.Value;

        if (error.Length > 0)
        {
            throw (new Exception(error.ToString()));
        }

        trans.TransSeq++;

        fStmt.ExecuteNonQuery();

      }
  }

}
