<%-- 
Name:
Author: 
Description: 
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="..\..\Library\Core.cst" Inherits="DialogTemplate" Debug="True" Description="Template description here." %>
<%@ Assembly Name="Cdc.MetaManager.DataAccess" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="Cdc.MetaManager.DataAccess" %>
<%@ Import Namespace="Cdc.MetaManager.DataAccess.Domain.VisualModel" %>
<%@ Property Name="dataGrid" Type="UXDataGrid" Default="" Optional="false" Category="" Description="" %>
<%@ Property Name="attachedProperty" Type="String" Default="" Optional="false" Category="" Description="" %>
<%@ Property Name="debugOutput" Type="System.Boolean" Default="false" Optional="false" Category="" Description="" OnChanged="" Editor="" EditorBase="" Serializer="" %>
<%
    if(!string.IsNullOrEmpty(attachedProperty) && (! attachedProperty.EndsWith(" ")))
	  attachedProperty += " ";

	if (!debugOutput)
	{
%>
	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="*"/>
			<RowDefinition Height="auto"/>
		</Grid.RowDefinitions>	
<%
	}

	if (!debugOutput)
	{
%>
		<controls:DataGrid settings:FrameworkElementStrategySettings.SettingsProviderType="{x:Type providers:DataGridSettingsProvider}" Name="<%= dataGrid.Name %>" Grid.Row="0" <%= attachedProperty %>ItemsSource="{Binding Mode=OneWay}" ScrollViewer.ScrollChanged="ScrollChangedEventHandler"  DataExport="Grid_DataExport" SortDirectionChanging="Grid_SortDirectionChanging">
			<!-- TODO only in overview -->
<%
	}
	else
	{
%>
		<controls:DataGrid settings:FrameworkElementStrategySettings.SettingsProviderType="{x:Type providers:DataGridSettingsProvider}" Name="<%= dataGrid.Name %>" Grid.Row="0" <%= attachedProperty %>ItemsSource="{Binding Mode=OneWay}">
<%
	}
	if (!debugOutput)
	{
%>
			<controls:DataGrid.CommandBindings>
				<CommandBinding Command="{x:Static controls:DataGrid.ToggleDetailCommand}" Executed="ToggleDetailCommandExecutedEventHandler"/>
				<CommandBinding Command="{x:Static controls:DataGrid.DrillDownCommand}" Executed="DrillDownCommandExecutedEventHandler"/>
			</controls:DataGrid.CommandBindings>
<%
	}
%>
			<controls:DataGrid.View>
				<xcdg:TableView ShowRowSelectorPane="False" ColumnVirtualizationMode="Virtualizing"/>
			</controls:DataGrid.View>
			<controls:DataGrid.Columns>
<%
	List<UXDataGridColumn> columns = new List<UXDataGridColumn>();
	
	foreach(UXComponent component in dataGrid.Children)
		columns.Add(component as UXDataGridColumn);
	
	columns.Sort(SortBySequence);
	
	foreach(UXDataGridColumn column in columns)
	{
		if(column.Width > 0) 
		{
			string propertyName = null;
			string converter = "";
			string alignText = "";
			
			if (column.MappedProperty != null)
			{
				propertyName = column.MappedProperty.Name;
				
	   		    if (!string.IsNullOrEmpty(column.MappedProperty.DisplayFormat))
				{
					string displayFormat = column.MappedProperty.DisplayFormat;					
					displayFormat = displayFormat.Replace("}","\\}");
					displayFormat = displayFormat.Replace("} {","} \\{"); 			    
					converter = string.Format(" Converter={{StaticResource stringFormatConverter}}, ConverterParameter=\\{0} ", displayFormat);
								                            
				}				
				if(IsNumeric(column.MappedProperty.Target.Type)) 
				{
					alignText=" TextAlignment=\"Right\"";
				}
			}
			else
			{
				if (debugOutput)
				{
					propertyName = "noName" + columns.IndexOf(column);
				}
			}
 				
			string titleName = null;

			if (debugOutput)
			{
				titleName = column.Caption;				
			}
			else
			{				
				titleName = GetResourceReference(column, "Caption");
			}

			
			if(string.IsNullOrEmpty(converter) && string.IsNullOrEmpty(alignText))
			{   
				   
%>
				<xcdg:Column FieldName="<%= propertyName %>" VisiblePosition="<%= column.Sequence %>" Title="<%= titleName %>" Width="<%= column.Width %>"/>
<%
			}
			else
			{
%>
				<xcdg:Column FieldName="<%= propertyName %>" VisiblePosition="<%= column.Sequence %>" Title="<%= titleName %>" Width="<%= column.Width %>">
					<xcdg:Column.CellContentTemplate>
						<DataTemplate>
							<TextBlock Text="{Binding<%= converter %>}" <%= alignText %>/>
						</DataTemplate>
					</xcdg:Column.CellContentTemplate>
				</xcdg:Column>
<%
			}
		}

	}
%>
			</controls:DataGrid.Columns>
		</controls:DataGrid>
<%
	if (!debugOutput)
	{
%>
		<controls:DataGridStatusBar x:Name="<%= dataGrid.Name %>StatusBar" Grid.Row="1" ServerFeedStatusLabelText="{x:Static resources:StringResources.DataGridStatusBar_ServerFeedStatus_Caption}" ServerFeedStatusTextText="{x:Static resources:StringResources.DataGridStatusBar_ServerFeedStatus_NotStarted}" ExportStatusText="{x:Static resources:StringResources.DataGridStatusBar_ExportStatus_Caption}"/>
	</Grid>
<%
	}
%>
<script runat="template">
	
	private int SortBySequence(UXDataGridColumn a, UXDataGridColumn b)
	{
		if(a.Sequence > b.Sequence)
			return 1;
		if(a.Sequence < b.Sequence)
			return -1;
		return 0;
	}  
	
	private bool IsNumeric(Type t)
	{
		return (t == typeof(int) || t == typeof(long) || t == typeof(float) || t == typeof(double) || t == typeof(decimal));
	}

	private string GetResourceReference(ILocalizable target, string propertyName)
	{
		return string.Format("{{x:Static local:ResourceManager.{0}}}", GlobalizationHelper.GetResourceId(target, propertyName));
	}
</script>