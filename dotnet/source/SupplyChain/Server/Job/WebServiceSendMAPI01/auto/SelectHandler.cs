/*
  File           : 

  Description    : Internal classes for getting outbound data from queue tables.
                   This code was generated, do not edit.

*/
using System;
using System.Text;
using System.Data;
using System.Collections;
using Imi.Framework.Job.Data;

namespace Imi.SupplyChain.Server.Job.WebServiceSendMAPI
{
  public class SelectHandler
  {
    public string _Debug()
    {
      return "Generated on   : 2008-05-12 13:33:55\r\n" +
             "Generated by   : SWG\\olla@IMIPC1091\r\n" +
             "Generated in   : C:\\project\\views\\olla_dotnet_ss\\dotnet\\source\\CodeGenerators\\wscc\r\n";
    }
  }

  public class MovementIn_01Select
  {
    private Database db;

    public MovementIn_01Select(Database db)
    {
      this.db = db;

    }

    public MovementIn_01Doc Process( System.String MapiOutId )
    {
      ArrayList l = InternalProcess( MapiOutId );

      if ( l.Count == 1 )
        return (MovementIn_01Doc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String MapiOutId )
    {
      ArrayList aMovementIn_01DocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " MAPI_OUT_MOVM_IN_01.OPERATIONALCODE" +
               ",MAPI_OUT_MOVM_IN_01.ITEMLOADIDENTITY" +
               ",MAPI_OUT_MOVM_IN_01.PRODUCTNUMBER" +
               ",MAPI_OUT_MOVM_IN_01.FIFODATE" +
               ",MAPI_OUT_MOVM_IN_01.HOLDCODE" +
               ",MAPI_OUT_MOVM_IN_01.PRODUCTIONLOTIDENTITY" +
               ",MAPI_OUT_MOVM_IN_01.CREATEDDATE" +
        " from   MAPI_OUT_MOVM_IN_01" +
        " where  MAPI_OUT_MOVM_IN_01.MAPI_OUT_ID = '" + MapiOutId + "'" );

      while ( r.Read() )
      {
        MovementIn_01Doc aMovementIn_01Doc = new MovementIn_01Doc();

        aMovementIn_01Doc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aMovementIn_01Doc.OperationalCode = null;
        else
        {
          aMovementIn_01Doc.OperationalCode = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aMovementIn_01Doc.ItemLoadIdentity = null;
        else
        {
          aMovementIn_01Doc.ItemLoadIdentity = r.GetString( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aMovementIn_01Doc.ProductNumber = null;
        else
        {
          aMovementIn_01Doc.ProductNumber = r.GetString( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aMovementIn_01Doc.FifoDate = null;
        else
        {
          aMovementIn_01Doc.FifoDate = DateTime.SpecifyKind(r.GetDateTime( 3 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 4 ) )
          aMovementIn_01Doc.HoldCode = null;
        else
        {
          aMovementIn_01Doc.HoldCode = r.GetString( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aMovementIn_01Doc.ProductionLotIdentity = null;
        else
        {
          aMovementIn_01Doc.ProductionLotIdentity = r.GetString( 5 );
        }

        if ( r.IsDBNull( 6 ) )
          aMovementIn_01Doc.CreatedDate = null;
        else
        {
          aMovementIn_01Doc.CreatedDate = DateTime.SpecifyKind(r.GetDateTime( 6 ), DateTimeKind.Local);
        }

        aMovementIn_01DocList.Add( aMovementIn_01Doc );
      }

      r.Close();


      return aMovementIn_01DocList;
    }
  }

  public class MovementOut_01Select
  {
    private Database db;

    public MovementOut_01Select(Database db)
    {
      this.db = db;

    }

    public MovementOut_01Doc Process( System.String MapiOutId )
    {
      ArrayList l = InternalProcess( MapiOutId );

      if ( l.Count == 1 )
        return (MovementOut_01Doc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String MapiOutId )
    {
      ArrayList aMovementOut_01DocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " MAPI_OUT_MOVM_OUT_01.OPERATIONALCODE" +
               ",MAPI_OUT_MOVM_OUT_01.MOVEMENTORDERIDENTITY" +
               ",MAPI_OUT_MOVM_OUT_01.MOVEMENTORDERTYPE" +
               ",MAPI_OUT_MOVM_OUT_01.PRODUCTNUMBER" +
               ",MAPI_OUT_MOVM_OUT_01.TOLOCATIONADDRESS" +
               ",MAPI_OUT_MOVM_OUT_01.MOVEMENTPRIORITY" +
               ",MAPI_OUT_MOVM_OUT_01.PRODUCTIONLOTIDENTITY" +
               ",MAPI_OUT_MOVM_OUT_01.ITEMLOADIDENTITY" +
        " from   MAPI_OUT_MOVM_OUT_01" +
        " where  MAPI_OUT_MOVM_OUT_01.MAPI_OUT_ID = '" + MapiOutId + "'" );

      while ( r.Read() )
      {
        MovementOut_01Doc aMovementOut_01Doc = new MovementOut_01Doc();

        aMovementOut_01Doc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aMovementOut_01Doc.OperationalCode = null;
        else
        {
          aMovementOut_01Doc.OperationalCode = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aMovementOut_01Doc.MovementOrderIdentity = null;
        else
        {
          aMovementOut_01Doc.MovementOrderIdentity = r.GetInt32( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aMovementOut_01Doc.MovementOrderType = null;
        else
        {
          aMovementOut_01Doc.MovementOrderType = r.GetString( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aMovementOut_01Doc.ProductNumber = null;
        else
        {
          aMovementOut_01Doc.ProductNumber = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aMovementOut_01Doc.ToLocationAddress = null;
        else
        {
          aMovementOut_01Doc.ToLocationAddress = r.GetString( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aMovementOut_01Doc.MovementPriority = null;
        else
        {
          aMovementOut_01Doc.MovementPriority = r.GetInt32( 5 );
        }

        if ( r.IsDBNull( 6 ) )
          aMovementOut_01Doc.ProductionLotIdentity = null;
        else
        {
          aMovementOut_01Doc.ProductionLotIdentity = r.GetString( 6 );
        }

        if ( r.IsDBNull( 7 ) )
          aMovementOut_01Doc.ItemLoadIdentity = null;
        else
        {
          aMovementOut_01Doc.ItemLoadIdentity = r.GetString( 7 );
        }

        aMovementOut_01DocList.Add( aMovementOut_01Doc );
      }

      r.Close();


      return aMovementOut_01DocList;
    }
  }

  public class Product_01Select
  {
    private Database db;

    public Product_01Select(Database db)
    {
      this.db = db;

    }

    public Product_01Doc Process( System.String MapiOutId )
    {
      ArrayList l = InternalProcess( MapiOutId );

      if ( l.Count == 1 )
        return (Product_01Doc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String MapiOutId )
    {
      ArrayList aProduct_01DocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " MAPI_OUT_PRODUCT_01.OPERATIONALCODE" +
               ",MAPI_OUT_PRODUCT_01.PRODUCTNUMBER" +
               ",MAPI_OUT_PRODUCT_01.BARCODE" +
               ",MAPI_OUT_PRODUCT_01.PRODUCTDESCRIPTION1" +
               ",MAPI_OUT_PRODUCT_01.HANDLINGUNITIDENTITY" +
               ",MAPI_OUT_PRODUCT_01.BESTBEFORDATEFLAG" +
               ",MAPI_OUT_PRODUCT_01.NUMBEROFBASEPACKAGES" +
               ",MAPI_OUT_PRODUCT_01.BATCHTYPE" +
        " from   MAPI_OUT_PRODUCT_01" +
        " where  MAPI_OUT_PRODUCT_01.MAPI_OUT_ID = '" + MapiOutId + "'" );

      while ( r.Read() )
      {
        Product_01Doc aProduct_01Doc = new Product_01Doc();

        aProduct_01Doc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aProduct_01Doc.OperationalCode = null;
        else
        {
          aProduct_01Doc.OperationalCode = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aProduct_01Doc.ProductNumber = null;
        else
        {
          aProduct_01Doc.ProductNumber = r.GetString( 1 );
        }

        if ( r.IsDBNull( 2 ) )
          aProduct_01Doc.BarCode = null;
        else
        {
          aProduct_01Doc.BarCode = r.GetString( 2 );
        }

        if ( r.IsDBNull( 3 ) )
          aProduct_01Doc.ProductDescription1 = null;
        else
        {
          aProduct_01Doc.ProductDescription1 = r.GetString( 3 );
        }

        if ( r.IsDBNull( 4 ) )
          aProduct_01Doc.HandlingUnitIdentity = null;
        else
        {
          aProduct_01Doc.HandlingUnitIdentity = r.GetString( 4 );
        }

        if ( r.IsDBNull( 5 ) )
          aProduct_01Doc.BestBeforDateFlag = null;
        else
        {
          aProduct_01Doc.BestBeforDateFlag = r.GetString( 5 );
        }

        if ( r.IsDBNull( 6 ) )
          aProduct_01Doc.NumberOfBasePackageS = null;
        else
        {
          aProduct_01Doc.NumberOfBasePackageS = Convert.ToDouble( r.GetDecimal( 6 ) );
        }

        if ( r.IsDBNull( 7 ) )
          aProduct_01Doc.BatchType = null;
        else
        {
          aProduct_01Doc.BatchType = r.GetString( 7 );
        }

        aProduct_01DocList.Add( aProduct_01Doc );
      }

      r.Close();


      return aProduct_01DocList;
    }
  }

  public class StatusUpdate_01Select
  {
    private Database db;

    public StatusUpdate_01Select(Database db)
    {
      this.db = db;

    }

    public StatusUpdate_01Doc Process( System.String MapiOutId )
    {
      ArrayList l = InternalProcess( MapiOutId );

      if ( l.Count == 1 )
        return (StatusUpdate_01Doc)l[0];
      else
        return null;
    }

    public ArrayList InternalProcess( System.String MapiOutId )
    {
      ArrayList aStatusUpdate_01DocList = new ArrayList();

      IDataReader r = db.ExecuteReader( 
        "select" +
               " MAPI_OUT_STAT_UPD_01.ITEMLOADIDENTITY" +
               ",MAPI_OUT_STAT_UPD_01.FIFODATE" +
               ",MAPI_OUT_STAT_UPD_01.HOLDCODE" +
        " from   MAPI_OUT_STAT_UPD_01" +
        " where  MAPI_OUT_STAT_UPD_01.MAPI_OUT_ID = '" + MapiOutId + "'" );

      while ( r.Read() )
      {
        StatusUpdate_01Doc aStatusUpdate_01Doc = new StatusUpdate_01Doc();

        aStatusUpdate_01Doc.OPCODE = "1";

        if ( r.IsDBNull( 0 ) )
          aStatusUpdate_01Doc.ItemLoadIdentity = null;
        else
        {
          aStatusUpdate_01Doc.ItemLoadIdentity = r.GetString( 0 );
        }

        if ( r.IsDBNull( 1 ) )
          aStatusUpdate_01Doc.FifoDate = null;
        else
        {
          aStatusUpdate_01Doc.FifoDate = DateTime.SpecifyKind(r.GetDateTime( 1 ), DateTimeKind.Local);
        }

        if ( r.IsDBNull( 2 ) )
          aStatusUpdate_01Doc.HoldCode = null;
        else
        {
          aStatusUpdate_01Doc.HoldCode = r.GetString( 2 );
        }

        aStatusUpdate_01DocList.Add( aStatusUpdate_01Doc );
      }

      r.Close();


      return aStatusUpdate_01DocList;
    }
  }

  public class GeneratedComparer
  {
  }
}
